"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/status/route";
exports.ids = ["app/api/auth/status/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("string_decoder");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fstatus%2Froute&page=%2Fapi%2Fauth%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fstatus%2Froute.ts&appDir=C%3A%5CInvoiveManagment%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CInvoiveManagment&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fstatus%2Froute&page=%2Fapi%2Fauth%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fstatus%2Froute.ts&appDir=C%3A%5CInvoiveManagment%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CInvoiveManagment&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_InvoiveManagment_src_app_api_auth_status_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/auth/status/route.ts */ \"(rsc)/./src/app/api/auth/status/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/status/route\",\n        pathname: \"/api/auth/status\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/status/route\"\n    },\n    resolvedPagePath: \"C:\\\\InvoiveManagment\\\\src\\\\app\\\\api\\\\auth\\\\status\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_InvoiveManagment_src_app_api_auth_status_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/auth/status/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhdXRoJTJGc3RhdHVzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhdXRoJTJGc3RhdHVzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYXV0aCUyRnN0YXR1cyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDSW52b2l2ZU1hbmFnbWVudCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q0ludm9pdmVNYW5hZ21lbnQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDVztBQUN4RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLz85ODFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXEludm9pdmVNYW5hZ21lbnRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYXV0aFxcXFxzdGF0dXNcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2F1dGgvc3RhdHVzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYXV0aC9zdGF0dXNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2F1dGgvc3RhdHVzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcSW52b2l2ZU1hbmFnbWVudFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxhdXRoXFxcXHN0YXR1c1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hdXRoL3N0YXR1cy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fstatus%2Froute&page=%2Fapi%2Fauth%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fstatus%2Froute.ts&appDir=C%3A%5CInvoiveManagment%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CInvoiveManagment&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/auth/status/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/auth/status/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var _lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/quickbooks/api */ \"(rsc)/./src/lib/quickbooks/api.ts\");\n\n\n\nasync function GET() {\n    console.error(\"⭐ Auth status check initiated\");\n    try {\n        console.log(\"Checking QuickBooks authentication status\");\n        // First check cookies directly to avoid unnecessary imports if tokens don't exist\n        const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n        const accessTokenCookie = cookieStore.get(_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_2__.TOKEN_KEY);\n        const realmIdCookie = cookieStore.get(_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_2__.REALM_ID_KEY);\n        console.error(\"⭐ Auth cookies check:\", {\n            hasAccessToken: !!accessTokenCookie,\n            hasRealmId: !!realmIdCookie\n        });\n        // If no cookies, we can return early\n        if (!accessTokenCookie || !realmIdCookie) {\n            console.error(\"⭐ Missing required auth cookies\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                authenticated: false,\n                message: \"QuickBooks authentication required - no auth tokens found\",\n                cookieCheck: {\n                    hasAccessToken: !!accessTokenCookie,\n                    hasRealmId: !!realmIdCookie\n                }\n            });\n        }\n        // Import checkClientInitialized from the API module\n        // We need to do this dynamically to avoid importing the function directly\n        // which would cause the error to be thrown immediately if not authenticated\n        console.error(\"⭐ Importing QuickBooks API modules\");\n        const { checkClientInitialized, qbo } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/quickbooks/api */ \"(rsc)/./src/lib/quickbooks/api.ts\"));\n        try {\n            // Try to check if the client is initialized\n            console.error(\"⭐ Checking if QuickBooks client is initialized\");\n            checkClientInitialized();\n            // Get basic client info for debugging\n            const qboInfo = qbo ? {\n                hasAccessToken: !!qbo.accessToken,\n                hasRealmId: !!qbo.realmId,\n                oauthVersion: qbo.oauthversion || \"unknown\"\n            } : null;\n            // If no error is thrown, the client is initialized\n            console.error(\"⭐ QuickBooks client is initialized:\", qboInfo);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                authenticated: true,\n                message: \"QuickBooks client is initialized and ready\",\n                clientInfo: qboInfo\n            });\n        } catch (error) {\n            // If an error is thrown, the client is not initialized\n            console.error(\"⭐ QuickBooks client initialization failed:\", error instanceof Error ? error.message : \"Unknown error\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                authenticated: false,\n                message: \"QuickBooks client is not initialized\",\n                error: error instanceof Error ? error.message : \"Unknown error\",\n                cookieCheck: {\n                    hasAccessToken: !!accessTokenCookie,\n                    hasRealmId: !!realmIdCookie\n                }\n            });\n        }\n    } catch (error) {\n        console.error(\"⭐ Error checking QuickBooks auth status:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            authenticated: false,\n            error: \"Error checking QuickBooks authentication status\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST() {\n    console.error(\"⭐ Manual QuickBooks initialization requested\");\n    try {\n        // Import the initialization function\n        const { manuallyInitializeQuickBooks } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/quickbooks/api */ \"(rsc)/./src/lib/quickbooks/api.ts\"));\n        // Call the function\n        console.error(\"⭐ Calling manuallyInitializeQuickBooks function\");\n        const result = manuallyInitializeQuickBooks();\n        console.error(\"⭐ Manual initialization result:\", result);\n        // Return the result\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: result,\n            message: result ? \"Manual initialization successful\" : \"Manual initialization failed\"\n        });\n    } catch (error) {\n        console.error(\"⭐ Error during manual initialization:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Error during manual initialization\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/auth/status/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/quickbooks/api.ts":
/*!***********************************!*\
  !*** ./src/lib/quickbooks/api.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   REALM_ID_KEY: () => (/* binding */ REALM_ID_KEY),\n/* harmony export */   REFRESH_TOKEN_KEY: () => (/* binding */ REFRESH_TOKEN_KEY),\n/* harmony export */   TOKEN_EXPIRY_KEY: () => (/* binding */ TOKEN_EXPIRY_KEY),\n/* harmony export */   TOKEN_KEY: () => (/* binding */ TOKEN_KEY),\n/* harmony export */   checkClientInitialized: () => (/* binding */ checkClientInitialized),\n/* harmony export */   fetchInvoices: () => (/* binding */ fetchInvoices),\n/* harmony export */   fetchInvoicesDirectly: () => (/* binding */ fetchInvoicesDirectly),\n/* harmony export */   fetchInvoicesMicroMethod: () => (/* binding */ fetchInvoicesMicroMethod),\n/* harmony export */   getAuthUrl: () => (/* binding */ getAuthUrl),\n/* harmony export */   getInvoiceById: () => (/* binding */ getInvoiceById),\n/* harmony export */   getRedirectUriForDisplay: () => (/* binding */ getRedirectUriForDisplay),\n/* harmony export */   handleCallback: () => (/* binding */ handleCallback),\n/* harmony export */   initializeQBO: () => (/* binding */ initializeQBO),\n/* harmony export */   isQuickBooksReady: () => (/* binding */ isQuickBooksReady),\n/* harmony export */   manuallyInitializeQuickBooks: () => (/* binding */ manuallyInitializeQuickBooks),\n/* harmony export */   qbo: () => (/* binding */ qbo),\n/* harmony export */   refreshQuickBooksToken: () => (/* binding */ refreshQuickBooksToken),\n/* harmony export */   tokenStore: () => (/* binding */ tokenStore),\n/* harmony export */   updateTokenStoreFromValues: () => (/* binding */ updateTokenStoreFromValues)\n/* harmony export */ });\n/* harmony import */ var intuit_oauth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! intuit-oauth */ \"(rsc)/./node_modules/intuit-oauth/src/OAuthClient.js\");\n/* harmony import */ var intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(intuit_oauth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var node_quickbooks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-quickbooks */ \"(rsc)/./node_modules/node-quickbooks/index.js\");\n/* harmony import */ var node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_quickbooks__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// First, let's verify QuickBooks constructor is available\nconsole.log(\"QuickBooks constructor check:\", {\n    constructorType: typeof (node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default()),\n    isFunction: typeof (node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default()) === \"function\"\n});\n// Token storage keys\nconst TOKEN_KEY = \"qb_token\";\nconst REALM_ID_KEY = \"qb_realm_id\";\nconst REFRESH_TOKEN_KEY = \"qb_refresh_token\";\nconst TOKEN_EXPIRY_KEY = \"qb_token_expiry\";\n// Debug flag\nconst DEBUG = true;\n// Helper function to log debug information\nconst debugLog = (...args)=>{\n    if (DEBUG) {\n        console.log(\"[QuickBooks API Debug]\", ...args);\n    }\n};\n// Ensure we have a properly formatted base URL with protocol\nconst getBaseUrl = ()=>{\n    const baseUrl = \"http://localhost:3000\" || 0;\n    // Make sure URL has a protocol\n    if (!baseUrl.startsWith(\"http://\") && !baseUrl.startsWith(\"https://\")) {\n        return `http://${baseUrl}`;\n    }\n    // Remove trailing slash if present\n    return baseUrl.replace(/\\/$/, \"\");\n};\nconst getRedirectUri = ()=>{\n    const baseUrl = getBaseUrl();\n    return `${baseUrl}/api/auth/callback`;\n};\n// Initialize OAuth client - use createOAuthClient function consistently\nlet oauthClient;\nlet qbo = null;\n\n// Server-side in-memory token store\n// NOTE: This will be reset on server restarts and between serverless function invocations\nlet tokenStore = {};\n// Keep track of initialization status\nlet isInitialized = false;\n// Store token both in memory and in localStorage (if available)\nconst storeToken = (accessToken, realmId, refreshToken, expiresIn)=>{\n    try {\n        debugLog(\"Storing token\");\n        // Store token in memory for server-side use\n        tokenStore.accessToken = accessToken;\n        tokenStore.realmId = realmId;\n        if (refreshToken) {\n            tokenStore.refreshToken = refreshToken;\n        }\n        if (expiresIn) {\n            const expiryTime = Date.now() + expiresIn * 1000;\n            tokenStore.tokenExpiry = expiryTime;\n        }\n        // Try to store in localStorage for persistence if we're in browser\n        if (false) {}\n        debugLog(\"Token stored successfully\");\n        return true;\n    } catch (error) {\n        console.error(\"Failed to store token:\", error);\n        return false;\n    }\n};\n// Retrieve token from memory or localStorage\nconst getStoredToken = ()=>{\n    try {\n        debugLog(\"Retrieving stored token\");\n        // First try memory store for server-side\n        if (tokenStore.accessToken && tokenStore.realmId) {\n            debugLog(\"Token found in memory\");\n            return {\n                accessToken: tokenStore.accessToken,\n                realmId: tokenStore.realmId,\n                refreshToken: tokenStore.refreshToken,\n                tokenExpiry: tokenStore.tokenExpiry\n            };\n        }\n        // If not in memory, try localStorage if we're in browser\n        if (false) {}\n        debugLog(\"No token found\");\n        return null;\n    } catch (error) {\n        console.error(\"Failed to get stored token:\", error);\n        return null;\n    }\n};\n// Clear all stored tokens\nconst clearTokens = ()=>{\n    debugLog(\"Clearing all tokens\");\n    // Clear memory store\n    tokenStore = {};\n    isInitialized = false;\n    qbo = null;\n    // Clear localStorage if in browser\n    if (false) {}\n};\nfunction initializeQBO(accessToken, realmId, refreshToken, expiresIn) {\n    try {\n        console.log(\"BASIC QuickBooks client initialization\", {\n            accessTokenPresent: !!accessToken,\n            realmIdPresent: !!realmId,\n            clientIdPresent: !!process.env.QUICKBOOKS_CLIENT_ID,\n            clientSecretPresent: !!process.env.QUICKBOOKS_CLIENT_SECRET\n        });\n        // Validate requirements\n        if (!accessToken || !realmId) {\n            console.error(\"ERROR: Missing token or realmId for QuickBooks initialization\");\n            return false;\n        }\n        const clientId = process.env.QUICKBOOKS_CLIENT_ID;\n        const clientSecret = process.env.QUICKBOOKS_CLIENT_SECRET;\n        if (!clientId || !clientSecret) {\n            console.error(\"ERROR: Missing QuickBooks credentials\");\n            return false;\n        }\n        // Store the token first\n        storeToken(accessToken, realmId, refreshToken, expiresIn);\n        // ULTRA SIMPLE CLIENT CREATION - FIRST ATTEMPT\n        try {\n            console.log(\"Creating minimal QuickBooks client - attempt 1\");\n            // Create the client with absolute minimal parameters\n            qbo = new (node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default())(clientId, clientSecret, accessToken, false, realmId);\n            if (!qbo) {\n                console.error(\"QuickBooks constructor returned null - attempt 1\");\n            // We'll try fallback approach below\n            } else {\n                // Set these explicitly to ensure they're available\n                qbo.accessToken = accessToken;\n                qbo.realmId = realmId;\n                console.log(\"QuickBooks client created with basic properties:\", {\n                    hasQbo: !!qbo,\n                    hasToken: !!(qbo && qbo.accessToken),\n                    hasRealmId: !!(qbo && qbo.realmId)\n                });\n                // Set initialization flag\n                isInitialized = true;\n                console.log(\"QuickBooks client initialized successfully - attempt 1\");\n                return true;\n            }\n        } catch (clientError) {\n            console.error(\"ERROR creating QuickBooks client instance - attempt 1:\", clientError);\n        // We'll try fallback approach below\n        }\n        // FALLBACK APPROACH - ATTEMPT 2\n        try {\n            console.log(\"Creating fallback QuickBooks client - attempt 2\");\n            // Try with different parameters - some versions need useSandbox parameter\n            qbo = new (node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default())(clientId, clientSecret, accessToken, true, realmId, {\n                useSandbox: true\n            });\n            if (!qbo) {\n                console.error(\"QuickBooks constructor returned null - attempt 2\");\n                return false;\n            }\n            // Set these explicitly to ensure they're available\n            qbo.accessToken = accessToken;\n            qbo.realmId = realmId;\n            console.log(\"QuickBooks client created with fallback approach\");\n            // Set initialization flag\n            isInitialized = true;\n            console.log(\"QuickBooks client initialized successfully - attempt 2\");\n            return true;\n        } catch (fallbackError) {\n            console.error(\"ERROR creating QuickBooks client with fallback approach:\", fallbackError);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"FATAL ERROR in QuickBooks initialization:\", error);\n        return false;\n    }\n}\n// Check if client is initialized or try to initialize from stored token\nconst checkClientInitialized = ()=>{\n    console.log(\"Checking if QuickBooks client is initialized\");\n    try {\n        // If already initialized in this session, verify the client is still valid\n        if (qbo && isInitialized) {\n            console.log(\"QuickBooks client appears to be initialized, validating...\");\n            // Verify the client has all required properties\n            if (!qbo.accessToken || !qbo.realmId) {\n                console.log(\"Client is missing required properties, will attempt to reinitialize\");\n                isInitialized = false;\n                qbo = null;\n            } else {\n                console.log(\"Client appears valid with required properties\");\n                return true;\n            }\n        } else {\n            console.log(\"QuickBooks client is not initialized, will attempt to initialize from stored token\");\n        }\n        // Try to retrieve token - IMPORTANT: Check both server-side tokenStore and cookies\n        console.log(\"Attempting to retrieve stored token\");\n        const storedToken = getServerSideToken();\n        if (!storedToken || !storedToken.accessToken || !storedToken.realmId) {\n            console.log(\"No valid stored token found\");\n            throw new Error(\"QuickBooks client not initialized. Please connect your QuickBooks account first.\");\n        }\n        console.log(\"Found stored token, initializing QuickBooks client with:\", {\n            hasAccessToken: !!storedToken.accessToken,\n            hasRealmId: !!storedToken.realmId,\n            hasRefreshToken: !!storedToken.refreshToken\n        });\n        // Initialize with current token\n        const initResult = initializeQBO(storedToken.accessToken, storedToken.realmId, storedToken.refreshToken, storedToken.tokenExpiry ? Math.floor((storedToken.tokenExpiry - Date.now()) / 1000) : undefined);\n        if (!initResult) {\n            console.error(\"Failed to initialize QuickBooks client with stored token\");\n            throw new Error(\"Failed to initialize QuickBooks client. Please reconnect your QuickBooks account.\");\n        }\n        console.log(\"Successfully initialized QuickBooks client from stored token\");\n        return true;\n    } catch (error) {\n        console.error(\"Error in checkClientInitialized:\", error);\n        throw error;\n    }\n};\n// Enhanced function to get token from server-side sources (tokenStore and cookies)\nfunction getServerSideToken() {\n    console.log(\"Getting server-side token\");\n    try {\n        // First check memory store\n        if (tokenStore.accessToken && tokenStore.realmId) {\n            console.log(\"Token found in server memory store\");\n            return {\n                accessToken: tokenStore.accessToken,\n                realmId: tokenStore.realmId,\n                refreshToken: tokenStore.refreshToken,\n                tokenExpiry: tokenStore.tokenExpiry\n            };\n        }\n        // Next, try localStorage if we're in a browser environment\n        if (false) {}\n        // No dynamic imports - this causes issues in Next.js\n        // The cookies will be passed by the invoices API route directly\n        console.log(\"No server-side token found in memory or localStorage, check cookies in the API route\");\n        return null;\n    } catch (error) {\n        console.error(\"Error getting server-side token:\", error);\n        return null;\n    }\n}\n// Function to check if QuickBooks is ready for client-side components\nconst isQuickBooksReady = ()=>{\n    if (false) {}\n    return false;\n};\n// Helper function to map QuickBooks invoice format to our app format\nfunction mapQuickBooksInvoice(qbInvoice) {\n    try {\n        // Extract customer info if available\n        const customerName = qbInvoice.CustomerRef?.name || \"Unknown Customer\";\n        // Extract line items\n        const lineItems = (qbInvoice.Line || []).map((line)=>{\n            return {\n                id: line.Id || \"\",\n                description: line.Description || \"\",\n                amount: line.Amount || 0,\n                quantity: line.Quantity || 1,\n                unitPrice: line.SalesItemLineDetail?.UnitPrice || 0\n            };\n        });\n        // Map to our invoice format\n        return {\n            id: qbInvoice.Id || \"\",\n            invoiceNumber: qbInvoice.DocNumber || \"\",\n            customerName: customerName,\n            date: qbInvoice.TxnDate || \"\",\n            dueDate: qbInvoice.DueDate || \"\",\n            amount: qbInvoice.TotalAmt || 0,\n            balance: qbInvoice.Balance || 0,\n            status: qbInvoice.status || \"Unknown\",\n            lineItems: lineItems,\n            currency: qbInvoice.CurrencyRef?.name || \"USD\"\n        };\n    } catch (error) {\n        console.error(\"Error mapping QuickBooks invoice:\", error);\n        // Return a minimal valid invoice to avoid errors\n        return {\n            id: qbInvoice.Id || \"\",\n            invoiceNumber: qbInvoice.DocNumber || \"\",\n            customerName: \"Error parsing invoice\",\n            date: qbInvoice.TxnDate || \"\",\n            dueDate: \"\",\n            amount: 0,\n            balance: 0,\n            status: \"Error\",\n            lineItems: [],\n            currency: \"USD\"\n        };\n    }\n}\n// Function to refresh QuickBooks token\nasync function refreshQuickBooksToken(refreshToken) {\n    try {\n        debugLog(\"Attempting to refresh token\");\n        // Create a fresh OAuth client for token refresh\n        const freshOAuthClient = createOAuthClient();\n        if (!freshOAuthClient) {\n            debugLog(\"Failed to create fresh OAuth client\");\n            return false;\n        }\n        debugLog(\"Created fresh OAuth client for token refresh\");\n        // Try to refresh token\n        const refreshResponse = await freshOAuthClient.refreshUsingToken(refreshToken);\n        if (!refreshResponse) {\n            debugLog(\"No response from token refresh\");\n            return false;\n        }\n        const refreshData = refreshResponse.getJson();\n        debugLog(\"Refresh response received\", {\n            hasAccessToken: !!refreshData.access_token,\n            hasRefreshToken: !!refreshData.refresh_token,\n            expiresIn: refreshData.expires_in\n        });\n        if (!refreshData.access_token) {\n            debugLog(\"No access token in refresh response\");\n            return false;\n        }\n        // Store the refreshed token\n        storeToken(refreshData.access_token, tokenStore.realmId || \"\", refreshData.refresh_token, refreshData.expires_in);\n        // Re-initialize QuickBooks client with new token\n        if (tokenStore.realmId) {\n            const initialized = initializeQBO(refreshData.access_token, tokenStore.realmId, refreshData.refresh_token, refreshData.expires_in ? Date.now() + refreshData.expires_in * 1000 : undefined);\n            debugLog(\"QuickBooks client re-initialized after token refresh:\", {\n                success: initialized\n            });\n            return initialized;\n        }\n        debugLog(\"No realmId available to re-initialize client\");\n        return false;\n    } catch (error) {\n        console.error(\"Error refreshing token:\", error);\n        debugLog(\"Token refresh failed with error\");\n        return false;\n    }\n}\nasync function fetchInvoices() {\n    console.error(\"⭐ fetchInvoices: Starting invoice fetch process\");\n    try {\n        debugLog(\"Starting fetchInvoices...\");\n        // First, verify we can get stored tokens - any source is fine (memory, localStorage, cookies)\n        const tokens = getStoredToken();\n        console.error(\"⭐ fetchInvoices: Token check result:\", {\n            hasToken: !!tokens?.accessToken,\n            hasRealmId: !!tokens?.realmId,\n            hasRefreshToken: !!tokens?.refreshToken,\n            tokenExpiry: tokens?.tokenExpiry ? new Date(tokens.tokenExpiry).toISOString() : \"none\"\n        });\n        if (!tokens || !tokens.accessToken || !tokens.realmId) {\n            console.error(\"⭐ fetchInvoices: No valid tokens found for QuickBooks API call\");\n            throw new Error(\"QuickBooks authentication required. Please connect your account.\");\n        }\n        // Check if token is expired and we need to refresh\n        const now = Date.now();\n        const tokenExpired = tokens.tokenExpiry && now >= tokens.tokenExpiry;\n        console.error(\"⭐ fetchInvoices: Token expiry check:\", {\n            now: new Date(now).toISOString(),\n            tokenExpiry: tokens.tokenExpiry ? new Date(tokens.tokenExpiry).toISOString() : \"unknown\",\n            isExpired: tokenExpired\n        });\n        // If token is expired and we have refresh token, try to refresh it\n        if (tokenExpired && tokens.refreshToken) {\n            console.error(\"⭐ fetchInvoices: Token expired, attempting to refresh\");\n            try {\n                const refreshed = await refreshQuickBooksToken(tokens.refreshToken);\n                console.error(\"⭐ fetchInvoices: Token refresh result:\", {\n                    success: !!refreshed\n                });\n                if (!refreshed) {\n                    console.error(\"⭐ fetchInvoices: Token refresh failed\");\n                    throw new Error(\"Failed to refresh QuickBooks authentication. Please reconnect your account.\");\n                }\n            } catch (refreshError) {\n                console.error(\"⭐ fetchInvoices: Error refreshing token:\", refreshError);\n                throw new Error(\"QuickBooks authentication expired. Please reconnect your account.\");\n            }\n        }\n        // Initialize the client if not already initialized\n        if (!qbo) {\n            console.error(\"⭐ fetchInvoices: QuickBooks client not initialized, attempting initialization\");\n            const initialized = initializeQBO(tokens.accessToken, tokens.realmId, tokens.refreshToken, tokens.tokenExpiry);\n            console.error(\"⭐ fetchInvoices: Initialization result:\", {\n                success: initialized\n            });\n            if (!initialized || !qbo) {\n                console.error(\"⭐ fetchInvoices: Client initialization failed\");\n                throw new Error(\"Failed to initialize QuickBooks client. Please reconnect your account.\");\n            }\n        } else {\n            console.error(\"⭐ fetchInvoices: Using existing QuickBooks client\");\n        }\n        // Double-check that qbo is properly initialized with essential properties\n        if (!qbo.accessToken) {\n            console.error(\"⭐ fetchInvoices: QB client missing accessToken, updating\");\n            qbo.accessToken = tokens.accessToken;\n        }\n        if (!qbo.realmId) {\n            console.error(\"⭐ fetchInvoices: QB client missing realmId, updating\");\n            qbo.realmId = tokens.realmId;\n        }\n        // Print out everything we can about the client state for debugging\n        console.error(\"⭐ fetchInvoices: QuickBooks client state:\", {\n            clientExists: !!qbo,\n            hasAccessToken: !!(qbo && qbo.accessToken),\n            hasRealmId: !!(qbo && qbo.realmId),\n            hasTokenSecret: !!(qbo && qbo.tokenSecret),\n            oauthversion: qbo ? qbo.oauthversion : \"none\",\n            hasRefreshToken: !!(qbo && qbo.refreshToken)\n        });\n        // At this point, qbo should be initialized\n        console.error(\"⭐ fetchInvoices: Performing QuickBooks API call for invoices\");\n        return new Promise((resolve, reject)=>{\n            if (!qbo) {\n                console.error(\"⭐ fetchInvoices: QB client not available at request time\");\n                return reject(new Error(\"QuickBooks client not initialized\"));\n            }\n            console.error(\"⭐ fetchInvoices: Making findInvoices API call\");\n            // Try-catch block around the API call\n            try {\n                // First try: Use a simpler approach with no filters\n                // Many QuickBooks API failures happen due to complex queries\n                console.error(\"⭐ fetchInvoices: Trying simple query with no filters\");\n                qbo.findInvoices(\"\", (err, data)=>{\n                    if (err) {\n                        console.error(\"⭐ fetchInvoices: Error in simple findInvoices call:\", err);\n                        console.error(\"⭐ Error details:\", JSON.stringify(err, null, 2));\n                        // If the simple approach fails, try a backup approach\n                        console.error(\"⭐ fetchInvoices: Trying alternative query approach\");\n                        try {\n                            // Try with the older query approach\n                            qbo.findInvoices([\n                                {\n                                    field: \"MetaData.LastUpdatedTime\",\n                                    value: \"2010-01-01T00:00:00\",\n                                    operator: \">\"\n                                }\n                            ], (err2, data2)=>{\n                                if (err2) {\n                                    console.error(\"⭐ fetchInvoices: Both query approaches failed:\", err2);\n                                    console.error(\"⭐ Error details:\", JSON.stringify(err2, null, 2));\n                                    return reject(err2);\n                                }\n                                processInvoiceResult(data2, resolve, reject);\n                            });\n                        } catch (backupError) {\n                            console.error(\"⭐ fetchInvoices: Exception in backup approach:\", backupError);\n                            return reject(backupError);\n                        }\n                    } else {\n                        processInvoiceResult(data, resolve, reject);\n                    }\n                });\n            } catch (apiCallError) {\n                console.error(\"⭐ fetchInvoices: Exception during API call execution:\", apiCallError);\n                return reject(new Error(`QuickBooks API call failed: ${apiCallError instanceof Error ? apiCallError.message : \"Unknown error\"}`));\n            }\n        });\n    } catch (error) {\n        console.error(\"⭐ fetchInvoices: Error in fetchInvoices:\", error);\n        throw error;\n    }\n}\n// Helper function to process invoice results\nfunction processInvoiceResult(data, resolve, reject) {\n    // Check if data has QueryResponse property with Invoice array\n    if (data && data.QueryResponse && Array.isArray(data.QueryResponse.Invoice)) {\n        const invoices = data.QueryResponse.Invoice;\n        console.error(`⭐ fetchInvoices: Successfully found ${invoices.length} invoices`);\n        // If no invoices were found, return empty array rather than error\n        if (invoices.length === 0) {\n            console.error(\"⭐ fetchInvoices: No invoices found in QuickBooks account\");\n            return resolve([]);\n        }\n        return resolve(invoices);\n    } else {\n        console.error(\"⭐ fetchInvoices: Invalid data structure received from QB API:\", typeof data, data ? Object.keys(data) : \"null\");\n        console.error(\"⭐ fetchInvoices: Data dump:\", JSON.stringify(data, null, 2));\n        return reject(new Error(\"Invalid response from QuickBooks API\"));\n    }\n}\nconst getInvoiceById = async (id)=>{\n    try {\n        debugLog(`Fetching invoice by ID: ${id}`);\n        checkClientInitialized();\n        if (!qbo) {\n            debugLog(\"QBO client is null after initialization check\");\n            throw new Error(\"QuickBooks client is not available. Please reconnect your QuickBooks account.\");\n        }\n        const cleanId = id.replace(/^(?:inv-)?#?\\s*/i, \"\").trim();\n        return new Promise((resolve, reject)=>{\n            debugLog(`Calling QuickBooks getInvoice API for ID: ${cleanId}`);\n            qbo.getInvoice(cleanId, (err, invoice)=>{\n                if (err) {\n                    console.error(\"Error fetching invoice from QuickBooks API:\", err);\n                    if (err.code === \"80040408\") {\n                        debugLog(\"QuickBooks initialization error (80040408). Clearing tokens.\");\n                        clearTokens();\n                        reject(new Error(\"QuickBooks connection error. Please reconnect your QuickBooks account.\"));\n                    } else if (err.code === \"270\" || err.message?.includes(\"Token invalid\")) {\n                        debugLog(\"Invalid token error. Clearing tokens.\");\n                        clearTokens();\n                        reject(new Error(\"QuickBooks authentication has expired. Please reconnect your QuickBooks account.\"));\n                    } else if (err.statusCode === 404) {\n                        reject(new Error(`Invoice #${id} not found. Please check the invoice number and try again.`));\n                    } else {\n                        reject(new Error(\"Failed to fetch invoice from QuickBooks. Please check your connection.\"));\n                    }\n                } else {\n                    debugLog(\"Successfully fetched invoice from QuickBooks\");\n                    resolve(mapQuickBooksInvoice(invoice));\n                }\n            });\n        });\n    } catch (error) {\n        console.error(\"Error in getInvoiceById:\", error);\n        throw error;\n    }\n};\n// Initialize the OAuth client\ninitializeOAuthClient();\n// Update the getAuthUrl function to use the new createOAuthClient function\nconst getAuthUrl = ()=>{\n    try {\n        // Log environment variables for debugging (redacting sensitive info)\n        console.log(\"Environment check:\", {\n            hasClientId: !!process.env.QUICKBOOKS_CLIENT_ID,\n            hasClientSecret: !!process.env.QUICKBOOKS_CLIENT_SECRET,\n            redirectUri: getRedirectUri(),\n            baseUrl: \"http://localhost:3000\"\n        });\n        // Create a fresh OAuth client for this request\n        const freshOAuthClient = createOAuthClient();\n        // Generate and log the auth URL\n        const authUrl = freshOAuthClient.authorizeUri({\n            scope: [\n                (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default().scopes).Accounting,\n                (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default().scopes).OpenId,\n                (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default().scopes).Profile,\n                (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default().scopes).Email\n            ],\n            state: \"teststate\"\n        });\n        console.log(\"Generated auth URL:\", authUrl);\n        return authUrl;\n    } catch (error) {\n        console.error(\"Error in getAuthUrl:\", error);\n        throw error;\n    }\n};\nconst getRedirectUriForDisplay = ()=>{\n    return getRedirectUri();\n};\n// Create a function to get a fresh OAuth client\nfunction getOAuthClient() {\n    // Ensure the OAuth client is initialized\n    if (!oauthClient) {\n        console.log(\"OAuth client not initialized, initializing now\");\n        if (!initializeOAuthClient()) {\n            throw new Error(\"Failed to initialize OAuth client\");\n        }\n    }\n    // Return the initialized client\n    return oauthClient;\n}\nasync function handleCallback(url) {\n    try {\n        // Clear any existing tokens and client\n        clearTokens();\n        qbo = null;\n        isInitialized = false;\n        // Always create a fresh OAuth client for token exchange\n        // This ensures the tokenSecret is properly set for this specific request\n        const freshOAuthClient = createOAuthClient();\n        // Parse the URL to get the realmId from query parameters\n        const urlParams = new URL(url).searchParams;\n        const realmIdFromUrl = urlParams.get(\"realmId\");\n        const code = urlParams.get(\"code\");\n        if (!code) {\n            throw new Error(\"No authorization code received from QuickBooks\");\n        }\n        console.log(\"Creating token with fresh OAuth client\", {\n            code: code,\n            hasRealmId: !!realmIdFromUrl,\n            redirectUri: getRedirectUri(),\n            hasClientId: !!process.env.QUICKBOOKS_CLIENT_ID,\n            hasClientSecret: !!process.env.QUICKBOOKS_CLIENT_SECRET\n        });\n        // Create token with the fresh client\n        if (!process.env.QUICKBOOKS_CLIENT_SECRET) {\n            throw new Error(\"QuickBooks client secret is not configured\");\n        }\n        // Configure token creation options with the tokenSecret explicitly\n        const tokenConfig = {\n            code: code,\n            realmId: realmIdFromUrl,\n            redirectUri: getRedirectUri(),\n            tokenSecret: process.env.QUICKBOOKS_CLIENT_SECRET // Pass tokenSecret explicitly here\n        };\n        console.log(\"Creating token with config:\", {\n            hasCode: !!tokenConfig.code,\n            hasRealmId: !!tokenConfig.realmId,\n            hasRedirectUri: !!tokenConfig.redirectUri,\n            hasTokenSecret: !!tokenConfig.tokenSecret\n        });\n        // Create token with explicit params\n        const authResponse = await freshOAuthClient.createToken(url, tokenConfig);\n        const tokenData = authResponse.getJson();\n        if (!tokenData.access_token) {\n            throw new Error(\"No access token received from QuickBooks\");\n        }\n        // Use realmId from token data if available, otherwise use from URL\n        const realmId = tokenData.realmId || realmIdFromUrl;\n        if (!realmId) {\n            throw new Error(\"No realmId found in response or URL parameters\");\n        }\n        // Store token first\n        const storeResult = storeToken(tokenData.access_token, realmId, tokenData.refresh_token, tokenData.expires_in);\n        if (!storeResult) {\n            throw new Error(\"Failed to store QuickBooks token\");\n        }\n        // Get client ID and secret\n        const clientId = process.env.QUICKBOOKS_CLIENT_ID;\n        const clientSecret = process.env.QUICKBOOKS_CLIENT_SECRET;\n        if (!clientId || !clientSecret) {\n            throw new Error(\"QuickBooks client credentials are not configured\");\n        }\n        // Create the client directly with needed parameters\n        qbo = new (node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default())(clientId, clientSecret, tokenData.access_token, false, realmId, {\n            minorversion: \"65\",\n            debug: true,\n            useSandbox: true,\n            oauthversion: \"2.0\",\n            requestTimeout: 30000\n        });\n        // Explicitly set required properties if they're not set by constructor\n        if (qbo) {\n            // Make sure accessToken is set\n            if (!qbo.accessToken && tokenData.access_token) {\n                qbo.accessToken = tokenData.access_token;\n            }\n            // Make sure realmId is set\n            if (!qbo.realmId && realmId) {\n                qbo.realmId = realmId;\n            }\n        }\n        // Verify client was created and has required properties\n        if (!qbo || !qbo.accessToken || !qbo.realmId) {\n            qbo = null;\n            isInitialized = false;\n            throw new Error(\"QuickBooks client initialization failed - missing required properties\");\n        }\n        // Set initialization status\n        isInitialized = true;\n        console.log(\"QuickBooks client initialized successfully\");\n        return {\n            access_token: tokenData.access_token,\n            realmId: realmId,\n            refresh_token: tokenData.refresh_token,\n            expires_in: tokenData.expires_in\n        };\n    } catch (error) {\n        console.error(\"Error in handleCallback:\", error);\n        // Clear any partial state\n        clearTokens();\n        qbo = null;\n        isInitialized = false;\n        throw error;\n    }\n}\n// Add this function to the api.ts file to directly set tokens\nconst manuallyInitializeQuickBooks = ()=>{\n    try {\n        console.log(\"Manually initializing QuickBooks client\");\n        // Create and store a long-lasting token (30 days)\n        const accessToken = \"MANUAL_TOKEN_\" + Date.now();\n        const realmId = \"MANUAL_REALM_\" + Date.now();\n        const expiresIn = 30 * 24 * 60 * 60; // 30 days in seconds\n        // Call the existing initializeQBO function\n        const result = initializeQBO(accessToken, realmId, accessToken, expiresIn);\n        console.log(\"Manual QuickBooks initialization result:\", result);\n        return result;\n    } catch (error) {\n        console.error(\"Failed to manually initialize QuickBooks:\", error);\n        return false;\n    }\n};\n// Add this function to create a properly configured OAuth client\nfunction createOAuthClient() {\n    try {\n        const clientId = process.env.QUICKBOOKS_CLIENT_ID;\n        const clientSecret = process.env.QUICKBOOKS_CLIENT_SECRET;\n        if (!clientId || !clientSecret) {\n            throw new Error(\"QuickBooks client credentials are not configured\");\n        }\n        // SIMPLIFIED: Create OAuth client with minimal configuration\n        return new (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default())({\n            clientId,\n            clientSecret,\n            environment: \"sandbox\",\n            redirectUri: getRedirectUri(),\n            tokenSecret: clientSecret // Essential for OAuth flow\n        });\n    } catch (error) {\n        console.error(\"Error creating OAuth client:\", error);\n        throw error;\n    }\n}\n// Initialize the client after the function is defined\nfunction initializeOAuthClient() {\n    try {\n        if (!oauthClient) {\n            console.log(\"Initializing OAuth client\");\n            oauthClient = createOAuthClient();\n            console.log(\"OAuth client initialized successfully\");\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Error initializing OAuth client:\", error);\n        return false;\n    }\n}\n// Add this function to update token store directly from values\nfunction updateTokenStoreFromValues(accessToken, realmId, refreshToken, tokenExpiry) {\n    try {\n        debugLog(\"Directly updating token store with provided values\");\n        // Update the token store directly\n        tokenStore.accessToken = accessToken;\n        tokenStore.realmId = realmId;\n        if (refreshToken) {\n            tokenStore.refreshToken = refreshToken;\n        }\n        if (tokenExpiry) {\n            tokenStore.tokenExpiry = tokenExpiry;\n        }\n        debugLog(\"Token store updated with values:\", {\n            hasToken: !!tokenStore.accessToken,\n            hasRealmId: !!tokenStore.realmId,\n            hasRefreshToken: !!tokenStore.refreshToken,\n            tokenExpiry: tokenStore.tokenExpiry ? new Date(tokenStore.tokenExpiry).toISOString() : \"none\"\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Error updating token store from values:\", error);\n        return false;\n    }\n}\n// Alternative method to fetch invoices with a more direct approach\nasync function fetchInvoicesDirectly() {\n    console.error(\"⭐ Starting direct invoice fetch with alternative method\");\n    try {\n        // First, verify we can get stored tokens\n        const tokens = getStoredToken();\n        if (!tokens || !tokens.accessToken || !tokens.realmId) {\n            console.error(\"⭐ No valid tokens for direct invoice fetch\");\n            throw new Error(\"QuickBooks authentication required. Please connect your account.\");\n        }\n        // We'll set up a fresh OAuthClient instance specifically for this request\n        const oauthClientForRequest = new (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default())({\n            clientId: process.env.QUICKBOOKS_CLIENT_ID,\n            clientSecret: process.env.QUICKBOOKS_CLIENT_SECRET,\n            environment: \"sandbox\",\n            redirectUri: getRedirectUri(),\n            logging: true\n        });\n        // Set the tokens on the client\n        oauthClientForRequest.setToken({\n            realmId: tokens.realmId,\n            token_type: \"bearer\",\n            access_token: tokens.accessToken,\n            refresh_token: tokens.refreshToken || \"\",\n            expires_in: tokens.tokenExpiry ? Math.floor((tokens.tokenExpiry - Date.now()) / 1000) : 3600\n        });\n        console.error(\"⭐ Attempting direct invoice API call\");\n        // Make a direct API call (not using node-quickbooks)\n        return new Promise((resolve, reject)=>{\n            try {\n                const url = `https://sandbox-quickbooks.api.intuit.com/v3/company/${tokens.realmId}/query`;\n                const headers = {\n                    \"Authorization\": `Bearer ${tokens.accessToken}`,\n                    \"Accept\": \"application/json\",\n                    \"Content-Type\": \"application/text\"\n                };\n                // Use a simpler query to minimize possible format issues\n                const query = \"SELECT * FROM Invoice\";\n                // Make the API call\n                oauthClientForRequest.makeApiCall({\n                    url: url,\n                    method: \"POST\",\n                    headers: headers,\n                    body: query\n                }, (err, response)=>{\n                    if (err) {\n                        console.error(\"⭐ Direct API call error:\", err);\n                        return reject(err);\n                    }\n                    try {\n                        // Log the entire response for debugging\n                        console.error(\"⭐ Direct API call response:\", response);\n                        if (typeof response === \"string\") {\n                            response = JSON.parse(response);\n                        }\n                        // Extract invoices data\n                        if (response && response.QueryResponse && Array.isArray(response.QueryResponse.Invoice)) {\n                            console.error(`⭐ Successfully found ${response.QueryResponse.Invoice.length} invoices directly`);\n                            return resolve(response.QueryResponse.Invoice);\n                        } else {\n                            // If the response doesn't match expected format, try to extract useful data\n                            console.error(\"⭐ Unexpected response format:\", response);\n                            // If there's any data that can be used, return it\n                            if (response && typeof response === \"object\") {\n                                if (Array.isArray(response)) {\n                                    return resolve(response);\n                                } else if (response.QueryResponse) {\n                                    return resolve([\n                                        response.QueryResponse\n                                    ]);\n                                }\n                            }\n                            return reject(new Error(\"Invalid response format from QuickBooks API\"));\n                        }\n                    } catch (parseError) {\n                        console.error(\"⭐ Error parsing direct API response:\", parseError);\n                        return reject(parseError);\n                    }\n                });\n            } catch (apiError) {\n                console.error(\"⭐ Error making direct API call:\", apiError);\n                return reject(apiError);\n            }\n        });\n    } catch (error) {\n        console.error(\"⭐ Top-level error in direct invoice fetch:\", error);\n        throw error;\n    }\n}\n// Ultra minimal API call for QuickBooks invoices (third approach)\nasync function fetchInvoicesMicroMethod() {\n    console.error(\"⭐ Starting MICRO invoice fetch with bare minimum approach\");\n    try {\n        // Get tokens directly from memory store first for speed\n        const tokens = tokenStore.accessToken && tokenStore.realmId ? {\n            accessToken: tokenStore.accessToken,\n            realmId: tokenStore.realmId\n        } : getStoredToken();\n        if (!tokens || !tokens.accessToken || !tokens.realmId) {\n            console.error(\"⭐ No valid tokens for micro invoice fetch\");\n            throw new Error(\"Authentication required\");\n        }\n        console.error(\"⭐ Micro method: Using minimal axios-like fetch with bare API call\");\n        // Create a promise with a short timeout\n        return new Promise((resolve, reject)=>{\n            // Create a timeout that's much shorter (15 seconds)\n            const timeoutId = setTimeout(()=>{\n                console.error(\"⭐ Micro method: Request timed out after 15 seconds\");\n                reject(new Error(\"Micro method request timed out after 15 seconds\"));\n            }, 15000);\n            try {\n                // Using the fetch API directly instead of the OAuthClient or node-quickbooks\n                const url = `https://sandbox-quickbooks.api.intuit.com/v3/company/${tokens.realmId}/query?query=select%20%2A%20from%20Invoice%20MAXRESULTS%205`;\n                console.error(\"⭐ Micro method: Calling API directly at URL:\", url);\n                fetch(url, {\n                    method: \"GET\",\n                    headers: {\n                        \"Authorization\": `Bearer ${tokens.accessToken}`,\n                        \"Accept\": \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                    }\n                }).then((response)=>{\n                    console.error(\"⭐ Micro method: Received response with status:\", response.status);\n                    if (!response.ok) {\n                        throw new Error(`API responded with status: ${response.status}`);\n                    }\n                    return response.json();\n                }).then((data)=>{\n                    console.error(\"⭐ Micro method: Successfully parsed response JSON\");\n                    clearTimeout(timeoutId);\n                    // Extract invoice data from response\n                    if (data && data.QueryResponse && Array.isArray(data.QueryResponse.Invoice)) {\n                        console.error(`⭐ Micro method: Found ${data.QueryResponse.Invoice.length} invoices`);\n                        resolve(data.QueryResponse.Invoice);\n                    } else {\n                        console.error(\"⭐ Micro method: Response does not contain invoice array:\", data);\n                        // If we at least got data but not in the expected format, return an empty array\n                        // rather than failing - this helps the UI handle the case better\n                        resolve([]);\n                    }\n                }).catch((error)=>{\n                    console.error(\"⭐ Micro method: Fetch error:\", error);\n                    clearTimeout(timeoutId);\n                    reject(error);\n                });\n            } catch (error) {\n                console.error(\"⭐ Micro method: Exception during fetch setup:\", error);\n                clearTimeout(timeoutId);\n                reject(error);\n            }\n        });\n    } catch (error) {\n        console.error(\"⭐ Micro method: Top-level error:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/quickbooks/api.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/ajv","vendor-chunks/psl","vendor-chunks/sshpk","vendor-chunks/bluebird","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/readable-stream","vendor-chunks/node-quickbooks","vendor-chunks/request","vendor-chunks/winston","vendor-chunks/underscore","vendor-chunks/tweetnacl","vendor-chunks/fast-xml-parser","vendor-chunks/semver","vendor-chunks/uri-js","vendor-chunks/tough-cookie","vendor-chunks/jsbn","vendor-chunks/color","vendor-chunks/bcrypt-pbkdf","vendor-chunks/async","vendor-chunks/http-signature","vendor-chunks/intuit-oauth","vendor-chunks/logform","vendor-chunks/jsonwebtoken","vendor-chunks/safe-stable-stringify","vendor-chunks/@colors","vendor-chunks/ecc-jsbn","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/lodash.includes","vendor-chunks/qs","vendor-chunks/jsprim","vendor-chunks/get-intrinsic","vendor-chunks/form-data","vendor-chunks/aws4","vendor-chunks/asn1","vendor-chunks/fecha","vendor-chunks/json-schema","vendor-chunks/query-string","vendor-chunks/verror","vendor-chunks/winston-transport","vendor-chunks/uuid","vendor-chunks/string_decoder","vendor-chunks/color-name","vendor-chunks/asynckit","vendor-chunks/date-fns","vendor-chunks/jws","vendor-chunks/har-schema","vendor-chunks/@dabh","vendor-chunks/tunnel-agent","vendor-chunks/lodash.once","vendor-chunks/jwa","vendor-chunks/color-string","vendor-chunks/lodash.isinteger","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/assert-plus","vendor-chunks/combined-stream","vendor-chunks/extsprintf","vendor-chunks/forever-agent","vendor-chunks/aws-sign2","vendor-chunks/oauth-sign","vendor-chunks/strnum","vendor-chunks/extend","vendor-chunks/mime-types","vendor-chunks/lodash.isplainobject","vendor-chunks/stack-trace","vendor-chunks/proxy-from-env","vendor-chunks/triple-beam","vendor-chunks/ms","vendor-chunks/request-debug","vendor-chunks/csrf","vendor-chunks/supports-color","vendor-chunks/core-util-is","vendor-chunks/has-symbols","vendor-chunks/kuler","vendor-chunks/decode-uri-component","vendor-chunks/json-schema-traverse","vendor-chunks/delayed-stream","vendor-chunks/har-validator","vendor-chunks/lodash.isstring","vendor-chunks/safer-buffer","vendor-chunks/random-bytes","vendor-chunks/function-bind","vendor-chunks/lodash.isnumber","vendor-chunks/uid-safe","vendor-chunks/caseless","vendor-chunks/fast-json-stable-stringify","vendor-chunks/lodash.isboolean","vendor-chunks/safe-buffer","vendor-chunks/rsa-pem-from-mod-exp","vendor-chunks/es-set-tostringtag","vendor-chunks/fast-deep-equal","vendor-chunks/performance-now","vendor-chunks/tsscmp","vendor-chunks/call-bind-apply-helpers","vendor-chunks/get-proto","vendor-chunks/buffer-equal-constant-time","vendor-chunks/one-time","vendor-chunks/fn.name","vendor-chunks/dunder-proto","vendor-chunks/json-stringify-safe","vendor-chunks/is-typedarray","vendor-chunks/rndm","vendor-chunks/enabled","vendor-chunks/math-intrinsics","vendor-chunks/@babel","vendor-chunks/colorspace","vendor-chunks/is-stream","vendor-chunks/simple-swizzle","vendor-chunks/isstream","vendor-chunks/split-on-first","vendor-chunks/es-errors","vendor-chunks/text-hex","vendor-chunks/filter-obj","vendor-chunks/has-flag","vendor-chunks/is-arrayish","vendor-chunks/es-define-property","vendor-chunks/gopd","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/strict-uri-encode","vendor-chunks/util-deprecate","vendor-chunks/atob","vendor-chunks/stringify-clone","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fstatus%2Froute&page=%2Fapi%2Fauth%2Fstatus%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fstatus%2Froute.ts&appDir=C%3A%5CInvoiveManagment%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CInvoiveManagment&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();