"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/groq/route";
exports.ids = ["app/api/chat/groq/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("string_decoder");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Fgroq%2Froute&page=%2Fapi%2Fchat%2Fgroq%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Fgroq%2Froute.ts&appDir=C%3A%5CInvoiveManagment%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CInvoiveManagment&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Fgroq%2Froute&page=%2Fapi%2Fchat%2Fgroq%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Fgroq%2Froute.ts&appDir=C%3A%5CInvoiveManagment%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CInvoiveManagment&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_InvoiveManagment_src_app_api_chat_groq_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/chat/groq/route.ts */ \"(rsc)/./src/app/api/chat/groq/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/groq/route\",\n        pathname: \"/api/chat/groq\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/groq/route\"\n    },\n    resolvedPagePath: \"C:\\\\InvoiveManagment\\\\src\\\\app\\\\api\\\\chat\\\\groq\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_InvoiveManagment_src_app_api_chat_groq_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/chat/groq/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGZ3JvcSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2hhdCUyRmdyb3ElMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZjaGF0JTJGZ3JvcSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDSW52b2l2ZU1hbmFnbWVudCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q0ludm9pdmVNYW5hZ21lbnQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDUztBQUN0RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLz8zZjJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXEludm9pdmVNYW5hZ21lbnRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcY2hhdFxcXFxncm9xXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jaGF0L2dyb3Evcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0L2dyb3FcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2NoYXQvZ3JvcS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXEludm9pdmVNYW5hZ21lbnRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcY2hhdFxcXFxncm9xXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2NoYXQvZ3JvcS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Fgroq%2Froute&page=%2Fapi%2Fchat%2Fgroq%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Fgroq%2Froute.ts&appDir=C%3A%5CInvoiveManagment%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CInvoiveManagment&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/chat/groq/route.ts":
/*!****************************************!*\
  !*** ./src/app/api/chat/groq/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ai */ \"(rsc)/./node_modules/ai/dist/index.mjs\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/quickbooks/api */ \"(rsc)/./src/lib/quickbooks/api.ts\");\n\n\n\n// Enable debug logging\nconst DEBUG = true;\nconst log = (...args)=>{\n    if (DEBUG) {\n        console.error(\"[GROQ API]\", ...args);\n    }\n};\n// Initialize OpenAI client as a fallback mechanism\nconst groqClient = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.GROQ_API_KEY || \"\",\n    baseURL: \"https://api.groq.com/openai/v1\",\n    timeout: 90000\n});\n// Function to create a raw fetch request to Groq for more control\nasync function fetchGroqCompletion(messages) {\n    const apiKey = process.env.GROQ_API_KEY;\n    if (!apiKey) throw new Error(\"Missing GROQ_API_KEY\");\n    // Pre-process all user messages to check for invoice queries\n    let invoiceDataAdded1 = false;\n    const modifiedMessages = [\n        ...messages\n    ];\n    // First, check if the last message contains an invoice reference\n    if (modifiedMessages.length > 0 && modifiedMessages[modifiedMessages.length - 1].role === \"user\") {\n        const lastUserMessage = modifiedMessages[modifiedMessages.length - 1].content;\n        // Check for invoice number patterns\n        const invoiceNumberMatch = lastUserMessage.match(/\\b(?:invoice|inv)[\\s\\-_#]*(\\d+)\\b/i);\n        if (invoiceNumberMatch && invoiceNumberMatch[1]) {\n            const invoiceNumber = invoiceNumberMatch[1];\n            log(`User asked about invoice ${invoiceNumber}, fetching details using consistent source...`);\n            try {\n                // Use the unified chat/tool API to get consistent data\n                const response = await fetch(`${\"http://localhost:3000\" || 0}/api/chat/tool`, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        tool: \"summarizeInvoice\",\n                        params: {\n                            id: invoiceNumber\n                        }\n                    })\n                });\n                if (!response.ok) {\n                    log(`Error fetching invoice with unified API: ${response.statusText}`);\n                    return;\n                }\n                const result = await response.json();\n                // Check if we got a valid result with summary details\n                if (result && result.summary && result.details) {\n                    // Use the consistent formatted data for the AI\n                    const formattedInvoiceData = {\n                        invoiceNumber: invoiceNumber,\n                        customerName: result.details.customer,\n                        amount: result.details.amount,\n                        date: result.details.date,\n                        dueDate: result.details.dueDate,\n                        status: result.details.balance === \"$0.00\" ? \"Paid\" : \"Unpaid\",\n                        balance: result.details.balance\n                    };\n                    // Add detailed invoice information first in the conversation\n                    modifiedMessages.unshift({\n                        role: \"system\",\n                        content: `IMPORTANT: The user is asking about invoice #${invoiceNumber}. Here's the exact information to use:\n\nInvoice #${formattedInvoiceData.invoiceNumber}\nCustomer: ${formattedInvoiceData.customerName}\nAmount: ${formattedInvoiceData.amount}\nDate: ${formattedInvoiceData.date}\nDue Date: ${formattedInvoiceData.dueDate}\nStatus: ${formattedInvoiceData.status}\n${formattedInvoiceData.status !== \"Paid\" ? `Balance Due: ${formattedInvoiceData.balance}` : \"\"}\n\nDO NOT add any extra formatting. DO NOT use markdown. DO NOT add line breaks within fields. Present this information exactly as shown above, keeping this exact format and spacing. Make sure each field is on its own line. This is critical for proper display.`\n                    });\n                    invoiceDataAdded1 = true;\n                    log(\"Successfully added formatted invoice data to the context using unified source\");\n                } else {\n                    log(\"Invalid or incomplete data from unified API\", result);\n                }\n            } catch (error) {\n                log(`Failed to fetch invoice ${invoiceNumber} from unified source:`, error);\n            }\n        }\n    }\n    // Then add a more specific system prompt if we added invoice data\n    const systemPrompt = invoiceDataAdded1 ? `You are an AI assistant for QuickBooks invoice management. When presenting invoice information:\n\n1. CRITICAL: Present the invoice information EXACTLY as provided to you, keeping the same format, spacing, and line breaks. Do not rearrange or reformat the information.\n\n2. Do not use any special formatting, markdown, or symbols like asterisks (*).\n\n3. Each field must be on its own line with proper spacing.\n\n4. Respond in plain text only.\n\n5. If the user asks any follow-up questions about the invoice, use the exact data provided to you.\n\n6. DO NOT provide any additional information or interpret the invoice data - use ONLY the exact values provided to you.` : `You are an AI assistant focused on invoice management and QuickBooks data analysis. Follow these instructions exactly:\n\n1. When showing invoice information, use ONLY this exact format with each field on its own line:\n   Invoice #[Number]\n   [Status]\n   \n   Customer\n   [Name]\n   \n   Amount\n   $[Amount]\n   \n   Balance Due\n   $[Balance]\n   \n   Date\n   [Date]\n   \n   Due Date\n   [Due Date]\n   \n   Memo\n   [Memo Text]\n\n2. Do not deviate from this exact format for invoice displays.\n\n3. For ALL responses:\n   - Use plain text only\n   - No markdown or special formatting\n   - No asterisks (*) or other symbols\n   - No extra line breaks within fields\n   - Keep proper spacing between fields\n\n4. Format all currency values with dollar signs and two decimal places: $1,234.56`;\n    const body = JSON.stringify({\n        model: \"llama3-70b-8192\",\n        messages: [\n            {\n                role: \"system\",\n                content: systemPrompt\n            },\n            ...modifiedMessages\n        ],\n        temperature: 0.3,\n        max_tokens: 800,\n        stream: true\n    });\n    log(\"Making request to Groq\");\n    return fetch(\"https://api.groq.com/openai/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${apiKey}`\n        },\n        body\n    });\n}\n// Set maximum duration for streaming responses\nconst MAX_STREAMING_DURATION = 30000; // 30 seconds\n// Add actions to handle invoice operations\nconst actions = {\n    // Fetch invoice by ID with enhanced error handling\n    getInvoice: async (id)=>{\n        try {\n            log(`Fetching invoice ${id}`);\n            // Try multiple methods to get the invoice\n            let invoice = null;\n            let errors = [];\n            // Try fetchInvoiceById first\n            try {\n                invoice = await (0,_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__.fetchInvoiceById)(id);\n                if (invoice) return invoice;\n            } catch (error) {\n                log(`Error with fetchInvoiceById for ${id}:`, error);\n                errors.push(`fetchInvoiceById: ${error.message || error}`);\n            }\n            // If that fails, try getting all invoices and filtering\n            if (!invoice) {\n                try {\n                    const allInvoices = await (0,_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__.fetchInvoices)();\n                    if (Array.isArray(allInvoices)) {\n                        // Look for invoice by Id or DocNumber\n                        invoice = allInvoices.find((inv)=>inv.Id === id || inv.DocNumber === id || inv.Id && inv.Id.toString() === id.toString() || inv.DocNumber && inv.DocNumber.toString() === id.toString());\n                        if (invoice) return invoice;\n                    }\n                } catch (error) {\n                    log(`Error finding invoice ${id} in all invoices:`, error);\n                    errors.push(`fetchInvoices: ${error.message || error}`);\n                }\n            }\n            // If still no invoice found, try direct method\n            if (!invoice) {\n                try {\n                    const allInvoices = await (0,_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__.fetchInvoicesDirectly)();\n                    if (Array.isArray(allInvoices)) {\n                        invoice = allInvoices.find((inv)=>inv.Id === id || inv.DocNumber === id || inv.Id && inv.Id.toString() === id.toString() || inv.DocNumber && inv.DocNumber.toString() === id.toString());\n                        if (invoice) return invoice;\n                    }\n                } catch (error) {\n                    log(`Error with direct method for ${id}:`, error);\n                    errors.push(`direct: ${error.message || error}`);\n                }\n            }\n            // Finally, try micro method\n            if (!invoice) {\n                try {\n                    const allInvoices = await (0,_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__.fetchInvoicesMicroMethod)();\n                    if (Array.isArray(allInvoices)) {\n                        invoice = allInvoices.find((inv)=>inv.Id === id || inv.DocNumber === id || inv.Id && inv.Id.toString() === id.toString() || inv.DocNumber && inv.DocNumber.toString() === id.toString());\n                        if (invoice) return invoice;\n                    }\n                } catch (error) {\n                    log(`Error with micro method for ${id}:`, error);\n                    errors.push(`micro: ${error.message || error}`);\n                }\n            }\n            if (!invoice) {\n                return {\n                    error: `Invoice ${id} not found. Tried multiple methods.`,\n                    errors: errors,\n                    suggestedActions: [\n                        \"Try a different invoice number\",\n                        \"Check if QuickBooks is connected\"\n                    ]\n                };\n            }\n            return invoice;\n        } catch (error) {\n            log(`Error in getInvoice(${id}):`, error);\n            return {\n                error: `Failed to fetch invoice ${id}: ${error.message || error}`,\n                suggestedActions: [\n                    \"Try again later\",\n                    \"Check your QuickBooks connection\"\n                ]\n            };\n        }\n    },\n    // List all invoices\n    listInvoices: async ()=>{\n        try {\n            log(\"Fetching all invoices\");\n            // Try multiple methods to get invoices\n            let invoices = null;\n            let errors = [];\n            // Try standard method first\n            try {\n                invoices = await (0,_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__.fetchInvoices)();\n                if (invoices && Array.isArray(invoices) && invoices.length > 0) {\n                    return invoices;\n                }\n            } catch (error) {\n                log(\"Error with standard method:\", error);\n                errors.push(`standard: ${error.message || error}`);\n            }\n            // Try direct method\n            if (!invoices || !Array.isArray(invoices) || invoices.length === 0) {\n                try {\n                    invoices = await (0,_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__.fetchInvoicesDirectly)();\n                    if (invoices && Array.isArray(invoices) && invoices.length > 0) {\n                        return invoices;\n                    }\n                } catch (error) {\n                    log(\"Error with direct method:\", error);\n                    errors.push(`direct: ${error.message || error}`);\n                }\n            }\n            // Try micro method\n            if (!invoices || !Array.isArray(invoices) || invoices.length === 0) {\n                try {\n                    invoices = await (0,_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__.fetchInvoicesMicroMethod)();\n                    if (invoices && Array.isArray(invoices) && invoices.length > 0) {\n                        return invoices;\n                    }\n                } catch (error) {\n                    log(\"Error with micro method:\", error);\n                    errors.push(`micro: ${error.message || error}`);\n                }\n            }\n            if (!invoices || !Array.isArray(invoices) || invoices.length === 0) {\n                return {\n                    error: \"No invoices found. Tried multiple methods.\",\n                    errors: errors,\n                    invoices: []\n                };\n            }\n            return invoices;\n        } catch (error) {\n            log(\"Error fetching invoices:\", error);\n            return {\n                error: `Failed to fetch invoices: ${error.message || error}`,\n                invoices: []\n            };\n        }\n    },\n    // Summarize invoice by ID\n    summarizeInvoice: async ({ id })=>{\n        console.log(`Summarizing invoice: ${id}`);\n        try {\n            const invoice = await actions.getInvoice(id);\n            if (!invoice || invoice.error) {\n                return {\n                    success: false,\n                    error: invoice.error || \"Invoice not found\"\n                };\n            }\n            return {\n                success: true,\n                summary: {\n                    invoiceNumber: invoice.DocNumber,\n                    customer: invoice.CustomerRef?.name || \"Unknown Customer\",\n                    amount: invoice.TotalAmt,\n                    date: invoice.TxnDate,\n                    status: invoice.Balance > 0 ? \"Unpaid\" : \"Paid\",\n                    balance: invoice.Balance\n                }\n            };\n        } catch (error) {\n            console.error(\"Error summarizing invoice:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : String(error)\n            };\n        }\n    },\n    // Analyze invoices (trends, customer, amounts etc.)\n    analyzeInvoices: async ({ type })=>{\n        console.log(`Analyzing invoices (${type})`);\n        try {\n            let invoices;\n            try {\n                // Try to get real invoices first\n                invoices = await (0,_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__.fetchInvoices)();\n            } catch (error) {\n                // Try direct method\n                try {\n                    invoices = await (0,_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__.fetchInvoicesDirectly)();\n                } catch (directError) {\n                    // Try micro method\n                    try {\n                        invoices = await (0,_lib_quickbooks_api__WEBPACK_IMPORTED_MODULE_0__.fetchInvoicesMicroMethod)();\n                    } catch (microError) {\n                        // If all methods fail, return error\n                        return {\n                            success: false,\n                            error: \"Could not fetch invoices for analysis. Please check your QuickBooks connection.\"\n                        };\n                    }\n                }\n            }\n            // If no valid invoices were found or fetched, return error\n            if (!invoices || !Array.isArray(invoices) || invoices.length === 0) {\n                return {\n                    success: false,\n                    error: \"No invoices found for analysis.\"\n                };\n            }\n            // Perform analysis based on type\n            let analysis;\n            switch(type){\n                case \"trends\":\n                    // Group invoices by month\n                    const byMonth = invoices.reduce((acc, inv)=>{\n                        const date = new Date(inv.TxnDate);\n                        const monthYear = `${date.getFullYear()}-${date.getMonth() + 1}`;\n                        if (!acc[monthYear]) acc[monthYear] = {\n                            total: 0,\n                            count: 0\n                        };\n                        acc[monthYear].total += inv.TotalAmt;\n                        acc[monthYear].count += 1;\n                        return acc;\n                    }, {});\n                    analysis = {\n                        byMonth,\n                        totalInvoiced: invoices.reduce((sum, inv)=>sum + inv.TotalAmt, 0),\n                        averageInvoiceAmount: invoices.reduce((sum, inv)=>sum + inv.TotalAmt, 0) / invoices.length,\n                        unpaidTotal: invoices.reduce((sum, inv)=>sum + (inv.Balance || 0), 0)\n                    };\n                    break;\n                case \"customer\":\n                    // Group invoices by customer\n                    const byCustomer = invoices.reduce((acc, inv)=>{\n                        const customerName = inv.CustomerRef?.name || \"Unknown\";\n                        if (!acc[customerName]) acc[customerName] = {\n                            total: 0,\n                            count: 0,\n                            unpaid: 0,\n                            averageAmount: 0,\n                            invoices: []\n                        };\n                        acc[customerName].total += inv.TotalAmt;\n                        acc[customerName].count += 1;\n                        acc[customerName].unpaid += inv.Balance || 0;\n                        acc[customerName].invoices.push({\n                            id: inv.Id,\n                            number: inv.DocNumber,\n                            amount: inv.TotalAmt,\n                            balance: inv.Balance,\n                            date: inv.TxnDate\n                        });\n                        return acc;\n                    }, {});\n                    // Calculate averages\n                    Object.keys(byCustomer).forEach((customer)=>{\n                        byCustomer[customer].averageAmount = byCustomer[customer].total / byCustomer[customer].count;\n                    });\n                    analysis = {\n                        byCustomer\n                    };\n                    break;\n                case \"amounts\":\n                    // Analyze amounts\n                    analysis = {\n                        highest: invoices.reduce((max, inv)=>inv.TotalAmt > max.amount ? {\n                                amount: inv.TotalAmt,\n                                invoice: inv.DocNumber,\n                                id: inv.Id\n                            } : max, {\n                            amount: 0,\n                            invoice: \"\",\n                            id: \"\"\n                        }),\n                        lowest: invoices.reduce((min, inv)=>min.amount === 0 || inv.TotalAmt < min.amount ? {\n                                amount: inv.TotalAmt,\n                                invoice: inv.DocNumber,\n                                id: inv.Id\n                            } : min, {\n                            amount: 0,\n                            invoice: \"\",\n                            id: \"\"\n                        }),\n                        average: invoices.reduce((sum, inv)=>sum + inv.TotalAmt, 0) / invoices.length,\n                        total: invoices.reduce((sum, inv)=>sum + inv.TotalAmt, 0),\n                        unpaidTotal: invoices.reduce((sum, inv)=>sum + (inv.Balance || 0), 0),\n                        fullyPaid: invoices.filter((inv)=>inv.Balance === 0).length,\n                        partiallyPaid: invoices.filter((inv)=>inv.Balance > 0 && inv.Balance < inv.TotalAmt).length,\n                        unpaid: invoices.filter((inv)=>inv.Balance === inv.TotalAmt).length\n                    };\n                    break;\n                default:\n                    analysis = {\n                        error: \"Invalid analysis type\"\n                    };\n            }\n            return {\n                success: true,\n                analysisType: type,\n                analysis\n            };\n        } catch (error) {\n            console.error(`Error analyzing invoices (${type}):`, error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : String(error)\n            };\n        }\n    }\n};\nasync function POST(req) {\n    log(\"Received request to Groq API\");\n    // Verify that we have a Groq API Key\n    const apiKey = process.env.GROQ_API_KEY;\n    if (!apiKey) {\n        log(\"Missing Groq API key\");\n        return new Response(JSON.stringify({\n            error: \"Missing Groq API key. Please add GROQ_API_KEY to your .env.local file.\"\n        }), {\n            status: 500,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    }\n    try {\n        // Parse the request\n        const body = await req.json();\n        const { messages } = body;\n        if (!messages || !Array.isArray(messages)) {\n            log(\"Invalid request: missing or invalid messages array\");\n            return new Response(JSON.stringify({\n                error: \"Invalid request: messages array is required\"\n            }), {\n                status: 400,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n        // Log the messages for debugging\n        log(`Processing ${messages.length} messages`);\n        try {\n            // Try using direct fetch first for more control\n            const response = await fetchGroqCompletion(messages);\n            if (!response.ok) {\n                const errorText = await response.text();\n                log(`Error from Groq API: ${response.status} ${response.statusText}`, errorText);\n                throw new Error(`Groq API returned status ${response.status}: ${errorText}`);\n            }\n            log(\"Got successful response from Groq\");\n            // Create a transformer to extract just the content from the Groq stream\n            const transformStream = new TransformStream({\n                start (controller) {\n                    log(\"Starting stream transformation\");\n                    // Store partial chunks that might be split across boundaries\n                    this.buffer = \"\";\n                },\n                async transform (chunk, controller) {\n                    // Parse the chunk text\n                    const text = new TextDecoder().decode(chunk);\n                    this.buffer += text;\n                    // Process complete data: lines from the buffer\n                    const lines = this.buffer.split(\"\\n\");\n                    // Keep the last line which might be incomplete\n                    this.buffer = lines.pop() || \"\";\n                    for (const line of lines){\n                        if (line.startsWith(\"data: \")) {\n                            try {\n                                // Remove the 'data: ' prefix\n                                const jsonStr = line.substring(6);\n                                // Skip empty data lines or [DONE] messages\n                                if (jsonStr.trim() === \"\" || jsonStr.trim() === \"[DONE]\") {\n                                    continue;\n                                }\n                                // Parse the JSON\n                                const json = JSON.parse(jsonStr);\n                                // Extract just the content delta if it exists\n                                if (json.choices && json.choices[0] && json.choices[0].delta && json.choices[0].delta.content) {\n                                    const content = json.choices[0].delta.content;\n                                    // Remove any slashes that might be used as escapes in the string\n                                    const cleanContent = content.replace(/\\\\+/g, \"\");\n                                    controller.enqueue(new TextEncoder().encode(cleanContent));\n                                }\n                            } catch (e) {\n                                // Log parsing errors but don't break the stream\n                                log(\"Error parsing JSON from stream:\", e, \"Raw text:\", line);\n                                // Try more resilient approaches to extract content\n                                try {\n                                    // First try: Extract content from quoted JSON\n                                    const contentMatch = line.match(/\"content\":\"([^\"]*?)\"/);\n                                    if (contentMatch && contentMatch[1]) {\n                                        const cleanContent = contentMatch[1].replace(/\\\\+/g, \"\");\n                                        controller.enqueue(new TextEncoder().encode(cleanContent));\n                                        continue;\n                                    }\n                                    // Second try: If it looks like raw content (not JSON)\n                                    if (!line.includes(\"{\") && !line.includes(\"}\") && line.length > 7) {\n                                        const cleanContent = line.substring(6).replace(/\\\\+/g, \"\");\n                                        controller.enqueue(new TextEncoder().encode(cleanContent));\n                                    }\n                                } catch (regexError) {\n                                    log(\"Failed to extract content via alternative methods:\", regexError);\n                                }\n                            }\n                        }\n                    }\n                },\n                flush (controller) {\n                    // Process any remaining data in the buffer\n                    if (this.buffer.startsWith(\"data: \")) {\n                        try {\n                            const jsonStr = this.buffer.substring(6);\n                            if (jsonStr.trim() !== \"\" && jsonStr.trim() !== \"[DONE]\") {\n                                const json = JSON.parse(jsonStr);\n                                if (json.choices && json.choices[0] && json.choices[0].delta && json.choices[0].delta.content) {\n                                    const content = json.choices[0].delta.content;\n                                    const cleanContent = content.replace(/\\\\+/g, \"\");\n                                    controller.enqueue(new TextEncoder().encode(cleanContent));\n                                }\n                            }\n                        } catch (e) {\n                            // Try the alternative extraction methods\n                            const contentMatch = this.buffer.match(/\"content\":\"([^\"]*?)\"/);\n                            if (contentMatch && contentMatch[1]) {\n                                const cleanContent = contentMatch[1].replace(/\\\\+/g, \"\");\n                                controller.enqueue(new TextEncoder().encode(cleanContent));\n                            }\n                        }\n                    }\n                }\n            });\n            // Use the transformed stream instead of the raw response\n            const transformedStream = response.body.pipeThrough(transformStream);\n            // Return the streaming response with transformed stream\n            return new ai__WEBPACK_IMPORTED_MODULE_2__.StreamingTextResponse(transformedStream);\n        } catch (directError) {\n            log(\"Direct fetch to Groq failed, falling back to SDK:\", directError);\n            // Fallback to OpenAI SDK\n            const response = await groqClient.chat.completions.create({\n                messages: [\n                    {\n                        role: \"system\",\n                        content: invoiceDataAdded ? `You are an AI assistant for QuickBooks invoice management. When presenting invoice information:\n\n1. CRITICAL: Present the invoice information EXACTLY as provided to you, keeping the same format, spacing, and line breaks. Do not rearrange or reformat the information.\n\n2. Do not use any special formatting, markdown, or symbols like asterisks (*).\n\n3. Each field must be on its own line with proper spacing.\n\n4. Respond in plain text only.\n\n5. If the user asks any follow-up questions about the invoice, use the exact data provided to you.` : `You are an AI assistant focused on invoice management and QuickBooks data analysis. Follow these instructions exactly:\n\n1. When showing invoice information, use ONLY this exact format with each field on its own line:\n   Invoice #[Number]\n   [Status]\n   \n   Customer\n   [Name]\n   \n   Amount\n   $[Amount]\n   \n   Balance Due\n   $[Balance]\n   \n   Date\n   [Date]\n   \n   Due Date\n   [Due Date]\n   \n   Memo\n   [Memo Text]\n\n2. Do not deviate from this exact format for invoice displays.\n\n3. For ALL responses:\n   - Use plain text only\n   - No markdown or special formatting\n   - No asterisks (*) or other symbols\n   - No extra line breaks within fields\n   - Keep proper spacing between fields\n\n4. Format all currency values with dollar signs and two decimal places: $1,234.56`\n                    }\n                ],\n                temperature: 0.3,\n                max_tokens: 800,\n                stream: true\n            });\n            // Create a transformer to extract just the content from the Groq stream\n            const groqTransformStream = response.body.pipeThrough(new TransformStream({\n                start (controller) {\n                    log(\"Starting stream transformation\");\n                    // Store partial chunks that might be split across boundaries\n                    this.buffer = \"\";\n                },\n                async transform (chunk, controller) {\n                    // Parse the chunk text\n                    const text = new TextDecoder().decode(chunk);\n                    this.buffer += text;\n                    // Process complete data: lines from the buffer\n                    const lines = this.buffer.split(\"\\n\");\n                    // Keep the last line which might be incomplete\n                    this.buffer = lines.pop() || \"\";\n                    for (const line of lines){\n                        if (line.startsWith(\"data: \")) {\n                            try {\n                                // Remove the 'data: ' prefix\n                                const jsonStr = line.substring(6);\n                                // Skip empty data lines or [DONE] messages\n                                if (jsonStr.trim() === \"\" || jsonStr.trim() === \"[DONE]\") {\n                                    continue;\n                                }\n                                // Parse the JSON\n                                const json = JSON.parse(jsonStr);\n                                // Extract just the content delta if it exists\n                                if (json.choices && json.choices[0] && json.choices[0].delta && json.choices[0].delta.content) {\n                                    const content = json.choices[0].delta.content;\n                                    // Remove any slashes that might be used as escapes in the string\n                                    const cleanContent = content.replace(/\\\\+/g, \"\");\n                                    controller.enqueue(new TextEncoder().encode(cleanContent));\n                                }\n                            } catch (e) {\n                                // Log parsing errors but don't break the stream\n                                log(\"Error parsing JSON from stream:\", e, \"Raw text:\", line);\n                                // Try more resilient approaches to extract content\n                                try {\n                                    // First try: Extract content from quoted JSON\n                                    const contentMatch = line.match(/\"content\":\"([^\"]*?)\"/);\n                                    if (contentMatch && contentMatch[1]) {\n                                        const cleanContent = contentMatch[1].replace(/\\\\+/g, \"\");\n                                        controller.enqueue(new TextEncoder().encode(cleanContent));\n                                        continue;\n                                    }\n                                    // Second try: If it looks like raw content (not JSON)\n                                    if (!line.includes(\"{\") && !line.includes(\"}\") && line.length > 7) {\n                                        const cleanContent = line.substring(6).replace(/\\\\+/g, \"\");\n                                        controller.enqueue(new TextEncoder().encode(cleanContent));\n                                    }\n                                } catch (regexError) {\n                                    log(\"Failed to extract content via alternative methods:\", regexError);\n                                }\n                            }\n                        }\n                    }\n                },\n                flush (controller) {\n                    // Process any remaining data in the buffer\n                    if (this.buffer.startsWith(\"data: \")) {\n                        try {\n                            const jsonStr = this.buffer.substring(6);\n                            if (jsonStr.trim() !== \"\" && jsonStr.trim() !== \"[DONE]\") {\n                                const json = JSON.parse(jsonStr);\n                                if (json.choices && json.choices[0] && json.choices[0].delta && json.choices[0].delta.content) {\n                                    const content = json.choices[0].delta.content;\n                                    const cleanContent = content.replace(/\\\\+/g, \"\");\n                                    controller.enqueue(new TextEncoder().encode(cleanContent));\n                                }\n                            }\n                        } catch (e) {\n                            // Try the alternative extraction methods\n                            const contentMatch = this.buffer.match(/\"content\":\"([^\"]*?)\"/);\n                            if (contentMatch && contentMatch[1]) {\n                                const cleanContent = contentMatch[1].replace(/\\\\+/g, \"\");\n                                controller.enqueue(new TextEncoder().encode(cleanContent));\n                            }\n                        }\n                    }\n                }\n            }));\n            // Use the transformed stream instead of the raw response\n            const transformedStream = groqTransformStream;\n            // Return the streaming response with transformed stream\n            return new ai__WEBPACK_IMPORTED_MODULE_2__.StreamingTextResponse(transformedStream);\n        }\n    } catch (error) {\n        log(\"Error processing request:\", error);\n        return new Response(JSON.stringify({\n            error: \"An error occurred while processing the request. Please try again later.\"\n        }), {\n            status: 500,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/groq/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/quickbooks/api.ts":
/*!***********************************!*\
  !*** ./src/lib/quickbooks/api.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   REALM_ID_KEY: () => (/* binding */ REALM_ID_KEY),\n/* harmony export */   REFRESH_TOKEN_KEY: () => (/* binding */ REFRESH_TOKEN_KEY),\n/* harmony export */   TOKEN_EXPIRY_KEY: () => (/* binding */ TOKEN_EXPIRY_KEY),\n/* harmony export */   TOKEN_KEY: () => (/* binding */ TOKEN_KEY),\n/* harmony export */   checkClientInitialized: () => (/* binding */ checkClientInitialized),\n/* harmony export */   fetchInvoices: () => (/* binding */ fetchInvoices),\n/* harmony export */   fetchInvoicesDirectly: () => (/* binding */ fetchInvoicesDirectly),\n/* harmony export */   fetchInvoicesMicroMethod: () => (/* binding */ fetchInvoicesMicroMethod),\n/* harmony export */   getAuthUrl: () => (/* binding */ getAuthUrl),\n/* harmony export */   getInvoiceById: () => (/* binding */ getInvoiceById),\n/* harmony export */   getRedirectUriForDisplay: () => (/* binding */ getRedirectUriForDisplay),\n/* harmony export */   handleCallback: () => (/* binding */ handleCallback),\n/* harmony export */   initializeQBO: () => (/* binding */ initializeQBO),\n/* harmony export */   isQuickBooksReady: () => (/* binding */ isQuickBooksReady),\n/* harmony export */   manuallyInitializeQuickBooks: () => (/* binding */ manuallyInitializeQuickBooks),\n/* harmony export */   qbo: () => (/* binding */ qbo),\n/* harmony export */   refreshQuickBooksToken: () => (/* binding */ refreshQuickBooksToken),\n/* harmony export */   tokenStore: () => (/* binding */ tokenStore),\n/* harmony export */   updateTokenStoreFromValues: () => (/* binding */ updateTokenStoreFromValues)\n/* harmony export */ });\n/* harmony import */ var intuit_oauth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! intuit-oauth */ \"(rsc)/./node_modules/intuit-oauth/src/OAuthClient.js\");\n/* harmony import */ var intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(intuit_oauth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var node_quickbooks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-quickbooks */ \"(rsc)/./node_modules/node-quickbooks/index.js\");\n/* harmony import */ var node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_quickbooks__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// First, let's verify QuickBooks constructor is available\nconsole.log(\"QuickBooks constructor check:\", {\n    constructorType: typeof (node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default()),\n    isFunction: typeof (node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default()) === \"function\"\n});\n// Token storage keys\nconst TOKEN_KEY = \"qb_token\";\nconst REALM_ID_KEY = \"qb_realm_id\";\nconst REFRESH_TOKEN_KEY = \"qb_refresh_token\";\nconst TOKEN_EXPIRY_KEY = \"qb_token_expiry\";\n// Debug flag\nconst DEBUG = true;\n// Helper function to log debug information\nconst debugLog = (...args)=>{\n    if (DEBUG) {\n        console.log(\"[QuickBooks API Debug]\", ...args);\n    }\n};\n// Ensure we have a properly formatted base URL with protocol\nconst getBaseUrl = ()=>{\n    const baseUrl = \"http://localhost:3000\" || 0;\n    // Make sure URL has a protocol\n    if (!baseUrl.startsWith(\"http://\") && !baseUrl.startsWith(\"https://\")) {\n        return `http://${baseUrl}`;\n    }\n    // Remove trailing slash if present\n    return baseUrl.replace(/\\/$/, \"\");\n};\nconst getRedirectUri = ()=>{\n    const baseUrl = getBaseUrl();\n    return `${baseUrl}/api/auth/callback`;\n};\n// Initialize OAuth client - use createOAuthClient function consistently\nlet oauthClient;\nlet qbo = null;\n\n// Server-side in-memory token store\n// NOTE: This will be reset on server restarts and between serverless function invocations\nlet tokenStore = {};\n// Keep track of initialization status\nlet isInitialized = false;\n// Store token both in memory and in localStorage (if available)\nconst storeToken = (accessToken, realmId, refreshToken, expiresIn)=>{\n    try {\n        debugLog(\"Storing token\");\n        // Store token in memory for server-side use\n        tokenStore.accessToken = accessToken;\n        tokenStore.realmId = realmId;\n        if (refreshToken) {\n            tokenStore.refreshToken = refreshToken;\n        }\n        if (expiresIn) {\n            const expiryTime = Date.now() + expiresIn * 1000;\n            tokenStore.tokenExpiry = expiryTime;\n        }\n        // Try to store in localStorage for persistence if we're in browser\n        if (false) {}\n        debugLog(\"Token stored successfully\");\n        return true;\n    } catch (error) {\n        console.error(\"Failed to store token:\", error);\n        return false;\n    }\n};\n// Retrieve token from memory or localStorage\nconst getStoredToken = ()=>{\n    try {\n        debugLog(\"Retrieving stored token\");\n        // First try memory store for server-side\n        if (tokenStore.accessToken && tokenStore.realmId) {\n            debugLog(\"Token found in memory\");\n            return {\n                accessToken: tokenStore.accessToken,\n                realmId: tokenStore.realmId,\n                refreshToken: tokenStore.refreshToken,\n                tokenExpiry: tokenStore.tokenExpiry\n            };\n        }\n        // If not in memory, try localStorage if we're in browser\n        if (false) {}\n        debugLog(\"No token found\");\n        return null;\n    } catch (error) {\n        console.error(\"Failed to get stored token:\", error);\n        return null;\n    }\n};\n// Clear all stored tokens\nconst clearTokens = ()=>{\n    debugLog(\"Clearing all tokens\");\n    // Clear memory store\n    tokenStore = {};\n    isInitialized = false;\n    qbo = null;\n    // Clear localStorage if in browser\n    if (false) {}\n};\nfunction initializeQBO(accessToken, realmId, refreshToken, expiresIn) {\n    try {\n        console.log(\"BASIC QuickBooks client initialization\", {\n            accessTokenPresent: !!accessToken,\n            realmIdPresent: !!realmId,\n            clientIdPresent: !!process.env.QUICKBOOKS_CLIENT_ID,\n            clientSecretPresent: !!process.env.QUICKBOOKS_CLIENT_SECRET\n        });\n        // Validate requirements\n        if (!accessToken || !realmId) {\n            console.error(\"ERROR: Missing token or realmId for QuickBooks initialization\");\n            return false;\n        }\n        const clientId = process.env.QUICKBOOKS_CLIENT_ID;\n        const clientSecret = process.env.QUICKBOOKS_CLIENT_SECRET;\n        if (!clientId || !clientSecret) {\n            console.error(\"ERROR: Missing QuickBooks credentials\");\n            return false;\n        }\n        // Store the token first\n        storeToken(accessToken, realmId, refreshToken, expiresIn);\n        // ULTRA SIMPLE CLIENT CREATION - FIRST ATTEMPT\n        try {\n            console.log(\"Creating minimal QuickBooks client - attempt 1\");\n            // Create the client with absolute minimal parameters\n            qbo = new (node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default())(clientId, clientSecret, accessToken, false, realmId);\n            if (!qbo) {\n                console.error(\"QuickBooks constructor returned null - attempt 1\");\n            // We'll try fallback approach below\n            } else {\n                // Set these explicitly to ensure they're available\n                qbo.accessToken = accessToken;\n                qbo.realmId = realmId;\n                console.log(\"QuickBooks client created with basic properties:\", {\n                    hasQbo: !!qbo,\n                    hasToken: !!(qbo && qbo.accessToken),\n                    hasRealmId: !!(qbo && qbo.realmId)\n                });\n                // Set initialization flag\n                isInitialized = true;\n                console.log(\"QuickBooks client initialized successfully - attempt 1\");\n                return true;\n            }\n        } catch (clientError) {\n            console.error(\"ERROR creating QuickBooks client instance - attempt 1:\", clientError);\n        // We'll try fallback approach below\n        }\n        // FALLBACK APPROACH - ATTEMPT 2\n        try {\n            console.log(\"Creating fallback QuickBooks client - attempt 2\");\n            // Try with different parameters - some versions need useSandbox parameter\n            qbo = new (node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default())(clientId, clientSecret, accessToken, true, realmId, {\n                useSandbox: true\n            });\n            if (!qbo) {\n                console.error(\"QuickBooks constructor returned null - attempt 2\");\n                return false;\n            }\n            // Set these explicitly to ensure they're available\n            qbo.accessToken = accessToken;\n            qbo.realmId = realmId;\n            console.log(\"QuickBooks client created with fallback approach\");\n            // Set initialization flag\n            isInitialized = true;\n            console.log(\"QuickBooks client initialized successfully - attempt 2\");\n            return true;\n        } catch (fallbackError) {\n            console.error(\"ERROR creating QuickBooks client with fallback approach:\", fallbackError);\n            return false;\n        }\n    } catch (error) {\n        console.error(\"FATAL ERROR in QuickBooks initialization:\", error);\n        return false;\n    }\n}\n// Check if client is initialized or try to initialize from stored token\nconst checkClientInitialized = ()=>{\n    console.log(\"Checking if QuickBooks client is initialized\");\n    try {\n        // If already initialized in this session, verify the client is still valid\n        if (qbo && isInitialized) {\n            console.log(\"QuickBooks client appears to be initialized, validating...\");\n            // Verify the client has all required properties\n            if (!qbo.accessToken || !qbo.realmId) {\n                console.log(\"Client is missing required properties, will attempt to reinitialize\");\n                isInitialized = false;\n                qbo = null;\n            } else {\n                console.log(\"Client appears valid with required properties\");\n                return true;\n            }\n        } else {\n            console.log(\"QuickBooks client is not initialized, will attempt to initialize from stored token\");\n        }\n        // Try to retrieve token - IMPORTANT: Check both server-side tokenStore and cookies\n        console.log(\"Attempting to retrieve stored token\");\n        const storedToken = getServerSideToken();\n        if (!storedToken || !storedToken.accessToken || !storedToken.realmId) {\n            console.log(\"No valid stored token found\");\n            throw new Error(\"QuickBooks client not initialized. Please connect your QuickBooks account first.\");\n        }\n        console.log(\"Found stored token, initializing QuickBooks client with:\", {\n            hasAccessToken: !!storedToken.accessToken,\n            hasRealmId: !!storedToken.realmId,\n            hasRefreshToken: !!storedToken.refreshToken\n        });\n        // Initialize with current token\n        const initResult = initializeQBO(storedToken.accessToken, storedToken.realmId, storedToken.refreshToken, storedToken.tokenExpiry ? Math.floor((storedToken.tokenExpiry - Date.now()) / 1000) : undefined);\n        if (!initResult) {\n            console.error(\"Failed to initialize QuickBooks client with stored token\");\n            throw new Error(\"Failed to initialize QuickBooks client. Please reconnect your QuickBooks account.\");\n        }\n        console.log(\"Successfully initialized QuickBooks client from stored token\");\n        return true;\n    } catch (error) {\n        console.error(\"Error in checkClientInitialized:\", error);\n        throw error;\n    }\n};\n// Enhanced function to get token from server-side sources (tokenStore and cookies)\nfunction getServerSideToken() {\n    console.log(\"Getting server-side token\");\n    try {\n        // First check memory store\n        if (tokenStore.accessToken && tokenStore.realmId) {\n            console.log(\"Token found in server memory store\");\n            return {\n                accessToken: tokenStore.accessToken,\n                realmId: tokenStore.realmId,\n                refreshToken: tokenStore.refreshToken,\n                tokenExpiry: tokenStore.tokenExpiry\n            };\n        }\n        // Next, try localStorage if we're in a browser environment\n        if (false) {}\n        // No dynamic imports - this causes issues in Next.js\n        // The cookies will be passed by the invoices API route directly\n        console.log(\"No server-side token found in memory or localStorage, check cookies in the API route\");\n        return null;\n    } catch (error) {\n        console.error(\"Error getting server-side token:\", error);\n        return null;\n    }\n}\n// Function to check if QuickBooks is ready for client-side components\nconst isQuickBooksReady = ()=>{\n    if (false) {}\n    return false;\n};\n// Helper function to map QuickBooks invoice format to our app format\nfunction mapQuickBooksInvoice(qbInvoice) {\n    try {\n        // Extract customer info if available\n        const customerName = qbInvoice.CustomerRef?.name || \"Unknown Customer\";\n        // Extract line items\n        const lineItems = (qbInvoice.Line || []).map((line)=>{\n            return {\n                id: line.Id || \"\",\n                description: line.Description || \"\",\n                amount: line.Amount || 0,\n                quantity: line.Quantity || 1,\n                unitPrice: line.SalesItemLineDetail?.UnitPrice || 0\n            };\n        });\n        // Map to our invoice format\n        return {\n            id: qbInvoice.Id || \"\",\n            invoiceNumber: qbInvoice.DocNumber || \"\",\n            customerName: customerName,\n            date: qbInvoice.TxnDate || \"\",\n            dueDate: qbInvoice.DueDate || \"\",\n            amount: qbInvoice.TotalAmt || 0,\n            balance: qbInvoice.Balance || 0,\n            status: qbInvoice.status || \"Unknown\",\n            lineItems: lineItems,\n            currency: qbInvoice.CurrencyRef?.name || \"USD\"\n        };\n    } catch (error) {\n        console.error(\"Error mapping QuickBooks invoice:\", error);\n        // Return a minimal valid invoice to avoid errors\n        return {\n            id: qbInvoice.Id || \"\",\n            invoiceNumber: qbInvoice.DocNumber || \"\",\n            customerName: \"Error parsing invoice\",\n            date: qbInvoice.TxnDate || \"\",\n            dueDate: \"\",\n            amount: 0,\n            balance: 0,\n            status: \"Error\",\n            lineItems: [],\n            currency: \"USD\"\n        };\n    }\n}\n// Function to refresh QuickBooks token\nasync function refreshQuickBooksToken(refreshToken) {\n    try {\n        debugLog(\"Attempting to refresh token\");\n        // Create a fresh OAuth client for token refresh\n        const freshOAuthClient = createOAuthClient();\n        if (!freshOAuthClient) {\n            debugLog(\"Failed to create fresh OAuth client\");\n            return false;\n        }\n        debugLog(\"Created fresh OAuth client for token refresh\");\n        // Try to refresh token\n        const refreshResponse = await freshOAuthClient.refreshUsingToken(refreshToken);\n        if (!refreshResponse) {\n            debugLog(\"No response from token refresh\");\n            return false;\n        }\n        const refreshData = refreshResponse.getJson();\n        debugLog(\"Refresh response received\", {\n            hasAccessToken: !!refreshData.access_token,\n            hasRefreshToken: !!refreshData.refresh_token,\n            expiresIn: refreshData.expires_in\n        });\n        if (!refreshData.access_token) {\n            debugLog(\"No access token in refresh response\");\n            return false;\n        }\n        // Store the refreshed token\n        storeToken(refreshData.access_token, tokenStore.realmId || \"\", refreshData.refresh_token, refreshData.expires_in);\n        // Re-initialize QuickBooks client with new token\n        if (tokenStore.realmId) {\n            const initialized = initializeQBO(refreshData.access_token, tokenStore.realmId, refreshData.refresh_token, refreshData.expires_in ? Date.now() + refreshData.expires_in * 1000 : undefined);\n            debugLog(\"QuickBooks client re-initialized after token refresh:\", {\n                success: initialized\n            });\n            return initialized;\n        }\n        debugLog(\"No realmId available to re-initialize client\");\n        return false;\n    } catch (error) {\n        console.error(\"Error refreshing token:\", error);\n        debugLog(\"Token refresh failed with error\");\n        return false;\n    }\n}\nasync function fetchInvoices() {\n    console.error(\"⭐ fetchInvoices: Starting invoice fetch process\");\n    try {\n        debugLog(\"Starting fetchInvoices...\");\n        // First, verify we can get stored tokens - any source is fine (memory, localStorage, cookies)\n        const tokens = getStoredToken();\n        console.error(\"⭐ fetchInvoices: Token check result:\", {\n            hasToken: !!tokens?.accessToken,\n            hasRealmId: !!tokens?.realmId,\n            hasRefreshToken: !!tokens?.refreshToken,\n            tokenExpiry: tokens?.tokenExpiry ? new Date(tokens.tokenExpiry).toISOString() : \"none\"\n        });\n        if (!tokens || !tokens.accessToken || !tokens.realmId) {\n            console.error(\"⭐ fetchInvoices: No valid tokens found for QuickBooks API call\");\n            throw new Error(\"QuickBooks authentication required. Please connect your account.\");\n        }\n        // Check if token is expired and we need to refresh\n        const now = Date.now();\n        const tokenExpired = tokens.tokenExpiry && now >= tokens.tokenExpiry;\n        console.error(\"⭐ fetchInvoices: Token expiry check:\", {\n            now: new Date(now).toISOString(),\n            tokenExpiry: tokens.tokenExpiry ? new Date(tokens.tokenExpiry).toISOString() : \"unknown\",\n            isExpired: tokenExpired\n        });\n        // If token is expired and we have refresh token, try to refresh it\n        if (tokenExpired && tokens.refreshToken) {\n            console.error(\"⭐ fetchInvoices: Token expired, attempting to refresh\");\n            try {\n                const refreshed = await refreshQuickBooksToken(tokens.refreshToken);\n                console.error(\"⭐ fetchInvoices: Token refresh result:\", {\n                    success: !!refreshed\n                });\n                if (!refreshed) {\n                    console.error(\"⭐ fetchInvoices: Token refresh failed\");\n                    throw new Error(\"Failed to refresh QuickBooks authentication. Please reconnect your account.\");\n                }\n            } catch (refreshError) {\n                console.error(\"⭐ fetchInvoices: Error refreshing token:\", refreshError);\n                throw new Error(\"QuickBooks authentication expired. Please reconnect your account.\");\n            }\n        }\n        // Initialize the client if not already initialized\n        if (!qbo) {\n            console.error(\"⭐ fetchInvoices: QuickBooks client not initialized, attempting initialization\");\n            const initialized = initializeQBO(tokens.accessToken, tokens.realmId, tokens.refreshToken, tokens.tokenExpiry);\n            console.error(\"⭐ fetchInvoices: Initialization result:\", {\n                success: initialized\n            });\n            if (!initialized || !qbo) {\n                console.error(\"⭐ fetchInvoices: Client initialization failed\");\n                throw new Error(\"Failed to initialize QuickBooks client. Please reconnect your account.\");\n            }\n        } else {\n            console.error(\"⭐ fetchInvoices: Using existing QuickBooks client\");\n        }\n        // Double-check that qbo is properly initialized with essential properties\n        if (!qbo.accessToken) {\n            console.error(\"⭐ fetchInvoices: QB client missing accessToken, updating\");\n            qbo.accessToken = tokens.accessToken;\n        }\n        if (!qbo.realmId) {\n            console.error(\"⭐ fetchInvoices: QB client missing realmId, updating\");\n            qbo.realmId = tokens.realmId;\n        }\n        // Print out everything we can about the client state for debugging\n        console.error(\"⭐ fetchInvoices: QuickBooks client state:\", {\n            clientExists: !!qbo,\n            hasAccessToken: !!(qbo && qbo.accessToken),\n            hasRealmId: !!(qbo && qbo.realmId),\n            hasTokenSecret: !!(qbo && qbo.tokenSecret),\n            oauthversion: qbo ? qbo.oauthversion : \"none\",\n            hasRefreshToken: !!(qbo && qbo.refreshToken)\n        });\n        // At this point, qbo should be initialized\n        console.error(\"⭐ fetchInvoices: Performing QuickBooks API call for invoices\");\n        return new Promise((resolve, reject)=>{\n            if (!qbo) {\n                console.error(\"⭐ fetchInvoices: QB client not available at request time\");\n                return reject(new Error(\"QuickBooks client not initialized\"));\n            }\n            console.error(\"⭐ fetchInvoices: Making findInvoices API call\");\n            // Try-catch block around the API call\n            try {\n                // First try: Use a simpler approach with no filters\n                // Many QuickBooks API failures happen due to complex queries\n                console.error(\"⭐ fetchInvoices: Trying simple query with no filters\");\n                qbo.findInvoices(\"\", (err, data)=>{\n                    if (err) {\n                        console.error(\"⭐ fetchInvoices: Error in simple findInvoices call:\", err);\n                        console.error(\"⭐ Error details:\", JSON.stringify(err, null, 2));\n                        // If the simple approach fails, try a backup approach\n                        console.error(\"⭐ fetchInvoices: Trying alternative query approach\");\n                        try {\n                            // Try with the older query approach\n                            qbo.findInvoices([\n                                {\n                                    field: \"MetaData.LastUpdatedTime\",\n                                    value: \"2010-01-01T00:00:00\",\n                                    operator: \">\"\n                                }\n                            ], (err2, data2)=>{\n                                if (err2) {\n                                    console.error(\"⭐ fetchInvoices: Both query approaches failed:\", err2);\n                                    console.error(\"⭐ Error details:\", JSON.stringify(err2, null, 2));\n                                    return reject(err2);\n                                }\n                                processInvoiceResult(data2, resolve, reject);\n                            });\n                        } catch (backupError) {\n                            console.error(\"⭐ fetchInvoices: Exception in backup approach:\", backupError);\n                            return reject(backupError);\n                        }\n                    } else {\n                        processInvoiceResult(data, resolve, reject);\n                    }\n                });\n            } catch (apiCallError) {\n                console.error(\"⭐ fetchInvoices: Exception during API call execution:\", apiCallError);\n                return reject(new Error(`QuickBooks API call failed: ${apiCallError instanceof Error ? apiCallError.message : \"Unknown error\"}`));\n            }\n        });\n    } catch (error) {\n        console.error(\"⭐ fetchInvoices: Error in fetchInvoices:\", error);\n        throw error;\n    }\n}\n// Helper function to process invoice results\nfunction processInvoiceResult(data, resolve, reject) {\n    // Check if data has QueryResponse property with Invoice array\n    if (data && data.QueryResponse && Array.isArray(data.QueryResponse.Invoice)) {\n        const invoices = data.QueryResponse.Invoice;\n        console.error(`⭐ fetchInvoices: Successfully found ${invoices.length} invoices`);\n        // If no invoices were found, return empty array rather than error\n        if (invoices.length === 0) {\n            console.error(\"⭐ fetchInvoices: No invoices found in QuickBooks account\");\n            return resolve([]);\n        }\n        return resolve(invoices);\n    } else {\n        console.error(\"⭐ fetchInvoices: Invalid data structure received from QB API:\", typeof data, data ? Object.keys(data) : \"null\");\n        console.error(\"⭐ fetchInvoices: Data dump:\", JSON.stringify(data, null, 2));\n        return reject(new Error(\"Invalid response from QuickBooks API\"));\n    }\n}\nconst getInvoiceById = async (id)=>{\n    try {\n        debugLog(`Fetching invoice by ID: ${id}`);\n        checkClientInitialized();\n        if (!qbo) {\n            debugLog(\"QBO client is null after initialization check\");\n            throw new Error(\"QuickBooks client is not available. Please reconnect your QuickBooks account.\");\n        }\n        const cleanId = id.replace(/^(?:inv-)?#?\\s*/i, \"\").trim();\n        return new Promise((resolve, reject)=>{\n            debugLog(`Calling QuickBooks getInvoice API for ID: ${cleanId}`);\n            qbo.getInvoice(cleanId, (err, invoice)=>{\n                if (err) {\n                    console.error(\"Error fetching invoice from QuickBooks API:\", err);\n                    if (err.code === \"80040408\") {\n                        debugLog(\"QuickBooks initialization error (80040408). Clearing tokens.\");\n                        clearTokens();\n                        reject(new Error(\"QuickBooks connection error. Please reconnect your QuickBooks account.\"));\n                    } else if (err.code === \"270\" || err.message?.includes(\"Token invalid\")) {\n                        debugLog(\"Invalid token error. Clearing tokens.\");\n                        clearTokens();\n                        reject(new Error(\"QuickBooks authentication has expired. Please reconnect your QuickBooks account.\"));\n                    } else if (err.statusCode === 404) {\n                        reject(new Error(`Invoice #${id} not found. Please check the invoice number and try again.`));\n                    } else {\n                        reject(new Error(\"Failed to fetch invoice from QuickBooks. Please check your connection.\"));\n                    }\n                } else {\n                    debugLog(\"Successfully fetched invoice from QuickBooks\");\n                    resolve(mapQuickBooksInvoice(invoice));\n                }\n            });\n        });\n    } catch (error) {\n        console.error(\"Error in getInvoiceById:\", error);\n        throw error;\n    }\n};\n// Initialize the OAuth client\ninitializeOAuthClient();\n// Update the getAuthUrl function to use the new createOAuthClient function\nconst getAuthUrl = ()=>{\n    try {\n        // Log environment variables for debugging (redacting sensitive info)\n        console.log(\"Environment check:\", {\n            hasClientId: !!process.env.QUICKBOOKS_CLIENT_ID,\n            hasClientSecret: !!process.env.QUICKBOOKS_CLIENT_SECRET,\n            redirectUri: getRedirectUri(),\n            baseUrl: \"http://localhost:3000\"\n        });\n        // Create a fresh OAuth client for this request\n        const freshOAuthClient = createOAuthClient();\n        // Generate and log the auth URL\n        const authUrl = freshOAuthClient.authorizeUri({\n            scope: [\n                (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default().scopes).Accounting,\n                (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default().scopes).OpenId,\n                (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default().scopes).Profile,\n                (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default().scopes).Email\n            ],\n            state: \"teststate\"\n        });\n        console.log(\"Generated auth URL:\", authUrl);\n        return authUrl;\n    } catch (error) {\n        console.error(\"Error in getAuthUrl:\", error);\n        throw error;\n    }\n};\nconst getRedirectUriForDisplay = ()=>{\n    return getRedirectUri();\n};\n// Create a function to get a fresh OAuth client\nfunction getOAuthClient() {\n    // Ensure the OAuth client is initialized\n    if (!oauthClient) {\n        console.log(\"OAuth client not initialized, initializing now\");\n        if (!initializeOAuthClient()) {\n            throw new Error(\"Failed to initialize OAuth client\");\n        }\n    }\n    // Return the initialized client\n    return oauthClient;\n}\nasync function handleCallback(url) {\n    try {\n        // Clear any existing tokens and client\n        clearTokens();\n        qbo = null;\n        isInitialized = false;\n        // Always create a fresh OAuth client for token exchange\n        // This ensures the tokenSecret is properly set for this specific request\n        const freshOAuthClient = createOAuthClient();\n        // Parse the URL to get the realmId from query parameters\n        const urlParams = new URL(url).searchParams;\n        const realmIdFromUrl = urlParams.get(\"realmId\");\n        const code = urlParams.get(\"code\");\n        if (!code) {\n            throw new Error(\"No authorization code received from QuickBooks\");\n        }\n        console.log(\"Creating token with fresh OAuth client\", {\n            code: code,\n            hasRealmId: !!realmIdFromUrl,\n            redirectUri: getRedirectUri(),\n            hasClientId: !!process.env.QUICKBOOKS_CLIENT_ID,\n            hasClientSecret: !!process.env.QUICKBOOKS_CLIENT_SECRET\n        });\n        // Create token with the fresh client\n        if (!process.env.QUICKBOOKS_CLIENT_SECRET) {\n            throw new Error(\"QuickBooks client secret is not configured\");\n        }\n        // Configure token creation options with the tokenSecret explicitly\n        const tokenConfig = {\n            code: code,\n            realmId: realmIdFromUrl,\n            redirectUri: getRedirectUri(),\n            tokenSecret: process.env.QUICKBOOKS_CLIENT_SECRET // Pass tokenSecret explicitly here\n        };\n        console.log(\"Creating token with config:\", {\n            hasCode: !!tokenConfig.code,\n            hasRealmId: !!tokenConfig.realmId,\n            hasRedirectUri: !!tokenConfig.redirectUri,\n            hasTokenSecret: !!tokenConfig.tokenSecret\n        });\n        // Create token with explicit params\n        const authResponse = await freshOAuthClient.createToken(url, tokenConfig);\n        const tokenData = authResponse.getJson();\n        if (!tokenData.access_token) {\n            throw new Error(\"No access token received from QuickBooks\");\n        }\n        // Use realmId from token data if available, otherwise use from URL\n        const realmId = tokenData.realmId || realmIdFromUrl;\n        if (!realmId) {\n            throw new Error(\"No realmId found in response or URL parameters\");\n        }\n        // Store token first\n        const storeResult = storeToken(tokenData.access_token, realmId, tokenData.refresh_token, tokenData.expires_in);\n        if (!storeResult) {\n            throw new Error(\"Failed to store QuickBooks token\");\n        }\n        // Get client ID and secret\n        const clientId = process.env.QUICKBOOKS_CLIENT_ID;\n        const clientSecret = process.env.QUICKBOOKS_CLIENT_SECRET;\n        if (!clientId || !clientSecret) {\n            throw new Error(\"QuickBooks client credentials are not configured\");\n        }\n        // Create the client directly with needed parameters\n        qbo = new (node_quickbooks__WEBPACK_IMPORTED_MODULE_1___default())(clientId, clientSecret, tokenData.access_token, false, realmId, {\n            minorversion: \"65\",\n            debug: true,\n            useSandbox: true,\n            oauthversion: \"2.0\",\n            requestTimeout: 30000\n        });\n        // Explicitly set required properties if they're not set by constructor\n        if (qbo) {\n            // Make sure accessToken is set\n            if (!qbo.accessToken && tokenData.access_token) {\n                qbo.accessToken = tokenData.access_token;\n            }\n            // Make sure realmId is set\n            if (!qbo.realmId && realmId) {\n                qbo.realmId = realmId;\n            }\n        }\n        // Verify client was created and has required properties\n        if (!qbo || !qbo.accessToken || !qbo.realmId) {\n            qbo = null;\n            isInitialized = false;\n            throw new Error(\"QuickBooks client initialization failed - missing required properties\");\n        }\n        // Set initialization status\n        isInitialized = true;\n        console.log(\"QuickBooks client initialized successfully\");\n        return {\n            access_token: tokenData.access_token,\n            realmId: realmId,\n            refresh_token: tokenData.refresh_token,\n            expires_in: tokenData.expires_in\n        };\n    } catch (error) {\n        console.error(\"Error in handleCallback:\", error);\n        // Clear any partial state\n        clearTokens();\n        qbo = null;\n        isInitialized = false;\n        throw error;\n    }\n}\n// Add this function to the api.ts file to directly set tokens\nconst manuallyInitializeQuickBooks = ()=>{\n    try {\n        console.log(\"Manually initializing QuickBooks client\");\n        // Create and store a long-lasting token (30 days)\n        const accessToken = \"MANUAL_TOKEN_\" + Date.now();\n        const realmId = \"MANUAL_REALM_\" + Date.now();\n        const expiresIn = 30 * 24 * 60 * 60; // 30 days in seconds\n        // Call the existing initializeQBO function\n        const result = initializeQBO(accessToken, realmId, accessToken, expiresIn);\n        console.log(\"Manual QuickBooks initialization result:\", result);\n        return result;\n    } catch (error) {\n        console.error(\"Failed to manually initialize QuickBooks:\", error);\n        return false;\n    }\n};\n// Add this function to create a properly configured OAuth client\nfunction createOAuthClient() {\n    try {\n        const clientId = process.env.QUICKBOOKS_CLIENT_ID;\n        const clientSecret = process.env.QUICKBOOKS_CLIENT_SECRET;\n        if (!clientId || !clientSecret) {\n            throw new Error(\"QuickBooks client credentials are not configured\");\n        }\n        // SIMPLIFIED: Create OAuth client with minimal configuration\n        return new (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default())({\n            clientId,\n            clientSecret,\n            environment: \"sandbox\",\n            redirectUri: getRedirectUri(),\n            tokenSecret: clientSecret // Essential for OAuth flow\n        });\n    } catch (error) {\n        console.error(\"Error creating OAuth client:\", error);\n        throw error;\n    }\n}\n// Initialize the client after the function is defined\nfunction initializeOAuthClient() {\n    try {\n        if (!oauthClient) {\n            console.log(\"Initializing OAuth client\");\n            oauthClient = createOAuthClient();\n            console.log(\"OAuth client initialized successfully\");\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Error initializing OAuth client:\", error);\n        return false;\n    }\n}\n// Add this function to update token store directly from values\nfunction updateTokenStoreFromValues(accessToken, realmId, refreshToken, tokenExpiry) {\n    try {\n        debugLog(\"Directly updating token store with provided values\");\n        // Update the token store directly\n        tokenStore.accessToken = accessToken;\n        tokenStore.realmId = realmId;\n        if (refreshToken) {\n            tokenStore.refreshToken = refreshToken;\n        }\n        if (tokenExpiry) {\n            tokenStore.tokenExpiry = tokenExpiry;\n        }\n        debugLog(\"Token store updated with values:\", {\n            hasToken: !!tokenStore.accessToken,\n            hasRealmId: !!tokenStore.realmId,\n            hasRefreshToken: !!tokenStore.refreshToken,\n            tokenExpiry: tokenStore.tokenExpiry ? new Date(tokenStore.tokenExpiry).toISOString() : \"none\"\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Error updating token store from values:\", error);\n        return false;\n    }\n}\n// Alternative method to fetch invoices with a more direct approach\nasync function fetchInvoicesDirectly() {\n    console.error(\"⭐ Starting direct invoice fetch with alternative method\");\n    try {\n        // First, verify we can get stored tokens\n        const tokens = getStoredToken();\n        if (!tokens || !tokens.accessToken || !tokens.realmId) {\n            console.error(\"⭐ No valid tokens for direct invoice fetch\");\n            throw new Error(\"QuickBooks authentication required. Please connect your account.\");\n        }\n        // We'll set up a fresh OAuthClient instance specifically for this request\n        const oauthClientForRequest = new (intuit_oauth__WEBPACK_IMPORTED_MODULE_0___default())({\n            clientId: process.env.QUICKBOOKS_CLIENT_ID,\n            clientSecret: process.env.QUICKBOOKS_CLIENT_SECRET,\n            environment: \"sandbox\",\n            redirectUri: getRedirectUri(),\n            logging: true\n        });\n        // Set the tokens on the client\n        oauthClientForRequest.setToken({\n            realmId: tokens.realmId,\n            token_type: \"bearer\",\n            access_token: tokens.accessToken,\n            refresh_token: tokens.refreshToken || \"\",\n            expires_in: tokens.tokenExpiry ? Math.floor((tokens.tokenExpiry - Date.now()) / 1000) : 3600\n        });\n        console.error(\"⭐ Attempting direct invoice API call\");\n        // Make a direct API call (not using node-quickbooks)\n        return new Promise((resolve, reject)=>{\n            try {\n                const url = `https://sandbox-quickbooks.api.intuit.com/v3/company/${tokens.realmId}/query`;\n                const headers = {\n                    \"Authorization\": `Bearer ${tokens.accessToken}`,\n                    \"Accept\": \"application/json\",\n                    \"Content-Type\": \"application/text\"\n                };\n                // Use a simpler query to minimize possible format issues\n                const query = \"SELECT * FROM Invoice\";\n                // Make the API call\n                oauthClientForRequest.makeApiCall({\n                    url: url,\n                    method: \"POST\",\n                    headers: headers,\n                    body: query\n                }, (err, response)=>{\n                    if (err) {\n                        console.error(\"⭐ Direct API call error:\", err);\n                        return reject(err);\n                    }\n                    try {\n                        // Log the entire response for debugging\n                        console.error(\"⭐ Direct API call response:\", response);\n                        if (typeof response === \"string\") {\n                            response = JSON.parse(response);\n                        }\n                        // Extract invoices data\n                        if (response && response.QueryResponse && Array.isArray(response.QueryResponse.Invoice)) {\n                            console.error(`⭐ Successfully found ${response.QueryResponse.Invoice.length} invoices directly`);\n                            return resolve(response.QueryResponse.Invoice);\n                        } else {\n                            // If the response doesn't match expected format, try to extract useful data\n                            console.error(\"⭐ Unexpected response format:\", response);\n                            // If there's any data that can be used, return it\n                            if (response && typeof response === \"object\") {\n                                if (Array.isArray(response)) {\n                                    return resolve(response);\n                                } else if (response.QueryResponse) {\n                                    return resolve([\n                                        response.QueryResponse\n                                    ]);\n                                }\n                            }\n                            return reject(new Error(\"Invalid response format from QuickBooks API\"));\n                        }\n                    } catch (parseError) {\n                        console.error(\"⭐ Error parsing direct API response:\", parseError);\n                        return reject(parseError);\n                    }\n                });\n            } catch (apiError) {\n                console.error(\"⭐ Error making direct API call:\", apiError);\n                return reject(apiError);\n            }\n        });\n    } catch (error) {\n        console.error(\"⭐ Top-level error in direct invoice fetch:\", error);\n        throw error;\n    }\n}\n// Ultra minimal API call for QuickBooks invoices (third approach)\nasync function fetchInvoicesMicroMethod() {\n    console.error(\"⭐ Starting MICRO invoice fetch with bare minimum approach\");\n    try {\n        // Get tokens directly from memory store first for speed\n        const tokens = tokenStore.accessToken && tokenStore.realmId ? {\n            accessToken: tokenStore.accessToken,\n            realmId: tokenStore.realmId\n        } : getStoredToken();\n        if (!tokens || !tokens.accessToken || !tokens.realmId) {\n            console.error(\"⭐ No valid tokens for micro invoice fetch\");\n            throw new Error(\"Authentication required\");\n        }\n        console.error(\"⭐ Micro method: Using minimal axios-like fetch with bare API call\");\n        // Create a promise with a short timeout\n        return new Promise((resolve, reject)=>{\n            // Create a timeout that's much shorter (15 seconds)\n            const timeoutId = setTimeout(()=>{\n                console.error(\"⭐ Micro method: Request timed out after 15 seconds\");\n                reject(new Error(\"Micro method request timed out after 15 seconds\"));\n            }, 15000);\n            try {\n                // Using the fetch API directly instead of the OAuthClient or node-quickbooks\n                const url = `https://sandbox-quickbooks.api.intuit.com/v3/company/${tokens.realmId}/query?query=select%20%2A%20from%20Invoice%20MAXRESULTS%205`;\n                console.error(\"⭐ Micro method: Calling API directly at URL:\", url);\n                fetch(url, {\n                    method: \"GET\",\n                    headers: {\n                        \"Authorization\": `Bearer ${tokens.accessToken}`,\n                        \"Accept\": \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                    }\n                }).then((response)=>{\n                    console.error(\"⭐ Micro method: Received response with status:\", response.status);\n                    if (!response.ok) {\n                        throw new Error(`API responded with status: ${response.status}`);\n                    }\n                    return response.json();\n                }).then((data)=>{\n                    console.error(\"⭐ Micro method: Successfully parsed response JSON\");\n                    clearTimeout(timeoutId);\n                    // Extract invoice data from response\n                    if (data && data.QueryResponse && Array.isArray(data.QueryResponse.Invoice)) {\n                        console.error(`⭐ Micro method: Found ${data.QueryResponse.Invoice.length} invoices`);\n                        resolve(data.QueryResponse.Invoice);\n                    } else {\n                        console.error(\"⭐ Micro method: Response does not contain invoice array:\", data);\n                        // If we at least got data but not in the expected format, return an empty array\n                        // rather than failing - this helps the UI handle the case better\n                        resolve([]);\n                    }\n                }).catch((error)=>{\n                    console.error(\"⭐ Micro method: Fetch error:\", error);\n                    clearTimeout(timeoutId);\n                    reject(error);\n                });\n            } catch (error) {\n                console.error(\"⭐ Micro method: Exception during fetch setup:\", error);\n                clearTimeout(timeoutId);\n                reject(error);\n            }\n        });\n    } catch (error) {\n        console.error(\"⭐ Micro method: Top-level error:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/quickbooks/api.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/ajv","vendor-chunks/psl","vendor-chunks/sshpk","vendor-chunks/bluebird","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/readable-stream","vendor-chunks/node-quickbooks","vendor-chunks/request","vendor-chunks/winston","vendor-chunks/underscore","vendor-chunks/tweetnacl","vendor-chunks/fast-xml-parser","vendor-chunks/semver","vendor-chunks/uri-js","vendor-chunks/tough-cookie","vendor-chunks/jsbn","vendor-chunks/color","vendor-chunks/bcrypt-pbkdf","vendor-chunks/async","vendor-chunks/http-signature","vendor-chunks/intuit-oauth","vendor-chunks/logform","vendor-chunks/jsonwebtoken","vendor-chunks/safe-stable-stringify","vendor-chunks/@colors","vendor-chunks/ecc-jsbn","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/lodash.includes","vendor-chunks/qs","vendor-chunks/jsprim","vendor-chunks/get-intrinsic","vendor-chunks/form-data","vendor-chunks/aws4","vendor-chunks/asn1","vendor-chunks/fecha","vendor-chunks/json-schema","vendor-chunks/query-string","vendor-chunks/verror","vendor-chunks/winston-transport","vendor-chunks/uuid","vendor-chunks/string_decoder","vendor-chunks/color-name","vendor-chunks/asynckit","vendor-chunks/date-fns","vendor-chunks/jws","vendor-chunks/har-schema","vendor-chunks/@dabh","vendor-chunks/tunnel-agent","vendor-chunks/lodash.once","vendor-chunks/jwa","vendor-chunks/color-string","vendor-chunks/lodash.isinteger","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/assert-plus","vendor-chunks/combined-stream","vendor-chunks/extsprintf","vendor-chunks/forever-agent","vendor-chunks/aws-sign2","vendor-chunks/oauth-sign","vendor-chunks/strnum","vendor-chunks/extend","vendor-chunks/mime-types","vendor-chunks/lodash.isplainobject","vendor-chunks/stack-trace","vendor-chunks/proxy-from-env","vendor-chunks/triple-beam","vendor-chunks/ms","vendor-chunks/request-debug","vendor-chunks/csrf","vendor-chunks/supports-color","vendor-chunks/core-util-is","vendor-chunks/has-symbols","vendor-chunks/kuler","vendor-chunks/decode-uri-component","vendor-chunks/json-schema-traverse","vendor-chunks/delayed-stream","vendor-chunks/har-validator","vendor-chunks/lodash.isstring","vendor-chunks/safer-buffer","vendor-chunks/random-bytes","vendor-chunks/function-bind","vendor-chunks/lodash.isnumber","vendor-chunks/uid-safe","vendor-chunks/caseless","vendor-chunks/fast-json-stable-stringify","vendor-chunks/lodash.isboolean","vendor-chunks/safe-buffer","vendor-chunks/rsa-pem-from-mod-exp","vendor-chunks/es-set-tostringtag","vendor-chunks/fast-deep-equal","vendor-chunks/performance-now","vendor-chunks/tsscmp","vendor-chunks/call-bind-apply-helpers","vendor-chunks/get-proto","vendor-chunks/buffer-equal-constant-time","vendor-chunks/one-time","vendor-chunks/fn.name","vendor-chunks/dunder-proto","vendor-chunks/json-stringify-safe","vendor-chunks/is-typedarray","vendor-chunks/rndm","vendor-chunks/enabled","vendor-chunks/math-intrinsics","vendor-chunks/@babel","vendor-chunks/colorspace","vendor-chunks/is-stream","vendor-chunks/simple-swizzle","vendor-chunks/isstream","vendor-chunks/split-on-first","vendor-chunks/es-errors","vendor-chunks/text-hex","vendor-chunks/filter-obj","vendor-chunks/has-flag","vendor-chunks/is-arrayish","vendor-chunks/es-define-property","vendor-chunks/gopd","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/strict-uri-encode","vendor-chunks/util-deprecate","vendor-chunks/atob","vendor-chunks/stringify-clone","vendor-chunks/es-object-atoms","vendor-chunks/ai","vendor-chunks/formdata-node","vendor-chunks/nanoid","vendor-chunks/openai","vendor-chunks/form-data-encoder","vendor-chunks/whatwg-url","vendor-chunks/agentkeepalive","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/eventsource-parser","vendor-chunks/webidl-conversions","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Fgroq%2Froute&page=%2Fapi%2Fchat%2Fgroq%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Fgroq%2Froute.ts&appDir=C%3A%5CInvoiveManagment%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CInvoiveManagment&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();