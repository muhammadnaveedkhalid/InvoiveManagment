"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/winston";
exports.ids = ["vendor-chunks/winston"];
exports.modules = {

/***/ "(ssr)/./node_modules/winston/lib/winston.js":
/*!*********************************************!*\
  !*** ./node_modules/winston/lib/winston.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * winston.js: Top-level include defining Winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst logform = __webpack_require__(/*! logform */ \"(ssr)/./node_modules/logform/index.js\");\nconst { warn } = __webpack_require__(/*! ./winston/common */ \"(ssr)/./node_modules/winston/lib/winston/common.js\");\n/**\n * Expose version. Use `require` method for `webpack` support.\n * @type {string}\n */ exports.version = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/winston/package.json\").version;\n/**\n * Include transports defined by default by winston\n * @type {Array}\n */ exports.transports = __webpack_require__(/*! ./winston/transports */ \"(ssr)/./node_modules/winston/lib/winston/transports/index.js\");\n/**\n * Expose utility methods\n * @type {Object}\n */ exports.config = __webpack_require__(/*! ./winston/config */ \"(ssr)/./node_modules/winston/lib/winston/config/index.js\");\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */ exports.addColors = logform.levels;\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */ exports.format = logform.format;\n/**\n * Expose core Logging-related prototypes.\n * @type {function}\n */ exports.createLogger = __webpack_require__(/*! ./winston/create-logger */ \"(ssr)/./node_modules/winston/lib/winston/create-logger.js\");\n/**\n * Expose core Logging-related prototypes.\n * @type {function}\n */ exports.Logger = __webpack_require__(/*! ./winston/logger */ \"(ssr)/./node_modules/winston/lib/winston/logger.js\");\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */ exports.ExceptionHandler = __webpack_require__(/*! ./winston/exception-handler */ \"(ssr)/./node_modules/winston/lib/winston/exception-handler.js\");\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */ exports.RejectionHandler = __webpack_require__(/*! ./winston/rejection-handler */ \"(ssr)/./node_modules/winston/lib/winston/rejection-handler.js\");\n/**\n * Expose core Logging-related prototypes.\n * @type {Container}\n */ exports.Container = __webpack_require__(/*! ./winston/container */ \"(ssr)/./node_modules/winston/lib/winston/container.js\");\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */ exports.Transport = __webpack_require__(/*! winston-transport */ \"(ssr)/./node_modules/winston-transport/index.js\");\n/**\n * We create and expose a default `Container` to `winston.loggers` so that the\n * programmer may manage multiple `winston.Logger` instances without any\n * additional overhead.\n * @example\n *   // some-file1.js\n *   const logger = require('winston').loggers.get('something');\n *\n *   // some-file2.js\n *   const logger = require('winston').loggers.get('something');\n */ exports.loggers = new exports.Container();\n/**\n * We create and expose a 'defaultLogger' so that the programmer may do the\n * following without the need to create an instance of winston.Logger directly:\n * @example\n *   const winston = require('winston');\n *   winston.log('info', 'some message');\n *   winston.error('some error');\n */ const defaultLogger = exports.createLogger();\n// Pass through the target methods onto `winston.\nObject.keys(exports.config.npm.levels).concat([\n    \"log\",\n    \"query\",\n    \"stream\",\n    \"add\",\n    \"remove\",\n    \"clear\",\n    \"profile\",\n    \"startTimer\",\n    \"handleExceptions\",\n    \"unhandleExceptions\",\n    \"handleRejections\",\n    \"unhandleRejections\",\n    \"configure\",\n    \"child\"\n]).forEach((method)=>exports[method] = (...args)=>defaultLogger[method](...args));\n/**\n * Define getter / setter for the default logger level which need to be exposed\n * by winston.\n * @type {string}\n */ Object.defineProperty(exports, \"level\", ({\n    get () {\n        return defaultLogger.level;\n    },\n    set (val) {\n        defaultLogger.level = val;\n    }\n}));\n/**\n * Define getter for `exceptions` which replaces `handleExceptions` and\n * `unhandleExceptions`.\n * @type {Object}\n */ Object.defineProperty(exports, \"exceptions\", ({\n    get () {\n        return defaultLogger.exceptions;\n    }\n}));\n/**\n * Define getter for `rejections` which replaces `handleRejections` and\n * `unhandleRejections`.\n * @type {Object}\n */ Object.defineProperty(exports, \"rejections\", ({\n    get () {\n        return defaultLogger.rejections;\n    }\n}));\n/**\n * Define getters / setters for appropriate properties of the default logger\n * which need to be exposed by winston.\n * @type {Logger}\n */ [\n    \"exitOnError\"\n].forEach((prop)=>{\n    Object.defineProperty(exports, prop, {\n        get () {\n            return defaultLogger[prop];\n        },\n        set (val) {\n            defaultLogger[prop] = val;\n        }\n    });\n});\n/**\n * The default transports and exceptionHandlers for the default winston logger.\n * @type {Object}\n */ Object.defineProperty(exports, \"default\", ({\n    get () {\n        return {\n            exceptionHandlers: defaultLogger.exceptionHandlers,\n            rejectionHandlers: defaultLogger.rejectionHandlers,\n            transports: defaultLogger.transports\n        };\n    }\n}));\n// Have friendlier breakage notices for properties that were exposed by default\n// on winston < 3.0.\nwarn.deprecated(exports, \"setLevels\");\nwarn.forFunctions(exports, \"useFormat\", [\n    \"cli\"\n]);\nwarn.forProperties(exports, \"useFormat\", [\n    \"padLevels\",\n    \"stripColors\"\n]);\nwarn.forFunctions(exports, \"deprecated\", [\n    \"addRewriter\",\n    \"addFilter\",\n    \"clone\",\n    \"extend\"\n]);\nwarn.forProperties(exports, \"deprecated\", [\n    \"emitErrs\",\n    \"levelLength\"\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/common.js":
/*!****************************************************!*\
  !*** ./node_modules/winston/lib/winston/common.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * common.js: Internal helper and utility functions for winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst { format } = __webpack_require__(/*! util */ \"util\");\n/**\n * Set of simple deprecation notices and a way to expose them for a set of\n * properties.\n * @type {Object}\n * @private\n */ exports.warn = {\n    deprecated (prop) {\n        return ()=>{\n            throw new Error(format(\"{ %s } was removed in winston@3.0.0.\", prop));\n        };\n    },\n    useFormat (prop) {\n        return ()=>{\n            throw new Error([\n                format(\"{ %s } was removed in winston@3.0.0.\", prop),\n                \"Use a custom winston.format = winston.format(function) instead.\"\n            ].join(\"\\n\"));\n        };\n    },\n    forFunctions (obj, type, props) {\n        props.forEach((prop)=>{\n            obj[prop] = exports.warn[type](prop);\n        });\n    },\n    forProperties (obj, type, props) {\n        props.forEach((prop)=>{\n            const notice = exports.warn[type](prop);\n            Object.defineProperty(obj, prop, {\n                get: notice,\n                set: notice\n            });\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FFRDtBQUVBLE1BQU0sRUFBRUEsTUFBTSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTNCOzs7OztDQUtDLEdBQ0RDLFlBQVksR0FBRztJQUNiRSxZQUFXQyxJQUFJO1FBQ2IsT0FBTztZQUNMLE1BQU0sSUFBSUMsTUFBTU4sT0FBTyx3Q0FBd0NLO1FBQ2pFO0lBQ0Y7SUFDQUUsV0FBVUYsSUFBSTtRQUNaLE9BQU87WUFDTCxNQUFNLElBQUlDLE1BQU07Z0JBQ2ROLE9BQU8sd0NBQXdDSztnQkFDL0M7YUFDRCxDQUFDRyxJQUFJLENBQUM7UUFDVDtJQUNGO0lBQ0FDLGNBQWFDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxLQUFLO1FBQzNCQSxNQUFNQyxPQUFPLENBQUNSLENBQUFBO1lBQ1pLLEdBQUcsQ0FBQ0wsS0FBSyxHQUFHSCxRQUFRQyxJQUFJLENBQUNRLEtBQUssQ0FBQ047UUFDakM7SUFDRjtJQUNBUyxlQUFjSixHQUFHLEVBQUVDLElBQUksRUFBRUMsS0FBSztRQUM1QkEsTUFBTUMsT0FBTyxDQUFDUixDQUFBQTtZQUNaLE1BQU1VLFNBQVNiLFFBQVFDLElBQUksQ0FBQ1EsS0FBSyxDQUFDTjtZQUNsQ1csT0FBT0MsY0FBYyxDQUFDUCxLQUFLTCxNQUFNO2dCQUMvQmEsS0FBS0g7Z0JBQ0xJLEtBQUtKO1lBQ1A7UUFDRjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy93aW5zdG9uL2xpYi93aW5zdG9uL2NvbW1vbi5qcz8xNTc1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogY29tbW9uLmpzOiBJbnRlcm5hbCBoZWxwZXIgYW5kIHV0aWxpdHkgZnVuY3Rpb25zIGZvciB3aW5zdG9uLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgZm9ybWF0IH0gPSByZXF1aXJlKCd1dGlsJyk7XG5cbi8qKlxuICogU2V0IG9mIHNpbXBsZSBkZXByZWNhdGlvbiBub3RpY2VzIGFuZCBhIHdheSB0byBleHBvc2UgdGhlbSBmb3IgYSBzZXQgb2ZcbiAqIHByb3BlcnRpZXMuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy53YXJuID0ge1xuICBkZXByZWNhdGVkKHByb3ApIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdCgneyAlcyB9IHdhcyByZW1vdmVkIGluIHdpbnN0b25AMy4wLjAuJywgcHJvcCkpO1xuICAgIH07XG4gIH0sXG4gIHVzZUZvcm1hdChwcm9wKSB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihbXG4gICAgICAgIGZvcm1hdCgneyAlcyB9IHdhcyByZW1vdmVkIGluIHdpbnN0b25AMy4wLjAuJywgcHJvcCksXG4gICAgICAgICdVc2UgYSBjdXN0b20gd2luc3Rvbi5mb3JtYXQgPSB3aW5zdG9uLmZvcm1hdChmdW5jdGlvbikgaW5zdGVhZC4nXG4gICAgICBdLmpvaW4oJ1xcbicpKTtcbiAgICB9O1xuICB9LFxuICBmb3JGdW5jdGlvbnMob2JqLCB0eXBlLCBwcm9wcykge1xuICAgIHByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBvYmpbcHJvcF0gPSBleHBvcnRzLndhcm5bdHlwZV0ocHJvcCk7XG4gICAgfSk7XG4gIH0sXG4gIGZvclByb3BlcnRpZXMob2JqLCB0eXBlLCBwcm9wcykge1xuICAgIHByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBjb25zdCBub3RpY2UgPSBleHBvcnRzLndhcm5bdHlwZV0ocHJvcCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB7XG4gICAgICAgIGdldDogbm90aWNlLFxuICAgICAgICBzZXQ6IG5vdGljZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiZm9ybWF0IiwicmVxdWlyZSIsImV4cG9ydHMiLCJ3YXJuIiwiZGVwcmVjYXRlZCIsInByb3AiLCJFcnJvciIsInVzZUZvcm1hdCIsImpvaW4iLCJmb3JGdW5jdGlvbnMiLCJvYmoiLCJ0eXBlIiwicHJvcHMiLCJmb3JFYWNoIiwiZm9yUHJvcGVydGllcyIsIm5vdGljZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/config/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/winston/lib/winston/config/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * index.js: Default settings for all levels that winston knows about.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst logform = __webpack_require__(/*! logform */ \"(ssr)/./node_modules/logform/index.js\");\nconst { configs } = __webpack_require__(/*! triple-beam */ \"(ssr)/./node_modules/triple-beam/index.js\");\n/**\n * Export config set for the CLI.\n * @type {Object}\n */ exports.cli = logform.levels(configs.cli);\n/**\n * Export config set for npm.\n * @type {Object}\n */ exports.npm = logform.levels(configs.npm);\n/**\n * Export config set for the syslog.\n * @type {Object}\n */ exports.syslog = logform.levels(configs.syslog);\n/**\n * Hoist addColors from logform where it was refactored into in winston@3.\n * @type {Object}\n */ exports.addColors = logform.levels;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9jb25maWcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FFRDtBQUVBLE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUdELG1CQUFPQSxDQUFDO0FBRTVCOzs7Q0FHQyxHQUNERSxXQUFXLEdBQUdILFFBQVFLLE1BQU0sQ0FBQ0gsUUFBUUUsR0FBRztBQUV4Qzs7O0NBR0MsR0FDREQsV0FBVyxHQUFHSCxRQUFRSyxNQUFNLENBQUNILFFBQVFJLEdBQUc7QUFFeEM7OztDQUdDLEdBQ0RILGNBQWMsR0FBR0gsUUFBUUssTUFBTSxDQUFDSCxRQUFRSyxNQUFNO0FBRTlDOzs7Q0FHQyxHQUNESixpQkFBaUIsR0FBR0gsUUFBUUssTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vbGliL3dpbnN0b24vY29uZmlnL2luZGV4LmpzPzcwZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBpbmRleC5qczogRGVmYXVsdCBzZXR0aW5ncyBmb3IgYWxsIGxldmVscyB0aGF0IHdpbnN0b24ga25vd3MgYWJvdXQuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgbG9nZm9ybSA9IHJlcXVpcmUoJ2xvZ2Zvcm0nKTtcbmNvbnN0IHsgY29uZmlncyB9ID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKTtcblxuLyoqXG4gKiBFeHBvcnQgY29uZmlnIHNldCBmb3IgdGhlIENMSS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuY2xpID0gbG9nZm9ybS5sZXZlbHMoY29uZmlncy5jbGkpO1xuXG4vKipcbiAqIEV4cG9ydCBjb25maWcgc2V0IGZvciBucG0uXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLm5wbSA9IGxvZ2Zvcm0ubGV2ZWxzKGNvbmZpZ3MubnBtKTtcblxuLyoqXG4gKiBFeHBvcnQgY29uZmlnIHNldCBmb3IgdGhlIHN5c2xvZy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuc3lzbG9nID0gbG9nZm9ybS5sZXZlbHMoY29uZmlncy5zeXNsb2cpO1xuXG4vKipcbiAqIEhvaXN0IGFkZENvbG9ycyBmcm9tIGxvZ2Zvcm0gd2hlcmUgaXQgd2FzIHJlZmFjdG9yZWQgaW50byBpbiB3aW5zdG9uQDMuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLmFkZENvbG9ycyA9IGxvZ2Zvcm0ubGV2ZWxzO1xuIl0sIm5hbWVzIjpbImxvZ2Zvcm0iLCJyZXF1aXJlIiwiY29uZmlncyIsImV4cG9ydHMiLCJjbGkiLCJsZXZlbHMiLCJucG0iLCJzeXNsb2ciLCJhZGRDb2xvcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/config/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/container.js":
/*!*******************************************************!*\
  !*** ./node_modules/winston/lib/winston/container.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst createLogger = __webpack_require__(/*! ./create-logger */ \"(ssr)/./node_modules/winston/lib/winston/create-logger.js\");\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */ module.exports = class Container {\n    /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */ constructor(options = {}){\n        this.loggers = new Map();\n        this.options = options;\n    }\n    /**\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */ add(id, options) {\n        if (!this.loggers.has(id)) {\n            // Remark: Simple shallow clone for configuration options in case we pass\n            // in instantiated protoypal objects\n            options = Object.assign({}, options || this.options);\n            const existing = options.transports || this.options.transports;\n            // Remark: Make sure if we have an array of transports we slice it to\n            // make copies of those references.\n            if (existing) {\n                options.transports = Array.isArray(existing) ? existing.slice() : [\n                    existing\n                ];\n            } else {\n                options.transports = [];\n            }\n            const logger = createLogger(options);\n            logger.on(\"close\", ()=>this._delete(id));\n            this.loggers.set(id, logger);\n        }\n        return this.loggers.get(id);\n    }\n    /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If\n   * an instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */ get(id, options) {\n        return this.add(id, options);\n    }\n    /**\n   * Check if the container has a logger with the id.\n   * @param {?string} id - The id of the Logger instance to find.\n   * @returns {boolean} - Boolean value indicating if this instance has a\n   * logger with the specified `id`.\n   */ has(id) {\n        return !!this.loggers.has(id);\n    }\n    /**\n   * Closes a `Logger` instance with the specified `id` if it exists.\n   * If no `id` is supplied then all Loggers are closed.\n   * @param {?string} id - The id of the Logger instance to close.\n   * @returns {undefined}\n   */ close(id) {\n        if (id) {\n            return this._removeLogger(id);\n        }\n        this.loggers.forEach((val, key)=>this._removeLogger(key));\n    }\n    /**\n   * Remove a logger based on the id.\n   * @param {!string} id - The id of the logger to remove.\n   * @returns {undefined}\n   * @private\n   */ _removeLogger(id) {\n        if (!this.loggers.has(id)) {\n            return;\n        }\n        const logger = this.loggers.get(id);\n        logger.close();\n        this._delete(id);\n    }\n    /**\n   * Deletes a `Logger` instance with the specified `id`.\n   * @param {!string} id - The id of the Logger instance to delete from\n   * container.\n   * @returns {undefined}\n   * @private\n   */ _delete(id) {\n        this.loggers.delete(id);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9jb250YWluZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FFRDtBQUVBLE1BQU1BLGVBQWVDLG1CQUFPQSxDQUFDO0FBRTdCOzs7Q0FHQyxHQUNEQyxPQUFPQyxPQUFPLEdBQUcsTUFBTUM7SUFDckI7Ozs7R0FJQyxHQUNEQyxZQUFZQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQ3hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDO1FBQ25CLElBQUksQ0FBQ0YsT0FBTyxHQUFHQTtJQUNqQjtJQUVBOzs7Ozs7R0FNQyxHQUNERyxJQUFJQyxFQUFFLEVBQUVKLE9BQU8sRUFBRTtRQUNmLElBQUksQ0FBQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDRCxLQUFLO1lBQ3pCLHlFQUF5RTtZQUN6RSxvQ0FBb0M7WUFDcENKLFVBQVVNLE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdQLFdBQVcsSUFBSSxDQUFDQSxPQUFPO1lBQ25ELE1BQU1RLFdBQVdSLFFBQVFTLFVBQVUsSUFBSSxJQUFJLENBQUNULE9BQU8sQ0FBQ1MsVUFBVTtZQUU5RCxxRUFBcUU7WUFDckUsbUNBQW1DO1lBQ25DLElBQUlELFVBQVU7Z0JBQ1pSLFFBQVFTLFVBQVUsR0FBR0MsTUFBTUMsT0FBTyxDQUFDSCxZQUFZQSxTQUFTSSxLQUFLLEtBQUs7b0JBQUNKO2lCQUFTO1lBQzlFLE9BQU87Z0JBQ0xSLFFBQVFTLFVBQVUsR0FBRyxFQUFFO1lBQ3pCO1lBRUEsTUFBTUksU0FBU25CLGFBQWFNO1lBQzVCYSxPQUFPQyxFQUFFLENBQUMsU0FBUyxJQUFNLElBQUksQ0FBQ0MsT0FBTyxDQUFDWDtZQUN0QyxJQUFJLENBQUNILE9BQU8sQ0FBQ2UsR0FBRyxDQUFDWixJQUFJUztRQUN2QjtRQUVBLE9BQU8sSUFBSSxDQUFDWixPQUFPLENBQUNnQixHQUFHLENBQUNiO0lBQzFCO0lBRUE7Ozs7OztHQU1DLEdBQ0RhLElBQUliLEVBQUUsRUFBRUosT0FBTyxFQUFFO1FBQ2YsT0FBTyxJQUFJLENBQUNHLEdBQUcsQ0FBQ0MsSUFBSUo7SUFDdEI7SUFFQTs7Ozs7R0FLQyxHQUNESyxJQUFJRCxFQUFFLEVBQUU7UUFDTixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksR0FBRyxDQUFDRDtJQUM1QjtJQUVBOzs7OztHQUtDLEdBQ0RjLE1BQU1kLEVBQUUsRUFBRTtRQUNSLElBQUlBLElBQUk7WUFDTixPQUFPLElBQUksQ0FBQ2UsYUFBYSxDQUFDZjtRQUM1QjtRQUVBLElBQUksQ0FBQ0gsT0FBTyxDQUFDbUIsT0FBTyxDQUFDLENBQUNDLEtBQUtDLE1BQVEsSUFBSSxDQUFDSCxhQUFhLENBQUNHO0lBQ3hEO0lBRUE7Ozs7O0dBS0MsR0FDREgsY0FBY2YsRUFBRSxFQUFFO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksR0FBRyxDQUFDRCxLQUFLO1lBQ3pCO1FBQ0Y7UUFFQSxNQUFNUyxTQUFTLElBQUksQ0FBQ1osT0FBTyxDQUFDZ0IsR0FBRyxDQUFDYjtRQUNoQ1MsT0FBT0ssS0FBSztRQUNaLElBQUksQ0FBQ0gsT0FBTyxDQUFDWDtJQUNmO0lBRUE7Ozs7OztHQU1DLEdBQ0RXLFFBQVFYLEVBQUUsRUFBRTtRQUNWLElBQUksQ0FBQ0gsT0FBTyxDQUFDc0IsTUFBTSxDQUFDbkI7SUFDdEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vbGliL3dpbnN0b24vY29udGFpbmVyLmpzPzRjZjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBjb250YWluZXIuanM6IEludmVyc2lvbiBvZiBjb250cm9sIGNvbnRhaW5lciBmb3Igd2luc3RvbiBsb2dnZXIgaW5zdGFuY2VzLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNyZWF0ZUxvZ2dlciA9IHJlcXVpcmUoJy4vY3JlYXRlLWxvZ2dlcicpO1xuXG4vKipcbiAqIEludmVyc2lvbiBvZiBjb250cm9sIGNvbnRhaW5lciBmb3Igd2luc3RvbiBsb2dnZXIgaW5zdGFuY2VzLlxuICogQHR5cGUge0NvbnRhaW5lcn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBDb250YWluZXIge1xuICAvKipcbiAgICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBDb250YWluZXIgb2JqZWN0IHJlc3BvbnNpYmxlIGZvciBtYW5hZ2luZyBhXG4gICAqIHNldCBvZiBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlcyBiYXNlZCBvbiBzdHJpbmcgaWRzLlxuICAgKiBAcGFyYW0geyFPYmplY3R9IFtvcHRpb25zPXt9XSAtIERlZmF1bHQgcGFzcy10aHJ1IG9wdGlvbnMgZm9yIExvZ2dlcnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmxvZ2dlcnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlIGZvciB0aGUgc3BlY2lmaWVkIGBpZGAuIElmIGFuXG4gICAqIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0LCBvbmUgaXMgY3JlYXRlZC5cbiAgICogQHBhcmFtIHshc3RyaW5nfSBpZCAtIFRoZSBpZCBvZiB0aGUgTG9nZ2VyIHRvIGdldC5cbiAgICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxuICAgKiBAcmV0dXJucyB7TG9nZ2VyfSAtIEEgY29uZmlndXJlZCBMb2dnZXIgaW5zdGFuY2Ugd2l0aCBhIHNwZWNpZmllZCBpZC5cbiAgICovXG4gIGFkZChpZCwgb3B0aW9ucykge1xuICAgIGlmICghdGhpcy5sb2dnZXJzLmhhcyhpZCkpIHtcbiAgICAgIC8vIFJlbWFyazogU2ltcGxlIHNoYWxsb3cgY2xvbmUgZm9yIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBpbiBjYXNlIHdlIHBhc3NcbiAgICAgIC8vIGluIGluc3RhbnRpYXRlZCBwcm90b3lwYWwgb2JqZWN0c1xuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMgfHwgdGhpcy5vcHRpb25zKTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gb3B0aW9ucy50cmFuc3BvcnRzIHx8IHRoaXMub3B0aW9ucy50cmFuc3BvcnRzO1xuXG4gICAgICAvLyBSZW1hcms6IE1ha2Ugc3VyZSBpZiB3ZSBoYXZlIGFuIGFycmF5IG9mIHRyYW5zcG9ydHMgd2Ugc2xpY2UgaXQgdG9cbiAgICAgIC8vIG1ha2UgY29waWVzIG9mIHRob3NlIHJlZmVyZW5jZXMuXG4gICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgb3B0aW9ucy50cmFuc3BvcnRzID0gQXJyYXkuaXNBcnJheShleGlzdGluZykgPyBleGlzdGluZy5zbGljZSgpIDogW2V4aXN0aW5nXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMudHJhbnNwb3J0cyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIob3B0aW9ucyk7XG4gICAgICBsb2dnZXIub24oJ2Nsb3NlJywgKCkgPT4gdGhpcy5fZGVsZXRlKGlkKSk7XG4gICAgICB0aGlzLmxvZ2dlcnMuc2V0KGlkLCBsb2dnZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvZ2dlcnMuZ2V0KGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyZWl2ZXMgYSBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlIGZvciB0aGUgc3BlY2lmaWVkIGBpZGAuIElmXG4gICAqIGFuIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0LCBvbmUgaXMgY3JlYXRlZC5cbiAgICogQHBhcmFtIHshc3RyaW5nfSBpZCAtIFRoZSBpZCBvZiB0aGUgTG9nZ2VyIHRvIGdldC5cbiAgICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxuICAgKiBAcmV0dXJucyB7TG9nZ2VyfSAtIEEgY29uZmlndXJlZCBMb2dnZXIgaW5zdGFuY2Ugd2l0aCBhIHNwZWNpZmllZCBpZC5cbiAgICovXG4gIGdldChpZCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmFkZChpZCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGNvbnRhaW5lciBoYXMgYSBsb2dnZXIgd2l0aCB0aGUgaWQuXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIExvZ2dlciBpbnN0YW5jZSB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBCb29sZWFuIHZhbHVlIGluZGljYXRpbmcgaWYgdGhpcyBpbnN0YW5jZSBoYXMgYVxuICAgKiBsb2dnZXIgd2l0aCB0aGUgc3BlY2lmaWVkIGBpZGAuXG4gICAqL1xuICBoYXMoaWQpIHtcbiAgICByZXR1cm4gISF0aGlzLmxvZ2dlcnMuaGFzKGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYSBgTG9nZ2VyYCBpbnN0YW5jZSB3aXRoIHRoZSBzcGVjaWZpZWQgYGlkYCBpZiBpdCBleGlzdHMuXG4gICAqIElmIG5vIGBpZGAgaXMgc3VwcGxpZWQgdGhlbiBhbGwgTG9nZ2VycyBhcmUgY2xvc2VkLlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBMb2dnZXIgaW5zdGFuY2UgdG8gY2xvc2UuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqL1xuICBjbG9zZShpZCkge1xuICAgIGlmIChpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlbW92ZUxvZ2dlcihpZCk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXJzLmZvckVhY2goKHZhbCwga2V5KSA9PiB0aGlzLl9yZW1vdmVMb2dnZXIoa2V5KSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgbG9nZ2VyIGJhc2VkIG9uIHRoZSBpZC5cbiAgICogQHBhcmFtIHshc3RyaW5nfSBpZCAtIFRoZSBpZCBvZiB0aGUgbG9nZ2VyIHRvIHJlbW92ZS5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW1vdmVMb2dnZXIoaWQpIHtcbiAgICBpZiAoIXRoaXMubG9nZ2Vycy5oYXMoaWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbG9nZ2VyID0gdGhpcy5sb2dnZXJzLmdldChpZCk7XG4gICAgbG9nZ2VyLmNsb3NlKCk7XG4gICAgdGhpcy5fZGVsZXRlKGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGEgYExvZ2dlcmAgaW5zdGFuY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIGBpZGAuXG4gICAqIEBwYXJhbSB7IXN0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIExvZ2dlciBpbnN0YW5jZSB0byBkZWxldGUgZnJvbVxuICAgKiBjb250YWluZXIuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGVsZXRlKGlkKSB7XG4gICAgdGhpcy5sb2dnZXJzLmRlbGV0ZShpZCk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiY3JlYXRlTG9nZ2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJDb250YWluZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJsb2dnZXJzIiwiTWFwIiwiYWRkIiwiaWQiLCJoYXMiLCJPYmplY3QiLCJhc3NpZ24iLCJleGlzdGluZyIsInRyYW5zcG9ydHMiLCJBcnJheSIsImlzQXJyYXkiLCJzbGljZSIsImxvZ2dlciIsIm9uIiwiX2RlbGV0ZSIsInNldCIsImdldCIsImNsb3NlIiwiX3JlbW92ZUxvZ2dlciIsImZvckVhY2giLCJ2YWwiLCJrZXkiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/container.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/create-logger.js":
/*!***********************************************************!*\
  !*** ./node_modules/winston/lib/winston/create-logger.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * create-logger.js: Logger factory for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst { LEVEL } = __webpack_require__(/*! triple-beam */ \"(ssr)/./node_modules/triple-beam/index.js\");\nconst config = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/winston/lib/winston/config/index.js\");\nconst Logger = __webpack_require__(/*! ./logger */ \"(ssr)/./node_modules/winston/lib/winston/logger.js\");\nconst debug = __webpack_require__(/*! @dabh/diagnostics */ \"(ssr)/./node_modules/@dabh/diagnostics/node/index.js\")(\"winston:create-logger\");\nfunction isLevelEnabledFunctionName(level) {\n    return \"is\" + level.charAt(0).toUpperCase() + level.slice(1) + \"Enabled\";\n}\n/**\n * Create a new instance of a winston Logger. Creates a new\n * prototype for each instance.\n * @param {!Object} opts - Options for the created logger.\n * @returns {Logger} - A newly created logger instance.\n */ module.exports = function(opts = {}) {\n    //\n    // Default levels: npm\n    //\n    opts.levels = opts.levels || config.npm.levels;\n    /**\n   * DerivedLogger to attach the logs level methods.\n   * @type {DerivedLogger}\n   * @extends {Logger}\n   */ class DerivedLogger extends Logger {\n        /**\n     * Create a new class derived logger for which the levels can be attached to\n     * the prototype of. This is a V8 optimization that is well know to increase\n     * performance of prototype functions.\n     * @param {!Object} options - Options for the created logger.\n     */ constructor(options){\n            super(options);\n        }\n    }\n    const logger = new DerivedLogger(opts);\n    //\n    // Create the log level methods for the derived logger.\n    //\n    Object.keys(opts.levels).forEach(function(level) {\n        debug('Define prototype method for \"%s\"', level);\n        if (level === \"log\") {\n            // eslint-disable-next-line no-console\n            console.warn('Level \"log\" not defined: conflicts with the method \"log\". Use a different level name.');\n            return;\n        }\n        //\n        // Define prototype methods for each log level e.g.:\n        // logger.log('info', msg) implies these methods are defined:\n        // - logger.info(msg)\n        // - logger.isInfoEnabled()\n        //\n        // Remark: to support logger.child this **MUST** be a function\n        // so it'll always be called on the instance instead of a fixed\n        // place in the prototype chain.\n        //\n        DerivedLogger.prototype[level] = function(...args) {\n            // Prefer any instance scope, but default to \"root\" logger\n            const self = this || logger;\n            // Optimize the hot-path which is the single object.\n            if (args.length === 1) {\n                const [msg] = args;\n                const info = msg && msg.message && msg || {\n                    message: msg\n                };\n                info.level = info[LEVEL] = level;\n                self._addDefaultMeta(info);\n                self.write(info);\n                return this || logger;\n            }\n            // When provided nothing assume the empty string\n            if (args.length === 0) {\n                self.log(level, \"\");\n                return self;\n            }\n            // Otherwise build argument list which could potentially conform to\n            // either:\n            // . v3 API: log(obj)\n            // 2. v1/v2 API: log(level, msg, ... [string interpolate], [{metadata}], [callback])\n            return self.log(level, ...args);\n        };\n        DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function() {\n            return (this || logger).isLevelEnabled(level);\n        };\n    });\n    return logger;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9jcmVhdGUtbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBRUQ7QUFFQSxNQUFNLEVBQUVBLEtBQUssRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUMxQixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQztBQUN2QixNQUFNRyxRQUFRSCxtQkFBT0EsQ0FBQyxpRkFBcUI7QUFFM0MsU0FBU0ksMkJBQTJCQyxLQUFLO0lBQ3ZDLE9BQU8sT0FBT0EsTUFBTUMsTUFBTSxDQUFDLEdBQUdDLFdBQVcsS0FBS0YsTUFBTUcsS0FBSyxDQUFDLEtBQUs7QUFDakU7QUFFQTs7Ozs7Q0FLQyxHQUNEQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsRUFBRTtJQUNGLHNCQUFzQjtJQUN0QixFQUFFO0lBQ0ZBLEtBQUtDLE1BQU0sR0FBR0QsS0FBS0MsTUFBTSxJQUFJWCxPQUFPWSxHQUFHLENBQUNELE1BQU07SUFFOUM7Ozs7R0FJQyxHQUNELE1BQU1FLHNCQUFzQlo7UUFDMUI7Ozs7O0tBS0MsR0FDRGEsWUFBWUMsT0FBTyxDQUFFO1lBQ25CLEtBQUssQ0FBQ0E7UUFDUjtJQUNGO0lBRUEsTUFBTUMsU0FBUyxJQUFJSCxjQUFjSDtJQUVqQyxFQUFFO0lBQ0YsdURBQXVEO0lBQ3ZELEVBQUU7SUFDRk8sT0FBT0MsSUFBSSxDQUFDUixLQUFLQyxNQUFNLEVBQUVRLE9BQU8sQ0FBQyxTQUFVZixLQUFLO1FBQzlDRixNQUFNLG9DQUFvQ0U7UUFDMUMsSUFBSUEsVUFBVSxPQUFPO1lBQ25CLHNDQUFzQztZQUN0Q2dCLFFBQVFDLElBQUksQ0FBQztZQUNiO1FBQ0Y7UUFFQSxFQUFFO1FBQ0Ysb0RBQW9EO1FBQ3BELDZEQUE2RDtRQUM3RCxxQkFBcUI7UUFDckIsMkJBQTJCO1FBQzNCLEVBQUU7UUFDRiw4REFBOEQ7UUFDOUQsK0RBQStEO1FBQy9ELGdDQUFnQztRQUNoQyxFQUFFO1FBQ0ZSLGNBQWNTLFNBQVMsQ0FBQ2xCLE1BQU0sR0FBRyxTQUFVLEdBQUdtQixJQUFJO1lBQ2hELDBEQUEwRDtZQUMxRCxNQUFNQyxPQUFPLElBQUksSUFBSVI7WUFFckIsb0RBQW9EO1lBQ3BELElBQUlPLEtBQUtFLE1BQU0sS0FBSyxHQUFHO2dCQUNyQixNQUFNLENBQUNDLElBQUksR0FBR0g7Z0JBQ2QsTUFBTUksT0FBT0QsT0FBT0EsSUFBSUUsT0FBTyxJQUFJRixPQUFPO29CQUFFRSxTQUFTRjtnQkFBSTtnQkFDekRDLEtBQUt2QixLQUFLLEdBQUd1QixJQUFJLENBQUM3QixNQUFNLEdBQUdNO2dCQUMzQm9CLEtBQUtLLGVBQWUsQ0FBQ0Y7Z0JBQ3JCSCxLQUFLTSxLQUFLLENBQUNIO2dCQUNYLE9BQVEsSUFBSSxJQUFJWDtZQUNsQjtZQUVBLGdEQUFnRDtZQUNoRCxJQUFJTyxLQUFLRSxNQUFNLEtBQUssR0FBRztnQkFDckJELEtBQUtPLEdBQUcsQ0FBQzNCLE9BQU87Z0JBQ2hCLE9BQU9vQjtZQUNUO1lBRUEsbUVBQW1FO1lBQ25FLFVBQVU7WUFDVixxQkFBcUI7WUFDckIsb0ZBQW9GO1lBQ3BGLE9BQU9BLEtBQUtPLEdBQUcsQ0FBQzNCLFVBQVVtQjtRQUM1QjtRQUVBVixjQUFjUyxTQUFTLENBQUNuQiwyQkFBMkJDLE9BQU8sR0FBRztZQUMzRCxPQUFPLENBQUMsSUFBSSxJQUFJWSxNQUFLLEVBQUdnQixjQUFjLENBQUM1QjtRQUN6QztJQUNGO0lBRUEsT0FBT1k7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vbGliL3dpbnN0b24vY3JlYXRlLWxvZ2dlci5qcz81NTI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogY3JlYXRlLWxvZ2dlci5qczogTG9nZ2VyIGZhY3RvcnkgZm9yIHdpbnN0b24gbG9nZ2VyIGluc3RhbmNlcy5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IExFVkVMIH0gPSByZXF1aXJlKCd0cmlwbGUtYmVhbScpO1xuY29uc3QgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbmNvbnN0IExvZ2dlciA9IHJlcXVpcmUoJy4vbG9nZ2VyJyk7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ0BkYWJoL2RpYWdub3N0aWNzJykoJ3dpbnN0b246Y3JlYXRlLWxvZ2dlcicpO1xuXG5mdW5jdGlvbiBpc0xldmVsRW5hYmxlZEZ1bmN0aW9uTmFtZShsZXZlbCkge1xuICByZXR1cm4gJ2lzJyArIGxldmVsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGV2ZWwuc2xpY2UoMSkgKyAnRW5hYmxlZCc7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgd2luc3RvbiBMb2dnZXIuIENyZWF0ZXMgYSBuZXdcbiAqIHByb3RvdHlwZSBmb3IgZWFjaCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7IU9iamVjdH0gb3B0cyAtIE9wdGlvbnMgZm9yIHRoZSBjcmVhdGVkIGxvZ2dlci5cbiAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gQSBuZXdseSBjcmVhdGVkIGxvZ2dlciBpbnN0YW5jZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cyA9IHt9KSB7XG4gIC8vXG4gIC8vIERlZmF1bHQgbGV2ZWxzOiBucG1cbiAgLy9cbiAgb3B0cy5sZXZlbHMgPSBvcHRzLmxldmVscyB8fCBjb25maWcubnBtLmxldmVscztcblxuICAvKipcbiAgICogRGVyaXZlZExvZ2dlciB0byBhdHRhY2ggdGhlIGxvZ3MgbGV2ZWwgbWV0aG9kcy5cbiAgICogQHR5cGUge0Rlcml2ZWRMb2dnZXJ9XG4gICAqIEBleHRlbmRzIHtMb2dnZXJ9XG4gICAqL1xuICBjbGFzcyBEZXJpdmVkTG9nZ2VyIGV4dGVuZHMgTG9nZ2VyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgY2xhc3MgZGVyaXZlZCBsb2dnZXIgZm9yIHdoaWNoIHRoZSBsZXZlbHMgY2FuIGJlIGF0dGFjaGVkIHRvXG4gICAgICogdGhlIHByb3RvdHlwZSBvZi4gVGhpcyBpcyBhIFY4IG9wdGltaXphdGlvbiB0aGF0IGlzIHdlbGwga25vdyB0byBpbmNyZWFzZVxuICAgICAqIHBlcmZvcm1hbmNlIG9mIHByb3RvdHlwZSBmdW5jdGlvbnMuXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGNyZWF0ZWQgbG9nZ2VyLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBEZXJpdmVkTG9nZ2VyKG9wdHMpO1xuXG4gIC8vXG4gIC8vIENyZWF0ZSB0aGUgbG9nIGxldmVsIG1ldGhvZHMgZm9yIHRoZSBkZXJpdmVkIGxvZ2dlci5cbiAgLy9cbiAgT2JqZWN0LmtleXMob3B0cy5sZXZlbHMpLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgZGVidWcoJ0RlZmluZSBwcm90b3R5cGUgbWV0aG9kIGZvciBcIiVzXCInLCBsZXZlbCk7XG4gICAgaWYgKGxldmVsID09PSAnbG9nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybignTGV2ZWwgXCJsb2dcIiBub3QgZGVmaW5lZDogY29uZmxpY3RzIHdpdGggdGhlIG1ldGhvZCBcImxvZ1wiLiBVc2UgYSBkaWZmZXJlbnQgbGV2ZWwgbmFtZS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIERlZmluZSBwcm90b3R5cGUgbWV0aG9kcyBmb3IgZWFjaCBsb2cgbGV2ZWwgZS5nLjpcbiAgICAvLyBsb2dnZXIubG9nKCdpbmZvJywgbXNnKSBpbXBsaWVzIHRoZXNlIG1ldGhvZHMgYXJlIGRlZmluZWQ6XG4gICAgLy8gLSBsb2dnZXIuaW5mbyhtc2cpXG4gICAgLy8gLSBsb2dnZXIuaXNJbmZvRW5hYmxlZCgpXG4gICAgLy9cbiAgICAvLyBSZW1hcms6IHRvIHN1cHBvcnQgbG9nZ2VyLmNoaWxkIHRoaXMgKipNVVNUKiogYmUgYSBmdW5jdGlvblxuICAgIC8vIHNvIGl0J2xsIGFsd2F5cyBiZSBjYWxsZWQgb24gdGhlIGluc3RhbmNlIGluc3RlYWQgb2YgYSBmaXhlZFxuICAgIC8vIHBsYWNlIGluIHRoZSBwcm90b3R5cGUgY2hhaW4uXG4gICAgLy9cbiAgICBEZXJpdmVkTG9nZ2VyLnByb3RvdHlwZVtsZXZlbF0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgLy8gUHJlZmVyIGFueSBpbnN0YW5jZSBzY29wZSwgYnV0IGRlZmF1bHQgdG8gXCJyb290XCIgbG9nZ2VyXG4gICAgICBjb25zdCBzZWxmID0gdGhpcyB8fCBsb2dnZXI7XG5cbiAgICAgIC8vIE9wdGltaXplIHRoZSBob3QtcGF0aCB3aGljaCBpcyB0aGUgc2luZ2xlIG9iamVjdC5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCBbbXNnXSA9IGFyZ3M7XG4gICAgICAgIGNvbnN0IGluZm8gPSBtc2cgJiYgbXNnLm1lc3NhZ2UgJiYgbXNnIHx8IHsgbWVzc2FnZTogbXNnIH07XG4gICAgICAgIGluZm8ubGV2ZWwgPSBpbmZvW0xFVkVMXSA9IGxldmVsO1xuICAgICAgICBzZWxmLl9hZGREZWZhdWx0TWV0YShpbmZvKTtcbiAgICAgICAgc2VsZi53cml0ZShpbmZvKTtcbiAgICAgICAgcmV0dXJuICh0aGlzIHx8IGxvZ2dlcik7XG4gICAgICB9XG5cbiAgICAgIC8vIFdoZW4gcHJvdmlkZWQgbm90aGluZyBhc3N1bWUgdGhlIGVtcHR5IHN0cmluZ1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHNlbGYubG9nKGxldmVsLCAnJyk7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UgYnVpbGQgYXJndW1lbnQgbGlzdCB3aGljaCBjb3VsZCBwb3RlbnRpYWxseSBjb25mb3JtIHRvXG4gICAgICAvLyBlaXRoZXI6XG4gICAgICAvLyAuIHYzIEFQSTogbG9nKG9iailcbiAgICAgIC8vIDIuIHYxL3YyIEFQSTogbG9nKGxldmVsLCBtc2csIC4uLiBbc3RyaW5nIGludGVycG9sYXRlXSwgW3ttZXRhZGF0YX1dLCBbY2FsbGJhY2tdKVxuICAgICAgcmV0dXJuIHNlbGYubG9nKGxldmVsLCAuLi5hcmdzKTtcbiAgICB9O1xuXG4gICAgRGVyaXZlZExvZ2dlci5wcm90b3R5cGVbaXNMZXZlbEVuYWJsZWRGdW5jdGlvbk5hbWUobGV2ZWwpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAodGhpcyB8fCBsb2dnZXIpLmlzTGV2ZWxFbmFibGVkKGxldmVsKTtcbiAgICB9O1xuICB9KTtcblxuICByZXR1cm4gbG9nZ2VyO1xufTtcbiJdLCJuYW1lcyI6WyJMRVZFTCIsInJlcXVpcmUiLCJjb25maWciLCJMb2dnZXIiLCJkZWJ1ZyIsImlzTGV2ZWxFbmFibGVkRnVuY3Rpb25OYW1lIiwibGV2ZWwiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdHMiLCJsZXZlbHMiLCJucG0iLCJEZXJpdmVkTG9nZ2VyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibG9nZ2VyIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJjb25zb2xlIiwid2FybiIsInByb3RvdHlwZSIsImFyZ3MiLCJzZWxmIiwibGVuZ3RoIiwibXNnIiwiaW5mbyIsIm1lc3NhZ2UiLCJfYWRkRGVmYXVsdE1ldGEiLCJ3cml0ZSIsImxvZyIsImlzTGV2ZWxFbmFibGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/create-logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/exception-handler.js":
/*!***************************************************************!*\
  !*** ./node_modules/winston/lib/winston/exception-handler.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst os = __webpack_require__(/*! os */ \"os\");\nconst asyncForEach = __webpack_require__(/*! async/forEach */ \"(ssr)/./node_modules/async/forEach.js\");\nconst debug = __webpack_require__(/*! @dabh/diagnostics */ \"(ssr)/./node_modules/@dabh/diagnostics/node/index.js\")(\"winston:exception\");\nconst once = __webpack_require__(/*! one-time */ \"(ssr)/./node_modules/one-time/index.js\");\nconst stackTrace = __webpack_require__(/*! stack-trace */ \"(ssr)/./node_modules/stack-trace/lib/stack-trace.js\");\nconst ExceptionStream = __webpack_require__(/*! ./exception-stream */ \"(ssr)/./node_modules/winston/lib/winston/exception-stream.js\");\n/**\n * Object for handling uncaughtException events.\n * @type {ExceptionHandler}\n */ module.exports = class ExceptionHandler {\n    /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */ constructor(logger){\n        if (!logger) {\n            throw new Error(\"Logger is required to handle exceptions\");\n        }\n        this.logger = logger;\n        this.handlers = new Map();\n    }\n    /**\n   * Handles `uncaughtException` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */ handle(...args) {\n        args.forEach((arg)=>{\n            if (Array.isArray(arg)) {\n                return arg.forEach((handler)=>this._addHandler(handler));\n            }\n            this._addHandler(arg);\n        });\n        if (!this.catcher) {\n            this.catcher = this._uncaughtException.bind(this);\n            process.on(\"uncaughtException\", this.catcher);\n        }\n    }\n    /**\n   * Removes any handlers to `uncaughtException` events for the current\n   * process. This does not modify the state of the `this.handlers` set.\n   * @returns {undefined}\n   */ unhandle() {\n        if (this.catcher) {\n            process.removeListener(\"uncaughtException\", this.catcher);\n            this.catcher = false;\n            Array.from(this.handlers.values()).forEach((wrapper)=>this.logger.unpipe(wrapper));\n        }\n    }\n    /**\n   * TODO: add method description\n   * @param {Error} err - Error to get information about.\n   * @returns {mixed} - TODO: add return description.\n   */ getAllInfo(err) {\n        let message = null;\n        if (err) {\n            message = typeof err === \"string\" ? err : err.message;\n        }\n        return {\n            error: err,\n            // TODO (indexzero): how do we configure this?\n            level: \"error\",\n            message: [\n                `uncaughtException: ${message || \"(no error message)\"}`,\n                err && err.stack || \"  No stack trace\"\n            ].join(\"\\n\"),\n            stack: err && err.stack,\n            exception: true,\n            date: new Date().toString(),\n            process: this.getProcessInfo(),\n            os: this.getOsInfo(),\n            trace: this.getTrace(err)\n        };\n    }\n    /**\n   * Gets all relevant process information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */ getProcessInfo() {\n        return {\n            pid: process.pid,\n            uid: process.getuid ? process.getuid() : null,\n            gid: process.getgid ? process.getgid() : null,\n            cwd: process.cwd(),\n            execPath: process.execPath,\n            version: process.version,\n            argv: process.argv,\n            memoryUsage: process.memoryUsage()\n        };\n    }\n    /**\n   * Gets all relevant OS information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */ getOsInfo() {\n        return {\n            loadavg: os.loadavg(),\n            uptime: os.uptime()\n        };\n    }\n    /**\n   * Gets a stack trace for the specified error.\n   * @param {mixed} err - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */ getTrace(err) {\n        const trace = err ? stackTrace.parse(err) : stackTrace.get();\n        return trace.map((site)=>{\n            return {\n                column: site.getColumnNumber(),\n                file: site.getFileName(),\n                function: site.getFunctionName(),\n                line: site.getLineNumber(),\n                method: site.getMethodName(),\n                native: site.isNative()\n            };\n        });\n    }\n    /**\n   * Helper method to add a transport as an exception handler.\n   * @param {Transport} handler - The transport to add as an exception handler.\n   * @returns {void}\n   */ _addHandler(handler) {\n        if (!this.handlers.has(handler)) {\n            handler.handleExceptions = true;\n            const wrapper = new ExceptionStream(handler);\n            this.handlers.set(handler, wrapper);\n            this.logger.pipe(wrapper);\n        }\n    }\n    /**\n   * Logs all relevant information around the `err` and exits the current\n   * process.\n   * @param {Error} err - Error to handle\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */ _uncaughtException(err) {\n        const info = this.getAllInfo(err);\n        const handlers = this._getExceptionHandlers();\n        // Calculate if we should exit on this error\n        let doExit = typeof this.logger.exitOnError === \"function\" ? this.logger.exitOnError(err) : this.logger.exitOnError;\n        let timeout;\n        if (!handlers.length && doExit) {\n            // eslint-disable-next-line no-console\n            console.warn(\"winston: exitOnError cannot be true with no exception handlers.\");\n            // eslint-disable-next-line no-console\n            console.warn(\"winston: not exiting process.\");\n            doExit = false;\n        }\n        function gracefulExit() {\n            debug(\"doExit\", doExit);\n            debug(\"process._exiting\", process._exiting);\n            if (doExit && !process._exiting) {\n                // Remark: Currently ignoring any exceptions from transports when\n                // catching uncaught exceptions.\n                if (timeout) {\n                    clearTimeout(timeout);\n                }\n                // eslint-disable-next-line no-process-exit\n                process.exit(1);\n            }\n        }\n        if (!handlers || handlers.length === 0) {\n            return process.nextTick(gracefulExit);\n        }\n        // Log to all transports attempting to listen for when they are completed.\n        asyncForEach(handlers, (handler, next)=>{\n            const done = once(next);\n            const transport = handler.transport || handler;\n            // Debug wrapping so that we can inspect what's going on under the covers.\n            function onDone(event) {\n                return ()=>{\n                    debug(event);\n                    done();\n                };\n            }\n            transport._ending = true;\n            transport.once(\"finish\", onDone(\"finished\"));\n            transport.once(\"error\", onDone(\"error\"));\n        }, ()=>doExit && gracefulExit());\n        this.logger.log(info);\n        // If exitOnError is true, then only allow the logging of exceptions to\n        // take up to `3000ms`.\n        if (doExit) {\n            timeout = setTimeout(gracefulExit, 3000);\n        }\n    }\n    /**\n   * Returns the list of transports and exceptionHandlers for this instance.\n   * @returns {Array} - List of transports and exceptionHandlers for this\n   * instance.\n   * @private\n   */ _getExceptionHandlers() {\n        // Remark (indexzero): since `logger.transports` returns all of the pipes\n        // from the _readableState of the stream we actually get the join of the\n        // explicit handlers and the implicit transports with\n        // `handleExceptions: true`\n        return this.logger.transports.filter((wrap)=>{\n            const transport = wrap.transport || wrap;\n            return transport.handleExceptions;\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/exception-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/exception-stream.js":
/*!**************************************************************!*\
  !*** ./node_modules/winston/lib/winston/exception-stream.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * exception-stream.js: TODO: add file header handler.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst { Writable } = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\");\n/**\n * TODO: add class description.\n * @type {ExceptionStream}\n * @extends {Writable}\n */ module.exports = class ExceptionStream extends Writable {\n    /**\n   * Constructor function for the ExceptionStream responsible for wrapping a\n   * TransportStream; only allowing writes of `info` objects with\n   * `info.exception` set to true.\n   * @param {!TransportStream} transport - Stream to filter to exceptions\n   */ constructor(transport){\n        super({\n            objectMode: true\n        });\n        if (!transport) {\n            throw new Error(\"ExceptionStream requires a TransportStream instance.\");\n        }\n        // Remark (indexzero): we set `handleExceptions` here because it's the\n        // predicate checked in ExceptionHandler.prototype.__getExceptionHandlers\n        this.handleExceptions = true;\n        this.transport = transport;\n    }\n    /**\n   * Writes the info object to our transport instance if (and only if) the\n   * `exception` property is set on the info.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */ _write(info, enc, callback) {\n        if (info.exception) {\n            return this.transport.log(info, callback);\n        }\n        callback();\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9leGNlcHRpb24tc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBRUQ7QUFFQSxNQUFNLEVBQUVBLFFBQVEsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUU3Qjs7OztDQUlDLEdBQ0RDLE9BQU9DLE9BQU8sR0FBRyxNQUFNQyx3QkFBd0JKO0lBQzdDOzs7OztHQUtDLEdBQ0RLLFlBQVlDLFNBQVMsQ0FBRTtRQUNyQixLQUFLLENBQUM7WUFBRUMsWUFBWTtRQUFLO1FBRXpCLElBQUksQ0FBQ0QsV0FBVztZQUNkLE1BQU0sSUFBSUUsTUFBTTtRQUNsQjtRQUVBLHNFQUFzRTtRQUN0RSx5RUFBeUU7UUFDekUsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztRQUN4QixJQUFJLENBQUNILFNBQVMsR0FBR0E7SUFDbkI7SUFFQTs7Ozs7Ozs7R0FRQyxHQUNESSxPQUFPQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO1FBQzFCLElBQUlGLEtBQUtHLFNBQVMsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQ1IsU0FBUyxDQUFDUyxHQUFHLENBQUNKLE1BQU1FO1FBQ2xDO1FBRUFBO1FBQ0EsT0FBTztJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy93aW5zdG9uL2xpYi93aW5zdG9uL2V4Y2VwdGlvbi1zdHJlYW0uanM/OGJmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGV4Y2VwdGlvbi1zdHJlYW0uanM6IFRPRE86IGFkZCBmaWxlIGhlYWRlciBoYW5kbGVyLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgV3JpdGFibGUgfSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpO1xuXG4vKipcbiAqIFRPRE86IGFkZCBjbGFzcyBkZXNjcmlwdGlvbi5cbiAqIEB0eXBlIHtFeGNlcHRpb25TdHJlYW19XG4gKiBAZXh0ZW5kcyB7V3JpdGFibGV9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRXhjZXB0aW9uU3RyZWFtIGV4dGVuZHMgV3JpdGFibGUge1xuICAvKipcbiAgICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBFeGNlcHRpb25TdHJlYW0gcmVzcG9uc2libGUgZm9yIHdyYXBwaW5nIGFcbiAgICogVHJhbnNwb3J0U3RyZWFtOyBvbmx5IGFsbG93aW5nIHdyaXRlcyBvZiBgaW5mb2Agb2JqZWN0cyB3aXRoXG4gICAqIGBpbmZvLmV4Y2VwdGlvbmAgc2V0IHRvIHRydWUuXG4gICAqIEBwYXJhbSB7IVRyYW5zcG9ydFN0cmVhbX0gdHJhbnNwb3J0IC0gU3RyZWFtIHRvIGZpbHRlciB0byBleGNlcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICBzdXBlcih7IG9iamVjdE1vZGU6IHRydWUgfSk7XG5cbiAgICBpZiAoIXRyYW5zcG9ydCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeGNlcHRpb25TdHJlYW0gcmVxdWlyZXMgYSBUcmFuc3BvcnRTdHJlYW0gaW5zdGFuY2UuJyk7XG4gICAgfVxuXG4gICAgLy8gUmVtYXJrIChpbmRleHplcm8pOiB3ZSBzZXQgYGhhbmRsZUV4Y2VwdGlvbnNgIGhlcmUgYmVjYXVzZSBpdCdzIHRoZVxuICAgIC8vIHByZWRpY2F0ZSBjaGVja2VkIGluIEV4Y2VwdGlvbkhhbmRsZXIucHJvdG90eXBlLl9fZ2V0RXhjZXB0aW9uSGFuZGxlcnNcbiAgICB0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgPSB0cnVlO1xuICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyB0aGUgaW5mbyBvYmplY3QgdG8gb3VyIHRyYW5zcG9ydCBpbnN0YW5jZSBpZiAoYW5kIG9ubHkgaWYpIHRoZVxuICAgKiBgZXhjZXB0aW9uYCBwcm9wZXJ0eSBpcyBzZXQgb24gdGhlIGluZm8uXG4gICAqIEBwYXJhbSB7bWl4ZWR9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEBwYXJhbSB7bWl4ZWR9IGVuYyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHBhcmFtIHttaXhlZH0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3dyaXRlKGluZm8sIGVuYywgY2FsbGJhY2spIHtcbiAgICBpZiAoaW5mby5leGNlcHRpb24pIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydC5sb2coaW5mbywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiV3JpdGFibGUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkV4Y2VwdGlvblN0cmVhbSIsImNvbnN0cnVjdG9yIiwidHJhbnNwb3J0Iiwib2JqZWN0TW9kZSIsIkVycm9yIiwiaGFuZGxlRXhjZXB0aW9ucyIsIl93cml0ZSIsImluZm8iLCJlbmMiLCJjYWxsYmFjayIsImV4Y2VwdGlvbiIsImxvZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/exception-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/logger.js":
/*!****************************************************!*\
  !*** ./node_modules/winston/lib/winston/logger.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * logger.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst { Stream, Transform } = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\");\nconst asyncForEach = __webpack_require__(/*! async/forEach */ \"(ssr)/./node_modules/async/forEach.js\");\nconst { LEVEL, SPLAT } = __webpack_require__(/*! triple-beam */ \"(ssr)/./node_modules/triple-beam/index.js\");\nconst isStream = __webpack_require__(/*! is-stream */ \"(ssr)/./node_modules/is-stream/index.js\");\nconst ExceptionHandler = __webpack_require__(/*! ./exception-handler */ \"(ssr)/./node_modules/winston/lib/winston/exception-handler.js\");\nconst RejectionHandler = __webpack_require__(/*! ./rejection-handler */ \"(ssr)/./node_modules/winston/lib/winston/rejection-handler.js\");\nconst LegacyTransportStream = __webpack_require__(/*! winston-transport/legacy */ \"(ssr)/./node_modules/winston-transport/legacy.js\");\nconst Profiler = __webpack_require__(/*! ./profiler */ \"(ssr)/./node_modules/winston/lib/winston/profiler.js\");\nconst { warn } = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/winston/lib/winston/common.js\");\nconst config = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/winston/lib/winston/config/index.js\");\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */ const formatRegExp = /%[scdjifoO%]/g;\n/**\n * TODO: add class description.\n * @type {Logger}\n * @extends {Transform}\n */ class Logger extends Transform {\n    /**\n   * Constructor function for the Logger object responsible for persisting log\n   * messages and metadata to one or more transports.\n   * @param {!Object} options - foo\n   */ constructor(options){\n        super({\n            objectMode: true\n        });\n        this.configure(options);\n    }\n    child(defaultRequestMetadata) {\n        const logger = this;\n        return Object.create(logger, {\n            write: {\n                value: function(info) {\n                    const infoClone = Object.assign({}, defaultRequestMetadata, info);\n                    // Object.assign doesn't copy inherited Error\n                    // properties so we have to do that explicitly\n                    //\n                    // Remark (indexzero): we should remove this\n                    // since the errors format will handle this case.\n                    //\n                    if (info instanceof Error) {\n                        infoClone.stack = info.stack;\n                        infoClone.message = info.message;\n                    }\n                    logger.write(infoClone);\n                }\n            }\n        });\n    }\n    /**\n   * This will wholesale reconfigure this instance by:\n   * 1. Resetting all transports. Older transports will be removed implicitly.\n   * 2. Set all other options including levels, colors, rewriters, filters,\n   *    exceptionHandlers, etc.\n   * @param {!Object} options - TODO: add param description.\n   * @returns {undefined}\n   */ configure({ silent, format, defaultMeta, levels, level = \"info\", exitOnError = true, transports, colors, emitErrs, formatters, padLevels, rewriters, stripColors, exceptionHandlers, rejectionHandlers } = {}) {\n        // Reset transports if we already have them\n        if (this.transports.length) {\n            this.clear();\n        }\n        this.silent = silent;\n        this.format = format || this.format || __webpack_require__(/*! logform/json */ \"(ssr)/./node_modules/logform/json.js\")();\n        this.defaultMeta = defaultMeta || null;\n        // Hoist other options onto this instance.\n        this.levels = levels || this.levels || config.npm.levels;\n        this.level = level;\n        if (this.exceptions) {\n            this.exceptions.unhandle();\n        }\n        if (this.rejections) {\n            this.rejections.unhandle();\n        }\n        this.exceptions = new ExceptionHandler(this);\n        this.rejections = new RejectionHandler(this);\n        this.profilers = {};\n        this.exitOnError = exitOnError;\n        // Add all transports we have been provided.\n        if (transports) {\n            transports = Array.isArray(transports) ? transports : [\n                transports\n            ];\n            transports.forEach((transport)=>this.add(transport));\n        }\n        if (colors || emitErrs || formatters || padLevels || rewriters || stripColors) {\n            throw new Error([\n                \"{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.\",\n                \"Use a custom winston.format(function) instead.\",\n                \"See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md\"\n            ].join(\"\\n\"));\n        }\n        if (exceptionHandlers) {\n            this.exceptions.handle(exceptionHandlers);\n        }\n        if (rejectionHandlers) {\n            this.rejections.handle(rejectionHandlers);\n        }\n    }\n    isLevelEnabled(level) {\n        const givenLevelValue = getLevelValue(this.levels, level);\n        if (givenLevelValue === null) {\n            return false;\n        }\n        const configuredLevelValue = getLevelValue(this.levels, this.level);\n        if (configuredLevelValue === null) {\n            return false;\n        }\n        if (!this.transports || this.transports.length === 0) {\n            return configuredLevelValue >= givenLevelValue;\n        }\n        const index = this.transports.findIndex((transport)=>{\n            let transportLevelValue = getLevelValue(this.levels, transport.level);\n            if (transportLevelValue === null) {\n                transportLevelValue = configuredLevelValue;\n            }\n            return transportLevelValue >= givenLevelValue;\n        });\n        return index !== -1;\n    }\n    /* eslint-disable valid-jsdoc */ /**\n   * Ensure backwards compatibility with a `log` method\n   * @param {mixed} level - Level the log message is written at.\n   * @param {mixed} msg - TODO: add param description.\n   * @param {mixed} meta - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   *\n   * @example\n   *    // Supports the existing API:\n   *    logger.log('info', 'Hello world', { custom: true });\n   *    logger.log('info', new Error('Yo, it\\'s on fire'));\n   *\n   *    // Requires winston.format.splat()\n   *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });\n   *\n   *    // And the new API with a single JSON literal:\n   *    logger.log({ level: 'info', message: 'Hello world', custom: true });\n   *    logger.log({ level: 'info', message: new Error('Yo, it\\'s on fire') });\n   *\n   *    // Also requires winston.format.splat()\n   *    logger.log({\n   *      level: 'info',\n   *      message: '%s %d%%',\n   *      [SPLAT]: ['A string', 50],\n   *      meta: { thisIsMeta: true }\n   *    });\n   *\n   */ /* eslint-enable valid-jsdoc */ log(level, msg, ...splat) {\n        // eslint-disable-line max-params\n        // Optimize for the hotpath of logging JSON literals\n        if (arguments.length === 1) {\n            // Yo dawg, I heard you like levels ... seriously ...\n            // In this context the LHS `level` here is actually the `info` so read\n            // this as: info[LEVEL] = info.level;\n            level[LEVEL] = level.level;\n            this._addDefaultMeta(level);\n            this.write(level);\n            return this;\n        }\n        // Slightly less hotpath, but worth optimizing for.\n        if (arguments.length === 2) {\n            if (msg && typeof msg === \"object\") {\n                msg[LEVEL] = msg.level = level;\n                this._addDefaultMeta(msg);\n                this.write(msg);\n                return this;\n            }\n            msg = {\n                [LEVEL]: level,\n                level,\n                message: msg\n            };\n            this._addDefaultMeta(msg);\n            this.write(msg);\n            return this;\n        }\n        const [meta] = splat;\n        if (typeof meta === \"object\" && meta !== null) {\n            // Extract tokens, if none available default to empty array to\n            // ensure consistancy in expected results\n            const tokens = msg && msg.match && msg.match(formatRegExp);\n            if (!tokens) {\n                const info = Object.assign({}, this.defaultMeta, meta, {\n                    [LEVEL]: level,\n                    [SPLAT]: splat,\n                    level,\n                    message: msg\n                });\n                if (meta.message) info.message = `${info.message} ${meta.message}`;\n                if (meta.stack) info.stack = meta.stack;\n                if (meta.cause) info.cause = meta.cause;\n                this.write(info);\n                return this;\n            }\n        }\n        this.write(Object.assign({}, this.defaultMeta, {\n            [LEVEL]: level,\n            [SPLAT]: splat,\n            level,\n            message: msg\n        }));\n        return this;\n    }\n    /**\n   * Pushes data so that it can be picked up by all of our pipe targets.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - Continues stream processing.\n   * @returns {undefined}\n   * @private\n   */ _transform(info, enc, callback) {\n        if (this.silent) {\n            return callback();\n        }\n        // [LEVEL] is only soft guaranteed to be set here since we are a proper\n        // stream. It is likely that `info` came in through `.log(info)` or\n        // `.info(info)`. If it is not defined, however, define it.\n        // This LEVEL symbol is provided by `triple-beam` and also used in:\n        // - logform\n        // - winston-transport\n        // - abstract-winston-transport\n        if (!info[LEVEL]) {\n            info[LEVEL] = info.level;\n        }\n        // Remark: really not sure what to do here, but this has been reported as\n        // very confusing by pre winston@2.0.0 users as quite confusing when using\n        // custom levels.\n        if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {\n            // eslint-disable-next-line no-console\n            console.error(\"[winston] Unknown logger level: %s\", info[LEVEL]);\n        }\n        // Remark: not sure if we should simply error here.\n        if (!this._readableState.pipes) {\n            // eslint-disable-next-line no-console\n            console.error(\"[winston] Attempt to write logs with no transports, which can increase memory usage: %j\", info);\n        }\n        // Here we write to the `format` pipe-chain, which on `readable` above will\n        // push the formatted `info` Object onto the buffer for this instance. We trap\n        // (and re-throw) any errors generated by the user-provided format, but also\n        // guarantee that the streams callback is invoked so that we can continue flowing.\n        try {\n            this.push(this.format.transform(info, this.format.options));\n        } finally{\n            this._writableState.sync = false;\n            // eslint-disable-next-line callback-return\n            callback();\n        }\n    }\n    /**\n   * Delays the 'finish' event until all transport pipe targets have\n   * also emitted 'finish' or are already finished.\n   * @param {mixed} callback - Continues stream processing.\n   */ _final(callback) {\n        const transports = this.transports.slice();\n        asyncForEach(transports, (transport, next)=>{\n            if (!transport || transport.finished) return setImmediate(next);\n            transport.once(\"finish\", next);\n            transport.end();\n        }, callback);\n    }\n    /**\n   * Adds the transport to this logger instance by piping to it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */ add(transport) {\n        // Support backwards compatibility with all existing `winston < 3.x.x`\n        // transports which meet one of two criteria:\n        // 1. They inherit from winston.Transport in  < 3.x.x which is NOT a stream.\n        // 2. They expose a log method which has a length greater than 2 (i.e. more then\n        //    just `log(info, callback)`.\n        const target = !isStream(transport) || transport.log.length > 2 ? new LegacyTransportStream({\n            transport\n        }) : transport;\n        if (!target._writableState || !target._writableState.objectMode) {\n            throw new Error(\"Transports must WritableStreams in objectMode. Set { objectMode: true }.\");\n        }\n        // Listen for the `error` event and the `warn` event on the new Transport.\n        this._onEvent(\"error\", target);\n        this._onEvent(\"warn\", target);\n        this.pipe(target);\n        if (transport.handleExceptions) {\n            this.exceptions.handle();\n        }\n        if (transport.handleRejections) {\n            this.rejections.handle();\n        }\n        return this;\n    }\n    /**\n   * Removes the transport from this logger instance by unpiping from it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */ remove(transport) {\n        if (!transport) return this;\n        let target = transport;\n        if (!isStream(transport) || transport.log.length > 2) {\n            target = this.transports.filter((match)=>match.transport === transport)[0];\n        }\n        if (target) {\n            this.unpipe(target);\n        }\n        return this;\n    }\n    /**\n   * Removes all transports from this logger instance.\n   * @returns {Logger} - TODO: add return description.\n   */ clear() {\n        this.unpipe();\n        return this;\n    }\n    /**\n   * Cleans up resources (streams, event listeners) for all transports\n   * associated with this instance (if necessary).\n   * @returns {Logger} - TODO: add return description.\n   */ close() {\n        this.exceptions.unhandle();\n        this.rejections.unhandle();\n        this.clear();\n        this.emit(\"close\");\n        return this;\n    }\n    /**\n   * Sets the `target` levels specified on this instance.\n   * @param {Object} Target levels to use on this instance.\n   */ setLevels() {\n        warn.deprecated(\"setLevels\");\n    }\n    /**\n   * Queries the all transports for this instance with the specified `options`.\n   * This will aggregate each transport's results into one object containing\n   * a property per transport.\n   * @param {Object} options - Query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   */ query(options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n        options = options || {};\n        const results = {};\n        const queryObject = Object.assign({}, options.query || {});\n        // Helper function to query a single transport\n        function queryTransport(transport, next) {\n            if (options.query && typeof transport.formatQuery === \"function\") {\n                options.query = transport.formatQuery(queryObject);\n            }\n            transport.query(options, (err, res)=>{\n                if (err) {\n                    return next(err);\n                }\n                if (typeof transport.formatResults === \"function\") {\n                    res = transport.formatResults(res, options.format);\n                }\n                next(null, res);\n            });\n        }\n        // Helper function to accumulate the results from `queryTransport` into\n        // the `results`.\n        function addResults(transport, next) {\n            queryTransport(transport, (err, result)=>{\n                // queryTransport could potentially invoke the callback multiple times\n                // since Transport code can be unpredictable.\n                if (next) {\n                    result = err || result;\n                    if (result) {\n                        results[transport.name] = result;\n                    }\n                    // eslint-disable-next-line callback-return\n                    next();\n                }\n                next = null;\n            });\n        }\n        // Iterate over the transports in parallel setting the appropriate key in\n        // the `results`.\n        asyncForEach(this.transports.filter((transport)=>!!transport.query), addResults, ()=>callback(null, results));\n    }\n    /**\n   * Returns a log stream for all transports. Options object is optional.\n   * @param{Object} options={} - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description.\n   */ stream(options = {}) {\n        const out = new Stream();\n        const streams = [];\n        out._streams = streams;\n        out.destroy = ()=>{\n            let i = streams.length;\n            while(i--){\n                streams[i].destroy();\n            }\n        };\n        // Create a list of all transports for this instance.\n        this.transports.filter((transport)=>!!transport.stream).forEach((transport)=>{\n            const str = transport.stream(options);\n            if (!str) {\n                return;\n            }\n            streams.push(str);\n            str.on(\"log\", (log)=>{\n                log.transport = log.transport || [];\n                log.transport.push(transport.name);\n                out.emit(\"log\", log);\n            });\n            str.on(\"error\", (err)=>{\n                err.transport = err.transport || [];\n                err.transport.push(transport.name);\n                out.emit(\"error\", err);\n            });\n        });\n        return out;\n    }\n    /**\n   * Returns an object corresponding to a specific timing. When done is called\n   * the timer will finish and log the duration. e.g.:\n   * @returns {Profile} - TODO: add return description.\n   * @example\n   *    const timer = winston.startTimer()\n   *    setTimeout(() => {\n   *      timer.done({\n   *        message: 'Logging message'\n   *      });\n   *    }, 1000);\n   */ startTimer() {\n        return new Profiler(this);\n    }\n    /**\n   * Tracks the time inbetween subsequent calls to this method with the same\n   * `id` parameter. The second call to this method will log the difference in\n   * milliseconds along with the message.\n   * @param {string} id Unique id of the profiler\n   * @returns {Logger} - TODO: add return description.\n   */ profile(id, ...args) {\n        const time = Date.now();\n        if (this.profilers[id]) {\n            const timeEnd = this.profilers[id];\n            delete this.profilers[id];\n            // Attempt to be kind to users if they are still using older APIs.\n            if (typeof args[args.length - 2] === \"function\") {\n                // eslint-disable-next-line no-console\n                console.warn(\"Callback function no longer supported as of winston@3.0.0\");\n                args.pop();\n            }\n            // Set the duration property of the metadata\n            const info = typeof args[args.length - 1] === \"object\" ? args.pop() : {};\n            info.level = info.level || \"info\";\n            info.durationMs = time - timeEnd;\n            info.message = info.message || id;\n            return this.write(info);\n        }\n        this.profilers[id] = time;\n        return this;\n    }\n    /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */ handleExceptions(...args) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()\");\n        this.exceptions.handle(...args);\n    }\n    /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */ unhandleExceptions(...args) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()\");\n        this.exceptions.unhandle(...args);\n    }\n    /**\n   * Throw a more meaningful deprecation notice\n   * @throws {Error} - TODO: add throws description.\n   */ cli() {\n        throw new Error([\n            \"Logger.cli() was removed in winston@3.0.0\",\n            \"Use a custom winston.formats.cli() instead.\",\n            \"See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md\"\n        ].join(\"\\n\"));\n    }\n    /**\n   * Bubbles the `event` that occured on the specified `transport` up\n   * from this instance.\n   * @param {string} event - The event that occured\n   * @param {Object} transport - Transport on which the event occured\n   * @private\n   */ _onEvent(event, transport) {\n        function transportEvent(err) {\n            // https://github.com/winstonjs/winston/issues/1364\n            if (event === \"error\" && !this.transports.includes(transport)) {\n                this.add(transport);\n            }\n            this.emit(event, err, transport);\n        }\n        if (!transport[\"__winston\" + event]) {\n            transport[\"__winston\" + event] = transportEvent.bind(this);\n            transport.on(event, transport[\"__winston\" + event]);\n        }\n    }\n    _addDefaultMeta(msg) {\n        if (this.defaultMeta) {\n            Object.assign(msg, this.defaultMeta);\n        }\n    }\n}\nfunction getLevelValue(levels, level) {\n    const value = levels[level];\n    if (!value && value !== 0) {\n        return null;\n    }\n    return value;\n}\n/**\n * Represents the current readableState pipe targets for this Logger instance.\n * @type {Array|Object}\n */ Object.defineProperty(Logger.prototype, \"transports\", {\n    configurable: false,\n    enumerable: true,\n    get () {\n        const { pipes } = this._readableState;\n        return !Array.isArray(pipes) ? [\n            pipes\n        ].filter(Boolean) : pipes;\n    }\n});\nmodule.exports = Logger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/profiler.js":
/*!******************************************************!*\
  !*** ./node_modules/winston/lib/winston/profiler.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * profiler.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \n/**\n * TODO: add class description.\n * @type {Profiler}\n * @private\n */ class Profiler {\n    /**\n   * Constructor function for the Profiler instance used by\n   * `Logger.prototype.startTimer`. When done is called the timer will finish\n   * and log the duration.\n   * @param {!Logger} logger - TODO: add param description.\n   * @private\n   */ constructor(logger){\n        const Logger = __webpack_require__(/*! ./logger */ \"(ssr)/./node_modules/winston/lib/winston/logger.js\");\n        if (typeof logger !== \"object\" || Array.isArray(logger) || !(logger instanceof Logger)) {\n            throw new Error(\"Logger is required for profiling\");\n        } else {\n            this.logger = logger;\n            this.start = Date.now();\n        }\n    }\n    /**\n   * Ends the current timer (i.e. Profiler) instance and logs the `msg` along\n   * with the duration since creation.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */ done(...args) {\n        if (typeof args[args.length - 1] === \"function\") {\n            // eslint-disable-next-line no-console\n            console.warn(\"Callback function no longer supported as of winston@3.0.0\");\n            args.pop();\n        }\n        const info = typeof args[args.length - 1] === \"object\" ? args.pop() : {};\n        info.level = info.level || \"info\";\n        info.durationMs = Date.now() - this.start;\n        return this.logger.write(info);\n    }\n}\nmodule.exports = Profiler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9wcm9maWxlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Q0FLQyxHQUVEO0FBQ0E7Ozs7Q0FJQyxHQUNELE1BQU1BO0lBQ0o7Ozs7OztHQU1DLEdBQ0RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNsQixNQUFNQyxTQUFTQyxtQkFBT0EsQ0FBQztRQUN2QixJQUFJLE9BQU9GLFdBQVcsWUFBWUcsTUFBTUMsT0FBTyxDQUFDSixXQUFXLENBQUVBLENBQUFBLGtCQUFrQkMsTUFBSyxHQUFJO1lBQ3RGLE1BQU0sSUFBSUksTUFBTTtRQUNsQixPQUFPO1lBQ0wsSUFBSSxDQUFDTCxNQUFNLEdBQUdBO1lBQ2QsSUFBSSxDQUFDTSxLQUFLLEdBQUdDLEtBQUtDLEdBQUc7UUFDdkI7SUFDRjtJQUVBOzs7OztHQUtDLEdBQ0RDLEtBQUssR0FBR0MsSUFBSSxFQUFFO1FBQ1osSUFBSSxPQUFPQSxJQUFJLENBQUNBLEtBQUtDLE1BQU0sR0FBRyxFQUFFLEtBQUssWUFBWTtZQUMvQyxzQ0FBc0M7WUFDdENDLFFBQVFDLElBQUksQ0FBQztZQUNiSCxLQUFLSSxHQUFHO1FBQ1Y7UUFFQSxNQUFNQyxPQUFPLE9BQU9MLElBQUksQ0FBQ0EsS0FBS0MsTUFBTSxHQUFHLEVBQUUsS0FBSyxXQUFXRCxLQUFLSSxHQUFHLEtBQUssQ0FBQztRQUN2RUMsS0FBS0MsS0FBSyxHQUFHRCxLQUFLQyxLQUFLLElBQUk7UUFDM0JELEtBQUtFLFVBQVUsR0FBRyxLQUFNVCxHQUFHLEtBQU0sSUFBSSxDQUFDRixLQUFLO1FBRTNDLE9BQU8sSUFBSSxDQUFDTixNQUFNLENBQUNrQixLQUFLLENBQUNIO0lBQzNCO0FBQ0Y7QUFFQUksT0FBT0MsT0FBTyxHQUFHdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy93aW5zdG9uL2xpYi93aW5zdG9uL3Byb2ZpbGVyLmpzPzZkMDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBwcm9maWxlci5qczogVE9ETzogYWRkIGZpbGUgaGVhZGVyIGRlc2NyaXB0aW9uLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG4vKipcbiAqIFRPRE86IGFkZCBjbGFzcyBkZXNjcmlwdGlvbi5cbiAqIEB0eXBlIHtQcm9maWxlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFByb2ZpbGVyIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgUHJvZmlsZXIgaW5zdGFuY2UgdXNlZCBieVxuICAgKiBgTG9nZ2VyLnByb3RvdHlwZS5zdGFydFRpbWVyYC4gV2hlbiBkb25lIGlzIGNhbGxlZCB0aGUgdGltZXIgd2lsbCBmaW5pc2hcbiAgICogYW5kIGxvZyB0aGUgZHVyYXRpb24uXG4gICAqIEBwYXJhbSB7IUxvZ2dlcn0gbG9nZ2VyIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IobG9nZ2VyKSB7XG4gICAgY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnZXInKTtcbiAgICBpZiAodHlwZW9mIGxvZ2dlciAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShsb2dnZXIpIHx8ICEobG9nZ2VyIGluc3RhbmNlb2YgTG9nZ2VyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dnZXIgaXMgcmVxdWlyZWQgZm9yIHByb2ZpbGluZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgIHRoaXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbmRzIHRoZSBjdXJyZW50IHRpbWVyIChpLmUuIFByb2ZpbGVyKSBpbnN0YW5jZSBhbmQgbG9ncyB0aGUgYG1zZ2AgYWxvbmdcbiAgICogd2l0aCB0aGUgZHVyYXRpb24gc2luY2UgY3JlYXRpb24uXG4gICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZG9uZSguLi5hcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ0NhbGxiYWNrIGZ1bmN0aW9uIG5vIGxvbmdlciBzdXBwb3J0ZWQgYXMgb2Ygd2luc3RvbkAzLjAuMCcpO1xuICAgICAgYXJncy5wb3AoKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbmZvID0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ29iamVjdCcgPyBhcmdzLnBvcCgpIDoge307XG4gICAgaW5mby5sZXZlbCA9IGluZm8ubGV2ZWwgfHwgJ2luZm8nO1xuICAgIGluZm8uZHVyYXRpb25NcyA9IChEYXRlLm5vdygpKSAtIHRoaXMuc3RhcnQ7XG5cbiAgICByZXR1cm4gdGhpcy5sb2dnZXIud3JpdGUoaW5mbyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvZmlsZXI7XG4iXSwibmFtZXMiOlsiUHJvZmlsZXIiLCJjb25zdHJ1Y3RvciIsImxvZ2dlciIsIkxvZ2dlciIsInJlcXVpcmUiLCJBcnJheSIsImlzQXJyYXkiLCJFcnJvciIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsImRvbmUiLCJhcmdzIiwibGVuZ3RoIiwiY29uc29sZSIsIndhcm4iLCJwb3AiLCJpbmZvIiwibGV2ZWwiLCJkdXJhdGlvbk1zIiwid3JpdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/profiler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/rejection-handler.js":
/*!***************************************************************!*\
  !*** ./node_modules/winston/lib/winston/rejection-handler.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst os = __webpack_require__(/*! os */ \"os\");\nconst asyncForEach = __webpack_require__(/*! async/forEach */ \"(ssr)/./node_modules/async/forEach.js\");\nconst debug = __webpack_require__(/*! @dabh/diagnostics */ \"(ssr)/./node_modules/@dabh/diagnostics/node/index.js\")(\"winston:rejection\");\nconst once = __webpack_require__(/*! one-time */ \"(ssr)/./node_modules/one-time/index.js\");\nconst stackTrace = __webpack_require__(/*! stack-trace */ \"(ssr)/./node_modules/stack-trace/lib/stack-trace.js\");\nconst RejectionStream = __webpack_require__(/*! ./rejection-stream */ \"(ssr)/./node_modules/winston/lib/winston/rejection-stream.js\");\n/**\n * Object for handling unhandledRejection events.\n * @type {RejectionHandler}\n */ module.exports = class RejectionHandler {\n    /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */ constructor(logger){\n        if (!logger) {\n            throw new Error(\"Logger is required to handle rejections\");\n        }\n        this.logger = logger;\n        this.handlers = new Map();\n    }\n    /**\n   * Handles `unhandledRejection` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */ handle(...args) {\n        args.forEach((arg)=>{\n            if (Array.isArray(arg)) {\n                return arg.forEach((handler)=>this._addHandler(handler));\n            }\n            this._addHandler(arg);\n        });\n        if (!this.catcher) {\n            this.catcher = this._unhandledRejection.bind(this);\n            process.on(\"unhandledRejection\", this.catcher);\n        }\n    }\n    /**\n   * Removes any handlers to `unhandledRejection` events for the current\n   * process. This does not modify the state of the `this.handlers` set.\n   * @returns {undefined}\n   */ unhandle() {\n        if (this.catcher) {\n            process.removeListener(\"unhandledRejection\", this.catcher);\n            this.catcher = false;\n            Array.from(this.handlers.values()).forEach((wrapper)=>this.logger.unpipe(wrapper));\n        }\n    }\n    /**\n   * TODO: add method description\n   * @param {Error} err - Error to get information about.\n   * @returns {mixed} - TODO: add return description.\n   */ getAllInfo(err) {\n        let message = null;\n        if (err) {\n            message = typeof err === \"string\" ? err : err.message;\n        }\n        return {\n            error: err,\n            // TODO (indexzero): how do we configure this?\n            level: \"error\",\n            message: [\n                `unhandledRejection: ${message || \"(no error message)\"}`,\n                err && err.stack || \"  No stack trace\"\n            ].join(\"\\n\"),\n            stack: err && err.stack,\n            rejection: true,\n            date: new Date().toString(),\n            process: this.getProcessInfo(),\n            os: this.getOsInfo(),\n            trace: this.getTrace(err)\n        };\n    }\n    /**\n   * Gets all relevant process information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */ getProcessInfo() {\n        return {\n            pid: process.pid,\n            uid: process.getuid ? process.getuid() : null,\n            gid: process.getgid ? process.getgid() : null,\n            cwd: process.cwd(),\n            execPath: process.execPath,\n            version: process.version,\n            argv: process.argv,\n            memoryUsage: process.memoryUsage()\n        };\n    }\n    /**\n   * Gets all relevant OS information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */ getOsInfo() {\n        return {\n            loadavg: os.loadavg(),\n            uptime: os.uptime()\n        };\n    }\n    /**\n   * Gets a stack trace for the specified error.\n   * @param {mixed} err - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */ getTrace(err) {\n        const trace = err ? stackTrace.parse(err) : stackTrace.get();\n        return trace.map((site)=>{\n            return {\n                column: site.getColumnNumber(),\n                file: site.getFileName(),\n                function: site.getFunctionName(),\n                line: site.getLineNumber(),\n                method: site.getMethodName(),\n                native: site.isNative()\n            };\n        });\n    }\n    /**\n   * Helper method to add a transport as an exception handler.\n   * @param {Transport} handler - The transport to add as an exception handler.\n   * @returns {void}\n   */ _addHandler(handler) {\n        if (!this.handlers.has(handler)) {\n            handler.handleRejections = true;\n            const wrapper = new RejectionStream(handler);\n            this.handlers.set(handler, wrapper);\n            this.logger.pipe(wrapper);\n        }\n    }\n    /**\n   * Logs all relevant information around the `err` and exits the current\n   * process.\n   * @param {Error} err - Error to handle\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */ _unhandledRejection(err) {\n        const info = this.getAllInfo(err);\n        const handlers = this._getRejectionHandlers();\n        // Calculate if we should exit on this error\n        let doExit = typeof this.logger.exitOnError === \"function\" ? this.logger.exitOnError(err) : this.logger.exitOnError;\n        let timeout;\n        if (!handlers.length && doExit) {\n            // eslint-disable-next-line no-console\n            console.warn(\"winston: exitOnError cannot be true with no rejection handlers.\");\n            // eslint-disable-next-line no-console\n            console.warn(\"winston: not exiting process.\");\n            doExit = false;\n        }\n        function gracefulExit() {\n            debug(\"doExit\", doExit);\n            debug(\"process._exiting\", process._exiting);\n            if (doExit && !process._exiting) {\n                // Remark: Currently ignoring any rejections from transports when\n                // catching unhandled rejections.\n                if (timeout) {\n                    clearTimeout(timeout);\n                }\n                // eslint-disable-next-line no-process-exit\n                process.exit(1);\n            }\n        }\n        if (!handlers || handlers.length === 0) {\n            return process.nextTick(gracefulExit);\n        }\n        // Log to all transports attempting to listen for when they are completed.\n        asyncForEach(handlers, (handler, next)=>{\n            const done = once(next);\n            const transport = handler.transport || handler;\n            // Debug wrapping so that we can inspect what's going on under the covers.\n            function onDone(event) {\n                return ()=>{\n                    debug(event);\n                    done();\n                };\n            }\n            transport._ending = true;\n            transport.once(\"finish\", onDone(\"finished\"));\n            transport.once(\"error\", onDone(\"error\"));\n        }, ()=>doExit && gracefulExit());\n        this.logger.log(info);\n        // If exitOnError is true, then only allow the logging of exceptions to\n        // take up to `3000ms`.\n        if (doExit) {\n            timeout = setTimeout(gracefulExit, 3000);\n        }\n    }\n    /**\n   * Returns the list of transports and exceptionHandlers for this instance.\n   * @returns {Array} - List of transports and exceptionHandlers for this\n   * instance.\n   * @private\n   */ _getRejectionHandlers() {\n        // Remark (indexzero): since `logger.transports` returns all of the pipes\n        // from the _readableState of the stream we actually get the join of the\n        // explicit handlers and the implicit transports with\n        // `handleRejections: true`\n        return this.logger.transports.filter((wrap)=>{\n            const transport = wrap.transport || wrap;\n            return transport.handleRejections;\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/rejection-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/rejection-stream.js":
/*!**************************************************************!*\
  !*** ./node_modules/winston/lib/winston/rejection-stream.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * rejection-stream.js: TODO: add file header handler.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst { Writable } = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\");\n/**\n * TODO: add class description.\n * @type {RejectionStream}\n * @extends {Writable}\n */ module.exports = class RejectionStream extends Writable {\n    /**\n   * Constructor function for the RejectionStream responsible for wrapping a\n   * TransportStream; only allowing writes of `info` objects with\n   * `info.rejection` set to true.\n   * @param {!TransportStream} transport - Stream to filter to rejections\n   */ constructor(transport){\n        super({\n            objectMode: true\n        });\n        if (!transport) {\n            throw new Error(\"RejectionStream requires a TransportStream instance.\");\n        }\n        this.handleRejections = true;\n        this.transport = transport;\n    }\n    /**\n   * Writes the info object to our transport instance if (and only if) the\n   * `rejection` property is set on the info.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */ _write(info, enc, callback) {\n        if (info.rejection) {\n            return this.transport.log(info, callback);\n        }\n        callback();\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9yZWplY3Rpb24tc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBRUQ7QUFFQSxNQUFNLEVBQUVBLFFBQVEsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUU3Qjs7OztDQUlDLEdBQ0RDLE9BQU9DLE9BQU8sR0FBRyxNQUFNQyx3QkFBd0JKO0lBQzdDOzs7OztHQUtDLEdBQ0RLLFlBQVlDLFNBQVMsQ0FBRTtRQUNyQixLQUFLLENBQUM7WUFBRUMsWUFBWTtRQUFLO1FBRXpCLElBQUksQ0FBQ0QsV0FBVztZQUNkLE1BQU0sSUFBSUUsTUFBTTtRQUNsQjtRQUVBLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7UUFDeEIsSUFBSSxDQUFDSCxTQUFTLEdBQUdBO0lBQ25CO0lBRUE7Ozs7Ozs7O0dBUUMsR0FDREksT0FBT0MsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtRQUMxQixJQUFJRixLQUFLRyxTQUFTLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUNSLFNBQVMsQ0FBQ1MsR0FBRyxDQUFDSixNQUFNRTtRQUNsQztRQUVBQTtRQUNBLE9BQU87SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9yZWplY3Rpb24tc3RyZWFtLmpzP2NhZTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiByZWplY3Rpb24tc3RyZWFtLmpzOiBUT0RPOiBhZGQgZmlsZSBoZWFkZXIgaGFuZGxlci5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IFdyaXRhYmxlIH0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKTtcblxuLyoqXG4gKiBUT0RPOiBhZGQgY2xhc3MgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7UmVqZWN0aW9uU3RyZWFtfVxuICogQGV4dGVuZHMge1dyaXRhYmxlfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFJlamVjdGlvblN0cmVhbSBleHRlbmRzIFdyaXRhYmxlIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgUmVqZWN0aW9uU3RyZWFtIHJlc3BvbnNpYmxlIGZvciB3cmFwcGluZyBhXG4gICAqIFRyYW5zcG9ydFN0cmVhbTsgb25seSBhbGxvd2luZyB3cml0ZXMgb2YgYGluZm9gIG9iamVjdHMgd2l0aFxuICAgKiBgaW5mby5yZWplY3Rpb25gIHNldCB0byB0cnVlLlxuICAgKiBAcGFyYW0geyFUcmFuc3BvcnRTdHJlYW19IHRyYW5zcG9ydCAtIFN0cmVhbSB0byBmaWx0ZXIgdG8gcmVqZWN0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IodHJhbnNwb3J0KSB7XG4gICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuXG4gICAgaWYgKCF0cmFuc3BvcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVqZWN0aW9uU3RyZWFtIHJlcXVpcmVzIGEgVHJhbnNwb3J0U3RyZWFtIGluc3RhbmNlLicpO1xuICAgIH1cblxuICAgIHRoaXMuaGFuZGxlUmVqZWN0aW9ucyA9IHRydWU7XG4gICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGVzIHRoZSBpbmZvIG9iamVjdCB0byBvdXIgdHJhbnNwb3J0IGluc3RhbmNlIGlmIChhbmQgb25seSBpZikgdGhlXG4gICAqIGByZWplY3Rpb25gIHByb3BlcnR5IGlzIHNldCBvbiB0aGUgaW5mby5cbiAgICogQHBhcmFtIHttaXhlZH0gaW5mbyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHBhcmFtIHttaXhlZH0gZW5jIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcGFyYW0ge21peGVkfSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfd3JpdGUoaW5mbywgZW5jLCBjYWxsYmFjaykge1xuICAgIGlmIChpbmZvLnJlamVjdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0LmxvZyhpbmZvLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgY2FsbGJhY2soKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJXcml0YWJsZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiUmVqZWN0aW9uU3RyZWFtIiwiY29uc3RydWN0b3IiLCJ0cmFuc3BvcnQiLCJvYmplY3RNb2RlIiwiRXJyb3IiLCJoYW5kbGVSZWplY3Rpb25zIiwiX3dyaXRlIiwiaW5mbyIsImVuYyIsImNhbGxiYWNrIiwicmVqZWN0aW9uIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/rejection-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/tail-file.js":
/*!*******************************************************!*\
  !*** ./node_modules/winston/lib/winston/tail-file.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * tail-file.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { StringDecoder } = __webpack_require__(/*! string_decoder */ \"string_decoder\");\nconst { Stream } = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\");\n/**\n * Simple no-op function.\n * @returns {undefined}\n */ function noop() {}\n/**\n * TODO: add function description.\n * @param {Object} options - Options for tail.\n * @param {function} iter - Iterator function to execute on every line.\n* `tail -f` a file. Options must include file.\n * @returns {mixed} - TODO: add return description.\n */ module.exports = (options, iter)=>{\n    const buffer = Buffer.alloc(64 * 1024);\n    const decode = new StringDecoder(\"utf8\");\n    const stream = new Stream();\n    let buff = \"\";\n    let pos = 0;\n    let row = 0;\n    if (options.start === -1) {\n        delete options.start;\n    }\n    stream.readable = true;\n    stream.destroy = ()=>{\n        stream.destroyed = true;\n        stream.emit(\"end\");\n        stream.emit(\"close\");\n    };\n    fs.open(options.file, \"a+\", \"0644\", (err, fd)=>{\n        if (err) {\n            if (!iter) {\n                stream.emit(\"error\", err);\n            } else {\n                iter(err);\n            }\n            stream.destroy();\n            return;\n        }\n        (function read() {\n            if (stream.destroyed) {\n                fs.close(fd, noop);\n                return;\n            }\n            return fs.read(fd, buffer, 0, buffer.length, pos, (error, bytes)=>{\n                if (error) {\n                    if (!iter) {\n                        stream.emit(\"error\", error);\n                    } else {\n                        iter(error);\n                    }\n                    stream.destroy();\n                    return;\n                }\n                if (!bytes) {\n                    if (buff) {\n                        // eslint-disable-next-line eqeqeq\n                        if (options.start == null || row > options.start) {\n                            if (!iter) {\n                                stream.emit(\"line\", buff);\n                            } else {\n                                iter(null, buff);\n                            }\n                        }\n                        row++;\n                        buff = \"\";\n                    }\n                    return setTimeout(read, 1000);\n                }\n                let data = decode.write(buffer.slice(0, bytes));\n                if (!iter) {\n                    stream.emit(\"data\", data);\n                }\n                data = (buff + data).split(/\\n+/);\n                const l = data.length - 1;\n                let i = 0;\n                for(; i < l; i++){\n                    // eslint-disable-next-line eqeqeq\n                    if (options.start == null || row > options.start) {\n                        if (!iter) {\n                            stream.emit(\"line\", data[i]);\n                        } else {\n                            iter(null, data[i]);\n                        }\n                    }\n                    row++;\n                }\n                buff = data[l];\n                pos += bytes;\n                return read();\n            });\n        })();\n    });\n    if (!iter) {\n        return stream;\n    }\n    return stream.destroy;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi90YWlsLWZpbGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FFRDtBQUVBLE1BQU1BLEtBQUtDLG1CQUFPQSxDQUFDO0FBQ25CLE1BQU0sRUFBRUMsYUFBYSxFQUFFLEdBQUdELG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU0sRUFBRUUsTUFBTSxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBRTNCOzs7Q0FHQyxHQUNELFNBQVNHLFFBQVE7QUFFakI7Ozs7OztDQU1DLEdBQ0RDLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxTQUFTQztJQUN6QixNQUFNQyxTQUFTQyxPQUFPQyxLQUFLLENBQUMsS0FBSztJQUNqQyxNQUFNQyxTQUFTLElBQUlWLGNBQWM7SUFDakMsTUFBTVcsU0FBUyxJQUFJVjtJQUNuQixJQUFJVyxPQUFPO0lBQ1gsSUFBSUMsTUFBTTtJQUNWLElBQUlDLE1BQU07SUFFVixJQUFJVCxRQUFRVSxLQUFLLEtBQUssQ0FBQyxHQUFHO1FBQ3hCLE9BQU9WLFFBQVFVLEtBQUs7SUFDdEI7SUFFQUosT0FBT0ssUUFBUSxHQUFHO0lBQ2xCTCxPQUFPTSxPQUFPLEdBQUc7UUFDZk4sT0FBT08sU0FBUyxHQUFHO1FBQ25CUCxPQUFPUSxJQUFJLENBQUM7UUFDWlIsT0FBT1EsSUFBSSxDQUFDO0lBQ2Q7SUFFQXJCLEdBQUdzQixJQUFJLENBQUNmLFFBQVFnQixJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUNDLEtBQUtDO1FBQ3hDLElBQUlELEtBQUs7WUFDUCxJQUFJLENBQUNoQixNQUFNO2dCQUNUSyxPQUFPUSxJQUFJLENBQUMsU0FBU0c7WUFDdkIsT0FBTztnQkFDTGhCLEtBQUtnQjtZQUNQO1lBQ0FYLE9BQU9NLE9BQU87WUFDZDtRQUNGO1FBRUMsVUFBU087WUFDUixJQUFJYixPQUFPTyxTQUFTLEVBQUU7Z0JBQ3BCcEIsR0FBRzJCLEtBQUssQ0FBQ0YsSUFBSXJCO2dCQUNiO1lBQ0Y7WUFFQSxPQUFPSixHQUFHMEIsSUFBSSxDQUFDRCxJQUFJaEIsUUFBUSxHQUFHQSxPQUFPbUIsTUFBTSxFQUFFYixLQUFLLENBQUNjLE9BQU9DO2dCQUN4RCxJQUFJRCxPQUFPO29CQUNULElBQUksQ0FBQ3JCLE1BQU07d0JBQ1RLLE9BQU9RLElBQUksQ0FBQyxTQUFTUTtvQkFDdkIsT0FBTzt3QkFDTHJCLEtBQUtxQjtvQkFDUDtvQkFDQWhCLE9BQU9NLE9BQU87b0JBQ2Q7Z0JBQ0Y7Z0JBRUEsSUFBSSxDQUFDVyxPQUFPO29CQUNWLElBQUloQixNQUFNO3dCQUNSLGtDQUFrQzt3QkFDbEMsSUFBSVAsUUFBUVUsS0FBSyxJQUFJLFFBQVFELE1BQU1ULFFBQVFVLEtBQUssRUFBRTs0QkFDaEQsSUFBSSxDQUFDVCxNQUFNO2dDQUNUSyxPQUFPUSxJQUFJLENBQUMsUUFBUVA7NEJBQ3RCLE9BQU87Z0NBQ0xOLEtBQUssTUFBTU07NEJBQ2I7d0JBQ0Y7d0JBQ0FFO3dCQUNBRixPQUFPO29CQUNUO29CQUNBLE9BQU9pQixXQUFXTCxNQUFNO2dCQUMxQjtnQkFFQSxJQUFJTSxPQUFPcEIsT0FBT3FCLEtBQUssQ0FBQ3hCLE9BQU95QixLQUFLLENBQUMsR0FBR0o7Z0JBQ3hDLElBQUksQ0FBQ3RCLE1BQU07b0JBQ1RLLE9BQU9RLElBQUksQ0FBQyxRQUFRVztnQkFDdEI7Z0JBRUFBLE9BQU8sQ0FBQ2xCLE9BQU9rQixJQUFHLEVBQUdHLEtBQUssQ0FBQztnQkFFM0IsTUFBTUMsSUFBSUosS0FBS0osTUFBTSxHQUFHO2dCQUN4QixJQUFJUyxJQUFJO2dCQUVSLE1BQU9BLElBQUlELEdBQUdDLElBQUs7b0JBQ2pCLGtDQUFrQztvQkFDbEMsSUFBSTlCLFFBQVFVLEtBQUssSUFBSSxRQUFRRCxNQUFNVCxRQUFRVSxLQUFLLEVBQUU7d0JBQ2hELElBQUksQ0FBQ1QsTUFBTTs0QkFDVEssT0FBT1EsSUFBSSxDQUFDLFFBQVFXLElBQUksQ0FBQ0ssRUFBRTt3QkFDN0IsT0FBTzs0QkFDTDdCLEtBQUssTUFBTXdCLElBQUksQ0FBQ0ssRUFBRTt3QkFDcEI7b0JBQ0Y7b0JBQ0FyQjtnQkFDRjtnQkFFQUYsT0FBT2tCLElBQUksQ0FBQ0ksRUFBRTtnQkFDZHJCLE9BQU9lO2dCQUNQLE9BQU9KO1lBQ1Q7UUFDRjtJQUNGO0lBRUEsSUFBSSxDQUFDbEIsTUFBTTtRQUNULE9BQU9LO0lBQ1Q7SUFFQSxPQUFPQSxPQUFPTSxPQUFPO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi90YWlsLWZpbGUuanM/OTk5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHRhaWwtZmlsZS5qczogVE9ETzogYWRkIGZpbGUgaGVhZGVyIGRlc2NyaXB0aW9uLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgU3RyaW5nRGVjb2RlciB9ID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKTtcbmNvbnN0IHsgU3RyZWFtIH0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKTtcblxuLyoqXG4gKiBTaW1wbGUgbm8tb3AgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBub29wKCkge31cblxuLyoqXG4gKiBUT0RPOiBhZGQgZnVuY3Rpb24gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRhaWwuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBpdGVyIC0gSXRlcmF0b3IgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBsaW5lLlxuKiBgdGFpbCAtZmAgYSBmaWxlLiBPcHRpb25zIG11c3QgaW5jbHVkZSBmaWxlLlxuICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKG9wdGlvbnMsIGl0ZXIpID0+IHtcbiAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKDY0ICogMTAyNCk7XG4gIGNvbnN0IGRlY29kZSA9IG5ldyBTdHJpbmdEZWNvZGVyKCd1dGY4Jyk7XG4gIGNvbnN0IHN0cmVhbSA9IG5ldyBTdHJlYW0oKTtcbiAgbGV0IGJ1ZmYgPSAnJztcbiAgbGV0IHBvcyA9IDA7XG4gIGxldCByb3cgPSAwO1xuXG4gIGlmIChvcHRpb25zLnN0YXJ0ID09PSAtMSkge1xuICAgIGRlbGV0ZSBvcHRpb25zLnN0YXJ0O1xuICB9XG5cbiAgc3RyZWFtLnJlYWRhYmxlID0gdHJ1ZTtcbiAgc3RyZWFtLmRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgc3RyZWFtLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICAgIHN0cmVhbS5lbWl0KCdjbG9zZScpO1xuICB9O1xuXG4gIGZzLm9wZW4ob3B0aW9ucy5maWxlLCAnYSsnLCAnMDY0NCcsIChlcnIsIGZkKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyKGVycik7XG4gICAgICB9XG4gICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIChmdW5jdGlvbiByZWFkKCkge1xuICAgICAgaWYgKHN0cmVhbS5kZXN0cm95ZWQpIHtcbiAgICAgICAgZnMuY2xvc2UoZmQsIG5vb3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmcy5yZWFkKGZkLCBidWZmZXIsIDAsIGJ1ZmZlci5sZW5ndGgsIHBvcywgKGVycm9yLCBieXRlcykgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoIWl0ZXIpIHtcbiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFieXRlcykge1xuICAgICAgICAgIGlmIChidWZmKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdGFydCA9PSBudWxsIHx8IHJvdyA+IG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2xpbmUnLCBidWZmKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVyKG51bGwsIGJ1ZmYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3crKztcbiAgICAgICAgICAgIGJ1ZmYgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVhZCwgMTAwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGF0YSA9IGRlY29kZS53cml0ZShidWZmZXIuc2xpY2UoMCwgYnl0ZXMpKTtcbiAgICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEgPSAoYnVmZiArIGRhdGEpLnNwbGl0KC9cXG4rLyk7XG5cbiAgICAgICAgY29uc3QgbCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgICAgbGV0IGkgPSAwO1xuXG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgICAgIGlmIChvcHRpb25zLnN0YXJ0ID09IG51bGwgfHwgcm93ID4gb3B0aW9ucy5zdGFydCkge1xuICAgICAgICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdsaW5lJywgZGF0YVtpXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpdGVyKG51bGwsIGRhdGFbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByb3crKztcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmYgPSBkYXRhW2xdO1xuICAgICAgICBwb3MgKz0gYnl0ZXM7XG4gICAgICAgIHJldHVybiByZWFkKCk7XG4gICAgICB9KTtcbiAgICB9KCkpO1xuICB9KTtcblxuICBpZiAoIWl0ZXIpIHtcbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG5cbiAgcmV0dXJuIHN0cmVhbS5kZXN0cm95O1xufTtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJTdHJpbmdEZWNvZGVyIiwiU3RyZWFtIiwibm9vcCIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwiaXRlciIsImJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jIiwiZGVjb2RlIiwic3RyZWFtIiwiYnVmZiIsInBvcyIsInJvdyIsInN0YXJ0IiwicmVhZGFibGUiLCJkZXN0cm95IiwiZGVzdHJveWVkIiwiZW1pdCIsIm9wZW4iLCJmaWxlIiwiZXJyIiwiZmQiLCJyZWFkIiwiY2xvc2UiLCJsZW5ndGgiLCJlcnJvciIsImJ5dGVzIiwic2V0VGltZW91dCIsImRhdGEiLCJ3cml0ZSIsInNsaWNlIiwic3BsaXQiLCJsIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/tail-file.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/transports/console.js":
/*!****************************************************************!*\
  !*** ./node_modules/winston/lib/winston/transports/console.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable no-console */ /*\n * console.js: Transport for outputting to the console.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst os = __webpack_require__(/*! os */ \"os\");\nconst { LEVEL, MESSAGE } = __webpack_require__(/*! triple-beam */ \"(ssr)/./node_modules/triple-beam/index.js\");\nconst TransportStream = __webpack_require__(/*! winston-transport */ \"(ssr)/./node_modules/winston-transport/index.js\");\n/**\n * Transport for outputting to the console.\n * @type {Console}\n * @extends {TransportStream}\n */ module.exports = class Console extends TransportStream {\n    /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */ constructor(options = {}){\n        super(options);\n        // Expose the name of this Transport on the prototype\n        this.name = options.name || \"console\";\n        this.stderrLevels = this._stringArrayToSet(options.stderrLevels);\n        this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);\n        this.eol = typeof options.eol === \"string\" ? options.eol : os.EOL;\n        this.forceConsole = options.forceConsole || false;\n        // Keep a reference to the log, warn, and error console methods\n        // in case they get redirected to this transport after the logger is\n        // instantiated. This prevents a circular reference issue.\n        this._consoleLog = console.log.bind(console);\n        this._consoleWarn = console.warn.bind(console);\n        this._consoleError = console.error.bind(console);\n        this.setMaxListeners(30);\n    }\n    /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ log(info, callback) {\n        setImmediate(()=>this.emit(\"logged\", info));\n        // Remark: what if there is no raw...?\n        if (this.stderrLevels[info[LEVEL]]) {\n            if (console._stderr && !this.forceConsole) {\n                // Node.js maps `process.stderr` to `console._stderr`.\n                console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n            } else {\n                // console.error adds a newline\n                this._consoleError(info[MESSAGE]);\n            }\n            if (callback) {\n                callback(); // eslint-disable-line callback-return\n            }\n            return;\n        } else if (this.consoleWarnLevels[info[LEVEL]]) {\n            if (console._stderr && !this.forceConsole) {\n                // Node.js maps `process.stderr` to `console._stderr`.\n                // in Node.js console.warn is an alias for console.error\n                console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n            } else {\n                // console.warn adds a newline\n                this._consoleWarn(info[MESSAGE]);\n            }\n            if (callback) {\n                callback(); // eslint-disable-line callback-return\n            }\n            return;\n        }\n        if (console._stdout && !this.forceConsole) {\n            // Node.js maps `process.stdout` to `console._stdout`.\n            console._stdout.write(`${info[MESSAGE]}${this.eol}`);\n        } else {\n            // console.log adds a newline.\n            this._consoleLog(info[MESSAGE]);\n        }\n        if (callback) {\n            callback(); // eslint-disable-line callback-return\n        }\n    }\n    /**\n   * Returns a Set-like object with strArray's elements as keys (each with the\n   * value true).\n   * @param {Array} strArray - Array of Set-elements as strings.\n   * @param {?string} [errMsg] - Custom error message thrown on invalid input.\n   * @returns {Object} - TODO: add return description.\n   * @private\n   */ _stringArrayToSet(strArray, errMsg) {\n        if (!strArray) return {};\n        errMsg = errMsg || \"Cannot make set from type other than Array of string elements\";\n        if (!Array.isArray(strArray)) {\n            throw new Error(errMsg);\n        }\n        return strArray.reduce((set, el)=>{\n            if (typeof el !== \"string\") {\n                throw new Error(errMsg);\n            }\n            set[el] = true;\n            return set;\n        }, {});\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/transports/console.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/transports/file.js":
/*!*************************************************************!*\
  !*** ./node_modules/winston/lib/winston/transports/file.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable complexity,max-statements */ /**\n * file.js: Transport for outputting to a local log file.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst asyncSeries = __webpack_require__(/*! async/series */ \"(ssr)/./node_modules/async/series.js\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst { MESSAGE } = __webpack_require__(/*! triple-beam */ \"(ssr)/./node_modules/triple-beam/index.js\");\nconst { Stream, PassThrough } = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\");\nconst TransportStream = __webpack_require__(/*! winston-transport */ \"(ssr)/./node_modules/winston-transport/index.js\");\nconst debug = __webpack_require__(/*! @dabh/diagnostics */ \"(ssr)/./node_modules/@dabh/diagnostics/node/index.js\")(\"winston:file\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst tailFile = __webpack_require__(/*! ../tail-file */ \"(ssr)/./node_modules/winston/lib/winston/tail-file.js\");\n/**\n * Transport for outputting to a local log file.\n * @type {File}\n * @extends {TransportStream}\n */ module.exports = class File extends TransportStream {\n    /**\n   * Constructor function for the File transport object responsible for\n   * persisting log messages and metadata to one or more files.\n   * @param {Object} options - Options for this instance.\n   */ constructor(options = {}){\n        super(options);\n        // Expose the name of this Transport on the prototype.\n        this.name = options.name || \"file\";\n        // Helper function which throws an `Error` in the event that any of the\n        // rest of the arguments is present in `options`.\n        function throwIf(target, ...args) {\n            args.slice(1).forEach((name)=>{\n                if (options[name]) {\n                    throw new Error(`Cannot set ${name} and ${target} together`);\n                }\n            });\n        }\n        // Setup the base stream that always gets piped to to handle buffering.\n        this._stream = new PassThrough();\n        this._stream.setMaxListeners(30);\n        // Bind this context for listener methods.\n        this._onError = this._onError.bind(this);\n        if (options.filename || options.dirname) {\n            throwIf(\"filename or dirname\", \"stream\");\n            this._basename = this.filename = options.filename ? path.basename(options.filename) : \"winston.log\";\n            this.dirname = options.dirname || path.dirname(options.filename);\n            this.options = options.options || {\n                flags: \"a\"\n            };\n        } else if (options.stream) {\n            // eslint-disable-next-line no-console\n            console.warn(\"options.stream will be removed in winston@4. Use winston.transports.Stream\");\n            throwIf(\"stream\", \"filename\", \"maxsize\");\n            this._dest = this._stream.pipe(this._setupStream(options.stream));\n            this.dirname = path.dirname(this._dest.path);\n        // We need to listen for drain events when write() returns false. This\n        // can make node mad at times.\n        } else {\n            throw new Error(\"Cannot log to file without filename or stream.\");\n        }\n        this.maxsize = options.maxsize || null;\n        this.rotationFormat = options.rotationFormat || false;\n        this.zippedArchive = options.zippedArchive || false;\n        this.maxFiles = options.maxFiles || null;\n        this.eol = typeof options.eol === \"string\" ? options.eol : os.EOL;\n        this.tailable = options.tailable || false;\n        this.lazy = options.lazy || false;\n        // Internal state variables representing the number of files this instance\n        // has created and the current size (in bytes) of the current logfile.\n        this._size = 0;\n        this._pendingSize = 0;\n        this._created = 0;\n        this._drain = false;\n        this._opening = false;\n        this._ending = false;\n        this._fileExist = false;\n        if (this.dirname) this._createLogDirIfNotExist(this.dirname);\n        if (!this.lazy) this.open();\n    }\n    finishIfEnding() {\n        if (this._ending) {\n            if (this._opening) {\n                this.once(\"open\", ()=>{\n                    this._stream.once(\"finish\", ()=>this.emit(\"finish\"));\n                    setImmediate(()=>this._stream.end());\n                });\n            } else {\n                this._stream.once(\"finish\", ()=>this.emit(\"finish\"));\n                setImmediate(()=>this._stream.end());\n            }\n        }\n    }\n    /**\n   * Core logging method exposed to Winston. Metadata is optional.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ log(info, callback = ()=>{}) {\n        // Remark: (jcrugzz) What is necessary about this callback(null, true) now\n        // when thinking about 3.x? Should silent be handled in the base\n        // TransportStream _write method?\n        if (this.silent) {\n            callback();\n            return true;\n        }\n        // Output stream buffer is full and has asked us to wait for the drain event\n        if (this._drain) {\n            this._stream.once(\"drain\", ()=>{\n                this._drain = false;\n                this.log(info, callback);\n            });\n            return;\n        }\n        if (this._rotate) {\n            this._stream.once(\"rotate\", ()=>{\n                this._rotate = false;\n                this.log(info, callback);\n            });\n            return;\n        }\n        if (this.lazy) {\n            if (!this._fileExist) {\n                if (!this._opening) {\n                    this.open();\n                }\n                this.once(\"open\", ()=>{\n                    this._fileExist = true;\n                    this.log(info, callback);\n                    return;\n                });\n                return;\n            }\n            if (this._needsNewFile(this._pendingSize)) {\n                this._dest.once(\"close\", ()=>{\n                    if (!this._opening) {\n                        this.open();\n                    }\n                    this.once(\"open\", ()=>{\n                        this.log(info, callback);\n                        return;\n                    });\n                    return;\n                });\n                return;\n            }\n        }\n        // Grab the raw string and append the expected EOL.\n        const output = `${info[MESSAGE]}${this.eol}`;\n        const bytes = Buffer.byteLength(output);\n        // After we have written to the PassThrough check to see if we need\n        // to rotate to the next file.\n        //\n        // Remark: This gets called too early and does not depict when data\n        // has been actually flushed to disk.\n        function logged() {\n            this._size += bytes;\n            this._pendingSize -= bytes;\n            debug(\"logged %s %s\", this._size, output);\n            this.emit(\"logged\", info);\n            // Do not attempt to rotate files while rotating\n            if (this._rotate) {\n                return;\n            }\n            // Do not attempt to rotate files while opening\n            if (this._opening) {\n                return;\n            }\n            // Check to see if we need to end the stream and create a new one.\n            if (!this._needsNewFile()) {\n                return;\n            }\n            if (this.lazy) {\n                this._endStream(()=>{\n                    this.emit(\"fileclosed\");\n                });\n                return;\n            }\n            // End the current stream, ensure it flushes and create a new one.\n            // This could potentially be optimized to not run a stat call but its\n            // the safest way since we are supporting `maxFiles`.\n            this._rotate = true;\n            this._endStream(()=>this._rotateFile());\n        }\n        // Keep track of the pending bytes being written while files are opening\n        // in order to properly rotate the PassThrough this._stream when the file\n        // eventually does open.\n        this._pendingSize += bytes;\n        if (this._opening && !this.rotatedWhileOpening && this._needsNewFile(this._size + this._pendingSize)) {\n            this.rotatedWhileOpening = true;\n        }\n        const written = this._stream.write(output, logged.bind(this));\n        if (!written) {\n            this._drain = true;\n            this._stream.once(\"drain\", ()=>{\n                this._drain = false;\n                callback();\n            });\n        } else {\n            callback(); // eslint-disable-line callback-return\n        }\n        debug(\"written\", written, this._drain);\n        this.finishIfEnding();\n        return written;\n    }\n    /**\n   * Query the transport. Options object is optional.\n   * @param {Object} options - Loggly-like query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * TODO: Refactor me.\n   */ query(options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n        options = normalizeQuery(options);\n        const file = path.join(this.dirname, this.filename);\n        let buff = \"\";\n        let results = [];\n        let row = 0;\n        const stream = fs.createReadStream(file, {\n            encoding: \"utf8\"\n        });\n        stream.on(\"error\", (err)=>{\n            if (stream.readable) {\n                stream.destroy();\n            }\n            if (!callback) {\n                return;\n            }\n            return err.code !== \"ENOENT\" ? callback(err) : callback(null, results);\n        });\n        stream.on(\"data\", (data)=>{\n            data = (buff + data).split(/\\n+/);\n            const l = data.length - 1;\n            let i = 0;\n            for(; i < l; i++){\n                if (!options.start || row >= options.start) {\n                    add(data[i]);\n                }\n                row++;\n            }\n            buff = data[l];\n        });\n        stream.on(\"close\", ()=>{\n            if (buff) {\n                add(buff, true);\n            }\n            if (options.order === \"desc\") {\n                results = results.reverse();\n            }\n            // eslint-disable-next-line callback-return\n            if (callback) callback(null, results);\n        });\n        function add(buff, attempt) {\n            try {\n                const log = JSON.parse(buff);\n                if (check(log)) {\n                    push(log);\n                }\n            } catch (e) {\n                if (!attempt) {\n                    stream.emit(\"error\", e);\n                }\n            }\n        }\n        function push(log) {\n            if (options.rows && results.length >= options.rows && options.order !== \"desc\") {\n                if (stream.readable) {\n                    stream.destroy();\n                }\n                return;\n            }\n            if (options.fields) {\n                log = options.fields.reduce((obj, key)=>{\n                    obj[key] = log[key];\n                    return obj;\n                }, {});\n            }\n            if (options.order === \"desc\") {\n                if (results.length >= options.rows) {\n                    results.shift();\n                }\n            }\n            results.push(log);\n        }\n        function check(log) {\n            if (!log) {\n                return;\n            }\n            if (typeof log !== \"object\") {\n                return;\n            }\n            const time = new Date(log.timestamp);\n            if (options.from && time < options.from || options.until && time > options.until || options.level && options.level !== log.level) {\n                return;\n            }\n            return true;\n        }\n        function normalizeQuery(options) {\n            options = options || {};\n            // limit\n            options.rows = options.rows || options.limit || 10;\n            // starting row offset\n            options.start = options.start || 0;\n            // now\n            options.until = options.until || new Date();\n            if (typeof options.until !== \"object\") {\n                options.until = new Date(options.until);\n            }\n            // now - 24\n            options.from = options.from || options.until - 24 * 60 * 60 * 1000;\n            if (typeof options.from !== \"object\") {\n                options.from = new Date(options.from);\n            }\n            // 'asc' or 'desc'\n            options.order = options.order || \"desc\";\n            return options;\n        }\n    }\n    /**\n   * Returns a log stream for this transport. Options object is optional.\n   * @param {Object} options - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description.\n   * TODO: Refactor me.\n   */ stream(options = {}) {\n        const file = path.join(this.dirname, this.filename);\n        const stream = new Stream();\n        const tail = {\n            file,\n            start: options.start\n        };\n        stream.destroy = tailFile(tail, (err, line)=>{\n            if (err) {\n                return stream.emit(\"error\", err);\n            }\n            try {\n                stream.emit(\"data\", line);\n                line = JSON.parse(line);\n                stream.emit(\"log\", line);\n            } catch (e) {\n                stream.emit(\"error\", e);\n            }\n        });\n        return stream;\n    }\n    /**\n   * Checks to see the filesize of.\n   * @returns {undefined}\n   */ open() {\n        // If we do not have a filename then we were passed a stream and\n        // don't need to keep track of size.\n        if (!this.filename) return;\n        if (this._opening) return;\n        this._opening = true;\n        // Stat the target file to get the size and create the stream.\n        this.stat((err, size)=>{\n            if (err) {\n                return this.emit(\"error\", err);\n            }\n            debug(\"stat done: %s { size: %s }\", this.filename, size);\n            this._size = size;\n            this._dest = this._createStream(this._stream);\n            this._opening = false;\n            this.once(\"open\", ()=>{\n                if (!this._stream.emit(\"rotate\")) {\n                    this._rotate = false;\n                }\n            });\n        });\n    }\n    /**\n   * Stat the file and assess information in order to create the proper stream.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ stat(callback) {\n        const target = this._getFile();\n        const fullpath = path.join(this.dirname, target);\n        fs.stat(fullpath, (err, stat)=>{\n            if (err && err.code === \"ENOENT\") {\n                debug(\"ENOENT\\xa0ok\", fullpath);\n                // Update internally tracked filename with the new target name.\n                this.filename = target;\n                return callback(null, 0);\n            }\n            if (err) {\n                debug(`err ${err.code} ${fullpath}`);\n                return callback(err);\n            }\n            if (!stat || this._needsNewFile(stat.size)) {\n                // If `stats.size` is greater than the `maxsize` for this\n                // instance then try again.\n                return this._incFile(()=>this.stat(callback));\n            }\n            // Once we have figured out what the filename is, set it\n            // and return the size.\n            this.filename = target;\n            callback(null, stat.size);\n        });\n    }\n    /**\n   * Closes the stream associated with this instance.\n   * @param {function} cb - TODO: add param description.\n   * @returns {undefined}\n   */ close(cb) {\n        if (!this._stream) {\n            return;\n        }\n        this._stream.end(()=>{\n            if (cb) {\n                cb(); // eslint-disable-line callback-return\n            }\n            this.emit(\"flush\");\n            this.emit(\"closed\");\n        });\n    }\n    /**\n   * TODO: add method description.\n   * @param {number} size - TODO: add param description.\n   * @returns {undefined}\n   */ _needsNewFile(size) {\n        size = size || this._size;\n        return this.maxsize && size >= this.maxsize;\n    }\n    /**\n   * TODO: add method description.\n   * @param {Error} err - TODO: add param description.\n   * @returns {undefined}\n   */ _onError(err) {\n        this.emit(\"error\", err);\n    }\n    /**\n   * TODO: add method description.\n   * @param {Stream} stream - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */ _setupStream(stream) {\n        stream.on(\"error\", this._onError);\n        return stream;\n    }\n    /**\n   * TODO: add method description.\n   * @param {Stream} stream - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */ _cleanupStream(stream) {\n        stream.removeListener(\"error\", this._onError);\n        stream.destroy();\n        return stream;\n    }\n    /**\n   * TODO: add method description.\n   */ _rotateFile() {\n        this._incFile(()=>this.open());\n    }\n    /**\n   * Unpipe from the stream that has been marked as full and end it so it\n   * flushes to disk.\n   *\n   * @param {function} callback - Callback for when the current file has closed.\n   * @private\n   */ _endStream(callback = ()=>{}) {\n        if (this._dest) {\n            this._stream.unpipe(this._dest);\n            this._dest.end(()=>{\n                this._cleanupStream(this._dest);\n                callback();\n            });\n        } else {\n            callback(); // eslint-disable-line callback-return\n        }\n    }\n    /**\n   * Returns the WritableStream for the active file on this instance. If we\n   * should gzip the file then a zlib stream is returned.\n   *\n   * @param {ReadableStream} source –PassThrough to pipe to the file when open.\n   * @returns {WritableStream} Stream that writes to disk for the active file.\n   */ _createStream(source) {\n        const fullpath = path.join(this.dirname, this.filename);\n        debug(\"create stream start\", fullpath, this.options);\n        const dest = fs.createWriteStream(fullpath, this.options)// TODO: What should we do with errors here?\n        .on(\"error\", (err)=>debug(err)).on(\"close\", ()=>debug(\"close\", dest.path, dest.bytesWritten)).on(\"open\", ()=>{\n            debug(\"file open ok\", fullpath);\n            this.emit(\"open\", fullpath);\n            source.pipe(dest);\n            // If rotation occured during the open operation then we immediately\n            // start writing to a new PassThrough, begin opening the next file\n            // and cleanup the previous source and dest once the source has drained.\n            if (this.rotatedWhileOpening) {\n                this._stream = new PassThrough();\n                this._stream.setMaxListeners(30);\n                this._rotateFile();\n                this.rotatedWhileOpening = false;\n                this._cleanupStream(dest);\n                source.end();\n            }\n        });\n        debug(\"create stream ok\", fullpath);\n        return dest;\n    }\n    /**\n   * TODO: add method description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ _incFile(callback) {\n        debug(\"_incFile\", this.filename);\n        const ext = path.extname(this._basename);\n        const basename = path.basename(this._basename, ext);\n        const tasks = [];\n        if (this.zippedArchive) {\n            tasks.push((function(cb) {\n                const num = this._created > 0 && !this.tailable ? this._created : \"\";\n                this._compressFile(path.join(this.dirname, `${basename}${num}${ext}`), path.join(this.dirname, `${basename}${num}${ext}.gz`), cb);\n            }).bind(this));\n        }\n        tasks.push((function(cb) {\n            if (!this.tailable) {\n                this._created += 1;\n                this._checkMaxFilesIncrementing(ext, basename, cb);\n            } else {\n                this._checkMaxFilesTailable(ext, basename, cb);\n            }\n        }).bind(this));\n        asyncSeries(tasks, callback);\n    }\n    /**\n   * Gets the next filename to use for this instance in the case that log\n   * filesizes are being capped.\n   * @returns {string} - TODO: add return description.\n   * @private\n   */ _getFile() {\n        const ext = path.extname(this._basename);\n        const basename = path.basename(this._basename, ext);\n        const isRotation = this.rotationFormat ? this.rotationFormat() : this._created;\n        // Caveat emptor (indexzero): rotationFormat() was broken by design When\n        // combined with max files because the set of files to unlink is never\n        // stored.\n        return !this.tailable && this._created ? `${basename}${isRotation}${ext}` : `${basename}${ext}`;\n    }\n    /**\n   * Increment the number of files created or checked by this instance.\n   * @param {mixed} ext - TODO: add param description.\n   * @param {mixed} basename - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {undefined}\n   * @private\n   */ _checkMaxFilesIncrementing(ext, basename, callback) {\n        // Check for maxFiles option and delete file.\n        if (!this.maxFiles || this._created < this.maxFiles) {\n            return setImmediate(callback);\n        }\n        const oldest = this._created - this.maxFiles;\n        const isOldest = oldest !== 0 ? oldest : \"\";\n        const isZipped = this.zippedArchive ? \".gz\" : \"\";\n        const filePath = `${basename}${isOldest}${ext}${isZipped}`;\n        const target = path.join(this.dirname, filePath);\n        fs.unlink(target, callback);\n    }\n    /**\n   * Roll files forward based on integer, up to maxFiles. e.g. if base if\n   * file.log and it becomes oversized, roll to file1.log, and allow file.log\n   * to be re-used. If file is oversized again, roll file1.log to file2.log,\n   * roll file.log to file1.log, and so on.\n   * @param {mixed} ext - TODO: add param description.\n   * @param {mixed} basename - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {undefined}\n   * @private\n   */ _checkMaxFilesTailable(ext, basename, callback) {\n        const tasks = [];\n        if (!this.maxFiles) {\n            return;\n        }\n        // const isZipped = this.zippedArchive ? '.gz' : '';\n        const isZipped = this.zippedArchive ? \".gz\" : \"\";\n        for(let x = this.maxFiles - 1; x > 1; x--){\n            tasks.push((function(i, cb) {\n                let fileName = `${basename}${i - 1}${ext}${isZipped}`;\n                const tmppath = path.join(this.dirname, fileName);\n                fs.exists(tmppath, (exists)=>{\n                    if (!exists) {\n                        return cb(null);\n                    }\n                    fileName = `${basename}${i}${ext}${isZipped}`;\n                    fs.rename(tmppath, path.join(this.dirname, fileName), cb);\n                });\n            }).bind(this, x));\n        }\n        asyncSeries(tasks, ()=>{\n            fs.rename(path.join(this.dirname, `${basename}${ext}${isZipped}`), path.join(this.dirname, `${basename}1${ext}${isZipped}`), callback);\n        });\n    }\n    /**\n   * Compresses src to dest with gzip and unlinks src\n   * @param {string} src - path to source file.\n   * @param {string} dest - path to zipped destination file.\n   * @param {Function} callback - callback called after file has been compressed.\n   * @returns {undefined}\n   * @private\n   */ _compressFile(src, dest, callback) {\n        fs.access(src, fs.F_OK, (err)=>{\n            if (err) {\n                return callback();\n            }\n            var gzip = zlib.createGzip();\n            var inp = fs.createReadStream(src);\n            var out = fs.createWriteStream(dest);\n            out.on(\"finish\", ()=>{\n                fs.unlink(src, callback);\n            });\n            inp.pipe(gzip).pipe(out);\n        });\n    }\n    _createLogDirIfNotExist(dirPath) {\n        /* eslint-disable no-sync */ if (!fs.existsSync(dirPath)) {\n            fs.mkdirSync(dirPath, {\n                recursive: true\n            });\n        }\n    /* eslint-enable no-sync */ }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/transports/file.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/transports/http.js":
/*!*************************************************************!*\
  !*** ./node_modules/winston/lib/winston/transports/http.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * http.js: Transport for outputting to a json-rpcserver.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst { Stream } = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\");\nconst TransportStream = __webpack_require__(/*! winston-transport */ \"(ssr)/./node_modules/winston-transport/index.js\");\nconst { configure } = __webpack_require__(/*! safe-stable-stringify */ \"(ssr)/./node_modules/safe-stable-stringify/index.js\");\n/**\n * Transport for outputting to a json-rpc server.\n * @type {Stream}\n * @extends {TransportStream}\n */ module.exports = class Http extends TransportStream {\n    /**\n   * Constructor function for the Http transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */ // eslint-disable-next-line max-statements\n    constructor(options = {}){\n        super(options);\n        this.options = options;\n        this.name = options.name || \"http\";\n        this.ssl = !!options.ssl;\n        this.host = options.host || \"localhost\";\n        this.port = options.port;\n        this.auth = options.auth;\n        this.path = options.path || \"\";\n        this.maximumDepth = options.maximumDepth;\n        this.agent = options.agent;\n        this.headers = options.headers || {};\n        this.headers[\"content-type\"] = \"application/json\";\n        this.batch = options.batch || false;\n        this.batchInterval = options.batchInterval || 5000;\n        this.batchCount = options.batchCount || 10;\n        this.batchOptions = [];\n        this.batchTimeoutID = -1;\n        this.batchCallback = {};\n        if (!this.port) {\n            this.port = this.ssl ? 443 : 80;\n        }\n    }\n    /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ log(info, callback) {\n        this._request(info, null, null, (err, res)=>{\n            if (res && res.statusCode !== 200) {\n                err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n            }\n            if (err) {\n                this.emit(\"warn\", err);\n            } else {\n                this.emit(\"logged\", info);\n            }\n        });\n        // Remark: (jcrugzz) Fire and forget here so requests dont cause buffering\n        // and block more requests from happening?\n        if (callback) {\n            setImmediate(callback);\n        }\n    }\n    /**\n   * Query the transport. Options object is optional.\n   * @param {Object} options -  Loggly-like query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @returns {undefined}\n   */ query(options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n        options = {\n            method: \"query\",\n            params: this.normalizeQuery(options)\n        };\n        const auth = options.params.auth || null;\n        delete options.params.auth;\n        const path = options.params.path || null;\n        delete options.params.path;\n        this._request(options, auth, path, (err, res, body)=>{\n            if (res && res.statusCode !== 200) {\n                err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n            }\n            if (err) {\n                return callback(err);\n            }\n            if (typeof body === \"string\") {\n                try {\n                    body = JSON.parse(body);\n                } catch (e) {\n                    return callback(e);\n                }\n            }\n            callback(null, body);\n        });\n    }\n    /**\n   * Returns a log stream for this transport. Options object is optional.\n   * @param {Object} options - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description\n   */ stream(options = {}) {\n        const stream = new Stream();\n        options = {\n            method: \"stream\",\n            params: options\n        };\n        const path = options.params.path || null;\n        delete options.params.path;\n        const auth = options.params.auth || null;\n        delete options.params.auth;\n        let buff = \"\";\n        const req = this._request(options, auth, path);\n        stream.destroy = ()=>req.destroy();\n        req.on(\"data\", (data)=>{\n            data = (buff + data).split(/\\n+/);\n            const l = data.length - 1;\n            let i = 0;\n            for(; i < l; i++){\n                try {\n                    stream.emit(\"log\", JSON.parse(data[i]));\n                } catch (e) {\n                    stream.emit(\"error\", e);\n                }\n            }\n            buff = data[l];\n        });\n        req.on(\"error\", (err)=>stream.emit(\"error\", err));\n        return stream;\n    }\n    /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   * @param {function} callback - Continuation to respond to when complete.\n   */ _request(options, auth, path, callback) {\n        options = options || {};\n        auth = auth || this.auth;\n        path = path || this.path || \"\";\n        if (this.batch) {\n            this._doBatch(options, callback, auth, path);\n        } else {\n            this._doRequest(options, callback, auth, path);\n        }\n    }\n    /**\n   * Send or memorize the options according to batch configuration\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */ _doBatch(options, callback, auth, path) {\n        this.batchOptions.push(options);\n        if (this.batchOptions.length === 1) {\n            // First message stored, it's time to start the timeout!\n            const me = this;\n            this.batchCallback = callback;\n            this.batchTimeoutID = setTimeout(function() {\n                // timeout is reached, send all messages to endpoint\n                me.batchTimeoutID = -1;\n                me._doBatchRequest(me.batchCallback, auth, path);\n            }, this.batchInterval);\n        }\n        if (this.batchOptions.length === this.batchCount) {\n            // max batch count is reached, send all messages to endpoint\n            this._doBatchRequest(this.batchCallback, auth, path);\n        }\n    }\n    /**\n   * Initiate a request with the memorized batch options, stop the batch timeout\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */ _doBatchRequest(callback, auth, path) {\n        if (this.batchTimeoutID > 0) {\n            clearTimeout(this.batchTimeoutID);\n            this.batchTimeoutID = -1;\n        }\n        const batchOptionsCopy = this.batchOptions.slice();\n        this.batchOptions = [];\n        this._doRequest(batchOptionsCopy, callback, auth, path);\n    }\n    /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */ _doRequest(options, callback, auth, path) {\n        // Prepare options for outgoing HTTP request\n        const headers = Object.assign({}, this.headers);\n        if (auth && auth.bearer) {\n            headers.Authorization = `Bearer ${auth.bearer}`;\n        }\n        const req = (this.ssl ? https : http).request({\n            ...this.options,\n            method: \"POST\",\n            host: this.host,\n            port: this.port,\n            path: `/${path.replace(/^\\//, \"\")}`,\n            headers: headers,\n            auth: auth && auth.username && auth.password ? `${auth.username}:${auth.password}` : \"\",\n            agent: this.agent\n        });\n        req.on(\"error\", callback);\n        req.on(\"response\", (res)=>res.on(\"end\", ()=>callback(null, res)).resume());\n        const jsonStringify = configure({\n            ...this.maximumDepth && {\n                maximumDepth: this.maximumDepth\n            }\n        });\n        req.end(Buffer.from(jsonStringify(options, this.options.replacer), \"utf8\"));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/transports/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/transports/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/winston/lib/winston/transports/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * transports.js: Set of all transports Winston knows about.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \n/**\n * TODO: add property description.\n * @type {Console}\n */ Object.defineProperty(exports, \"Console\", ({\n    configurable: true,\n    enumerable: true,\n    get () {\n        return __webpack_require__(/*! ./console */ \"(ssr)/./node_modules/winston/lib/winston/transports/console.js\");\n    }\n}));\n/**\n * TODO: add property description.\n * @type {File}\n */ Object.defineProperty(exports, \"File\", ({\n    configurable: true,\n    enumerable: true,\n    get () {\n        return __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/winston/lib/winston/transports/file.js\");\n    }\n}));\n/**\n * TODO: add property description.\n * @type {Http}\n */ Object.defineProperty(exports, \"Http\", ({\n    configurable: true,\n    enumerable: true,\n    get () {\n        return __webpack_require__(/*! ./http */ \"(ssr)/./node_modules/winston/lib/winston/transports/http.js\");\n    }\n}));\n/**\n * TODO: add property description.\n * @type {Stream}\n */ Object.defineProperty(exports, \"Stream\", ({\n    configurable: true,\n    enumerable: true,\n    get () {\n        return __webpack_require__(/*! ./stream */ \"(ssr)/./node_modules/winston/lib/winston/transports/stream.js\");\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi90cmFuc3BvcnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBRUQ7QUFFQTs7O0NBR0MsR0FDREEsMkNBQTBDO0lBQ3hDRyxjQUFjO0lBQ2RDLFlBQVk7SUFDWkM7UUFDRSxPQUFPQyxtQkFBT0EsQ0FBQztJQUNqQjtBQUNGLENBQUMsRUFBQztBQUVGOzs7Q0FHQyxHQUNETix3Q0FBdUM7SUFDckNHLGNBQWM7SUFDZEMsWUFBWTtJQUNaQztRQUNFLE9BQU9DLG1CQUFPQSxDQUFDO0lBQ2pCO0FBQ0YsQ0FBQyxFQUFDO0FBRUY7OztDQUdDLEdBQ0ROLHdDQUF1QztJQUNyQ0csY0FBYztJQUNkQyxZQUFZO0lBQ1pDO1FBQ0UsT0FBT0MsbUJBQU9BLENBQUM7SUFDakI7QUFDRixDQUFDLEVBQUM7QUFFRjs7O0NBR0MsR0FDRE4sMENBQXlDO0lBQ3ZDRyxjQUFjO0lBQ2RDLFlBQVk7SUFDWkM7UUFDRSxPQUFPQyxtQkFBT0EsQ0FBQztJQUNqQjtBQUNGLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vbGliL3dpbnN0b24vdHJhbnNwb3J0cy9pbmRleC5qcz8wMjlkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogdHJhbnNwb3J0cy5qczogU2V0IG9mIGFsbCB0cmFuc3BvcnRzIFdpbnN0b24ga25vd3MgYWJvdXQuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUT0RPOiBhZGQgcHJvcGVydHkgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7Q29uc29sZX1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdDb25zb2xlJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9jb25zb2xlJyk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIFRPRE86IGFkZCBwcm9wZXJ0eSBkZXNjcmlwdGlvbi5cbiAqIEB0eXBlIHtGaWxlfVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0ZpbGUnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0KCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2ZpbGUnKTtcbiAgfVxufSk7XG5cbi8qKlxuICogVE9ETzogYWRkIHByb3BlcnR5IGRlc2NyaXB0aW9uLlxuICogQHR5cGUge0h0dHB9XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnSHR0cCcsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vaHR0cCcpO1xuICB9XG59KTtcblxuLyoqXG4gKiBUT0RPOiBhZGQgcHJvcGVydHkgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7U3RyZWFtfVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1N0cmVhbScsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vc3RyZWFtJyk7XG4gIH1cbn0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/transports/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston/lib/winston/transports/stream.js":
/*!***************************************************************!*\
  !*** ./node_modules/winston/lib/winston/transports/stream.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * stream.js: Transport for outputting to any arbitrary stream.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst isStream = __webpack_require__(/*! is-stream */ \"(ssr)/./node_modules/is-stream/index.js\");\nconst { MESSAGE } = __webpack_require__(/*! triple-beam */ \"(ssr)/./node_modules/triple-beam/index.js\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst TransportStream = __webpack_require__(/*! winston-transport */ \"(ssr)/./node_modules/winston-transport/index.js\");\n/**\n * Transport for outputting to any arbitrary stream.\n * @type {Stream}\n * @extends {TransportStream}\n */ module.exports = class Stream extends TransportStream {\n    /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */ constructor(options = {}){\n        super(options);\n        if (!options.stream || !isStream(options.stream)) {\n            throw new Error(\"options.stream is required.\");\n        }\n        // We need to listen for drain events when write() returns false. This can\n        // make node mad at times.\n        this._stream = options.stream;\n        this._stream.setMaxListeners(Infinity);\n        this.isObjectMode = options.stream._writableState.objectMode;\n        this.eol = typeof options.eol === \"string\" ? options.eol : os.EOL;\n    }\n    /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ log(info, callback) {\n        setImmediate(()=>this.emit(\"logged\", info));\n        if (this.isObjectMode) {\n            this._stream.write(info);\n            if (callback) {\n                callback(); // eslint-disable-line callback-return\n            }\n            return;\n        }\n        this._stream.write(`${info[MESSAGE]}${this.eol}`);\n        if (callback) {\n            callback(); // eslint-disable-line callback-return\n        }\n        return;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi90cmFuc3BvcnRzL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Q0FLQyxHQUVEO0FBRUEsTUFBTUEsV0FBV0MsbUJBQU9BLENBQUM7QUFDekIsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0QsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUUsS0FBS0YsbUJBQU9BLENBQUM7QUFDbkIsTUFBTUcsa0JBQWtCSCxtQkFBT0EsQ0FBQztBQUVoQzs7OztDQUlDLEdBQ0RJLE9BQU9DLE9BQU8sR0FBRyxNQUFNQyxlQUFlSDtJQUNwQzs7OztHQUlDLEdBQ0RJLFlBQVlDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDeEIsS0FBSyxDQUFDQTtRQUVOLElBQUksQ0FBQ0EsUUFBUUMsTUFBTSxJQUFJLENBQUNWLFNBQVNTLFFBQVFDLE1BQU0sR0FBRztZQUNoRCxNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFFQSwwRUFBMEU7UUFDMUUsMEJBQTBCO1FBQzFCLElBQUksQ0FBQ0MsT0FBTyxHQUFHSCxRQUFRQyxNQUFNO1FBQzdCLElBQUksQ0FBQ0UsT0FBTyxDQUFDQyxlQUFlLENBQUNDO1FBQzdCLElBQUksQ0FBQ0MsWUFBWSxHQUFHTixRQUFRQyxNQUFNLENBQUNNLGNBQWMsQ0FBQ0MsVUFBVTtRQUM1RCxJQUFJLENBQUNDLEdBQUcsR0FBRyxPQUFRVCxRQUFRUyxHQUFHLEtBQUssV0FBWVQsUUFBUVMsR0FBRyxHQUFHZixHQUFHZ0IsR0FBRztJQUNyRTtJQUVBOzs7OztHQUtDLEdBQ0RDLElBQUlDLElBQUksRUFBRUMsUUFBUSxFQUFFO1FBQ2xCQyxhQUFhLElBQU0sSUFBSSxDQUFDQyxJQUFJLENBQUMsVUFBVUg7UUFDdkMsSUFBSSxJQUFJLENBQUNOLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUNILE9BQU8sQ0FBQ2EsS0FBSyxDQUFDSjtZQUNuQixJQUFJQyxVQUFVO2dCQUNaQSxZQUFZLHNDQUFzQztZQUNwRDtZQUNBO1FBQ0Y7UUFFQSxJQUFJLENBQUNWLE9BQU8sQ0FBQ2EsS0FBSyxDQUFDLENBQUMsRUFBRUosSUFBSSxDQUFDbkIsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLENBQUM7UUFDaEQsSUFBSUksVUFBVTtZQUNaQSxZQUFZLHNDQUFzQztRQUNwRDtRQUNBO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vbGliL3dpbnN0b24vdHJhbnNwb3J0cy9zdHJlYW0uanM/MjYxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHN0cmVhbS5qczogVHJhbnNwb3J0IGZvciBvdXRwdXR0aW5nIHRvIGFueSBhcmJpdHJhcnkgc3RyZWFtLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzU3RyZWFtID0gcmVxdWlyZSgnaXMtc3RyZWFtJyk7XG5jb25zdCB7IE1FU1NBR0UgfSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyk7XG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBUcmFuc3BvcnRTdHJlYW0gPSByZXF1aXJlKCd3aW5zdG9uLXRyYW5zcG9ydCcpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBmb3Igb3V0cHV0dGluZyB0byBhbnkgYXJiaXRyYXJ5IHN0cmVhbS5cbiAqIEB0eXBlIHtTdHJlYW19XG4gKiBAZXh0ZW5kcyB7VHJhbnNwb3J0U3RyZWFtfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFN0cmVhbSBleHRlbmRzIFRyYW5zcG9ydFN0cmVhbSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIENvbnNvbGUgdHJhbnNwb3J0IG9iamVjdCByZXNwb25zaWJsZSBmb3JcbiAgICogcGVyc2lzdGluZyBsb2cgbWVzc2FnZXMgYW5kIG1ldGFkYXRhIHRvIGEgdGVybWluYWwgb3IgVFRZLlxuICAgKiBAcGFyYW0geyFPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIGlmICghb3B0aW9ucy5zdHJlYW0gfHwgIWlzU3RyZWFtKG9wdGlvbnMuc3RyZWFtKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zLnN0cmVhbSBpcyByZXF1aXJlZC4nKTtcbiAgICB9XG5cbiAgICAvLyBXZSBuZWVkIHRvIGxpc3RlbiBmb3IgZHJhaW4gZXZlbnRzIHdoZW4gd3JpdGUoKSByZXR1cm5zIGZhbHNlLiBUaGlzIGNhblxuICAgIC8vIG1ha2Ugbm9kZSBtYWQgYXQgdGltZXMuXG4gICAgdGhpcy5fc3RyZWFtID0gb3B0aW9ucy5zdHJlYW07XG4gICAgdGhpcy5fc3RyZWFtLnNldE1heExpc3RlbmVycyhJbmZpbml0eSk7XG4gICAgdGhpcy5pc09iamVjdE1vZGUgPSBvcHRpb25zLnN0cmVhbS5fd3JpdGFibGVTdGF0ZS5vYmplY3RNb2RlO1xuICAgIHRoaXMuZW9sID0gKHR5cGVvZiBvcHRpb25zLmVvbCA9PT0gJ3N0cmluZycpID8gb3B0aW9ucy5lb2wgOiBvcy5FT0w7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBsb2dnaW5nIG1ldGhvZCBleHBvc2VkIHRvIFdpbnN0b24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG4gIGxvZyhpbmZvLCBjYWxsYmFjaykge1xuICAgIHNldEltbWVkaWF0ZSgoKSA9PiB0aGlzLmVtaXQoJ2xvZ2dlZCcsIGluZm8pKTtcbiAgICBpZiAodGhpcy5pc09iamVjdE1vZGUpIHtcbiAgICAgIHRoaXMuX3N0cmVhbS53cml0ZShpbmZvKTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3N0cmVhbS53cml0ZShgJHtpbmZvW01FU1NBR0VdfSR7dGhpcy5lb2x9YCk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiaXNTdHJlYW0iLCJyZXF1aXJlIiwiTUVTU0FHRSIsIm9zIiwiVHJhbnNwb3J0U3RyZWFtIiwibW9kdWxlIiwiZXhwb3J0cyIsIlN0cmVhbSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInN0cmVhbSIsIkVycm9yIiwiX3N0cmVhbSIsInNldE1heExpc3RlbmVycyIsIkluZmluaXR5IiwiaXNPYmplY3RNb2RlIiwiX3dyaXRhYmxlU3RhdGUiLCJvYmplY3RNb2RlIiwiZW9sIiwiRU9MIiwibG9nIiwiaW5mbyIsImNhbGxiYWNrIiwic2V0SW1tZWRpYXRlIiwiZW1pdCIsIndyaXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston/lib/winston/transports/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston.js":
/*!*********************************************!*\
  !*** ./node_modules/winston/lib/winston.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * winston.js: Top-level include defining Winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst logform = __webpack_require__(/*! logform */ \"(rsc)/./node_modules/logform/index.js\");\nconst { warn } = __webpack_require__(/*! ./winston/common */ \"(rsc)/./node_modules/winston/lib/winston/common.js\");\n/**\n * Expose version. Use `require` method for `webpack` support.\n * @type {string}\n */ exports.version = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/winston/package.json\").version;\n/**\n * Include transports defined by default by winston\n * @type {Array}\n */ exports.transports = __webpack_require__(/*! ./winston/transports */ \"(rsc)/./node_modules/winston/lib/winston/transports/index.js\");\n/**\n * Expose utility methods\n * @type {Object}\n */ exports.config = __webpack_require__(/*! ./winston/config */ \"(rsc)/./node_modules/winston/lib/winston/config/index.js\");\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */ exports.addColors = logform.levels;\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */ exports.format = logform.format;\n/**\n * Expose core Logging-related prototypes.\n * @type {function}\n */ exports.createLogger = __webpack_require__(/*! ./winston/create-logger */ \"(rsc)/./node_modules/winston/lib/winston/create-logger.js\");\n/**\n * Expose core Logging-related prototypes.\n * @type {function}\n */ exports.Logger = __webpack_require__(/*! ./winston/logger */ \"(rsc)/./node_modules/winston/lib/winston/logger.js\");\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */ exports.ExceptionHandler = __webpack_require__(/*! ./winston/exception-handler */ \"(rsc)/./node_modules/winston/lib/winston/exception-handler.js\");\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */ exports.RejectionHandler = __webpack_require__(/*! ./winston/rejection-handler */ \"(rsc)/./node_modules/winston/lib/winston/rejection-handler.js\");\n/**\n * Expose core Logging-related prototypes.\n * @type {Container}\n */ exports.Container = __webpack_require__(/*! ./winston/container */ \"(rsc)/./node_modules/winston/lib/winston/container.js\");\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */ exports.Transport = __webpack_require__(/*! winston-transport */ \"(rsc)/./node_modules/winston-transport/index.js\");\n/**\n * We create and expose a default `Container` to `winston.loggers` so that the\n * programmer may manage multiple `winston.Logger` instances without any\n * additional overhead.\n * @example\n *   // some-file1.js\n *   const logger = require('winston').loggers.get('something');\n *\n *   // some-file2.js\n *   const logger = require('winston').loggers.get('something');\n */ exports.loggers = new exports.Container();\n/**\n * We create and expose a 'defaultLogger' so that the programmer may do the\n * following without the need to create an instance of winston.Logger directly:\n * @example\n *   const winston = require('winston');\n *   winston.log('info', 'some message');\n *   winston.error('some error');\n */ const defaultLogger = exports.createLogger();\n// Pass through the target methods onto `winston.\nObject.keys(exports.config.npm.levels).concat([\n    \"log\",\n    \"query\",\n    \"stream\",\n    \"add\",\n    \"remove\",\n    \"clear\",\n    \"profile\",\n    \"startTimer\",\n    \"handleExceptions\",\n    \"unhandleExceptions\",\n    \"handleRejections\",\n    \"unhandleRejections\",\n    \"configure\",\n    \"child\"\n]).forEach((method)=>exports[method] = (...args)=>defaultLogger[method](...args));\n/**\n * Define getter / setter for the default logger level which need to be exposed\n * by winston.\n * @type {string}\n */ Object.defineProperty(exports, \"level\", ({\n    get () {\n        return defaultLogger.level;\n    },\n    set (val) {\n        defaultLogger.level = val;\n    }\n}));\n/**\n * Define getter for `exceptions` which replaces `handleExceptions` and\n * `unhandleExceptions`.\n * @type {Object}\n */ Object.defineProperty(exports, \"exceptions\", ({\n    get () {\n        return defaultLogger.exceptions;\n    }\n}));\n/**\n * Define getter for `rejections` which replaces `handleRejections` and\n * `unhandleRejections`.\n * @type {Object}\n */ Object.defineProperty(exports, \"rejections\", ({\n    get () {\n        return defaultLogger.rejections;\n    }\n}));\n/**\n * Define getters / setters for appropriate properties of the default logger\n * which need to be exposed by winston.\n * @type {Logger}\n */ [\n    \"exitOnError\"\n].forEach((prop)=>{\n    Object.defineProperty(exports, prop, {\n        get () {\n            return defaultLogger[prop];\n        },\n        set (val) {\n            defaultLogger[prop] = val;\n        }\n    });\n});\n/**\n * The default transports and exceptionHandlers for the default winston logger.\n * @type {Object}\n */ Object.defineProperty(exports, \"default\", ({\n    get () {\n        return {\n            exceptionHandlers: defaultLogger.exceptionHandlers,\n            rejectionHandlers: defaultLogger.rejectionHandlers,\n            transports: defaultLogger.transports\n        };\n    }\n}));\n// Have friendlier breakage notices for properties that were exposed by default\n// on winston < 3.0.\nwarn.deprecated(exports, \"setLevels\");\nwarn.forFunctions(exports, \"useFormat\", [\n    \"cli\"\n]);\nwarn.forProperties(exports, \"useFormat\", [\n    \"padLevels\",\n    \"stripColors\"\n]);\nwarn.forFunctions(exports, \"deprecated\", [\n    \"addRewriter\",\n    \"addFilter\",\n    \"clone\",\n    \"extend\"\n]);\nwarn.forProperties(exports, \"deprecated\", [\n    \"emitErrs\",\n    \"levelLength\"\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/common.js":
/*!****************************************************!*\
  !*** ./node_modules/winston/lib/winston/common.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * common.js: Internal helper and utility functions for winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst { format } = __webpack_require__(/*! util */ \"util\");\n/**\n * Set of simple deprecation notices and a way to expose them for a set of\n * properties.\n * @type {Object}\n * @private\n */ exports.warn = {\n    deprecated (prop) {\n        return ()=>{\n            throw new Error(format(\"{ %s } was removed in winston@3.0.0.\", prop));\n        };\n    },\n    useFormat (prop) {\n        return ()=>{\n            throw new Error([\n                format(\"{ %s } was removed in winston@3.0.0.\", prop),\n                \"Use a custom winston.format = winston.format(function) instead.\"\n            ].join(\"\\n\"));\n        };\n    },\n    forFunctions (obj, type, props) {\n        props.forEach((prop)=>{\n            obj[prop] = exports.warn[type](prop);\n        });\n    },\n    forProperties (obj, type, props) {\n        props.forEach((prop)=>{\n            const notice = exports.warn[type](prop);\n            Object.defineProperty(obj, prop, {\n                get: notice,\n                set: notice\n            });\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FFRDtBQUVBLE1BQU0sRUFBRUEsTUFBTSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTNCOzs7OztDQUtDLEdBQ0RDLFlBQVksR0FBRztJQUNiRSxZQUFXQyxJQUFJO1FBQ2IsT0FBTztZQUNMLE1BQU0sSUFBSUMsTUFBTU4sT0FBTyx3Q0FBd0NLO1FBQ2pFO0lBQ0Y7SUFDQUUsV0FBVUYsSUFBSTtRQUNaLE9BQU87WUFDTCxNQUFNLElBQUlDLE1BQU07Z0JBQ2ROLE9BQU8sd0NBQXdDSztnQkFDL0M7YUFDRCxDQUFDRyxJQUFJLENBQUM7UUFDVDtJQUNGO0lBQ0FDLGNBQWFDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxLQUFLO1FBQzNCQSxNQUFNQyxPQUFPLENBQUNSLENBQUFBO1lBQ1pLLEdBQUcsQ0FBQ0wsS0FBSyxHQUFHSCxRQUFRQyxJQUFJLENBQUNRLEtBQUssQ0FBQ047UUFDakM7SUFDRjtJQUNBUyxlQUFjSixHQUFHLEVBQUVDLElBQUksRUFBRUMsS0FBSztRQUM1QkEsTUFBTUMsT0FBTyxDQUFDUixDQUFBQTtZQUNaLE1BQU1VLFNBQVNiLFFBQVFDLElBQUksQ0FBQ1EsS0FBSyxDQUFDTjtZQUNsQ1csT0FBT0MsY0FBYyxDQUFDUCxLQUFLTCxNQUFNO2dCQUMvQmEsS0FBS0g7Z0JBQ0xJLEtBQUtKO1lBQ1A7UUFDRjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy93aW5zdG9uL2xpYi93aW5zdG9uL2NvbW1vbi5qcz8xNTc1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogY29tbW9uLmpzOiBJbnRlcm5hbCBoZWxwZXIgYW5kIHV0aWxpdHkgZnVuY3Rpb25zIGZvciB3aW5zdG9uLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgZm9ybWF0IH0gPSByZXF1aXJlKCd1dGlsJyk7XG5cbi8qKlxuICogU2V0IG9mIHNpbXBsZSBkZXByZWNhdGlvbiBub3RpY2VzIGFuZCBhIHdheSB0byBleHBvc2UgdGhlbSBmb3IgYSBzZXQgb2ZcbiAqIHByb3BlcnRpZXMuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy53YXJuID0ge1xuICBkZXByZWNhdGVkKHByb3ApIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdCgneyAlcyB9IHdhcyByZW1vdmVkIGluIHdpbnN0b25AMy4wLjAuJywgcHJvcCkpO1xuICAgIH07XG4gIH0sXG4gIHVzZUZvcm1hdChwcm9wKSB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihbXG4gICAgICAgIGZvcm1hdCgneyAlcyB9IHdhcyByZW1vdmVkIGluIHdpbnN0b25AMy4wLjAuJywgcHJvcCksXG4gICAgICAgICdVc2UgYSBjdXN0b20gd2luc3Rvbi5mb3JtYXQgPSB3aW5zdG9uLmZvcm1hdChmdW5jdGlvbikgaW5zdGVhZC4nXG4gICAgICBdLmpvaW4oJ1xcbicpKTtcbiAgICB9O1xuICB9LFxuICBmb3JGdW5jdGlvbnMob2JqLCB0eXBlLCBwcm9wcykge1xuICAgIHByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBvYmpbcHJvcF0gPSBleHBvcnRzLndhcm5bdHlwZV0ocHJvcCk7XG4gICAgfSk7XG4gIH0sXG4gIGZvclByb3BlcnRpZXMob2JqLCB0eXBlLCBwcm9wcykge1xuICAgIHByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBjb25zdCBub3RpY2UgPSBleHBvcnRzLndhcm5bdHlwZV0ocHJvcCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB7XG4gICAgICAgIGdldDogbm90aWNlLFxuICAgICAgICBzZXQ6IG5vdGljZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiZm9ybWF0IiwicmVxdWlyZSIsImV4cG9ydHMiLCJ3YXJuIiwiZGVwcmVjYXRlZCIsInByb3AiLCJFcnJvciIsInVzZUZvcm1hdCIsImpvaW4iLCJmb3JGdW5jdGlvbnMiLCJvYmoiLCJ0eXBlIiwicHJvcHMiLCJmb3JFYWNoIiwiZm9yUHJvcGVydGllcyIsIm5vdGljZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/config/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/winston/lib/winston/config/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * index.js: Default settings for all levels that winston knows about.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst logform = __webpack_require__(/*! logform */ \"(rsc)/./node_modules/logform/index.js\");\nconst { configs } = __webpack_require__(/*! triple-beam */ \"(rsc)/./node_modules/triple-beam/index.js\");\n/**\n * Export config set for the CLI.\n * @type {Object}\n */ exports.cli = logform.levels(configs.cli);\n/**\n * Export config set for npm.\n * @type {Object}\n */ exports.npm = logform.levels(configs.npm);\n/**\n * Export config set for the syslog.\n * @type {Object}\n */ exports.syslog = logform.levels(configs.syslog);\n/**\n * Hoist addColors from logform where it was refactored into in winston@3.\n * @type {Object}\n */ exports.addColors = logform.levels;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9jb25maWcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FFRDtBQUVBLE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUdELG1CQUFPQSxDQUFDO0FBRTVCOzs7Q0FHQyxHQUNERSxXQUFXLEdBQUdILFFBQVFLLE1BQU0sQ0FBQ0gsUUFBUUUsR0FBRztBQUV4Qzs7O0NBR0MsR0FDREQsV0FBVyxHQUFHSCxRQUFRSyxNQUFNLENBQUNILFFBQVFJLEdBQUc7QUFFeEM7OztDQUdDLEdBQ0RILGNBQWMsR0FBR0gsUUFBUUssTUFBTSxDQUFDSCxRQUFRSyxNQUFNO0FBRTlDOzs7Q0FHQyxHQUNESixpQkFBaUIsR0FBR0gsUUFBUUssTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vbGliL3dpbnN0b24vY29uZmlnL2luZGV4LmpzPzcwZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBpbmRleC5qczogRGVmYXVsdCBzZXR0aW5ncyBmb3IgYWxsIGxldmVscyB0aGF0IHdpbnN0b24ga25vd3MgYWJvdXQuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgbG9nZm9ybSA9IHJlcXVpcmUoJ2xvZ2Zvcm0nKTtcbmNvbnN0IHsgY29uZmlncyB9ID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKTtcblxuLyoqXG4gKiBFeHBvcnQgY29uZmlnIHNldCBmb3IgdGhlIENMSS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuY2xpID0gbG9nZm9ybS5sZXZlbHMoY29uZmlncy5jbGkpO1xuXG4vKipcbiAqIEV4cG9ydCBjb25maWcgc2V0IGZvciBucG0uXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLm5wbSA9IGxvZ2Zvcm0ubGV2ZWxzKGNvbmZpZ3MubnBtKTtcblxuLyoqXG4gKiBFeHBvcnQgY29uZmlnIHNldCBmb3IgdGhlIHN5c2xvZy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuc3lzbG9nID0gbG9nZm9ybS5sZXZlbHMoY29uZmlncy5zeXNsb2cpO1xuXG4vKipcbiAqIEhvaXN0IGFkZENvbG9ycyBmcm9tIGxvZ2Zvcm0gd2hlcmUgaXQgd2FzIHJlZmFjdG9yZWQgaW50byBpbiB3aW5zdG9uQDMuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLmFkZENvbG9ycyA9IGxvZ2Zvcm0ubGV2ZWxzO1xuIl0sIm5hbWVzIjpbImxvZ2Zvcm0iLCJyZXF1aXJlIiwiY29uZmlncyIsImV4cG9ydHMiLCJjbGkiLCJsZXZlbHMiLCJucG0iLCJzeXNsb2ciLCJhZGRDb2xvcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/config/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/container.js":
/*!*******************************************************!*\
  !*** ./node_modules/winston/lib/winston/container.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst createLogger = __webpack_require__(/*! ./create-logger */ \"(rsc)/./node_modules/winston/lib/winston/create-logger.js\");\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */ module.exports = class Container {\n    /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */ constructor(options = {}){\n        this.loggers = new Map();\n        this.options = options;\n    }\n    /**\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */ add(id, options) {\n        if (!this.loggers.has(id)) {\n            // Remark: Simple shallow clone for configuration options in case we pass\n            // in instantiated protoypal objects\n            options = Object.assign({}, options || this.options);\n            const existing = options.transports || this.options.transports;\n            // Remark: Make sure if we have an array of transports we slice it to\n            // make copies of those references.\n            if (existing) {\n                options.transports = Array.isArray(existing) ? existing.slice() : [\n                    existing\n                ];\n            } else {\n                options.transports = [];\n            }\n            const logger = createLogger(options);\n            logger.on(\"close\", ()=>this._delete(id));\n            this.loggers.set(id, logger);\n        }\n        return this.loggers.get(id);\n    }\n    /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If\n   * an instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */ get(id, options) {\n        return this.add(id, options);\n    }\n    /**\n   * Check if the container has a logger with the id.\n   * @param {?string} id - The id of the Logger instance to find.\n   * @returns {boolean} - Boolean value indicating if this instance has a\n   * logger with the specified `id`.\n   */ has(id) {\n        return !!this.loggers.has(id);\n    }\n    /**\n   * Closes a `Logger` instance with the specified `id` if it exists.\n   * If no `id` is supplied then all Loggers are closed.\n   * @param {?string} id - The id of the Logger instance to close.\n   * @returns {undefined}\n   */ close(id) {\n        if (id) {\n            return this._removeLogger(id);\n        }\n        this.loggers.forEach((val, key)=>this._removeLogger(key));\n    }\n    /**\n   * Remove a logger based on the id.\n   * @param {!string} id - The id of the logger to remove.\n   * @returns {undefined}\n   * @private\n   */ _removeLogger(id) {\n        if (!this.loggers.has(id)) {\n            return;\n        }\n        const logger = this.loggers.get(id);\n        logger.close();\n        this._delete(id);\n    }\n    /**\n   * Deletes a `Logger` instance with the specified `id`.\n   * @param {!string} id - The id of the Logger instance to delete from\n   * container.\n   * @returns {undefined}\n   * @private\n   */ _delete(id) {\n        this.loggers.delete(id);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9jb250YWluZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FFRDtBQUVBLE1BQU1BLGVBQWVDLG1CQUFPQSxDQUFDO0FBRTdCOzs7Q0FHQyxHQUNEQyxPQUFPQyxPQUFPLEdBQUcsTUFBTUM7SUFDckI7Ozs7R0FJQyxHQUNEQyxZQUFZQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQ3hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDO1FBQ25CLElBQUksQ0FBQ0YsT0FBTyxHQUFHQTtJQUNqQjtJQUVBOzs7Ozs7R0FNQyxHQUNERyxJQUFJQyxFQUFFLEVBQUVKLE9BQU8sRUFBRTtRQUNmLElBQUksQ0FBQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDRCxLQUFLO1lBQ3pCLHlFQUF5RTtZQUN6RSxvQ0FBb0M7WUFDcENKLFVBQVVNLE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdQLFdBQVcsSUFBSSxDQUFDQSxPQUFPO1lBQ25ELE1BQU1RLFdBQVdSLFFBQVFTLFVBQVUsSUFBSSxJQUFJLENBQUNULE9BQU8sQ0FBQ1MsVUFBVTtZQUU5RCxxRUFBcUU7WUFDckUsbUNBQW1DO1lBQ25DLElBQUlELFVBQVU7Z0JBQ1pSLFFBQVFTLFVBQVUsR0FBR0MsTUFBTUMsT0FBTyxDQUFDSCxZQUFZQSxTQUFTSSxLQUFLLEtBQUs7b0JBQUNKO2lCQUFTO1lBQzlFLE9BQU87Z0JBQ0xSLFFBQVFTLFVBQVUsR0FBRyxFQUFFO1lBQ3pCO1lBRUEsTUFBTUksU0FBU25CLGFBQWFNO1lBQzVCYSxPQUFPQyxFQUFFLENBQUMsU0FBUyxJQUFNLElBQUksQ0FBQ0MsT0FBTyxDQUFDWDtZQUN0QyxJQUFJLENBQUNILE9BQU8sQ0FBQ2UsR0FBRyxDQUFDWixJQUFJUztRQUN2QjtRQUVBLE9BQU8sSUFBSSxDQUFDWixPQUFPLENBQUNnQixHQUFHLENBQUNiO0lBQzFCO0lBRUE7Ozs7OztHQU1DLEdBQ0RhLElBQUliLEVBQUUsRUFBRUosT0FBTyxFQUFFO1FBQ2YsT0FBTyxJQUFJLENBQUNHLEdBQUcsQ0FBQ0MsSUFBSUo7SUFDdEI7SUFFQTs7Ozs7R0FLQyxHQUNESyxJQUFJRCxFQUFFLEVBQUU7UUFDTixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksR0FBRyxDQUFDRDtJQUM1QjtJQUVBOzs7OztHQUtDLEdBQ0RjLE1BQU1kLEVBQUUsRUFBRTtRQUNSLElBQUlBLElBQUk7WUFDTixPQUFPLElBQUksQ0FBQ2UsYUFBYSxDQUFDZjtRQUM1QjtRQUVBLElBQUksQ0FBQ0gsT0FBTyxDQUFDbUIsT0FBTyxDQUFDLENBQUNDLEtBQUtDLE1BQVEsSUFBSSxDQUFDSCxhQUFhLENBQUNHO0lBQ3hEO0lBRUE7Ozs7O0dBS0MsR0FDREgsY0FBY2YsRUFBRSxFQUFFO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksR0FBRyxDQUFDRCxLQUFLO1lBQ3pCO1FBQ0Y7UUFFQSxNQUFNUyxTQUFTLElBQUksQ0FBQ1osT0FBTyxDQUFDZ0IsR0FBRyxDQUFDYjtRQUNoQ1MsT0FBT0ssS0FBSztRQUNaLElBQUksQ0FBQ0gsT0FBTyxDQUFDWDtJQUNmO0lBRUE7Ozs7OztHQU1DLEdBQ0RXLFFBQVFYLEVBQUUsRUFBRTtRQUNWLElBQUksQ0FBQ0gsT0FBTyxDQUFDc0IsTUFBTSxDQUFDbkI7SUFDdEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vbGliL3dpbnN0b24vY29udGFpbmVyLmpzPzRjZjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBjb250YWluZXIuanM6IEludmVyc2lvbiBvZiBjb250cm9sIGNvbnRhaW5lciBmb3Igd2luc3RvbiBsb2dnZXIgaW5zdGFuY2VzLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNyZWF0ZUxvZ2dlciA9IHJlcXVpcmUoJy4vY3JlYXRlLWxvZ2dlcicpO1xuXG4vKipcbiAqIEludmVyc2lvbiBvZiBjb250cm9sIGNvbnRhaW5lciBmb3Igd2luc3RvbiBsb2dnZXIgaW5zdGFuY2VzLlxuICogQHR5cGUge0NvbnRhaW5lcn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBDb250YWluZXIge1xuICAvKipcbiAgICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBDb250YWluZXIgb2JqZWN0IHJlc3BvbnNpYmxlIGZvciBtYW5hZ2luZyBhXG4gICAqIHNldCBvZiBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlcyBiYXNlZCBvbiBzdHJpbmcgaWRzLlxuICAgKiBAcGFyYW0geyFPYmplY3R9IFtvcHRpb25zPXt9XSAtIERlZmF1bHQgcGFzcy10aHJ1IG9wdGlvbnMgZm9yIExvZ2dlcnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmxvZ2dlcnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlIGZvciB0aGUgc3BlY2lmaWVkIGBpZGAuIElmIGFuXG4gICAqIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0LCBvbmUgaXMgY3JlYXRlZC5cbiAgICogQHBhcmFtIHshc3RyaW5nfSBpZCAtIFRoZSBpZCBvZiB0aGUgTG9nZ2VyIHRvIGdldC5cbiAgICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxuICAgKiBAcmV0dXJucyB7TG9nZ2VyfSAtIEEgY29uZmlndXJlZCBMb2dnZXIgaW5zdGFuY2Ugd2l0aCBhIHNwZWNpZmllZCBpZC5cbiAgICovXG4gIGFkZChpZCwgb3B0aW9ucykge1xuICAgIGlmICghdGhpcy5sb2dnZXJzLmhhcyhpZCkpIHtcbiAgICAgIC8vIFJlbWFyazogU2ltcGxlIHNoYWxsb3cgY2xvbmUgZm9yIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBpbiBjYXNlIHdlIHBhc3NcbiAgICAgIC8vIGluIGluc3RhbnRpYXRlZCBwcm90b3lwYWwgb2JqZWN0c1xuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMgfHwgdGhpcy5vcHRpb25zKTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gb3B0aW9ucy50cmFuc3BvcnRzIHx8IHRoaXMub3B0aW9ucy50cmFuc3BvcnRzO1xuXG4gICAgICAvLyBSZW1hcms6IE1ha2Ugc3VyZSBpZiB3ZSBoYXZlIGFuIGFycmF5IG9mIHRyYW5zcG9ydHMgd2Ugc2xpY2UgaXQgdG9cbiAgICAgIC8vIG1ha2UgY29waWVzIG9mIHRob3NlIHJlZmVyZW5jZXMuXG4gICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgb3B0aW9ucy50cmFuc3BvcnRzID0gQXJyYXkuaXNBcnJheShleGlzdGluZykgPyBleGlzdGluZy5zbGljZSgpIDogW2V4aXN0aW5nXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMudHJhbnNwb3J0cyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIob3B0aW9ucyk7XG4gICAgICBsb2dnZXIub24oJ2Nsb3NlJywgKCkgPT4gdGhpcy5fZGVsZXRlKGlkKSk7XG4gICAgICB0aGlzLmxvZ2dlcnMuc2V0KGlkLCBsb2dnZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvZ2dlcnMuZ2V0KGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyZWl2ZXMgYSBgd2luc3Rvbi5Mb2dnZXJgIGluc3RhbmNlIGZvciB0aGUgc3BlY2lmaWVkIGBpZGAuIElmXG4gICAqIGFuIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0LCBvbmUgaXMgY3JlYXRlZC5cbiAgICogQHBhcmFtIHshc3RyaW5nfSBpZCAtIFRoZSBpZCBvZiB0aGUgTG9nZ2VyIHRvIGdldC5cbiAgICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxuICAgKiBAcmV0dXJucyB7TG9nZ2VyfSAtIEEgY29uZmlndXJlZCBMb2dnZXIgaW5zdGFuY2Ugd2l0aCBhIHNwZWNpZmllZCBpZC5cbiAgICovXG4gIGdldChpZCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmFkZChpZCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGNvbnRhaW5lciBoYXMgYSBsb2dnZXIgd2l0aCB0aGUgaWQuXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIExvZ2dlciBpbnN0YW5jZSB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBCb29sZWFuIHZhbHVlIGluZGljYXRpbmcgaWYgdGhpcyBpbnN0YW5jZSBoYXMgYVxuICAgKiBsb2dnZXIgd2l0aCB0aGUgc3BlY2lmaWVkIGBpZGAuXG4gICAqL1xuICBoYXMoaWQpIHtcbiAgICByZXR1cm4gISF0aGlzLmxvZ2dlcnMuaGFzKGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYSBgTG9nZ2VyYCBpbnN0YW5jZSB3aXRoIHRoZSBzcGVjaWZpZWQgYGlkYCBpZiBpdCBleGlzdHMuXG4gICAqIElmIG5vIGBpZGAgaXMgc3VwcGxpZWQgdGhlbiBhbGwgTG9nZ2VycyBhcmUgY2xvc2VkLlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGlkIC0gVGhlIGlkIG9mIHRoZSBMb2dnZXIgaW5zdGFuY2UgdG8gY2xvc2UuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqL1xuICBjbG9zZShpZCkge1xuICAgIGlmIChpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlbW92ZUxvZ2dlcihpZCk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXJzLmZvckVhY2goKHZhbCwga2V5KSA9PiB0aGlzLl9yZW1vdmVMb2dnZXIoa2V5KSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgbG9nZ2VyIGJhc2VkIG9uIHRoZSBpZC5cbiAgICogQHBhcmFtIHshc3RyaW5nfSBpZCAtIFRoZSBpZCBvZiB0aGUgbG9nZ2VyIHRvIHJlbW92ZS5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW1vdmVMb2dnZXIoaWQpIHtcbiAgICBpZiAoIXRoaXMubG9nZ2Vycy5oYXMoaWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbG9nZ2VyID0gdGhpcy5sb2dnZXJzLmdldChpZCk7XG4gICAgbG9nZ2VyLmNsb3NlKCk7XG4gICAgdGhpcy5fZGVsZXRlKGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGEgYExvZ2dlcmAgaW5zdGFuY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIGBpZGAuXG4gICAqIEBwYXJhbSB7IXN0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIExvZ2dlciBpbnN0YW5jZSB0byBkZWxldGUgZnJvbVxuICAgKiBjb250YWluZXIuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGVsZXRlKGlkKSB7XG4gICAgdGhpcy5sb2dnZXJzLmRlbGV0ZShpZCk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiY3JlYXRlTG9nZ2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJDb250YWluZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJsb2dnZXJzIiwiTWFwIiwiYWRkIiwiaWQiLCJoYXMiLCJPYmplY3QiLCJhc3NpZ24iLCJleGlzdGluZyIsInRyYW5zcG9ydHMiLCJBcnJheSIsImlzQXJyYXkiLCJzbGljZSIsImxvZ2dlciIsIm9uIiwiX2RlbGV0ZSIsInNldCIsImdldCIsImNsb3NlIiwiX3JlbW92ZUxvZ2dlciIsImZvckVhY2giLCJ2YWwiLCJrZXkiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/container.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/create-logger.js":
/*!***********************************************************!*\
  !*** ./node_modules/winston/lib/winston/create-logger.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * create-logger.js: Logger factory for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst { LEVEL } = __webpack_require__(/*! triple-beam */ \"(rsc)/./node_modules/triple-beam/index.js\");\nconst config = __webpack_require__(/*! ./config */ \"(rsc)/./node_modules/winston/lib/winston/config/index.js\");\nconst Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/winston/lib/winston/logger.js\");\nconst debug = __webpack_require__(/*! @dabh/diagnostics */ \"(rsc)/./node_modules/@dabh/diagnostics/node/index.js\")(\"winston:create-logger\");\nfunction isLevelEnabledFunctionName(level) {\n    return \"is\" + level.charAt(0).toUpperCase() + level.slice(1) + \"Enabled\";\n}\n/**\n * Create a new instance of a winston Logger. Creates a new\n * prototype for each instance.\n * @param {!Object} opts - Options for the created logger.\n * @returns {Logger} - A newly created logger instance.\n */ module.exports = function(opts = {}) {\n    //\n    // Default levels: npm\n    //\n    opts.levels = opts.levels || config.npm.levels;\n    /**\n   * DerivedLogger to attach the logs level methods.\n   * @type {DerivedLogger}\n   * @extends {Logger}\n   */ class DerivedLogger extends Logger {\n        /**\n     * Create a new class derived logger for which the levels can be attached to\n     * the prototype of. This is a V8 optimization that is well know to increase\n     * performance of prototype functions.\n     * @param {!Object} options - Options for the created logger.\n     */ constructor(options){\n            super(options);\n        }\n    }\n    const logger = new DerivedLogger(opts);\n    //\n    // Create the log level methods for the derived logger.\n    //\n    Object.keys(opts.levels).forEach(function(level) {\n        debug('Define prototype method for \"%s\"', level);\n        if (level === \"log\") {\n            // eslint-disable-next-line no-console\n            console.warn('Level \"log\" not defined: conflicts with the method \"log\". Use a different level name.');\n            return;\n        }\n        //\n        // Define prototype methods for each log level e.g.:\n        // logger.log('info', msg) implies these methods are defined:\n        // - logger.info(msg)\n        // - logger.isInfoEnabled()\n        //\n        // Remark: to support logger.child this **MUST** be a function\n        // so it'll always be called on the instance instead of a fixed\n        // place in the prototype chain.\n        //\n        DerivedLogger.prototype[level] = function(...args) {\n            // Prefer any instance scope, but default to \"root\" logger\n            const self = this || logger;\n            // Optimize the hot-path which is the single object.\n            if (args.length === 1) {\n                const [msg] = args;\n                const info = msg && msg.message && msg || {\n                    message: msg\n                };\n                info.level = info[LEVEL] = level;\n                self._addDefaultMeta(info);\n                self.write(info);\n                return this || logger;\n            }\n            // When provided nothing assume the empty string\n            if (args.length === 0) {\n                self.log(level, \"\");\n                return self;\n            }\n            // Otherwise build argument list which could potentially conform to\n            // either:\n            // . v3 API: log(obj)\n            // 2. v1/v2 API: log(level, msg, ... [string interpolate], [{metadata}], [callback])\n            return self.log(level, ...args);\n        };\n        DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function() {\n            return (this || logger).isLevelEnabled(level);\n        };\n    });\n    return logger;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9jcmVhdGUtbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBRUQ7QUFFQSxNQUFNLEVBQUVBLEtBQUssRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUMxQixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQztBQUN2QixNQUFNRyxRQUFRSCxtQkFBT0EsQ0FBQyxpRkFBcUI7QUFFM0MsU0FBU0ksMkJBQTJCQyxLQUFLO0lBQ3ZDLE9BQU8sT0FBT0EsTUFBTUMsTUFBTSxDQUFDLEdBQUdDLFdBQVcsS0FBS0YsTUFBTUcsS0FBSyxDQUFDLEtBQUs7QUFDakU7QUFFQTs7Ozs7Q0FLQyxHQUNEQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsRUFBRTtJQUNGLHNCQUFzQjtJQUN0QixFQUFFO0lBQ0ZBLEtBQUtDLE1BQU0sR0FBR0QsS0FBS0MsTUFBTSxJQUFJWCxPQUFPWSxHQUFHLENBQUNELE1BQU07SUFFOUM7Ozs7R0FJQyxHQUNELE1BQU1FLHNCQUFzQlo7UUFDMUI7Ozs7O0tBS0MsR0FDRGEsWUFBWUMsT0FBTyxDQUFFO1lBQ25CLEtBQUssQ0FBQ0E7UUFDUjtJQUNGO0lBRUEsTUFBTUMsU0FBUyxJQUFJSCxjQUFjSDtJQUVqQyxFQUFFO0lBQ0YsdURBQXVEO0lBQ3ZELEVBQUU7SUFDRk8sT0FBT0MsSUFBSSxDQUFDUixLQUFLQyxNQUFNLEVBQUVRLE9BQU8sQ0FBQyxTQUFVZixLQUFLO1FBQzlDRixNQUFNLG9DQUFvQ0U7UUFDMUMsSUFBSUEsVUFBVSxPQUFPO1lBQ25CLHNDQUFzQztZQUN0Q2dCLFFBQVFDLElBQUksQ0FBQztZQUNiO1FBQ0Y7UUFFQSxFQUFFO1FBQ0Ysb0RBQW9EO1FBQ3BELDZEQUE2RDtRQUM3RCxxQkFBcUI7UUFDckIsMkJBQTJCO1FBQzNCLEVBQUU7UUFDRiw4REFBOEQ7UUFDOUQsK0RBQStEO1FBQy9ELGdDQUFnQztRQUNoQyxFQUFFO1FBQ0ZSLGNBQWNTLFNBQVMsQ0FBQ2xCLE1BQU0sR0FBRyxTQUFVLEdBQUdtQixJQUFJO1lBQ2hELDBEQUEwRDtZQUMxRCxNQUFNQyxPQUFPLElBQUksSUFBSVI7WUFFckIsb0RBQW9EO1lBQ3BELElBQUlPLEtBQUtFLE1BQU0sS0FBSyxHQUFHO2dCQUNyQixNQUFNLENBQUNDLElBQUksR0FBR0g7Z0JBQ2QsTUFBTUksT0FBT0QsT0FBT0EsSUFBSUUsT0FBTyxJQUFJRixPQUFPO29CQUFFRSxTQUFTRjtnQkFBSTtnQkFDekRDLEtBQUt2QixLQUFLLEdBQUd1QixJQUFJLENBQUM3QixNQUFNLEdBQUdNO2dCQUMzQm9CLEtBQUtLLGVBQWUsQ0FBQ0Y7Z0JBQ3JCSCxLQUFLTSxLQUFLLENBQUNIO2dCQUNYLE9BQVEsSUFBSSxJQUFJWDtZQUNsQjtZQUVBLGdEQUFnRDtZQUNoRCxJQUFJTyxLQUFLRSxNQUFNLEtBQUssR0FBRztnQkFDckJELEtBQUtPLEdBQUcsQ0FBQzNCLE9BQU87Z0JBQ2hCLE9BQU9vQjtZQUNUO1lBRUEsbUVBQW1FO1lBQ25FLFVBQVU7WUFDVixxQkFBcUI7WUFDckIsb0ZBQW9GO1lBQ3BGLE9BQU9BLEtBQUtPLEdBQUcsQ0FBQzNCLFVBQVVtQjtRQUM1QjtRQUVBVixjQUFjUyxTQUFTLENBQUNuQiwyQkFBMkJDLE9BQU8sR0FBRztZQUMzRCxPQUFPLENBQUMsSUFBSSxJQUFJWSxNQUFLLEVBQUdnQixjQUFjLENBQUM1QjtRQUN6QztJQUNGO0lBRUEsT0FBT1k7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vbGliL3dpbnN0b24vY3JlYXRlLWxvZ2dlci5qcz81NTI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogY3JlYXRlLWxvZ2dlci5qczogTG9nZ2VyIGZhY3RvcnkgZm9yIHdpbnN0b24gbG9nZ2VyIGluc3RhbmNlcy5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IExFVkVMIH0gPSByZXF1aXJlKCd0cmlwbGUtYmVhbScpO1xuY29uc3QgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbmNvbnN0IExvZ2dlciA9IHJlcXVpcmUoJy4vbG9nZ2VyJyk7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ0BkYWJoL2RpYWdub3N0aWNzJykoJ3dpbnN0b246Y3JlYXRlLWxvZ2dlcicpO1xuXG5mdW5jdGlvbiBpc0xldmVsRW5hYmxlZEZ1bmN0aW9uTmFtZShsZXZlbCkge1xuICByZXR1cm4gJ2lzJyArIGxldmVsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGV2ZWwuc2xpY2UoMSkgKyAnRW5hYmxlZCc7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgd2luc3RvbiBMb2dnZXIuIENyZWF0ZXMgYSBuZXdcbiAqIHByb3RvdHlwZSBmb3IgZWFjaCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7IU9iamVjdH0gb3B0cyAtIE9wdGlvbnMgZm9yIHRoZSBjcmVhdGVkIGxvZ2dlci5cbiAqIEByZXR1cm5zIHtMb2dnZXJ9IC0gQSBuZXdseSBjcmVhdGVkIGxvZ2dlciBpbnN0YW5jZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cyA9IHt9KSB7XG4gIC8vXG4gIC8vIERlZmF1bHQgbGV2ZWxzOiBucG1cbiAgLy9cbiAgb3B0cy5sZXZlbHMgPSBvcHRzLmxldmVscyB8fCBjb25maWcubnBtLmxldmVscztcblxuICAvKipcbiAgICogRGVyaXZlZExvZ2dlciB0byBhdHRhY2ggdGhlIGxvZ3MgbGV2ZWwgbWV0aG9kcy5cbiAgICogQHR5cGUge0Rlcml2ZWRMb2dnZXJ9XG4gICAqIEBleHRlbmRzIHtMb2dnZXJ9XG4gICAqL1xuICBjbGFzcyBEZXJpdmVkTG9nZ2VyIGV4dGVuZHMgTG9nZ2VyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgY2xhc3MgZGVyaXZlZCBsb2dnZXIgZm9yIHdoaWNoIHRoZSBsZXZlbHMgY2FuIGJlIGF0dGFjaGVkIHRvXG4gICAgICogdGhlIHByb3RvdHlwZSBvZi4gVGhpcyBpcyBhIFY4IG9wdGltaXphdGlvbiB0aGF0IGlzIHdlbGwga25vdyB0byBpbmNyZWFzZVxuICAgICAqIHBlcmZvcm1hbmNlIG9mIHByb3RvdHlwZSBmdW5jdGlvbnMuXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGNyZWF0ZWQgbG9nZ2VyLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBEZXJpdmVkTG9nZ2VyKG9wdHMpO1xuXG4gIC8vXG4gIC8vIENyZWF0ZSB0aGUgbG9nIGxldmVsIG1ldGhvZHMgZm9yIHRoZSBkZXJpdmVkIGxvZ2dlci5cbiAgLy9cbiAgT2JqZWN0LmtleXMob3B0cy5sZXZlbHMpLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgZGVidWcoJ0RlZmluZSBwcm90b3R5cGUgbWV0aG9kIGZvciBcIiVzXCInLCBsZXZlbCk7XG4gICAgaWYgKGxldmVsID09PSAnbG9nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybignTGV2ZWwgXCJsb2dcIiBub3QgZGVmaW5lZDogY29uZmxpY3RzIHdpdGggdGhlIG1ldGhvZCBcImxvZ1wiLiBVc2UgYSBkaWZmZXJlbnQgbGV2ZWwgbmFtZS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIERlZmluZSBwcm90b3R5cGUgbWV0aG9kcyBmb3IgZWFjaCBsb2cgbGV2ZWwgZS5nLjpcbiAgICAvLyBsb2dnZXIubG9nKCdpbmZvJywgbXNnKSBpbXBsaWVzIHRoZXNlIG1ldGhvZHMgYXJlIGRlZmluZWQ6XG4gICAgLy8gLSBsb2dnZXIuaW5mbyhtc2cpXG4gICAgLy8gLSBsb2dnZXIuaXNJbmZvRW5hYmxlZCgpXG4gICAgLy9cbiAgICAvLyBSZW1hcms6IHRvIHN1cHBvcnQgbG9nZ2VyLmNoaWxkIHRoaXMgKipNVVNUKiogYmUgYSBmdW5jdGlvblxuICAgIC8vIHNvIGl0J2xsIGFsd2F5cyBiZSBjYWxsZWQgb24gdGhlIGluc3RhbmNlIGluc3RlYWQgb2YgYSBmaXhlZFxuICAgIC8vIHBsYWNlIGluIHRoZSBwcm90b3R5cGUgY2hhaW4uXG4gICAgLy9cbiAgICBEZXJpdmVkTG9nZ2VyLnByb3RvdHlwZVtsZXZlbF0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgLy8gUHJlZmVyIGFueSBpbnN0YW5jZSBzY29wZSwgYnV0IGRlZmF1bHQgdG8gXCJyb290XCIgbG9nZ2VyXG4gICAgICBjb25zdCBzZWxmID0gdGhpcyB8fCBsb2dnZXI7XG5cbiAgICAgIC8vIE9wdGltaXplIHRoZSBob3QtcGF0aCB3aGljaCBpcyB0aGUgc2luZ2xlIG9iamVjdC5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCBbbXNnXSA9IGFyZ3M7XG4gICAgICAgIGNvbnN0IGluZm8gPSBtc2cgJiYgbXNnLm1lc3NhZ2UgJiYgbXNnIHx8IHsgbWVzc2FnZTogbXNnIH07XG4gICAgICAgIGluZm8ubGV2ZWwgPSBpbmZvW0xFVkVMXSA9IGxldmVsO1xuICAgICAgICBzZWxmLl9hZGREZWZhdWx0TWV0YShpbmZvKTtcbiAgICAgICAgc2VsZi53cml0ZShpbmZvKTtcbiAgICAgICAgcmV0dXJuICh0aGlzIHx8IGxvZ2dlcik7XG4gICAgICB9XG5cbiAgICAgIC8vIFdoZW4gcHJvdmlkZWQgbm90aGluZyBhc3N1bWUgdGhlIGVtcHR5IHN0cmluZ1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHNlbGYubG9nKGxldmVsLCAnJyk7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UgYnVpbGQgYXJndW1lbnQgbGlzdCB3aGljaCBjb3VsZCBwb3RlbnRpYWxseSBjb25mb3JtIHRvXG4gICAgICAvLyBlaXRoZXI6XG4gICAgICAvLyAuIHYzIEFQSTogbG9nKG9iailcbiAgICAgIC8vIDIuIHYxL3YyIEFQSTogbG9nKGxldmVsLCBtc2csIC4uLiBbc3RyaW5nIGludGVycG9sYXRlXSwgW3ttZXRhZGF0YX1dLCBbY2FsbGJhY2tdKVxuICAgICAgcmV0dXJuIHNlbGYubG9nKGxldmVsLCAuLi5hcmdzKTtcbiAgICB9O1xuXG4gICAgRGVyaXZlZExvZ2dlci5wcm90b3R5cGVbaXNMZXZlbEVuYWJsZWRGdW5jdGlvbk5hbWUobGV2ZWwpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAodGhpcyB8fCBsb2dnZXIpLmlzTGV2ZWxFbmFibGVkKGxldmVsKTtcbiAgICB9O1xuICB9KTtcblxuICByZXR1cm4gbG9nZ2VyO1xufTtcbiJdLCJuYW1lcyI6WyJMRVZFTCIsInJlcXVpcmUiLCJjb25maWciLCJMb2dnZXIiLCJkZWJ1ZyIsImlzTGV2ZWxFbmFibGVkRnVuY3Rpb25OYW1lIiwibGV2ZWwiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdHMiLCJsZXZlbHMiLCJucG0iLCJEZXJpdmVkTG9nZ2VyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibG9nZ2VyIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJjb25zb2xlIiwid2FybiIsInByb3RvdHlwZSIsImFyZ3MiLCJzZWxmIiwibGVuZ3RoIiwibXNnIiwiaW5mbyIsIm1lc3NhZ2UiLCJfYWRkRGVmYXVsdE1ldGEiLCJ3cml0ZSIsImxvZyIsImlzTGV2ZWxFbmFibGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/create-logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/exception-handler.js":
/*!***************************************************************!*\
  !*** ./node_modules/winston/lib/winston/exception-handler.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst os = __webpack_require__(/*! os */ \"os\");\nconst asyncForEach = __webpack_require__(/*! async/forEach */ \"(rsc)/./node_modules/async/forEach.js\");\nconst debug = __webpack_require__(/*! @dabh/diagnostics */ \"(rsc)/./node_modules/@dabh/diagnostics/node/index.js\")(\"winston:exception\");\nconst once = __webpack_require__(/*! one-time */ \"(rsc)/./node_modules/one-time/index.js\");\nconst stackTrace = __webpack_require__(/*! stack-trace */ \"(rsc)/./node_modules/stack-trace/lib/stack-trace.js\");\nconst ExceptionStream = __webpack_require__(/*! ./exception-stream */ \"(rsc)/./node_modules/winston/lib/winston/exception-stream.js\");\n/**\n * Object for handling uncaughtException events.\n * @type {ExceptionHandler}\n */ module.exports = class ExceptionHandler {\n    /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */ constructor(logger){\n        if (!logger) {\n            throw new Error(\"Logger is required to handle exceptions\");\n        }\n        this.logger = logger;\n        this.handlers = new Map();\n    }\n    /**\n   * Handles `uncaughtException` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */ handle(...args) {\n        args.forEach((arg)=>{\n            if (Array.isArray(arg)) {\n                return arg.forEach((handler)=>this._addHandler(handler));\n            }\n            this._addHandler(arg);\n        });\n        if (!this.catcher) {\n            this.catcher = this._uncaughtException.bind(this);\n            process.on(\"uncaughtException\", this.catcher);\n        }\n    }\n    /**\n   * Removes any handlers to `uncaughtException` events for the current\n   * process. This does not modify the state of the `this.handlers` set.\n   * @returns {undefined}\n   */ unhandle() {\n        if (this.catcher) {\n            process.removeListener(\"uncaughtException\", this.catcher);\n            this.catcher = false;\n            Array.from(this.handlers.values()).forEach((wrapper)=>this.logger.unpipe(wrapper));\n        }\n    }\n    /**\n   * TODO: add method description\n   * @param {Error} err - Error to get information about.\n   * @returns {mixed} - TODO: add return description.\n   */ getAllInfo(err) {\n        let message = null;\n        if (err) {\n            message = typeof err === \"string\" ? err : err.message;\n        }\n        return {\n            error: err,\n            // TODO (indexzero): how do we configure this?\n            level: \"error\",\n            message: [\n                `uncaughtException: ${message || \"(no error message)\"}`,\n                err && err.stack || \"  No stack trace\"\n            ].join(\"\\n\"),\n            stack: err && err.stack,\n            exception: true,\n            date: new Date().toString(),\n            process: this.getProcessInfo(),\n            os: this.getOsInfo(),\n            trace: this.getTrace(err)\n        };\n    }\n    /**\n   * Gets all relevant process information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */ getProcessInfo() {\n        return {\n            pid: process.pid,\n            uid: process.getuid ? process.getuid() : null,\n            gid: process.getgid ? process.getgid() : null,\n            cwd: process.cwd(),\n            execPath: process.execPath,\n            version: process.version,\n            argv: process.argv,\n            memoryUsage: process.memoryUsage()\n        };\n    }\n    /**\n   * Gets all relevant OS information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */ getOsInfo() {\n        return {\n            loadavg: os.loadavg(),\n            uptime: os.uptime()\n        };\n    }\n    /**\n   * Gets a stack trace for the specified error.\n   * @param {mixed} err - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */ getTrace(err) {\n        const trace = err ? stackTrace.parse(err) : stackTrace.get();\n        return trace.map((site)=>{\n            return {\n                column: site.getColumnNumber(),\n                file: site.getFileName(),\n                function: site.getFunctionName(),\n                line: site.getLineNumber(),\n                method: site.getMethodName(),\n                native: site.isNative()\n            };\n        });\n    }\n    /**\n   * Helper method to add a transport as an exception handler.\n   * @param {Transport} handler - The transport to add as an exception handler.\n   * @returns {void}\n   */ _addHandler(handler) {\n        if (!this.handlers.has(handler)) {\n            handler.handleExceptions = true;\n            const wrapper = new ExceptionStream(handler);\n            this.handlers.set(handler, wrapper);\n            this.logger.pipe(wrapper);\n        }\n    }\n    /**\n   * Logs all relevant information around the `err` and exits the current\n   * process.\n   * @param {Error} err - Error to handle\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */ _uncaughtException(err) {\n        const info = this.getAllInfo(err);\n        const handlers = this._getExceptionHandlers();\n        // Calculate if we should exit on this error\n        let doExit = typeof this.logger.exitOnError === \"function\" ? this.logger.exitOnError(err) : this.logger.exitOnError;\n        let timeout;\n        if (!handlers.length && doExit) {\n            // eslint-disable-next-line no-console\n            console.warn(\"winston: exitOnError cannot be true with no exception handlers.\");\n            // eslint-disable-next-line no-console\n            console.warn(\"winston: not exiting process.\");\n            doExit = false;\n        }\n        function gracefulExit() {\n            debug(\"doExit\", doExit);\n            debug(\"process._exiting\", process._exiting);\n            if (doExit && !process._exiting) {\n                // Remark: Currently ignoring any exceptions from transports when\n                // catching uncaught exceptions.\n                if (timeout) {\n                    clearTimeout(timeout);\n                }\n                // eslint-disable-next-line no-process-exit\n                process.exit(1);\n            }\n        }\n        if (!handlers || handlers.length === 0) {\n            return process.nextTick(gracefulExit);\n        }\n        // Log to all transports attempting to listen for when they are completed.\n        asyncForEach(handlers, (handler, next)=>{\n            const done = once(next);\n            const transport = handler.transport || handler;\n            // Debug wrapping so that we can inspect what's going on under the covers.\n            function onDone(event) {\n                return ()=>{\n                    debug(event);\n                    done();\n                };\n            }\n            transport._ending = true;\n            transport.once(\"finish\", onDone(\"finished\"));\n            transport.once(\"error\", onDone(\"error\"));\n        }, ()=>doExit && gracefulExit());\n        this.logger.log(info);\n        // If exitOnError is true, then only allow the logging of exceptions to\n        // take up to `3000ms`.\n        if (doExit) {\n            timeout = setTimeout(gracefulExit, 3000);\n        }\n    }\n    /**\n   * Returns the list of transports and exceptionHandlers for this instance.\n   * @returns {Array} - List of transports and exceptionHandlers for this\n   * instance.\n   * @private\n   */ _getExceptionHandlers() {\n        // Remark (indexzero): since `logger.transports` returns all of the pipes\n        // from the _readableState of the stream we actually get the join of the\n        // explicit handlers and the implicit transports with\n        // `handleExceptions: true`\n        return this.logger.transports.filter((wrap)=>{\n            const transport = wrap.transport || wrap;\n            return transport.handleExceptions;\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/exception-handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/exception-stream.js":
/*!**************************************************************!*\
  !*** ./node_modules/winston/lib/winston/exception-stream.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * exception-stream.js: TODO: add file header handler.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst { Writable } = __webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\");\n/**\n * TODO: add class description.\n * @type {ExceptionStream}\n * @extends {Writable}\n */ module.exports = class ExceptionStream extends Writable {\n    /**\n   * Constructor function for the ExceptionStream responsible for wrapping a\n   * TransportStream; only allowing writes of `info` objects with\n   * `info.exception` set to true.\n   * @param {!TransportStream} transport - Stream to filter to exceptions\n   */ constructor(transport){\n        super({\n            objectMode: true\n        });\n        if (!transport) {\n            throw new Error(\"ExceptionStream requires a TransportStream instance.\");\n        }\n        // Remark (indexzero): we set `handleExceptions` here because it's the\n        // predicate checked in ExceptionHandler.prototype.__getExceptionHandlers\n        this.handleExceptions = true;\n        this.transport = transport;\n    }\n    /**\n   * Writes the info object to our transport instance if (and only if) the\n   * `exception` property is set on the info.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */ _write(info, enc, callback) {\n        if (info.exception) {\n            return this.transport.log(info, callback);\n        }\n        callback();\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9leGNlcHRpb24tc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBRUQ7QUFFQSxNQUFNLEVBQUVBLFFBQVEsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUU3Qjs7OztDQUlDLEdBQ0RDLE9BQU9DLE9BQU8sR0FBRyxNQUFNQyx3QkFBd0JKO0lBQzdDOzs7OztHQUtDLEdBQ0RLLFlBQVlDLFNBQVMsQ0FBRTtRQUNyQixLQUFLLENBQUM7WUFBRUMsWUFBWTtRQUFLO1FBRXpCLElBQUksQ0FBQ0QsV0FBVztZQUNkLE1BQU0sSUFBSUUsTUFBTTtRQUNsQjtRQUVBLHNFQUFzRTtRQUN0RSx5RUFBeUU7UUFDekUsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztRQUN4QixJQUFJLENBQUNILFNBQVMsR0FBR0E7SUFDbkI7SUFFQTs7Ozs7Ozs7R0FRQyxHQUNESSxPQUFPQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO1FBQzFCLElBQUlGLEtBQUtHLFNBQVMsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQ1IsU0FBUyxDQUFDUyxHQUFHLENBQUNKLE1BQU1FO1FBQ2xDO1FBRUFBO1FBQ0EsT0FBTztJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy93aW5zdG9uL2xpYi93aW5zdG9uL2V4Y2VwdGlvbi1zdHJlYW0uanM/OGJmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGV4Y2VwdGlvbi1zdHJlYW0uanM6IFRPRE86IGFkZCBmaWxlIGhlYWRlciBoYW5kbGVyLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgV3JpdGFibGUgfSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpO1xuXG4vKipcbiAqIFRPRE86IGFkZCBjbGFzcyBkZXNjcmlwdGlvbi5cbiAqIEB0eXBlIHtFeGNlcHRpb25TdHJlYW19XG4gKiBAZXh0ZW5kcyB7V3JpdGFibGV9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRXhjZXB0aW9uU3RyZWFtIGV4dGVuZHMgV3JpdGFibGUge1xuICAvKipcbiAgICogQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBFeGNlcHRpb25TdHJlYW0gcmVzcG9uc2libGUgZm9yIHdyYXBwaW5nIGFcbiAgICogVHJhbnNwb3J0U3RyZWFtOyBvbmx5IGFsbG93aW5nIHdyaXRlcyBvZiBgaW5mb2Agb2JqZWN0cyB3aXRoXG4gICAqIGBpbmZvLmV4Y2VwdGlvbmAgc2V0IHRvIHRydWUuXG4gICAqIEBwYXJhbSB7IVRyYW5zcG9ydFN0cmVhbX0gdHJhbnNwb3J0IC0gU3RyZWFtIHRvIGZpbHRlciB0byBleGNlcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICBzdXBlcih7IG9iamVjdE1vZGU6IHRydWUgfSk7XG5cbiAgICBpZiAoIXRyYW5zcG9ydCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeGNlcHRpb25TdHJlYW0gcmVxdWlyZXMgYSBUcmFuc3BvcnRTdHJlYW0gaW5zdGFuY2UuJyk7XG4gICAgfVxuXG4gICAgLy8gUmVtYXJrIChpbmRleHplcm8pOiB3ZSBzZXQgYGhhbmRsZUV4Y2VwdGlvbnNgIGhlcmUgYmVjYXVzZSBpdCdzIHRoZVxuICAgIC8vIHByZWRpY2F0ZSBjaGVja2VkIGluIEV4Y2VwdGlvbkhhbmRsZXIucHJvdG90eXBlLl9fZ2V0RXhjZXB0aW9uSGFuZGxlcnNcbiAgICB0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgPSB0cnVlO1xuICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyB0aGUgaW5mbyBvYmplY3QgdG8gb3VyIHRyYW5zcG9ydCBpbnN0YW5jZSBpZiAoYW5kIG9ubHkgaWYpIHRoZVxuICAgKiBgZXhjZXB0aW9uYCBwcm9wZXJ0eSBpcyBzZXQgb24gdGhlIGluZm8uXG4gICAqIEBwYXJhbSB7bWl4ZWR9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEBwYXJhbSB7bWl4ZWR9IGVuYyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHBhcmFtIHttaXhlZH0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3dyaXRlKGluZm8sIGVuYywgY2FsbGJhY2spIHtcbiAgICBpZiAoaW5mby5leGNlcHRpb24pIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydC5sb2coaW5mbywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiV3JpdGFibGUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkV4Y2VwdGlvblN0cmVhbSIsImNvbnN0cnVjdG9yIiwidHJhbnNwb3J0Iiwib2JqZWN0TW9kZSIsIkVycm9yIiwiaGFuZGxlRXhjZXB0aW9ucyIsIl93cml0ZSIsImluZm8iLCJlbmMiLCJjYWxsYmFjayIsImV4Y2VwdGlvbiIsImxvZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/exception-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/logger.js":
/*!****************************************************!*\
  !*** ./node_modules/winston/lib/winston/logger.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * logger.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst { Stream, Transform } = __webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\");\nconst asyncForEach = __webpack_require__(/*! async/forEach */ \"(rsc)/./node_modules/async/forEach.js\");\nconst { LEVEL, SPLAT } = __webpack_require__(/*! triple-beam */ \"(rsc)/./node_modules/triple-beam/index.js\");\nconst isStream = __webpack_require__(/*! is-stream */ \"(rsc)/./node_modules/is-stream/index.js\");\nconst ExceptionHandler = __webpack_require__(/*! ./exception-handler */ \"(rsc)/./node_modules/winston/lib/winston/exception-handler.js\");\nconst RejectionHandler = __webpack_require__(/*! ./rejection-handler */ \"(rsc)/./node_modules/winston/lib/winston/rejection-handler.js\");\nconst LegacyTransportStream = __webpack_require__(/*! winston-transport/legacy */ \"(rsc)/./node_modules/winston-transport/legacy.js\");\nconst Profiler = __webpack_require__(/*! ./profiler */ \"(rsc)/./node_modules/winston/lib/winston/profiler.js\");\nconst { warn } = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/winston/lib/winston/common.js\");\nconst config = __webpack_require__(/*! ./config */ \"(rsc)/./node_modules/winston/lib/winston/config/index.js\");\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */ const formatRegExp = /%[scdjifoO%]/g;\n/**\n * TODO: add class description.\n * @type {Logger}\n * @extends {Transform}\n */ class Logger extends Transform {\n    /**\n   * Constructor function for the Logger object responsible for persisting log\n   * messages and metadata to one or more transports.\n   * @param {!Object} options - foo\n   */ constructor(options){\n        super({\n            objectMode: true\n        });\n        this.configure(options);\n    }\n    child(defaultRequestMetadata) {\n        const logger = this;\n        return Object.create(logger, {\n            write: {\n                value: function(info) {\n                    const infoClone = Object.assign({}, defaultRequestMetadata, info);\n                    // Object.assign doesn't copy inherited Error\n                    // properties so we have to do that explicitly\n                    //\n                    // Remark (indexzero): we should remove this\n                    // since the errors format will handle this case.\n                    //\n                    if (info instanceof Error) {\n                        infoClone.stack = info.stack;\n                        infoClone.message = info.message;\n                    }\n                    logger.write(infoClone);\n                }\n            }\n        });\n    }\n    /**\n   * This will wholesale reconfigure this instance by:\n   * 1. Resetting all transports. Older transports will be removed implicitly.\n   * 2. Set all other options including levels, colors, rewriters, filters,\n   *    exceptionHandlers, etc.\n   * @param {!Object} options - TODO: add param description.\n   * @returns {undefined}\n   */ configure({ silent, format, defaultMeta, levels, level = \"info\", exitOnError = true, transports, colors, emitErrs, formatters, padLevels, rewriters, stripColors, exceptionHandlers, rejectionHandlers } = {}) {\n        // Reset transports if we already have them\n        if (this.transports.length) {\n            this.clear();\n        }\n        this.silent = silent;\n        this.format = format || this.format || __webpack_require__(/*! logform/json */ \"(rsc)/./node_modules/logform/json.js\")();\n        this.defaultMeta = defaultMeta || null;\n        // Hoist other options onto this instance.\n        this.levels = levels || this.levels || config.npm.levels;\n        this.level = level;\n        if (this.exceptions) {\n            this.exceptions.unhandle();\n        }\n        if (this.rejections) {\n            this.rejections.unhandle();\n        }\n        this.exceptions = new ExceptionHandler(this);\n        this.rejections = new RejectionHandler(this);\n        this.profilers = {};\n        this.exitOnError = exitOnError;\n        // Add all transports we have been provided.\n        if (transports) {\n            transports = Array.isArray(transports) ? transports : [\n                transports\n            ];\n            transports.forEach((transport)=>this.add(transport));\n        }\n        if (colors || emitErrs || formatters || padLevels || rewriters || stripColors) {\n            throw new Error([\n                \"{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.\",\n                \"Use a custom winston.format(function) instead.\",\n                \"See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md\"\n            ].join(\"\\n\"));\n        }\n        if (exceptionHandlers) {\n            this.exceptions.handle(exceptionHandlers);\n        }\n        if (rejectionHandlers) {\n            this.rejections.handle(rejectionHandlers);\n        }\n    }\n    isLevelEnabled(level) {\n        const givenLevelValue = getLevelValue(this.levels, level);\n        if (givenLevelValue === null) {\n            return false;\n        }\n        const configuredLevelValue = getLevelValue(this.levels, this.level);\n        if (configuredLevelValue === null) {\n            return false;\n        }\n        if (!this.transports || this.transports.length === 0) {\n            return configuredLevelValue >= givenLevelValue;\n        }\n        const index = this.transports.findIndex((transport)=>{\n            let transportLevelValue = getLevelValue(this.levels, transport.level);\n            if (transportLevelValue === null) {\n                transportLevelValue = configuredLevelValue;\n            }\n            return transportLevelValue >= givenLevelValue;\n        });\n        return index !== -1;\n    }\n    /* eslint-disable valid-jsdoc */ /**\n   * Ensure backwards compatibility with a `log` method\n   * @param {mixed} level - Level the log message is written at.\n   * @param {mixed} msg - TODO: add param description.\n   * @param {mixed} meta - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   *\n   * @example\n   *    // Supports the existing API:\n   *    logger.log('info', 'Hello world', { custom: true });\n   *    logger.log('info', new Error('Yo, it\\'s on fire'));\n   *\n   *    // Requires winston.format.splat()\n   *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });\n   *\n   *    // And the new API with a single JSON literal:\n   *    logger.log({ level: 'info', message: 'Hello world', custom: true });\n   *    logger.log({ level: 'info', message: new Error('Yo, it\\'s on fire') });\n   *\n   *    // Also requires winston.format.splat()\n   *    logger.log({\n   *      level: 'info',\n   *      message: '%s %d%%',\n   *      [SPLAT]: ['A string', 50],\n   *      meta: { thisIsMeta: true }\n   *    });\n   *\n   */ /* eslint-enable valid-jsdoc */ log(level, msg, ...splat) {\n        // eslint-disable-line max-params\n        // Optimize for the hotpath of logging JSON literals\n        if (arguments.length === 1) {\n            // Yo dawg, I heard you like levels ... seriously ...\n            // In this context the LHS `level` here is actually the `info` so read\n            // this as: info[LEVEL] = info.level;\n            level[LEVEL] = level.level;\n            this._addDefaultMeta(level);\n            this.write(level);\n            return this;\n        }\n        // Slightly less hotpath, but worth optimizing for.\n        if (arguments.length === 2) {\n            if (msg && typeof msg === \"object\") {\n                msg[LEVEL] = msg.level = level;\n                this._addDefaultMeta(msg);\n                this.write(msg);\n                return this;\n            }\n            msg = {\n                [LEVEL]: level,\n                level,\n                message: msg\n            };\n            this._addDefaultMeta(msg);\n            this.write(msg);\n            return this;\n        }\n        const [meta] = splat;\n        if (typeof meta === \"object\" && meta !== null) {\n            // Extract tokens, if none available default to empty array to\n            // ensure consistancy in expected results\n            const tokens = msg && msg.match && msg.match(formatRegExp);\n            if (!tokens) {\n                const info = Object.assign({}, this.defaultMeta, meta, {\n                    [LEVEL]: level,\n                    [SPLAT]: splat,\n                    level,\n                    message: msg\n                });\n                if (meta.message) info.message = `${info.message} ${meta.message}`;\n                if (meta.stack) info.stack = meta.stack;\n                if (meta.cause) info.cause = meta.cause;\n                this.write(info);\n                return this;\n            }\n        }\n        this.write(Object.assign({}, this.defaultMeta, {\n            [LEVEL]: level,\n            [SPLAT]: splat,\n            level,\n            message: msg\n        }));\n        return this;\n    }\n    /**\n   * Pushes data so that it can be picked up by all of our pipe targets.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - Continues stream processing.\n   * @returns {undefined}\n   * @private\n   */ _transform(info, enc, callback) {\n        if (this.silent) {\n            return callback();\n        }\n        // [LEVEL] is only soft guaranteed to be set here since we are a proper\n        // stream. It is likely that `info` came in through `.log(info)` or\n        // `.info(info)`. If it is not defined, however, define it.\n        // This LEVEL symbol is provided by `triple-beam` and also used in:\n        // - logform\n        // - winston-transport\n        // - abstract-winston-transport\n        if (!info[LEVEL]) {\n            info[LEVEL] = info.level;\n        }\n        // Remark: really not sure what to do here, but this has been reported as\n        // very confusing by pre winston@2.0.0 users as quite confusing when using\n        // custom levels.\n        if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {\n            // eslint-disable-next-line no-console\n            console.error(\"[winston] Unknown logger level: %s\", info[LEVEL]);\n        }\n        // Remark: not sure if we should simply error here.\n        if (!this._readableState.pipes) {\n            // eslint-disable-next-line no-console\n            console.error(\"[winston] Attempt to write logs with no transports, which can increase memory usage: %j\", info);\n        }\n        // Here we write to the `format` pipe-chain, which on `readable` above will\n        // push the formatted `info` Object onto the buffer for this instance. We trap\n        // (and re-throw) any errors generated by the user-provided format, but also\n        // guarantee that the streams callback is invoked so that we can continue flowing.\n        try {\n            this.push(this.format.transform(info, this.format.options));\n        } finally{\n            this._writableState.sync = false;\n            // eslint-disable-next-line callback-return\n            callback();\n        }\n    }\n    /**\n   * Delays the 'finish' event until all transport pipe targets have\n   * also emitted 'finish' or are already finished.\n   * @param {mixed} callback - Continues stream processing.\n   */ _final(callback) {\n        const transports = this.transports.slice();\n        asyncForEach(transports, (transport, next)=>{\n            if (!transport || transport.finished) return setImmediate(next);\n            transport.once(\"finish\", next);\n            transport.end();\n        }, callback);\n    }\n    /**\n   * Adds the transport to this logger instance by piping to it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */ add(transport) {\n        // Support backwards compatibility with all existing `winston < 3.x.x`\n        // transports which meet one of two criteria:\n        // 1. They inherit from winston.Transport in  < 3.x.x which is NOT a stream.\n        // 2. They expose a log method which has a length greater than 2 (i.e. more then\n        //    just `log(info, callback)`.\n        const target = !isStream(transport) || transport.log.length > 2 ? new LegacyTransportStream({\n            transport\n        }) : transport;\n        if (!target._writableState || !target._writableState.objectMode) {\n            throw new Error(\"Transports must WritableStreams in objectMode. Set { objectMode: true }.\");\n        }\n        // Listen for the `error` event and the `warn` event on the new Transport.\n        this._onEvent(\"error\", target);\n        this._onEvent(\"warn\", target);\n        this.pipe(target);\n        if (transport.handleExceptions) {\n            this.exceptions.handle();\n        }\n        if (transport.handleRejections) {\n            this.rejections.handle();\n        }\n        return this;\n    }\n    /**\n   * Removes the transport from this logger instance by unpiping from it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */ remove(transport) {\n        if (!transport) return this;\n        let target = transport;\n        if (!isStream(transport) || transport.log.length > 2) {\n            target = this.transports.filter((match)=>match.transport === transport)[0];\n        }\n        if (target) {\n            this.unpipe(target);\n        }\n        return this;\n    }\n    /**\n   * Removes all transports from this logger instance.\n   * @returns {Logger} - TODO: add return description.\n   */ clear() {\n        this.unpipe();\n        return this;\n    }\n    /**\n   * Cleans up resources (streams, event listeners) for all transports\n   * associated with this instance (if necessary).\n   * @returns {Logger} - TODO: add return description.\n   */ close() {\n        this.exceptions.unhandle();\n        this.rejections.unhandle();\n        this.clear();\n        this.emit(\"close\");\n        return this;\n    }\n    /**\n   * Sets the `target` levels specified on this instance.\n   * @param {Object} Target levels to use on this instance.\n   */ setLevels() {\n        warn.deprecated(\"setLevels\");\n    }\n    /**\n   * Queries the all transports for this instance with the specified `options`.\n   * This will aggregate each transport's results into one object containing\n   * a property per transport.\n   * @param {Object} options - Query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   */ query(options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n        options = options || {};\n        const results = {};\n        const queryObject = Object.assign({}, options.query || {});\n        // Helper function to query a single transport\n        function queryTransport(transport, next) {\n            if (options.query && typeof transport.formatQuery === \"function\") {\n                options.query = transport.formatQuery(queryObject);\n            }\n            transport.query(options, (err, res)=>{\n                if (err) {\n                    return next(err);\n                }\n                if (typeof transport.formatResults === \"function\") {\n                    res = transport.formatResults(res, options.format);\n                }\n                next(null, res);\n            });\n        }\n        // Helper function to accumulate the results from `queryTransport` into\n        // the `results`.\n        function addResults(transport, next) {\n            queryTransport(transport, (err, result)=>{\n                // queryTransport could potentially invoke the callback multiple times\n                // since Transport code can be unpredictable.\n                if (next) {\n                    result = err || result;\n                    if (result) {\n                        results[transport.name] = result;\n                    }\n                    // eslint-disable-next-line callback-return\n                    next();\n                }\n                next = null;\n            });\n        }\n        // Iterate over the transports in parallel setting the appropriate key in\n        // the `results`.\n        asyncForEach(this.transports.filter((transport)=>!!transport.query), addResults, ()=>callback(null, results));\n    }\n    /**\n   * Returns a log stream for all transports. Options object is optional.\n   * @param{Object} options={} - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description.\n   */ stream(options = {}) {\n        const out = new Stream();\n        const streams = [];\n        out._streams = streams;\n        out.destroy = ()=>{\n            let i = streams.length;\n            while(i--){\n                streams[i].destroy();\n            }\n        };\n        // Create a list of all transports for this instance.\n        this.transports.filter((transport)=>!!transport.stream).forEach((transport)=>{\n            const str = transport.stream(options);\n            if (!str) {\n                return;\n            }\n            streams.push(str);\n            str.on(\"log\", (log)=>{\n                log.transport = log.transport || [];\n                log.transport.push(transport.name);\n                out.emit(\"log\", log);\n            });\n            str.on(\"error\", (err)=>{\n                err.transport = err.transport || [];\n                err.transport.push(transport.name);\n                out.emit(\"error\", err);\n            });\n        });\n        return out;\n    }\n    /**\n   * Returns an object corresponding to a specific timing. When done is called\n   * the timer will finish and log the duration. e.g.:\n   * @returns {Profile} - TODO: add return description.\n   * @example\n   *    const timer = winston.startTimer()\n   *    setTimeout(() => {\n   *      timer.done({\n   *        message: 'Logging message'\n   *      });\n   *    }, 1000);\n   */ startTimer() {\n        return new Profiler(this);\n    }\n    /**\n   * Tracks the time inbetween subsequent calls to this method with the same\n   * `id` parameter. The second call to this method will log the difference in\n   * milliseconds along with the message.\n   * @param {string} id Unique id of the profiler\n   * @returns {Logger} - TODO: add return description.\n   */ profile(id, ...args) {\n        const time = Date.now();\n        if (this.profilers[id]) {\n            const timeEnd = this.profilers[id];\n            delete this.profilers[id];\n            // Attempt to be kind to users if they are still using older APIs.\n            if (typeof args[args.length - 2] === \"function\") {\n                // eslint-disable-next-line no-console\n                console.warn(\"Callback function no longer supported as of winston@3.0.0\");\n                args.pop();\n            }\n            // Set the duration property of the metadata\n            const info = typeof args[args.length - 1] === \"object\" ? args.pop() : {};\n            info.level = info.level || \"info\";\n            info.durationMs = time - timeEnd;\n            info.message = info.message || id;\n            return this.write(info);\n        }\n        this.profilers[id] = time;\n        return this;\n    }\n    /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */ handleExceptions(...args) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()\");\n        this.exceptions.handle(...args);\n    }\n    /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */ unhandleExceptions(...args) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()\");\n        this.exceptions.unhandle(...args);\n    }\n    /**\n   * Throw a more meaningful deprecation notice\n   * @throws {Error} - TODO: add throws description.\n   */ cli() {\n        throw new Error([\n            \"Logger.cli() was removed in winston@3.0.0\",\n            \"Use a custom winston.formats.cli() instead.\",\n            \"See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md\"\n        ].join(\"\\n\"));\n    }\n    /**\n   * Bubbles the `event` that occured on the specified `transport` up\n   * from this instance.\n   * @param {string} event - The event that occured\n   * @param {Object} transport - Transport on which the event occured\n   * @private\n   */ _onEvent(event, transport) {\n        function transportEvent(err) {\n            // https://github.com/winstonjs/winston/issues/1364\n            if (event === \"error\" && !this.transports.includes(transport)) {\n                this.add(transport);\n            }\n            this.emit(event, err, transport);\n        }\n        if (!transport[\"__winston\" + event]) {\n            transport[\"__winston\" + event] = transportEvent.bind(this);\n            transport.on(event, transport[\"__winston\" + event]);\n        }\n    }\n    _addDefaultMeta(msg) {\n        if (this.defaultMeta) {\n            Object.assign(msg, this.defaultMeta);\n        }\n    }\n}\nfunction getLevelValue(levels, level) {\n    const value = levels[level];\n    if (!value && value !== 0) {\n        return null;\n    }\n    return value;\n}\n/**\n * Represents the current readableState pipe targets for this Logger instance.\n * @type {Array|Object}\n */ Object.defineProperty(Logger.prototype, \"transports\", {\n    configurable: false,\n    enumerable: true,\n    get () {\n        const { pipes } = this._readableState;\n        return !Array.isArray(pipes) ? [\n            pipes\n        ].filter(Boolean) : pipes;\n    }\n});\nmodule.exports = Logger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/profiler.js":
/*!******************************************************!*\
  !*** ./node_modules/winston/lib/winston/profiler.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * profiler.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \n/**\n * TODO: add class description.\n * @type {Profiler}\n * @private\n */ class Profiler {\n    /**\n   * Constructor function for the Profiler instance used by\n   * `Logger.prototype.startTimer`. When done is called the timer will finish\n   * and log the duration.\n   * @param {!Logger} logger - TODO: add param description.\n   * @private\n   */ constructor(logger){\n        const Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/winston/lib/winston/logger.js\");\n        if (typeof logger !== \"object\" || Array.isArray(logger) || !(logger instanceof Logger)) {\n            throw new Error(\"Logger is required for profiling\");\n        } else {\n            this.logger = logger;\n            this.start = Date.now();\n        }\n    }\n    /**\n   * Ends the current timer (i.e. Profiler) instance and logs the `msg` along\n   * with the duration since creation.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */ done(...args) {\n        if (typeof args[args.length - 1] === \"function\") {\n            // eslint-disable-next-line no-console\n            console.warn(\"Callback function no longer supported as of winston@3.0.0\");\n            args.pop();\n        }\n        const info = typeof args[args.length - 1] === \"object\" ? args.pop() : {};\n        info.level = info.level || \"info\";\n        info.durationMs = Date.now() - this.start;\n        return this.logger.write(info);\n    }\n}\nmodule.exports = Profiler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9wcm9maWxlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Q0FLQyxHQUVEO0FBQ0E7Ozs7Q0FJQyxHQUNELE1BQU1BO0lBQ0o7Ozs7OztHQU1DLEdBQ0RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNsQixNQUFNQyxTQUFTQyxtQkFBT0EsQ0FBQztRQUN2QixJQUFJLE9BQU9GLFdBQVcsWUFBWUcsTUFBTUMsT0FBTyxDQUFDSixXQUFXLENBQUVBLENBQUFBLGtCQUFrQkMsTUFBSyxHQUFJO1lBQ3RGLE1BQU0sSUFBSUksTUFBTTtRQUNsQixPQUFPO1lBQ0wsSUFBSSxDQUFDTCxNQUFNLEdBQUdBO1lBQ2QsSUFBSSxDQUFDTSxLQUFLLEdBQUdDLEtBQUtDLEdBQUc7UUFDdkI7SUFDRjtJQUVBOzs7OztHQUtDLEdBQ0RDLEtBQUssR0FBR0MsSUFBSSxFQUFFO1FBQ1osSUFBSSxPQUFPQSxJQUFJLENBQUNBLEtBQUtDLE1BQU0sR0FBRyxFQUFFLEtBQUssWUFBWTtZQUMvQyxzQ0FBc0M7WUFDdENDLFFBQVFDLElBQUksQ0FBQztZQUNiSCxLQUFLSSxHQUFHO1FBQ1Y7UUFFQSxNQUFNQyxPQUFPLE9BQU9MLElBQUksQ0FBQ0EsS0FBS0MsTUFBTSxHQUFHLEVBQUUsS0FBSyxXQUFXRCxLQUFLSSxHQUFHLEtBQUssQ0FBQztRQUN2RUMsS0FBS0MsS0FBSyxHQUFHRCxLQUFLQyxLQUFLLElBQUk7UUFDM0JELEtBQUtFLFVBQVUsR0FBRyxLQUFNVCxHQUFHLEtBQU0sSUFBSSxDQUFDRixLQUFLO1FBRTNDLE9BQU8sSUFBSSxDQUFDTixNQUFNLENBQUNrQixLQUFLLENBQUNIO0lBQzNCO0FBQ0Y7QUFFQUksT0FBT0MsT0FBTyxHQUFHdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy93aW5zdG9uL2xpYi93aW5zdG9uL3Byb2ZpbGVyLmpzPzZkMDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBwcm9maWxlci5qczogVE9ETzogYWRkIGZpbGUgaGVhZGVyIGRlc2NyaXB0aW9uLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG4vKipcbiAqIFRPRE86IGFkZCBjbGFzcyBkZXNjcmlwdGlvbi5cbiAqIEB0eXBlIHtQcm9maWxlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFByb2ZpbGVyIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgUHJvZmlsZXIgaW5zdGFuY2UgdXNlZCBieVxuICAgKiBgTG9nZ2VyLnByb3RvdHlwZS5zdGFydFRpbWVyYC4gV2hlbiBkb25lIGlzIGNhbGxlZCB0aGUgdGltZXIgd2lsbCBmaW5pc2hcbiAgICogYW5kIGxvZyB0aGUgZHVyYXRpb24uXG4gICAqIEBwYXJhbSB7IUxvZ2dlcn0gbG9nZ2VyIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IobG9nZ2VyKSB7XG4gICAgY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnZXInKTtcbiAgICBpZiAodHlwZW9mIGxvZ2dlciAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShsb2dnZXIpIHx8ICEobG9nZ2VyIGluc3RhbmNlb2YgTG9nZ2VyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dnZXIgaXMgcmVxdWlyZWQgZm9yIHByb2ZpbGluZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgIHRoaXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbmRzIHRoZSBjdXJyZW50IHRpbWVyIChpLmUuIFByb2ZpbGVyKSBpbnN0YW5jZSBhbmQgbG9ncyB0aGUgYG1zZ2AgYWxvbmdcbiAgICogd2l0aCB0aGUgZHVyYXRpb24gc2luY2UgY3JlYXRpb24uXG4gICAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJuIGRlc2NyaXB0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZG9uZSguLi5hcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ0NhbGxiYWNrIGZ1bmN0aW9uIG5vIGxvbmdlciBzdXBwb3J0ZWQgYXMgb2Ygd2luc3RvbkAzLjAuMCcpO1xuICAgICAgYXJncy5wb3AoKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbmZvID0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ29iamVjdCcgPyBhcmdzLnBvcCgpIDoge307XG4gICAgaW5mby5sZXZlbCA9IGluZm8ubGV2ZWwgfHwgJ2luZm8nO1xuICAgIGluZm8uZHVyYXRpb25NcyA9IChEYXRlLm5vdygpKSAtIHRoaXMuc3RhcnQ7XG5cbiAgICByZXR1cm4gdGhpcy5sb2dnZXIud3JpdGUoaW5mbyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvZmlsZXI7XG4iXSwibmFtZXMiOlsiUHJvZmlsZXIiLCJjb25zdHJ1Y3RvciIsImxvZ2dlciIsIkxvZ2dlciIsInJlcXVpcmUiLCJBcnJheSIsImlzQXJyYXkiLCJFcnJvciIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsImRvbmUiLCJhcmdzIiwibGVuZ3RoIiwiY29uc29sZSIsIndhcm4iLCJwb3AiLCJpbmZvIiwibGV2ZWwiLCJkdXJhdGlvbk1zIiwid3JpdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/profiler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/rejection-handler.js":
/*!***************************************************************!*\
  !*** ./node_modules/winston/lib/winston/rejection-handler.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst os = __webpack_require__(/*! os */ \"os\");\nconst asyncForEach = __webpack_require__(/*! async/forEach */ \"(rsc)/./node_modules/async/forEach.js\");\nconst debug = __webpack_require__(/*! @dabh/diagnostics */ \"(rsc)/./node_modules/@dabh/diagnostics/node/index.js\")(\"winston:rejection\");\nconst once = __webpack_require__(/*! one-time */ \"(rsc)/./node_modules/one-time/index.js\");\nconst stackTrace = __webpack_require__(/*! stack-trace */ \"(rsc)/./node_modules/stack-trace/lib/stack-trace.js\");\nconst RejectionStream = __webpack_require__(/*! ./rejection-stream */ \"(rsc)/./node_modules/winston/lib/winston/rejection-stream.js\");\n/**\n * Object for handling unhandledRejection events.\n * @type {RejectionHandler}\n */ module.exports = class RejectionHandler {\n    /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */ constructor(logger){\n        if (!logger) {\n            throw new Error(\"Logger is required to handle rejections\");\n        }\n        this.logger = logger;\n        this.handlers = new Map();\n    }\n    /**\n   * Handles `unhandledRejection` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */ handle(...args) {\n        args.forEach((arg)=>{\n            if (Array.isArray(arg)) {\n                return arg.forEach((handler)=>this._addHandler(handler));\n            }\n            this._addHandler(arg);\n        });\n        if (!this.catcher) {\n            this.catcher = this._unhandledRejection.bind(this);\n            process.on(\"unhandledRejection\", this.catcher);\n        }\n    }\n    /**\n   * Removes any handlers to `unhandledRejection` events for the current\n   * process. This does not modify the state of the `this.handlers` set.\n   * @returns {undefined}\n   */ unhandle() {\n        if (this.catcher) {\n            process.removeListener(\"unhandledRejection\", this.catcher);\n            this.catcher = false;\n            Array.from(this.handlers.values()).forEach((wrapper)=>this.logger.unpipe(wrapper));\n        }\n    }\n    /**\n   * TODO: add method description\n   * @param {Error} err - Error to get information about.\n   * @returns {mixed} - TODO: add return description.\n   */ getAllInfo(err) {\n        let message = null;\n        if (err) {\n            message = typeof err === \"string\" ? err : err.message;\n        }\n        return {\n            error: err,\n            // TODO (indexzero): how do we configure this?\n            level: \"error\",\n            message: [\n                `unhandledRejection: ${message || \"(no error message)\"}`,\n                err && err.stack || \"  No stack trace\"\n            ].join(\"\\n\"),\n            stack: err && err.stack,\n            rejection: true,\n            date: new Date().toString(),\n            process: this.getProcessInfo(),\n            os: this.getOsInfo(),\n            trace: this.getTrace(err)\n        };\n    }\n    /**\n   * Gets all relevant process information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */ getProcessInfo() {\n        return {\n            pid: process.pid,\n            uid: process.getuid ? process.getuid() : null,\n            gid: process.getgid ? process.getgid() : null,\n            cwd: process.cwd(),\n            execPath: process.execPath,\n            version: process.version,\n            argv: process.argv,\n            memoryUsage: process.memoryUsage()\n        };\n    }\n    /**\n   * Gets all relevant OS information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */ getOsInfo() {\n        return {\n            loadavg: os.loadavg(),\n            uptime: os.uptime()\n        };\n    }\n    /**\n   * Gets a stack trace for the specified error.\n   * @param {mixed} err - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */ getTrace(err) {\n        const trace = err ? stackTrace.parse(err) : stackTrace.get();\n        return trace.map((site)=>{\n            return {\n                column: site.getColumnNumber(),\n                file: site.getFileName(),\n                function: site.getFunctionName(),\n                line: site.getLineNumber(),\n                method: site.getMethodName(),\n                native: site.isNative()\n            };\n        });\n    }\n    /**\n   * Helper method to add a transport as an exception handler.\n   * @param {Transport} handler - The transport to add as an exception handler.\n   * @returns {void}\n   */ _addHandler(handler) {\n        if (!this.handlers.has(handler)) {\n            handler.handleRejections = true;\n            const wrapper = new RejectionStream(handler);\n            this.handlers.set(handler, wrapper);\n            this.logger.pipe(wrapper);\n        }\n    }\n    /**\n   * Logs all relevant information around the `err` and exits the current\n   * process.\n   * @param {Error} err - Error to handle\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */ _unhandledRejection(err) {\n        const info = this.getAllInfo(err);\n        const handlers = this._getRejectionHandlers();\n        // Calculate if we should exit on this error\n        let doExit = typeof this.logger.exitOnError === \"function\" ? this.logger.exitOnError(err) : this.logger.exitOnError;\n        let timeout;\n        if (!handlers.length && doExit) {\n            // eslint-disable-next-line no-console\n            console.warn(\"winston: exitOnError cannot be true with no rejection handlers.\");\n            // eslint-disable-next-line no-console\n            console.warn(\"winston: not exiting process.\");\n            doExit = false;\n        }\n        function gracefulExit() {\n            debug(\"doExit\", doExit);\n            debug(\"process._exiting\", process._exiting);\n            if (doExit && !process._exiting) {\n                // Remark: Currently ignoring any rejections from transports when\n                // catching unhandled rejections.\n                if (timeout) {\n                    clearTimeout(timeout);\n                }\n                // eslint-disable-next-line no-process-exit\n                process.exit(1);\n            }\n        }\n        if (!handlers || handlers.length === 0) {\n            return process.nextTick(gracefulExit);\n        }\n        // Log to all transports attempting to listen for when they are completed.\n        asyncForEach(handlers, (handler, next)=>{\n            const done = once(next);\n            const transport = handler.transport || handler;\n            // Debug wrapping so that we can inspect what's going on under the covers.\n            function onDone(event) {\n                return ()=>{\n                    debug(event);\n                    done();\n                };\n            }\n            transport._ending = true;\n            transport.once(\"finish\", onDone(\"finished\"));\n            transport.once(\"error\", onDone(\"error\"));\n        }, ()=>doExit && gracefulExit());\n        this.logger.log(info);\n        // If exitOnError is true, then only allow the logging of exceptions to\n        // take up to `3000ms`.\n        if (doExit) {\n            timeout = setTimeout(gracefulExit, 3000);\n        }\n    }\n    /**\n   * Returns the list of transports and exceptionHandlers for this instance.\n   * @returns {Array} - List of transports and exceptionHandlers for this\n   * instance.\n   * @private\n   */ _getRejectionHandlers() {\n        // Remark (indexzero): since `logger.transports` returns all of the pipes\n        // from the _readableState of the stream we actually get the join of the\n        // explicit handlers and the implicit transports with\n        // `handleRejections: true`\n        return this.logger.transports.filter((wrap)=>{\n            const transport = wrap.transport || wrap;\n            return transport.handleRejections;\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/rejection-handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/rejection-stream.js":
/*!**************************************************************!*\
  !*** ./node_modules/winston/lib/winston/rejection-stream.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * rejection-stream.js: TODO: add file header handler.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst { Writable } = __webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\");\n/**\n * TODO: add class description.\n * @type {RejectionStream}\n * @extends {Writable}\n */ module.exports = class RejectionStream extends Writable {\n    /**\n   * Constructor function for the RejectionStream responsible for wrapping a\n   * TransportStream; only allowing writes of `info` objects with\n   * `info.rejection` set to true.\n   * @param {!TransportStream} transport - Stream to filter to rejections\n   */ constructor(transport){\n        super({\n            objectMode: true\n        });\n        if (!transport) {\n            throw new Error(\"RejectionStream requires a TransportStream instance.\");\n        }\n        this.handleRejections = true;\n        this.transport = transport;\n    }\n    /**\n   * Writes the info object to our transport instance if (and only if) the\n   * `rejection` property is set on the info.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */ _write(info, enc, callback) {\n        if (info.rejection) {\n            return this.transport.log(info, callback);\n        }\n        callback();\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9yZWplY3Rpb24tc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBRUQ7QUFFQSxNQUFNLEVBQUVBLFFBQVEsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUU3Qjs7OztDQUlDLEdBQ0RDLE9BQU9DLE9BQU8sR0FBRyxNQUFNQyx3QkFBd0JKO0lBQzdDOzs7OztHQUtDLEdBQ0RLLFlBQVlDLFNBQVMsQ0FBRTtRQUNyQixLQUFLLENBQUM7WUFBRUMsWUFBWTtRQUFLO1FBRXpCLElBQUksQ0FBQ0QsV0FBVztZQUNkLE1BQU0sSUFBSUUsTUFBTTtRQUNsQjtRQUVBLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7UUFDeEIsSUFBSSxDQUFDSCxTQUFTLEdBQUdBO0lBQ25CO0lBRUE7Ozs7Ozs7O0dBUUMsR0FDREksT0FBT0MsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtRQUMxQixJQUFJRixLQUFLRyxTQUFTLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUNSLFNBQVMsQ0FBQ1MsR0FBRyxDQUFDSixNQUFNRTtRQUNsQztRQUVBQTtRQUNBLE9BQU87SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi9yZWplY3Rpb24tc3RyZWFtLmpzP2NhZTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiByZWplY3Rpb24tc3RyZWFtLmpzOiBUT0RPOiBhZGQgZmlsZSBoZWFkZXIgaGFuZGxlci5cbiAqXG4gKiAoQykgMjAxMCBDaGFybGllIFJvYmJpbnNcbiAqIE1JVCBMSUNFTkNFXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IFdyaXRhYmxlIH0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKTtcblxuLyoqXG4gKiBUT0RPOiBhZGQgY2xhc3MgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7UmVqZWN0aW9uU3RyZWFtfVxuICogQGV4dGVuZHMge1dyaXRhYmxlfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFJlamVjdGlvblN0cmVhbSBleHRlbmRzIFdyaXRhYmxlIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgUmVqZWN0aW9uU3RyZWFtIHJlc3BvbnNpYmxlIGZvciB3cmFwcGluZyBhXG4gICAqIFRyYW5zcG9ydFN0cmVhbTsgb25seSBhbGxvd2luZyB3cml0ZXMgb2YgYGluZm9gIG9iamVjdHMgd2l0aFxuICAgKiBgaW5mby5yZWplY3Rpb25gIHNldCB0byB0cnVlLlxuICAgKiBAcGFyYW0geyFUcmFuc3BvcnRTdHJlYW19IHRyYW5zcG9ydCAtIFN0cmVhbSB0byBmaWx0ZXIgdG8gcmVqZWN0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IodHJhbnNwb3J0KSB7XG4gICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuXG4gICAgaWYgKCF0cmFuc3BvcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVqZWN0aW9uU3RyZWFtIHJlcXVpcmVzIGEgVHJhbnNwb3J0U3RyZWFtIGluc3RhbmNlLicpO1xuICAgIH1cblxuICAgIHRoaXMuaGFuZGxlUmVqZWN0aW9ucyA9IHRydWU7XG4gICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGVzIHRoZSBpbmZvIG9iamVjdCB0byBvdXIgdHJhbnNwb3J0IGluc3RhbmNlIGlmIChhbmQgb25seSBpZikgdGhlXG4gICAqIGByZWplY3Rpb25gIHByb3BlcnR5IGlzIHNldCBvbiB0aGUgaW5mby5cbiAgICogQHBhcmFtIHttaXhlZH0gaW5mbyAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHBhcmFtIHttaXhlZH0gZW5jIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcGFyYW0ge21peGVkfSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfd3JpdGUoaW5mbywgZW5jLCBjYWxsYmFjaykge1xuICAgIGlmIChpbmZvLnJlamVjdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0LmxvZyhpbmZvLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgY2FsbGJhY2soKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJXcml0YWJsZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiUmVqZWN0aW9uU3RyZWFtIiwiY29uc3RydWN0b3IiLCJ0cmFuc3BvcnQiLCJvYmplY3RNb2RlIiwiRXJyb3IiLCJoYW5kbGVSZWplY3Rpb25zIiwiX3dyaXRlIiwiaW5mbyIsImVuYyIsImNhbGxiYWNrIiwicmVqZWN0aW9uIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/rejection-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/tail-file.js":
/*!*******************************************************!*\
  !*** ./node_modules/winston/lib/winston/tail-file.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * tail-file.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { StringDecoder } = __webpack_require__(/*! string_decoder */ \"string_decoder\");\nconst { Stream } = __webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\");\n/**\n * Simple no-op function.\n * @returns {undefined}\n */ function noop() {}\n/**\n * TODO: add function description.\n * @param {Object} options - Options for tail.\n * @param {function} iter - Iterator function to execute on every line.\n* `tail -f` a file. Options must include file.\n * @returns {mixed} - TODO: add return description.\n */ module.exports = (options, iter)=>{\n    const buffer = Buffer.alloc(64 * 1024);\n    const decode = new StringDecoder(\"utf8\");\n    const stream = new Stream();\n    let buff = \"\";\n    let pos = 0;\n    let row = 0;\n    if (options.start === -1) {\n        delete options.start;\n    }\n    stream.readable = true;\n    stream.destroy = ()=>{\n        stream.destroyed = true;\n        stream.emit(\"end\");\n        stream.emit(\"close\");\n    };\n    fs.open(options.file, \"a+\", \"0644\", (err, fd)=>{\n        if (err) {\n            if (!iter) {\n                stream.emit(\"error\", err);\n            } else {\n                iter(err);\n            }\n            stream.destroy();\n            return;\n        }\n        (function read() {\n            if (stream.destroyed) {\n                fs.close(fd, noop);\n                return;\n            }\n            return fs.read(fd, buffer, 0, buffer.length, pos, (error, bytes)=>{\n                if (error) {\n                    if (!iter) {\n                        stream.emit(\"error\", error);\n                    } else {\n                        iter(error);\n                    }\n                    stream.destroy();\n                    return;\n                }\n                if (!bytes) {\n                    if (buff) {\n                        // eslint-disable-next-line eqeqeq\n                        if (options.start == null || row > options.start) {\n                            if (!iter) {\n                                stream.emit(\"line\", buff);\n                            } else {\n                                iter(null, buff);\n                            }\n                        }\n                        row++;\n                        buff = \"\";\n                    }\n                    return setTimeout(read, 1000);\n                }\n                let data = decode.write(buffer.slice(0, bytes));\n                if (!iter) {\n                    stream.emit(\"data\", data);\n                }\n                data = (buff + data).split(/\\n+/);\n                const l = data.length - 1;\n                let i = 0;\n                for(; i < l; i++){\n                    // eslint-disable-next-line eqeqeq\n                    if (options.start == null || row > options.start) {\n                        if (!iter) {\n                            stream.emit(\"line\", data[i]);\n                        } else {\n                            iter(null, data[i]);\n                        }\n                    }\n                    row++;\n                }\n                buff = data[l];\n                pos += bytes;\n                return read();\n            });\n        })();\n    });\n    if (!iter) {\n        return stream;\n    }\n    return stream.destroy;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi90YWlsLWZpbGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FFRDtBQUVBLE1BQU1BLEtBQUtDLG1CQUFPQSxDQUFDO0FBQ25CLE1BQU0sRUFBRUMsYUFBYSxFQUFFLEdBQUdELG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU0sRUFBRUUsTUFBTSxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBRTNCOzs7Q0FHQyxHQUNELFNBQVNHLFFBQVE7QUFFakI7Ozs7OztDQU1DLEdBQ0RDLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxTQUFTQztJQUN6QixNQUFNQyxTQUFTQyxPQUFPQyxLQUFLLENBQUMsS0FBSztJQUNqQyxNQUFNQyxTQUFTLElBQUlWLGNBQWM7SUFDakMsTUFBTVcsU0FBUyxJQUFJVjtJQUNuQixJQUFJVyxPQUFPO0lBQ1gsSUFBSUMsTUFBTTtJQUNWLElBQUlDLE1BQU07SUFFVixJQUFJVCxRQUFRVSxLQUFLLEtBQUssQ0FBQyxHQUFHO1FBQ3hCLE9BQU9WLFFBQVFVLEtBQUs7SUFDdEI7SUFFQUosT0FBT0ssUUFBUSxHQUFHO0lBQ2xCTCxPQUFPTSxPQUFPLEdBQUc7UUFDZk4sT0FBT08sU0FBUyxHQUFHO1FBQ25CUCxPQUFPUSxJQUFJLENBQUM7UUFDWlIsT0FBT1EsSUFBSSxDQUFDO0lBQ2Q7SUFFQXJCLEdBQUdzQixJQUFJLENBQUNmLFFBQVFnQixJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUNDLEtBQUtDO1FBQ3hDLElBQUlELEtBQUs7WUFDUCxJQUFJLENBQUNoQixNQUFNO2dCQUNUSyxPQUFPUSxJQUFJLENBQUMsU0FBU0c7WUFDdkIsT0FBTztnQkFDTGhCLEtBQUtnQjtZQUNQO1lBQ0FYLE9BQU9NLE9BQU87WUFDZDtRQUNGO1FBRUMsVUFBU087WUFDUixJQUFJYixPQUFPTyxTQUFTLEVBQUU7Z0JBQ3BCcEIsR0FBRzJCLEtBQUssQ0FBQ0YsSUFBSXJCO2dCQUNiO1lBQ0Y7WUFFQSxPQUFPSixHQUFHMEIsSUFBSSxDQUFDRCxJQUFJaEIsUUFBUSxHQUFHQSxPQUFPbUIsTUFBTSxFQUFFYixLQUFLLENBQUNjLE9BQU9DO2dCQUN4RCxJQUFJRCxPQUFPO29CQUNULElBQUksQ0FBQ3JCLE1BQU07d0JBQ1RLLE9BQU9RLElBQUksQ0FBQyxTQUFTUTtvQkFDdkIsT0FBTzt3QkFDTHJCLEtBQUtxQjtvQkFDUDtvQkFDQWhCLE9BQU9NLE9BQU87b0JBQ2Q7Z0JBQ0Y7Z0JBRUEsSUFBSSxDQUFDVyxPQUFPO29CQUNWLElBQUloQixNQUFNO3dCQUNSLGtDQUFrQzt3QkFDbEMsSUFBSVAsUUFBUVUsS0FBSyxJQUFJLFFBQVFELE1BQU1ULFFBQVFVLEtBQUssRUFBRTs0QkFDaEQsSUFBSSxDQUFDVCxNQUFNO2dDQUNUSyxPQUFPUSxJQUFJLENBQUMsUUFBUVA7NEJBQ3RCLE9BQU87Z0NBQ0xOLEtBQUssTUFBTU07NEJBQ2I7d0JBQ0Y7d0JBQ0FFO3dCQUNBRixPQUFPO29CQUNUO29CQUNBLE9BQU9pQixXQUFXTCxNQUFNO2dCQUMxQjtnQkFFQSxJQUFJTSxPQUFPcEIsT0FBT3FCLEtBQUssQ0FBQ3hCLE9BQU95QixLQUFLLENBQUMsR0FBR0o7Z0JBQ3hDLElBQUksQ0FBQ3RCLE1BQU07b0JBQ1RLLE9BQU9RLElBQUksQ0FBQyxRQUFRVztnQkFDdEI7Z0JBRUFBLE9BQU8sQ0FBQ2xCLE9BQU9rQixJQUFHLEVBQUdHLEtBQUssQ0FBQztnQkFFM0IsTUFBTUMsSUFBSUosS0FBS0osTUFBTSxHQUFHO2dCQUN4QixJQUFJUyxJQUFJO2dCQUVSLE1BQU9BLElBQUlELEdBQUdDLElBQUs7b0JBQ2pCLGtDQUFrQztvQkFDbEMsSUFBSTlCLFFBQVFVLEtBQUssSUFBSSxRQUFRRCxNQUFNVCxRQUFRVSxLQUFLLEVBQUU7d0JBQ2hELElBQUksQ0FBQ1QsTUFBTTs0QkFDVEssT0FBT1EsSUFBSSxDQUFDLFFBQVFXLElBQUksQ0FBQ0ssRUFBRTt3QkFDN0IsT0FBTzs0QkFDTDdCLEtBQUssTUFBTXdCLElBQUksQ0FBQ0ssRUFBRTt3QkFDcEI7b0JBQ0Y7b0JBQ0FyQjtnQkFDRjtnQkFFQUYsT0FBT2tCLElBQUksQ0FBQ0ksRUFBRTtnQkFDZHJCLE9BQU9lO2dCQUNQLE9BQU9KO1lBQ1Q7UUFDRjtJQUNGO0lBRUEsSUFBSSxDQUFDbEIsTUFBTTtRQUNULE9BQU9LO0lBQ1Q7SUFFQSxPQUFPQSxPQUFPTSxPQUFPO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi90YWlsLWZpbGUuanM/OTk5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHRhaWwtZmlsZS5qczogVE9ETzogYWRkIGZpbGUgaGVhZGVyIGRlc2NyaXB0aW9uLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgU3RyaW5nRGVjb2RlciB9ID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKTtcbmNvbnN0IHsgU3RyZWFtIH0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKTtcblxuLyoqXG4gKiBTaW1wbGUgbm8tb3AgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBub29wKCkge31cblxuLyoqXG4gKiBUT0RPOiBhZGQgZnVuY3Rpb24gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRhaWwuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBpdGVyIC0gSXRlcmF0b3IgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBsaW5lLlxuKiBgdGFpbCAtZmAgYSBmaWxlLiBPcHRpb25zIG11c3QgaW5jbHVkZSBmaWxlLlxuICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm4gZGVzY3JpcHRpb24uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKG9wdGlvbnMsIGl0ZXIpID0+IHtcbiAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKDY0ICogMTAyNCk7XG4gIGNvbnN0IGRlY29kZSA9IG5ldyBTdHJpbmdEZWNvZGVyKCd1dGY4Jyk7XG4gIGNvbnN0IHN0cmVhbSA9IG5ldyBTdHJlYW0oKTtcbiAgbGV0IGJ1ZmYgPSAnJztcbiAgbGV0IHBvcyA9IDA7XG4gIGxldCByb3cgPSAwO1xuXG4gIGlmIChvcHRpb25zLnN0YXJ0ID09PSAtMSkge1xuICAgIGRlbGV0ZSBvcHRpb25zLnN0YXJ0O1xuICB9XG5cbiAgc3RyZWFtLnJlYWRhYmxlID0gdHJ1ZTtcbiAgc3RyZWFtLmRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgc3RyZWFtLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICAgIHN0cmVhbS5lbWl0KCdjbG9zZScpO1xuICB9O1xuXG4gIGZzLm9wZW4ob3B0aW9ucy5maWxlLCAnYSsnLCAnMDY0NCcsIChlcnIsIGZkKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyKGVycik7XG4gICAgICB9XG4gICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIChmdW5jdGlvbiByZWFkKCkge1xuICAgICAgaWYgKHN0cmVhbS5kZXN0cm95ZWQpIHtcbiAgICAgICAgZnMuY2xvc2UoZmQsIG5vb3ApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmcy5yZWFkKGZkLCBidWZmZXIsIDAsIGJ1ZmZlci5sZW5ndGgsIHBvcywgKGVycm9yLCBieXRlcykgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoIWl0ZXIpIHtcbiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFieXRlcykge1xuICAgICAgICAgIGlmIChidWZmKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdGFydCA9PSBudWxsIHx8IHJvdyA+IG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2xpbmUnLCBidWZmKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVyKG51bGwsIGJ1ZmYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3crKztcbiAgICAgICAgICAgIGJ1ZmYgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVhZCwgMTAwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGF0YSA9IGRlY29kZS53cml0ZShidWZmZXIuc2xpY2UoMCwgYnl0ZXMpKTtcbiAgICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEgPSAoYnVmZiArIGRhdGEpLnNwbGl0KC9cXG4rLyk7XG5cbiAgICAgICAgY29uc3QgbCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgICAgbGV0IGkgPSAwO1xuXG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgICAgIGlmIChvcHRpb25zLnN0YXJ0ID09IG51bGwgfHwgcm93ID4gb3B0aW9ucy5zdGFydCkge1xuICAgICAgICAgICAgaWYgKCFpdGVyKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdsaW5lJywgZGF0YVtpXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpdGVyKG51bGwsIGRhdGFbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByb3crKztcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmYgPSBkYXRhW2xdO1xuICAgICAgICBwb3MgKz0gYnl0ZXM7XG4gICAgICAgIHJldHVybiByZWFkKCk7XG4gICAgICB9KTtcbiAgICB9KCkpO1xuICB9KTtcblxuICBpZiAoIWl0ZXIpIHtcbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG5cbiAgcmV0dXJuIHN0cmVhbS5kZXN0cm95O1xufTtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJTdHJpbmdEZWNvZGVyIiwiU3RyZWFtIiwibm9vcCIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwiaXRlciIsImJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jIiwiZGVjb2RlIiwic3RyZWFtIiwiYnVmZiIsInBvcyIsInJvdyIsInN0YXJ0IiwicmVhZGFibGUiLCJkZXN0cm95IiwiZGVzdHJveWVkIiwiZW1pdCIsIm9wZW4iLCJmaWxlIiwiZXJyIiwiZmQiLCJyZWFkIiwiY2xvc2UiLCJsZW5ndGgiLCJlcnJvciIsImJ5dGVzIiwic2V0VGltZW91dCIsImRhdGEiLCJ3cml0ZSIsInNsaWNlIiwic3BsaXQiLCJsIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/tail-file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/transports/console.js":
/*!****************************************************************!*\
  !*** ./node_modules/winston/lib/winston/transports/console.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable no-console */ /*\n * console.js: Transport for outputting to the console.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst os = __webpack_require__(/*! os */ \"os\");\nconst { LEVEL, MESSAGE } = __webpack_require__(/*! triple-beam */ \"(rsc)/./node_modules/triple-beam/index.js\");\nconst TransportStream = __webpack_require__(/*! winston-transport */ \"(rsc)/./node_modules/winston-transport/index.js\");\n/**\n * Transport for outputting to the console.\n * @type {Console}\n * @extends {TransportStream}\n */ module.exports = class Console extends TransportStream {\n    /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */ constructor(options = {}){\n        super(options);\n        // Expose the name of this Transport on the prototype\n        this.name = options.name || \"console\";\n        this.stderrLevels = this._stringArrayToSet(options.stderrLevels);\n        this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);\n        this.eol = typeof options.eol === \"string\" ? options.eol : os.EOL;\n        this.forceConsole = options.forceConsole || false;\n        // Keep a reference to the log, warn, and error console methods\n        // in case they get redirected to this transport after the logger is\n        // instantiated. This prevents a circular reference issue.\n        this._consoleLog = console.log.bind(console);\n        this._consoleWarn = console.warn.bind(console);\n        this._consoleError = console.error.bind(console);\n        this.setMaxListeners(30);\n    }\n    /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ log(info, callback) {\n        setImmediate(()=>this.emit(\"logged\", info));\n        // Remark: what if there is no raw...?\n        if (this.stderrLevels[info[LEVEL]]) {\n            if (console._stderr && !this.forceConsole) {\n                // Node.js maps `process.stderr` to `console._stderr`.\n                console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n            } else {\n                // console.error adds a newline\n                this._consoleError(info[MESSAGE]);\n            }\n            if (callback) {\n                callback(); // eslint-disable-line callback-return\n            }\n            return;\n        } else if (this.consoleWarnLevels[info[LEVEL]]) {\n            if (console._stderr && !this.forceConsole) {\n                // Node.js maps `process.stderr` to `console._stderr`.\n                // in Node.js console.warn is an alias for console.error\n                console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n            } else {\n                // console.warn adds a newline\n                this._consoleWarn(info[MESSAGE]);\n            }\n            if (callback) {\n                callback(); // eslint-disable-line callback-return\n            }\n            return;\n        }\n        if (console._stdout && !this.forceConsole) {\n            // Node.js maps `process.stdout` to `console._stdout`.\n            console._stdout.write(`${info[MESSAGE]}${this.eol}`);\n        } else {\n            // console.log adds a newline.\n            this._consoleLog(info[MESSAGE]);\n        }\n        if (callback) {\n            callback(); // eslint-disable-line callback-return\n        }\n    }\n    /**\n   * Returns a Set-like object with strArray's elements as keys (each with the\n   * value true).\n   * @param {Array} strArray - Array of Set-elements as strings.\n   * @param {?string} [errMsg] - Custom error message thrown on invalid input.\n   * @returns {Object} - TODO: add return description.\n   * @private\n   */ _stringArrayToSet(strArray, errMsg) {\n        if (!strArray) return {};\n        errMsg = errMsg || \"Cannot make set from type other than Array of string elements\";\n        if (!Array.isArray(strArray)) {\n            throw new Error(errMsg);\n        }\n        return strArray.reduce((set, el)=>{\n            if (typeof el !== \"string\") {\n                throw new Error(errMsg);\n            }\n            set[el] = true;\n            return set;\n        }, {});\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/transports/console.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/transports/file.js":
/*!*************************************************************!*\
  !*** ./node_modules/winston/lib/winston/transports/file.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable complexity,max-statements */ /**\n * file.js: Transport for outputting to a local log file.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst asyncSeries = __webpack_require__(/*! async/series */ \"(rsc)/./node_modules/async/series.js\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst { MESSAGE } = __webpack_require__(/*! triple-beam */ \"(rsc)/./node_modules/triple-beam/index.js\");\nconst { Stream, PassThrough } = __webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\");\nconst TransportStream = __webpack_require__(/*! winston-transport */ \"(rsc)/./node_modules/winston-transport/index.js\");\nconst debug = __webpack_require__(/*! @dabh/diagnostics */ \"(rsc)/./node_modules/@dabh/diagnostics/node/index.js\")(\"winston:file\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst tailFile = __webpack_require__(/*! ../tail-file */ \"(rsc)/./node_modules/winston/lib/winston/tail-file.js\");\n/**\n * Transport for outputting to a local log file.\n * @type {File}\n * @extends {TransportStream}\n */ module.exports = class File extends TransportStream {\n    /**\n   * Constructor function for the File transport object responsible for\n   * persisting log messages and metadata to one or more files.\n   * @param {Object} options - Options for this instance.\n   */ constructor(options = {}){\n        super(options);\n        // Expose the name of this Transport on the prototype.\n        this.name = options.name || \"file\";\n        // Helper function which throws an `Error` in the event that any of the\n        // rest of the arguments is present in `options`.\n        function throwIf(target, ...args) {\n            args.slice(1).forEach((name)=>{\n                if (options[name]) {\n                    throw new Error(`Cannot set ${name} and ${target} together`);\n                }\n            });\n        }\n        // Setup the base stream that always gets piped to to handle buffering.\n        this._stream = new PassThrough();\n        this._stream.setMaxListeners(30);\n        // Bind this context for listener methods.\n        this._onError = this._onError.bind(this);\n        if (options.filename || options.dirname) {\n            throwIf(\"filename or dirname\", \"stream\");\n            this._basename = this.filename = options.filename ? path.basename(options.filename) : \"winston.log\";\n            this.dirname = options.dirname || path.dirname(options.filename);\n            this.options = options.options || {\n                flags: \"a\"\n            };\n        } else if (options.stream) {\n            // eslint-disable-next-line no-console\n            console.warn(\"options.stream will be removed in winston@4. Use winston.transports.Stream\");\n            throwIf(\"stream\", \"filename\", \"maxsize\");\n            this._dest = this._stream.pipe(this._setupStream(options.stream));\n            this.dirname = path.dirname(this._dest.path);\n        // We need to listen for drain events when write() returns false. This\n        // can make node mad at times.\n        } else {\n            throw new Error(\"Cannot log to file without filename or stream.\");\n        }\n        this.maxsize = options.maxsize || null;\n        this.rotationFormat = options.rotationFormat || false;\n        this.zippedArchive = options.zippedArchive || false;\n        this.maxFiles = options.maxFiles || null;\n        this.eol = typeof options.eol === \"string\" ? options.eol : os.EOL;\n        this.tailable = options.tailable || false;\n        this.lazy = options.lazy || false;\n        // Internal state variables representing the number of files this instance\n        // has created and the current size (in bytes) of the current logfile.\n        this._size = 0;\n        this._pendingSize = 0;\n        this._created = 0;\n        this._drain = false;\n        this._opening = false;\n        this._ending = false;\n        this._fileExist = false;\n        if (this.dirname) this._createLogDirIfNotExist(this.dirname);\n        if (!this.lazy) this.open();\n    }\n    finishIfEnding() {\n        if (this._ending) {\n            if (this._opening) {\n                this.once(\"open\", ()=>{\n                    this._stream.once(\"finish\", ()=>this.emit(\"finish\"));\n                    setImmediate(()=>this._stream.end());\n                });\n            } else {\n                this._stream.once(\"finish\", ()=>this.emit(\"finish\"));\n                setImmediate(()=>this._stream.end());\n            }\n        }\n    }\n    /**\n   * Core logging method exposed to Winston. Metadata is optional.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ log(info, callback = ()=>{}) {\n        // Remark: (jcrugzz) What is necessary about this callback(null, true) now\n        // when thinking about 3.x? Should silent be handled in the base\n        // TransportStream _write method?\n        if (this.silent) {\n            callback();\n            return true;\n        }\n        // Output stream buffer is full and has asked us to wait for the drain event\n        if (this._drain) {\n            this._stream.once(\"drain\", ()=>{\n                this._drain = false;\n                this.log(info, callback);\n            });\n            return;\n        }\n        if (this._rotate) {\n            this._stream.once(\"rotate\", ()=>{\n                this._rotate = false;\n                this.log(info, callback);\n            });\n            return;\n        }\n        if (this.lazy) {\n            if (!this._fileExist) {\n                if (!this._opening) {\n                    this.open();\n                }\n                this.once(\"open\", ()=>{\n                    this._fileExist = true;\n                    this.log(info, callback);\n                    return;\n                });\n                return;\n            }\n            if (this._needsNewFile(this._pendingSize)) {\n                this._dest.once(\"close\", ()=>{\n                    if (!this._opening) {\n                        this.open();\n                    }\n                    this.once(\"open\", ()=>{\n                        this.log(info, callback);\n                        return;\n                    });\n                    return;\n                });\n                return;\n            }\n        }\n        // Grab the raw string and append the expected EOL.\n        const output = `${info[MESSAGE]}${this.eol}`;\n        const bytes = Buffer.byteLength(output);\n        // After we have written to the PassThrough check to see if we need\n        // to rotate to the next file.\n        //\n        // Remark: This gets called too early and does not depict when data\n        // has been actually flushed to disk.\n        function logged() {\n            this._size += bytes;\n            this._pendingSize -= bytes;\n            debug(\"logged %s %s\", this._size, output);\n            this.emit(\"logged\", info);\n            // Do not attempt to rotate files while rotating\n            if (this._rotate) {\n                return;\n            }\n            // Do not attempt to rotate files while opening\n            if (this._opening) {\n                return;\n            }\n            // Check to see if we need to end the stream and create a new one.\n            if (!this._needsNewFile()) {\n                return;\n            }\n            if (this.lazy) {\n                this._endStream(()=>{\n                    this.emit(\"fileclosed\");\n                });\n                return;\n            }\n            // End the current stream, ensure it flushes and create a new one.\n            // This could potentially be optimized to not run a stat call but its\n            // the safest way since we are supporting `maxFiles`.\n            this._rotate = true;\n            this._endStream(()=>this._rotateFile());\n        }\n        // Keep track of the pending bytes being written while files are opening\n        // in order to properly rotate the PassThrough this._stream when the file\n        // eventually does open.\n        this._pendingSize += bytes;\n        if (this._opening && !this.rotatedWhileOpening && this._needsNewFile(this._size + this._pendingSize)) {\n            this.rotatedWhileOpening = true;\n        }\n        const written = this._stream.write(output, logged.bind(this));\n        if (!written) {\n            this._drain = true;\n            this._stream.once(\"drain\", ()=>{\n                this._drain = false;\n                callback();\n            });\n        } else {\n            callback(); // eslint-disable-line callback-return\n        }\n        debug(\"written\", written, this._drain);\n        this.finishIfEnding();\n        return written;\n    }\n    /**\n   * Query the transport. Options object is optional.\n   * @param {Object} options - Loggly-like query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * TODO: Refactor me.\n   */ query(options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n        options = normalizeQuery(options);\n        const file = path.join(this.dirname, this.filename);\n        let buff = \"\";\n        let results = [];\n        let row = 0;\n        const stream = fs.createReadStream(file, {\n            encoding: \"utf8\"\n        });\n        stream.on(\"error\", (err)=>{\n            if (stream.readable) {\n                stream.destroy();\n            }\n            if (!callback) {\n                return;\n            }\n            return err.code !== \"ENOENT\" ? callback(err) : callback(null, results);\n        });\n        stream.on(\"data\", (data)=>{\n            data = (buff + data).split(/\\n+/);\n            const l = data.length - 1;\n            let i = 0;\n            for(; i < l; i++){\n                if (!options.start || row >= options.start) {\n                    add(data[i]);\n                }\n                row++;\n            }\n            buff = data[l];\n        });\n        stream.on(\"close\", ()=>{\n            if (buff) {\n                add(buff, true);\n            }\n            if (options.order === \"desc\") {\n                results = results.reverse();\n            }\n            // eslint-disable-next-line callback-return\n            if (callback) callback(null, results);\n        });\n        function add(buff, attempt) {\n            try {\n                const log = JSON.parse(buff);\n                if (check(log)) {\n                    push(log);\n                }\n            } catch (e) {\n                if (!attempt) {\n                    stream.emit(\"error\", e);\n                }\n            }\n        }\n        function push(log) {\n            if (options.rows && results.length >= options.rows && options.order !== \"desc\") {\n                if (stream.readable) {\n                    stream.destroy();\n                }\n                return;\n            }\n            if (options.fields) {\n                log = options.fields.reduce((obj, key)=>{\n                    obj[key] = log[key];\n                    return obj;\n                }, {});\n            }\n            if (options.order === \"desc\") {\n                if (results.length >= options.rows) {\n                    results.shift();\n                }\n            }\n            results.push(log);\n        }\n        function check(log) {\n            if (!log) {\n                return;\n            }\n            if (typeof log !== \"object\") {\n                return;\n            }\n            const time = new Date(log.timestamp);\n            if (options.from && time < options.from || options.until && time > options.until || options.level && options.level !== log.level) {\n                return;\n            }\n            return true;\n        }\n        function normalizeQuery(options) {\n            options = options || {};\n            // limit\n            options.rows = options.rows || options.limit || 10;\n            // starting row offset\n            options.start = options.start || 0;\n            // now\n            options.until = options.until || new Date();\n            if (typeof options.until !== \"object\") {\n                options.until = new Date(options.until);\n            }\n            // now - 24\n            options.from = options.from || options.until - 24 * 60 * 60 * 1000;\n            if (typeof options.from !== \"object\") {\n                options.from = new Date(options.from);\n            }\n            // 'asc' or 'desc'\n            options.order = options.order || \"desc\";\n            return options;\n        }\n    }\n    /**\n   * Returns a log stream for this transport. Options object is optional.\n   * @param {Object} options - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description.\n   * TODO: Refactor me.\n   */ stream(options = {}) {\n        const file = path.join(this.dirname, this.filename);\n        const stream = new Stream();\n        const tail = {\n            file,\n            start: options.start\n        };\n        stream.destroy = tailFile(tail, (err, line)=>{\n            if (err) {\n                return stream.emit(\"error\", err);\n            }\n            try {\n                stream.emit(\"data\", line);\n                line = JSON.parse(line);\n                stream.emit(\"log\", line);\n            } catch (e) {\n                stream.emit(\"error\", e);\n            }\n        });\n        return stream;\n    }\n    /**\n   * Checks to see the filesize of.\n   * @returns {undefined}\n   */ open() {\n        // If we do not have a filename then we were passed a stream and\n        // don't need to keep track of size.\n        if (!this.filename) return;\n        if (this._opening) return;\n        this._opening = true;\n        // Stat the target file to get the size and create the stream.\n        this.stat((err, size)=>{\n            if (err) {\n                return this.emit(\"error\", err);\n            }\n            debug(\"stat done: %s { size: %s }\", this.filename, size);\n            this._size = size;\n            this._dest = this._createStream(this._stream);\n            this._opening = false;\n            this.once(\"open\", ()=>{\n                if (!this._stream.emit(\"rotate\")) {\n                    this._rotate = false;\n                }\n            });\n        });\n    }\n    /**\n   * Stat the file and assess information in order to create the proper stream.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ stat(callback) {\n        const target = this._getFile();\n        const fullpath = path.join(this.dirname, target);\n        fs.stat(fullpath, (err, stat)=>{\n            if (err && err.code === \"ENOENT\") {\n                debug(\"ENOENT\\xa0ok\", fullpath);\n                // Update internally tracked filename with the new target name.\n                this.filename = target;\n                return callback(null, 0);\n            }\n            if (err) {\n                debug(`err ${err.code} ${fullpath}`);\n                return callback(err);\n            }\n            if (!stat || this._needsNewFile(stat.size)) {\n                // If `stats.size` is greater than the `maxsize` for this\n                // instance then try again.\n                return this._incFile(()=>this.stat(callback));\n            }\n            // Once we have figured out what the filename is, set it\n            // and return the size.\n            this.filename = target;\n            callback(null, stat.size);\n        });\n    }\n    /**\n   * Closes the stream associated with this instance.\n   * @param {function} cb - TODO: add param description.\n   * @returns {undefined}\n   */ close(cb) {\n        if (!this._stream) {\n            return;\n        }\n        this._stream.end(()=>{\n            if (cb) {\n                cb(); // eslint-disable-line callback-return\n            }\n            this.emit(\"flush\");\n            this.emit(\"closed\");\n        });\n    }\n    /**\n   * TODO: add method description.\n   * @param {number} size - TODO: add param description.\n   * @returns {undefined}\n   */ _needsNewFile(size) {\n        size = size || this._size;\n        return this.maxsize && size >= this.maxsize;\n    }\n    /**\n   * TODO: add method description.\n   * @param {Error} err - TODO: add param description.\n   * @returns {undefined}\n   */ _onError(err) {\n        this.emit(\"error\", err);\n    }\n    /**\n   * TODO: add method description.\n   * @param {Stream} stream - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */ _setupStream(stream) {\n        stream.on(\"error\", this._onError);\n        return stream;\n    }\n    /**\n   * TODO: add method description.\n   * @param {Stream} stream - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */ _cleanupStream(stream) {\n        stream.removeListener(\"error\", this._onError);\n        stream.destroy();\n        return stream;\n    }\n    /**\n   * TODO: add method description.\n   */ _rotateFile() {\n        this._incFile(()=>this.open());\n    }\n    /**\n   * Unpipe from the stream that has been marked as full and end it so it\n   * flushes to disk.\n   *\n   * @param {function} callback - Callback for when the current file has closed.\n   * @private\n   */ _endStream(callback = ()=>{}) {\n        if (this._dest) {\n            this._stream.unpipe(this._dest);\n            this._dest.end(()=>{\n                this._cleanupStream(this._dest);\n                callback();\n            });\n        } else {\n            callback(); // eslint-disable-line callback-return\n        }\n    }\n    /**\n   * Returns the WritableStream for the active file on this instance. If we\n   * should gzip the file then a zlib stream is returned.\n   *\n   * @param {ReadableStream} source –PassThrough to pipe to the file when open.\n   * @returns {WritableStream} Stream that writes to disk for the active file.\n   */ _createStream(source) {\n        const fullpath = path.join(this.dirname, this.filename);\n        debug(\"create stream start\", fullpath, this.options);\n        const dest = fs.createWriteStream(fullpath, this.options)// TODO: What should we do with errors here?\n        .on(\"error\", (err)=>debug(err)).on(\"close\", ()=>debug(\"close\", dest.path, dest.bytesWritten)).on(\"open\", ()=>{\n            debug(\"file open ok\", fullpath);\n            this.emit(\"open\", fullpath);\n            source.pipe(dest);\n            // If rotation occured during the open operation then we immediately\n            // start writing to a new PassThrough, begin opening the next file\n            // and cleanup the previous source and dest once the source has drained.\n            if (this.rotatedWhileOpening) {\n                this._stream = new PassThrough();\n                this._stream.setMaxListeners(30);\n                this._rotateFile();\n                this.rotatedWhileOpening = false;\n                this._cleanupStream(dest);\n                source.end();\n            }\n        });\n        debug(\"create stream ok\", fullpath);\n        return dest;\n    }\n    /**\n   * TODO: add method description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ _incFile(callback) {\n        debug(\"_incFile\", this.filename);\n        const ext = path.extname(this._basename);\n        const basename = path.basename(this._basename, ext);\n        const tasks = [];\n        if (this.zippedArchive) {\n            tasks.push((function(cb) {\n                const num = this._created > 0 && !this.tailable ? this._created : \"\";\n                this._compressFile(path.join(this.dirname, `${basename}${num}${ext}`), path.join(this.dirname, `${basename}${num}${ext}.gz`), cb);\n            }).bind(this));\n        }\n        tasks.push((function(cb) {\n            if (!this.tailable) {\n                this._created += 1;\n                this._checkMaxFilesIncrementing(ext, basename, cb);\n            } else {\n                this._checkMaxFilesTailable(ext, basename, cb);\n            }\n        }).bind(this));\n        asyncSeries(tasks, callback);\n    }\n    /**\n   * Gets the next filename to use for this instance in the case that log\n   * filesizes are being capped.\n   * @returns {string} - TODO: add return description.\n   * @private\n   */ _getFile() {\n        const ext = path.extname(this._basename);\n        const basename = path.basename(this._basename, ext);\n        const isRotation = this.rotationFormat ? this.rotationFormat() : this._created;\n        // Caveat emptor (indexzero): rotationFormat() was broken by design When\n        // combined with max files because the set of files to unlink is never\n        // stored.\n        return !this.tailable && this._created ? `${basename}${isRotation}${ext}` : `${basename}${ext}`;\n    }\n    /**\n   * Increment the number of files created or checked by this instance.\n   * @param {mixed} ext - TODO: add param description.\n   * @param {mixed} basename - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {undefined}\n   * @private\n   */ _checkMaxFilesIncrementing(ext, basename, callback) {\n        // Check for maxFiles option and delete file.\n        if (!this.maxFiles || this._created < this.maxFiles) {\n            return setImmediate(callback);\n        }\n        const oldest = this._created - this.maxFiles;\n        const isOldest = oldest !== 0 ? oldest : \"\";\n        const isZipped = this.zippedArchive ? \".gz\" : \"\";\n        const filePath = `${basename}${isOldest}${ext}${isZipped}`;\n        const target = path.join(this.dirname, filePath);\n        fs.unlink(target, callback);\n    }\n    /**\n   * Roll files forward based on integer, up to maxFiles. e.g. if base if\n   * file.log and it becomes oversized, roll to file1.log, and allow file.log\n   * to be re-used. If file is oversized again, roll file1.log to file2.log,\n   * roll file.log to file1.log, and so on.\n   * @param {mixed} ext - TODO: add param description.\n   * @param {mixed} basename - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {undefined}\n   * @private\n   */ _checkMaxFilesTailable(ext, basename, callback) {\n        const tasks = [];\n        if (!this.maxFiles) {\n            return;\n        }\n        // const isZipped = this.zippedArchive ? '.gz' : '';\n        const isZipped = this.zippedArchive ? \".gz\" : \"\";\n        for(let x = this.maxFiles - 1; x > 1; x--){\n            tasks.push((function(i, cb) {\n                let fileName = `${basename}${i - 1}${ext}${isZipped}`;\n                const tmppath = path.join(this.dirname, fileName);\n                fs.exists(tmppath, (exists)=>{\n                    if (!exists) {\n                        return cb(null);\n                    }\n                    fileName = `${basename}${i}${ext}${isZipped}`;\n                    fs.rename(tmppath, path.join(this.dirname, fileName), cb);\n                });\n            }).bind(this, x));\n        }\n        asyncSeries(tasks, ()=>{\n            fs.rename(path.join(this.dirname, `${basename}${ext}${isZipped}`), path.join(this.dirname, `${basename}1${ext}${isZipped}`), callback);\n        });\n    }\n    /**\n   * Compresses src to dest with gzip and unlinks src\n   * @param {string} src - path to source file.\n   * @param {string} dest - path to zipped destination file.\n   * @param {Function} callback - callback called after file has been compressed.\n   * @returns {undefined}\n   * @private\n   */ _compressFile(src, dest, callback) {\n        fs.access(src, fs.F_OK, (err)=>{\n            if (err) {\n                return callback();\n            }\n            var gzip = zlib.createGzip();\n            var inp = fs.createReadStream(src);\n            var out = fs.createWriteStream(dest);\n            out.on(\"finish\", ()=>{\n                fs.unlink(src, callback);\n            });\n            inp.pipe(gzip).pipe(out);\n        });\n    }\n    _createLogDirIfNotExist(dirPath) {\n        /* eslint-disable no-sync */ if (!fs.existsSync(dirPath)) {\n            fs.mkdirSync(dirPath, {\n                recursive: true\n            });\n        }\n    /* eslint-enable no-sync */ }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/transports/file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/transports/http.js":
/*!*************************************************************!*\
  !*** ./node_modules/winston/lib/winston/transports/http.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * http.js: Transport for outputting to a json-rpcserver.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst { Stream } = __webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\");\nconst TransportStream = __webpack_require__(/*! winston-transport */ \"(rsc)/./node_modules/winston-transport/index.js\");\nconst { configure } = __webpack_require__(/*! safe-stable-stringify */ \"(rsc)/./node_modules/safe-stable-stringify/index.js\");\n/**\n * Transport for outputting to a json-rpc server.\n * @type {Stream}\n * @extends {TransportStream}\n */ module.exports = class Http extends TransportStream {\n    /**\n   * Constructor function for the Http transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */ // eslint-disable-next-line max-statements\n    constructor(options = {}){\n        super(options);\n        this.options = options;\n        this.name = options.name || \"http\";\n        this.ssl = !!options.ssl;\n        this.host = options.host || \"localhost\";\n        this.port = options.port;\n        this.auth = options.auth;\n        this.path = options.path || \"\";\n        this.maximumDepth = options.maximumDepth;\n        this.agent = options.agent;\n        this.headers = options.headers || {};\n        this.headers[\"content-type\"] = \"application/json\";\n        this.batch = options.batch || false;\n        this.batchInterval = options.batchInterval || 5000;\n        this.batchCount = options.batchCount || 10;\n        this.batchOptions = [];\n        this.batchTimeoutID = -1;\n        this.batchCallback = {};\n        if (!this.port) {\n            this.port = this.ssl ? 443 : 80;\n        }\n    }\n    /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ log(info, callback) {\n        this._request(info, null, null, (err, res)=>{\n            if (res && res.statusCode !== 200) {\n                err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n            }\n            if (err) {\n                this.emit(\"warn\", err);\n            } else {\n                this.emit(\"logged\", info);\n            }\n        });\n        // Remark: (jcrugzz) Fire and forget here so requests dont cause buffering\n        // and block more requests from happening?\n        if (callback) {\n            setImmediate(callback);\n        }\n    }\n    /**\n   * Query the transport. Options object is optional.\n   * @param {Object} options -  Loggly-like query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @returns {undefined}\n   */ query(options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n        options = {\n            method: \"query\",\n            params: this.normalizeQuery(options)\n        };\n        const auth = options.params.auth || null;\n        delete options.params.auth;\n        const path = options.params.path || null;\n        delete options.params.path;\n        this._request(options, auth, path, (err, res, body)=>{\n            if (res && res.statusCode !== 200) {\n                err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n            }\n            if (err) {\n                return callback(err);\n            }\n            if (typeof body === \"string\") {\n                try {\n                    body = JSON.parse(body);\n                } catch (e) {\n                    return callback(e);\n                }\n            }\n            callback(null, body);\n        });\n    }\n    /**\n   * Returns a log stream for this transport. Options object is optional.\n   * @param {Object} options - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description\n   */ stream(options = {}) {\n        const stream = new Stream();\n        options = {\n            method: \"stream\",\n            params: options\n        };\n        const path = options.params.path || null;\n        delete options.params.path;\n        const auth = options.params.auth || null;\n        delete options.params.auth;\n        let buff = \"\";\n        const req = this._request(options, auth, path);\n        stream.destroy = ()=>req.destroy();\n        req.on(\"data\", (data)=>{\n            data = (buff + data).split(/\\n+/);\n            const l = data.length - 1;\n            let i = 0;\n            for(; i < l; i++){\n                try {\n                    stream.emit(\"log\", JSON.parse(data[i]));\n                } catch (e) {\n                    stream.emit(\"error\", e);\n                }\n            }\n            buff = data[l];\n        });\n        req.on(\"error\", (err)=>stream.emit(\"error\", err));\n        return stream;\n    }\n    /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   * @param {function} callback - Continuation to respond to when complete.\n   */ _request(options, auth, path, callback) {\n        options = options || {};\n        auth = auth || this.auth;\n        path = path || this.path || \"\";\n        if (this.batch) {\n            this._doBatch(options, callback, auth, path);\n        } else {\n            this._doRequest(options, callback, auth, path);\n        }\n    }\n    /**\n   * Send or memorize the options according to batch configuration\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */ _doBatch(options, callback, auth, path) {\n        this.batchOptions.push(options);\n        if (this.batchOptions.length === 1) {\n            // First message stored, it's time to start the timeout!\n            const me = this;\n            this.batchCallback = callback;\n            this.batchTimeoutID = setTimeout(function() {\n                // timeout is reached, send all messages to endpoint\n                me.batchTimeoutID = -1;\n                me._doBatchRequest(me.batchCallback, auth, path);\n            }, this.batchInterval);\n        }\n        if (this.batchOptions.length === this.batchCount) {\n            // max batch count is reached, send all messages to endpoint\n            this._doBatchRequest(this.batchCallback, auth, path);\n        }\n    }\n    /**\n   * Initiate a request with the memorized batch options, stop the batch timeout\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */ _doBatchRequest(callback, auth, path) {\n        if (this.batchTimeoutID > 0) {\n            clearTimeout(this.batchTimeoutID);\n            this.batchTimeoutID = -1;\n        }\n        const batchOptionsCopy = this.batchOptions.slice();\n        this.batchOptions = [];\n        this._doRequest(batchOptionsCopy, callback, auth, path);\n    }\n    /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */ _doRequest(options, callback, auth, path) {\n        // Prepare options for outgoing HTTP request\n        const headers = Object.assign({}, this.headers);\n        if (auth && auth.bearer) {\n            headers.Authorization = `Bearer ${auth.bearer}`;\n        }\n        const req = (this.ssl ? https : http).request({\n            ...this.options,\n            method: \"POST\",\n            host: this.host,\n            port: this.port,\n            path: `/${path.replace(/^\\//, \"\")}`,\n            headers: headers,\n            auth: auth && auth.username && auth.password ? `${auth.username}:${auth.password}` : \"\",\n            agent: this.agent\n        });\n        req.on(\"error\", callback);\n        req.on(\"response\", (res)=>res.on(\"end\", ()=>callback(null, res)).resume());\n        const jsonStringify = configure({\n            ...this.maximumDepth && {\n                maximumDepth: this.maximumDepth\n            }\n        });\n        req.end(Buffer.from(jsonStringify(options, this.options.replacer), \"utf8\"));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/transports/http.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/transports/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/winston/lib/winston/transports/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * transports.js: Set of all transports Winston knows about.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \n/**\n * TODO: add property description.\n * @type {Console}\n */ Object.defineProperty(exports, \"Console\", ({\n    configurable: true,\n    enumerable: true,\n    get () {\n        return __webpack_require__(/*! ./console */ \"(rsc)/./node_modules/winston/lib/winston/transports/console.js\");\n    }\n}));\n/**\n * TODO: add property description.\n * @type {File}\n */ Object.defineProperty(exports, \"File\", ({\n    configurable: true,\n    enumerable: true,\n    get () {\n        return __webpack_require__(/*! ./file */ \"(rsc)/./node_modules/winston/lib/winston/transports/file.js\");\n    }\n}));\n/**\n * TODO: add property description.\n * @type {Http}\n */ Object.defineProperty(exports, \"Http\", ({\n    configurable: true,\n    enumerable: true,\n    get () {\n        return __webpack_require__(/*! ./http */ \"(rsc)/./node_modules/winston/lib/winston/transports/http.js\");\n    }\n}));\n/**\n * TODO: add property description.\n * @type {Stream}\n */ Object.defineProperty(exports, \"Stream\", ({\n    configurable: true,\n    enumerable: true,\n    get () {\n        return __webpack_require__(/*! ./stream */ \"(rsc)/./node_modules/winston/lib/winston/transports/stream.js\");\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi90cmFuc3BvcnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBRUQ7QUFFQTs7O0NBR0MsR0FDREEsMkNBQTBDO0lBQ3hDRyxjQUFjO0lBQ2RDLFlBQVk7SUFDWkM7UUFDRSxPQUFPQyxtQkFBT0EsQ0FBQztJQUNqQjtBQUNGLENBQUMsRUFBQztBQUVGOzs7Q0FHQyxHQUNETix3Q0FBdUM7SUFDckNHLGNBQWM7SUFDZEMsWUFBWTtJQUNaQztRQUNFLE9BQU9DLG1CQUFPQSxDQUFDO0lBQ2pCO0FBQ0YsQ0FBQyxFQUFDO0FBRUY7OztDQUdDLEdBQ0ROLHdDQUF1QztJQUNyQ0csY0FBYztJQUNkQyxZQUFZO0lBQ1pDO1FBQ0UsT0FBT0MsbUJBQU9BLENBQUM7SUFDakI7QUFDRixDQUFDLEVBQUM7QUFFRjs7O0NBR0MsR0FDRE4sMENBQXlDO0lBQ3ZDRyxjQUFjO0lBQ2RDLFlBQVk7SUFDWkM7UUFDRSxPQUFPQyxtQkFBT0EsQ0FBQztJQUNqQjtBQUNGLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vbGliL3dpbnN0b24vdHJhbnNwb3J0cy9pbmRleC5qcz8wMjlkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogdHJhbnNwb3J0cy5qczogU2V0IG9mIGFsbCB0cmFuc3BvcnRzIFdpbnN0b24ga25vd3MgYWJvdXQuXG4gKlxuICogKEMpIDIwMTAgQ2hhcmxpZSBSb2JiaW5zXG4gKiBNSVQgTElDRU5DRVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUT0RPOiBhZGQgcHJvcGVydHkgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7Q29uc29sZX1cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdDb25zb2xlJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9jb25zb2xlJyk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIFRPRE86IGFkZCBwcm9wZXJ0eSBkZXNjcmlwdGlvbi5cbiAqIEB0eXBlIHtGaWxlfVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0ZpbGUnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0KCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2ZpbGUnKTtcbiAgfVxufSk7XG5cbi8qKlxuICogVE9ETzogYWRkIHByb3BlcnR5IGRlc2NyaXB0aW9uLlxuICogQHR5cGUge0h0dHB9XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnSHR0cCcsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vaHR0cCcpO1xuICB9XG59KTtcblxuLyoqXG4gKiBUT0RPOiBhZGQgcHJvcGVydHkgZGVzY3JpcHRpb24uXG4gKiBAdHlwZSB7U3RyZWFtfVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1N0cmVhbScsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vc3RyZWFtJyk7XG4gIH1cbn0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/transports/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/lib/winston/transports/stream.js":
/*!***************************************************************!*\
  !*** ./node_modules/winston/lib/winston/transports/stream.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * stream.js: Transport for outputting to any arbitrary stream.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */ \nconst isStream = __webpack_require__(/*! is-stream */ \"(rsc)/./node_modules/is-stream/index.js\");\nconst { MESSAGE } = __webpack_require__(/*! triple-beam */ \"(rsc)/./node_modules/triple-beam/index.js\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst TransportStream = __webpack_require__(/*! winston-transport */ \"(rsc)/./node_modules/winston-transport/index.js\");\n/**\n * Transport for outputting to any arbitrary stream.\n * @type {Stream}\n * @extends {TransportStream}\n */ module.exports = class Stream extends TransportStream {\n    /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */ constructor(options = {}){\n        super(options);\n        if (!options.stream || !isStream(options.stream)) {\n            throw new Error(\"options.stream is required.\");\n        }\n        // We need to listen for drain events when write() returns false. This can\n        // make node mad at times.\n        this._stream = options.stream;\n        this._stream.setMaxListeners(Infinity);\n        this.isObjectMode = options.stream._writableState.objectMode;\n        this.eol = typeof options.eol === \"string\" ? options.eol : os.EOL;\n    }\n    /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */ log(info, callback) {\n        setImmediate(()=>this.emit(\"logged\", info));\n        if (this.isObjectMode) {\n            this._stream.write(info);\n            if (callback) {\n                callback(); // eslint-disable-line callback-return\n            }\n            return;\n        }\n        this._stream.write(`${info[MESSAGE]}${this.eol}`);\n        if (callback) {\n            callback(); // eslint-disable-line callback-return\n        }\n        return;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi9saWIvd2luc3Rvbi90cmFuc3BvcnRzL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Q0FLQyxHQUVEO0FBRUEsTUFBTUEsV0FBV0MsbUJBQU9BLENBQUM7QUFDekIsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0QsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUUsS0FBS0YsbUJBQU9BLENBQUM7QUFDbkIsTUFBTUcsa0JBQWtCSCxtQkFBT0EsQ0FBQztBQUVoQzs7OztDQUlDLEdBQ0RJLE9BQU9DLE9BQU8sR0FBRyxNQUFNQyxlQUFlSDtJQUNwQzs7OztHQUlDLEdBQ0RJLFlBQVlDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDeEIsS0FBSyxDQUFDQTtRQUVOLElBQUksQ0FBQ0EsUUFBUUMsTUFBTSxJQUFJLENBQUNWLFNBQVNTLFFBQVFDLE1BQU0sR0FBRztZQUNoRCxNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFFQSwwRUFBMEU7UUFDMUUsMEJBQTBCO1FBQzFCLElBQUksQ0FBQ0MsT0FBTyxHQUFHSCxRQUFRQyxNQUFNO1FBQzdCLElBQUksQ0FBQ0UsT0FBTyxDQUFDQyxlQUFlLENBQUNDO1FBQzdCLElBQUksQ0FBQ0MsWUFBWSxHQUFHTixRQUFRQyxNQUFNLENBQUNNLGNBQWMsQ0FBQ0MsVUFBVTtRQUM1RCxJQUFJLENBQUNDLEdBQUcsR0FBRyxPQUFRVCxRQUFRUyxHQUFHLEtBQUssV0FBWVQsUUFBUVMsR0FBRyxHQUFHZixHQUFHZ0IsR0FBRztJQUNyRTtJQUVBOzs7OztHQUtDLEdBQ0RDLElBQUlDLElBQUksRUFBRUMsUUFBUSxFQUFFO1FBQ2xCQyxhQUFhLElBQU0sSUFBSSxDQUFDQyxJQUFJLENBQUMsVUFBVUg7UUFDdkMsSUFBSSxJQUFJLENBQUNOLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUNILE9BQU8sQ0FBQ2EsS0FBSyxDQUFDSjtZQUNuQixJQUFJQyxVQUFVO2dCQUNaQSxZQUFZLHNDQUFzQztZQUNwRDtZQUNBO1FBQ0Y7UUFFQSxJQUFJLENBQUNWLE9BQU8sQ0FBQ2EsS0FBSyxDQUFDLENBQUMsRUFBRUosSUFBSSxDQUFDbkIsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDZ0IsR0FBRyxDQUFDLENBQUM7UUFDaEQsSUFBSUksVUFBVTtZQUNaQSxZQUFZLHNDQUFzQztRQUNwRDtRQUNBO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24vbGliL3dpbnN0b24vdHJhbnNwb3J0cy9zdHJlYW0uanM/MjYxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHN0cmVhbS5qczogVHJhbnNwb3J0IGZvciBvdXRwdXR0aW5nIHRvIGFueSBhcmJpdHJhcnkgc3RyZWFtLlxuICpcbiAqIChDKSAyMDEwIENoYXJsaWUgUm9iYmluc1xuICogTUlUIExJQ0VOQ0VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzU3RyZWFtID0gcmVxdWlyZSgnaXMtc3RyZWFtJyk7XG5jb25zdCB7IE1FU1NBR0UgfSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyk7XG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBUcmFuc3BvcnRTdHJlYW0gPSByZXF1aXJlKCd3aW5zdG9uLXRyYW5zcG9ydCcpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBmb3Igb3V0cHV0dGluZyB0byBhbnkgYXJiaXRyYXJ5IHN0cmVhbS5cbiAqIEB0eXBlIHtTdHJlYW19XG4gKiBAZXh0ZW5kcyB7VHJhbnNwb3J0U3RyZWFtfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFN0cmVhbSBleHRlbmRzIFRyYW5zcG9ydFN0cmVhbSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIENvbnNvbGUgdHJhbnNwb3J0IG9iamVjdCByZXNwb25zaWJsZSBmb3JcbiAgICogcGVyc2lzdGluZyBsb2cgbWVzc2FnZXMgYW5kIG1ldGFkYXRhIHRvIGEgdGVybWluYWwgb3IgVFRZLlxuICAgKiBAcGFyYW0geyFPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIGlmICghb3B0aW9ucy5zdHJlYW0gfHwgIWlzU3RyZWFtKG9wdGlvbnMuc3RyZWFtKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zLnN0cmVhbSBpcyByZXF1aXJlZC4nKTtcbiAgICB9XG5cbiAgICAvLyBXZSBuZWVkIHRvIGxpc3RlbiBmb3IgZHJhaW4gZXZlbnRzIHdoZW4gd3JpdGUoKSByZXR1cm5zIGZhbHNlLiBUaGlzIGNhblxuICAgIC8vIG1ha2Ugbm9kZSBtYWQgYXQgdGltZXMuXG4gICAgdGhpcy5fc3RyZWFtID0gb3B0aW9ucy5zdHJlYW07XG4gICAgdGhpcy5fc3RyZWFtLnNldE1heExpc3RlbmVycyhJbmZpbml0eSk7XG4gICAgdGhpcy5pc09iamVjdE1vZGUgPSBvcHRpb25zLnN0cmVhbS5fd3JpdGFibGVTdGF0ZS5vYmplY3RNb2RlO1xuICAgIHRoaXMuZW9sID0gKHR5cGVvZiBvcHRpb25zLmVvbCA9PT0gJ3N0cmluZycpID8gb3B0aW9ucy5lb2wgOiBvcy5FT0w7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBsb2dnaW5nIG1ldGhvZCBleHBvc2VkIHRvIFdpbnN0b24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG4gIGxvZyhpbmZvLCBjYWxsYmFjaykge1xuICAgIHNldEltbWVkaWF0ZSgoKSA9PiB0aGlzLmVtaXQoJ2xvZ2dlZCcsIGluZm8pKTtcbiAgICBpZiAodGhpcy5pc09iamVjdE1vZGUpIHtcbiAgICAgIHRoaXMuX3N0cmVhbS53cml0ZShpbmZvKTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3N0cmVhbS53cml0ZShgJHtpbmZvW01FU1NBR0VdfSR7dGhpcy5lb2x9YCk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiaXNTdHJlYW0iLCJyZXF1aXJlIiwiTUVTU0FHRSIsIm9zIiwiVHJhbnNwb3J0U3RyZWFtIiwibW9kdWxlIiwiZXhwb3J0cyIsIlN0cmVhbSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInN0cmVhbSIsIkVycm9yIiwiX3N0cmVhbSIsInNldE1heExpc3RlbmVycyIsIkluZmluaXR5IiwiaXNPYmplY3RNb2RlIiwiX3dyaXRhYmxlU3RhdGUiLCJvYmplY3RNb2RlIiwiZW9sIiwiRU9MIiwibG9nIiwiaW5mbyIsImNhbGxiYWNrIiwic2V0SW1tZWRpYXRlIiwiZW1pdCIsIndyaXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston/lib/winston/transports/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston/package.json":
/*!*******************************************!*\
  !*** ./node_modules/winston/package.json ***!
  \*******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"winston","description":"A logger for just about everything.","version":"3.17.0","author":"Charlie Robbins <charlie.robbins@gmail.com>","maintainers":["David Hyde <dabh@alumni.stanford.edu>"],"repository":{"type":"git","url":"https://github.com/winstonjs/winston.git"},"keywords":["winston","logger","logging","logs","sysadmin","bunyan","pino","loglevel","tools","json","stream"],"dependencies":{"@dabh/diagnostics":"^2.0.2","@colors/colors":"^1.6.0","async":"^3.2.3","is-stream":"^2.0.0","logform":"^2.7.0","one-time":"^1.0.0","readable-stream":"^3.4.0","safe-stable-stringify":"^2.3.1","stack-trace":"0.0.x","triple-beam":"^1.3.0","winston-transport":"^4.9.0"},"devDependencies":{"@babel/cli":"^7.23.9","@babel/core":"^7.24.0","@babel/preset-env":"^7.24.0","@dabh/eslint-config-populist":"^4.4.0","@types/node":"^20.11.24","abstract-winston-transport":"^0.5.1","assume":"^2.2.0","cross-spawn-async":"^2.2.5","eslint":"^8.57.0","hock":"^1.4.1","mocha":"^10.3.0","nyc":"^17.1.0","rimraf":"5.0.1","split2":"^4.1.0","std-mocks":"^2.0.0","through2":"^4.0.2","winston-compat":"^0.1.5"},"main":"./lib/winston.js","browser":"./dist/winston","types":"./index.d.ts","scripts":{"lint":"eslint lib/*.js lib/winston/*.js lib/winston/**/*.js --resolve-plugins-relative-to ./node_modules/@dabh/eslint-config-populist","test":"rimraf test/fixtures/logs/* && mocha","test:coverage":"nyc npm run test:unit","test:unit":"mocha test/unit","test:integration":"mocha test/integration","build":"rimraf dist && babel lib -d dist","prepublishOnly":"npm run build"},"engines":{"node":">= 12.0.0"},"license":"MIT"}');

/***/ }),

/***/ "(ssr)/./node_modules/winston/package.json":
/*!*******************************************!*\
  !*** ./node_modules/winston/package.json ***!
  \*******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"winston","description":"A logger for just about everything.","version":"3.17.0","author":"Charlie Robbins <charlie.robbins@gmail.com>","maintainers":["David Hyde <dabh@alumni.stanford.edu>"],"repository":{"type":"git","url":"https://github.com/winstonjs/winston.git"},"keywords":["winston","logger","logging","logs","sysadmin","bunyan","pino","loglevel","tools","json","stream"],"dependencies":{"@dabh/diagnostics":"^2.0.2","@colors/colors":"^1.6.0","async":"^3.2.3","is-stream":"^2.0.0","logform":"^2.7.0","one-time":"^1.0.0","readable-stream":"^3.4.0","safe-stable-stringify":"^2.3.1","stack-trace":"0.0.x","triple-beam":"^1.3.0","winston-transport":"^4.9.0"},"devDependencies":{"@babel/cli":"^7.23.9","@babel/core":"^7.24.0","@babel/preset-env":"^7.24.0","@dabh/eslint-config-populist":"^4.4.0","@types/node":"^20.11.24","abstract-winston-transport":"^0.5.1","assume":"^2.2.0","cross-spawn-async":"^2.2.5","eslint":"^8.57.0","hock":"^1.4.1","mocha":"^10.3.0","nyc":"^17.1.0","rimraf":"5.0.1","split2":"^4.1.0","std-mocks":"^2.0.0","through2":"^4.0.2","winston-compat":"^0.1.5"},"main":"./lib/winston.js","browser":"./dist/winston","types":"./index.d.ts","scripts":{"lint":"eslint lib/*.js lib/winston/*.js lib/winston/**/*.js --resolve-plugins-relative-to ./node_modules/@dabh/eslint-config-populist","test":"rimraf test/fixtures/logs/* && mocha","test:coverage":"nyc npm run test:unit","test:unit":"mocha test/unit","test:integration":"mocha test/integration","build":"rimraf dist && babel lib -d dist","prepublishOnly":"npm run build"},"engines":{"node":">= 12.0.0"},"license":"MIT"}');

/***/ })

};
;