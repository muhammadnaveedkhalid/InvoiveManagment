"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tough-cookie";
exports.ids = ["vendor-chunks/tough-cookie"];
exports.modules = {

/***/ "(ssr)/./node_modules/tough-cookie/lib/cookie.js":
/*!*************************************************!*\
  !*** ./node_modules/tough-cookie/lib/cookie.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \nvar net = __webpack_require__(/*! net */ \"net\");\nvar urlParse = (__webpack_require__(/*! url */ \"url\").parse);\nvar util = __webpack_require__(/*! util */ \"util\");\nvar pubsuffix = __webpack_require__(/*! ./pubsuffix-psl */ \"(ssr)/./node_modules/tough-cookie/lib/pubsuffix-psl.js\");\nvar Store = (__webpack_require__(/*! ./store */ \"(ssr)/./node_modules/tough-cookie/lib/store.js\").Store);\nvar MemoryCookieStore = (__webpack_require__(/*! ./memstore */ \"(ssr)/./node_modules/tough-cookie/lib/memstore.js\").MemoryCookieStore);\nvar pathMatch = (__webpack_require__(/*! ./pathMatch */ \"(ssr)/./node_modules/tough-cookie/lib/pathMatch.js\").pathMatch);\nvar VERSION = (__webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/tough-cookie/package.json\").version);\nvar punycode;\ntry {\n    punycode = __webpack_require__(/*! punycode */ \"punycode\");\n} catch (e) {\n    console.warn(\"tough-cookie: can't load punycode; won't use punycode for domain normalization\");\n}\n// From RFC6265 S4.1.1\n// note that it excludes \\x3B \";\"\nvar COOKIE_OCTETS = /^[\\x21\\x23-\\x2B\\x2D-\\x3A\\x3C-\\x5B\\x5D-\\x7E]+$/;\nvar CONTROL_CHARS = /[\\x00-\\x1F]/;\n// From Chromium // '\\r', '\\n' and '\\0' should be treated as a terminator in\n// the \"relaxed\" mode, see:\n// https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60\nvar TERMINATORS = [\n    \"\\n\",\n    \"\\r\",\n    \"\\x00\"\n];\n// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or \";\"'\n// Note ';' is \\x3B\nvar PATH_VALUE = /[\\x20-\\x3A\\x3C-\\x7E]+/;\n// date-time parsing constants (RFC6265 S5.1.1)\nvar DATE_DELIM = /[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]/;\nvar MONTH_TO_NUM = {\n    jan: 0,\n    feb: 1,\n    mar: 2,\n    apr: 3,\n    may: 4,\n    jun: 5,\n    jul: 6,\n    aug: 7,\n    sep: 8,\n    oct: 9,\n    nov: 10,\n    dec: 11\n};\nvar NUM_TO_MONTH = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\nvar NUM_TO_DAY = [\n    \"Sun\",\n    \"Mon\",\n    \"Tue\",\n    \"Wed\",\n    \"Thu\",\n    \"Fri\",\n    \"Sat\"\n];\nvar MAX_TIME = 2147483647000; // 31-bit max\nvar MIN_TIME = 0; // 31-bit min\n/*\n * Parses a Natural number (i.e., non-negative integer) with either the\n *    <min>*<max>DIGIT ( non-digit *OCTET )\n * or\n *    <min>*<max>DIGIT\n * grammar (RFC6265 S5.1.1).\n *\n * The \"trailingOK\" boolean controls if the grammar accepts a\n * \"( non-digit *OCTET )\" trailer.\n */ function parseDigits(token, minDigits, maxDigits, trailingOK) {\n    var count = 0;\n    while(count < token.length){\n        var c = token.charCodeAt(count);\n        // \"non-digit = %x00-2F / %x3A-FF\"\n        if (c <= 0x2F || c >= 0x3A) {\n            break;\n        }\n        count++;\n    }\n    // constrain to a minimum and maximum number of digits.\n    if (count < minDigits || count > maxDigits) {\n        return null;\n    }\n    if (!trailingOK && count != token.length) {\n        return null;\n    }\n    return parseInt(token.substr(0, count), 10);\n}\nfunction parseTime(token) {\n    var parts = token.split(\":\");\n    var result = [\n        0,\n        0,\n        0\n    ];\n    /* RF6256 S5.1.1:\n   *      time            = hms-time ( non-digit *OCTET )\n   *      hms-time        = time-field \":\" time-field \":\" time-field\n   *      time-field      = 1*2DIGIT\n   */ if (parts.length !== 3) {\n        return null;\n    }\n    for(var i = 0; i < 3; i++){\n        // \"time-field\" must be strictly \"1*2DIGIT\", HOWEVER, \"hms-time\" can be\n        // followed by \"( non-digit *OCTET )\" so therefore the last time-field can\n        // have a trailer\n        var trailingOK = i == 2;\n        var num = parseDigits(parts[i], 1, 2, trailingOK);\n        if (num === null) {\n            return null;\n        }\n        result[i] = num;\n    }\n    return result;\n}\nfunction parseMonth(token) {\n    token = String(token).substr(0, 3).toLowerCase();\n    var num = MONTH_TO_NUM[token];\n    return num >= 0 ? num : null;\n}\n/*\n * RFC6265 S5.1.1 date parser (see RFC for full grammar)\n */ function parseDate(str) {\n    if (!str) {\n        return;\n    }\n    /* RFC6265 S5.1.1:\n   * 2. Process each date-token sequentially in the order the date-tokens\n   * appear in the cookie-date\n   */ var tokens = str.split(DATE_DELIM);\n    if (!tokens) {\n        return;\n    }\n    var hour = null;\n    var minute = null;\n    var second = null;\n    var dayOfMonth = null;\n    var month = null;\n    var year = null;\n    for(var i = 0; i < tokens.length; i++){\n        var token = tokens[i].trim();\n        if (!token.length) {\n            continue;\n        }\n        var result;\n        /* 2.1. If the found-time flag is not set and the token matches the time\n     * production, set the found-time flag and set the hour- value,\n     * minute-value, and second-value to the numbers denoted by the digits in\n     * the date-token, respectively.  Skip the remaining sub-steps and continue\n     * to the next date-token.\n     */ if (second === null) {\n            result = parseTime(token);\n            if (result) {\n                hour = result[0];\n                minute = result[1];\n                second = result[2];\n                continue;\n            }\n        }\n        /* 2.2. If the found-day-of-month flag is not set and the date-token matches\n     * the day-of-month production, set the found-day-of- month flag and set\n     * the day-of-month-value to the number denoted by the date-token.  Skip\n     * the remaining sub-steps and continue to the next date-token.\n     */ if (dayOfMonth === null) {\n            // \"day-of-month = 1*2DIGIT ( non-digit *OCTET )\"\n            result = parseDigits(token, 1, 2, true);\n            if (result !== null) {\n                dayOfMonth = result;\n                continue;\n            }\n        }\n        /* 2.3. If the found-month flag is not set and the date-token matches the\n     * month production, set the found-month flag and set the month-value to\n     * the month denoted by the date-token.  Skip the remaining sub-steps and\n     * continue to the next date-token.\n     */ if (month === null) {\n            result = parseMonth(token);\n            if (result !== null) {\n                month = result;\n                continue;\n            }\n        }\n        /* 2.4. If the found-year flag is not set and the date-token matches the\n     * year production, set the found-year flag and set the year-value to the\n     * number denoted by the date-token.  Skip the remaining sub-steps and\n     * continue to the next date-token.\n     */ if (year === null) {\n            // \"year = 2*4DIGIT ( non-digit *OCTET )\"\n            result = parseDigits(token, 2, 4, true);\n            if (result !== null) {\n                year = result;\n                /* From S5.1.1:\n         * 3.  If the year-value is greater than or equal to 70 and less\n         * than or equal to 99, increment the year-value by 1900.\n         * 4.  If the year-value is greater than or equal to 0 and less\n         * than or equal to 69, increment the year-value by 2000.\n         */ if (year >= 70 && year <= 99) {\n                    year += 1900;\n                } else if (year >= 0 && year <= 69) {\n                    year += 2000;\n                }\n            }\n        }\n    }\n    /* RFC 6265 S5.1.1\n   * \"5. Abort these steps and fail to parse the cookie-date if:\n   *     *  at least one of the found-day-of-month, found-month, found-\n   *        year, or found-time flags is not set,\n   *     *  the day-of-month-value is less than 1 or greater than 31,\n   *     *  the year-value is less than 1601,\n   *     *  the hour-value is greater than 23,\n   *     *  the minute-value is greater than 59, or\n   *     *  the second-value is greater than 59.\n   *     (Note that leap seconds cannot be represented in this syntax.)\"\n   *\n   * So, in order as above:\n   */ if (dayOfMonth === null || month === null || year === null || second === null || dayOfMonth < 1 || dayOfMonth > 31 || year < 1601 || hour > 23 || minute > 59 || second > 59) {\n        return;\n    }\n    return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));\n}\nfunction formatDate(date) {\n    var d = date.getUTCDate();\n    d = d >= 10 ? d : \"0\" + d;\n    var h = date.getUTCHours();\n    h = h >= 10 ? h : \"0\" + h;\n    var m = date.getUTCMinutes();\n    m = m >= 10 ? m : \"0\" + m;\n    var s = date.getUTCSeconds();\n    s = s >= 10 ? s : \"0\" + s;\n    return NUM_TO_DAY[date.getUTCDay()] + \", \" + d + \" \" + NUM_TO_MONTH[date.getUTCMonth()] + \" \" + date.getUTCFullYear() + \" \" + h + \":\" + m + \":\" + s + \" GMT\";\n}\n// S5.1.2 Canonicalized Host Names\nfunction canonicalDomain(str) {\n    if (str == null) {\n        return null;\n    }\n    str = str.trim().replace(/^\\./, \"\"); // S4.1.2.3 & S5.2.3: ignore leading .\n    // convert to IDN if any non-ASCII characters\n    if (punycode && /[^\\u0001-\\u007f]/.test(str)) {\n        str = punycode.toASCII(str);\n    }\n    return str.toLowerCase();\n}\n// S5.1.3 Domain Matching\nfunction domainMatch(str, domStr, canonicalize) {\n    if (str == null || domStr == null) {\n        return null;\n    }\n    if (canonicalize !== false) {\n        str = canonicalDomain(str);\n        domStr = canonicalDomain(domStr);\n    }\n    /*\n   * \"The domain string and the string are identical. (Note that both the\n   * domain string and the string will have been canonicalized to lower case at\n   * this point)\"\n   */ if (str == domStr) {\n        return true;\n    }\n    /* \"All of the following [three] conditions hold:\" (order adjusted from the RFC) */ /* \"* The string is a host name (i.e., not an IP address).\" */ if (net.isIP(str)) {\n        return false;\n    }\n    /* \"* The domain string is a suffix of the string\" */ var idx = str.indexOf(domStr);\n    if (idx <= 0) {\n        return false; // it's a non-match (-1) or prefix (0)\n    }\n    // e.g \"a.b.c\".indexOf(\"b.c\") === 2\n    // 5 === 3+2\n    if (str.length !== domStr.length + idx) {\n        return false;\n    }\n    /* \"* The last character of the string that is not included in the domain\n  * string is a %x2E (\".\") character.\" */ if (str.substr(idx - 1, 1) !== \".\") {\n        return false;\n    }\n    return true;\n}\n// RFC6265 S5.1.4 Paths and Path-Match\n/*\n * \"The user agent MUST use an algorithm equivalent to the following algorithm\n * to compute the default-path of a cookie:\"\n *\n * Assumption: the path (and not query part or absolute uri) is passed in.\n */ function defaultPath(path) {\n    // \"2. If the uri-path is empty or if the first character of the uri-path is not\n    // a %x2F (\"/\") character, output %x2F (\"/\") and skip the remaining steps.\n    if (!path || path.substr(0, 1) !== \"/\") {\n        return \"/\";\n    }\n    // \"3. If the uri-path contains no more than one %x2F (\"/\") character, output\n    // %x2F (\"/\") and skip the remaining step.\"\n    if (path === \"/\") {\n        return path;\n    }\n    var rightSlash = path.lastIndexOf(\"/\");\n    if (rightSlash === 0) {\n        return \"/\";\n    }\n    // \"4. Output the characters of the uri-path from the first character up to,\n    // but not including, the right-most %x2F (\"/\").\"\n    return path.slice(0, rightSlash);\n}\nfunction trimTerminator(str) {\n    for(var t = 0; t < TERMINATORS.length; t++){\n        var terminatorIdx = str.indexOf(TERMINATORS[t]);\n        if (terminatorIdx !== -1) {\n            str = str.substr(0, terminatorIdx);\n        }\n    }\n    return str;\n}\nfunction parseCookiePair(cookiePair, looseMode) {\n    cookiePair = trimTerminator(cookiePair);\n    var firstEq = cookiePair.indexOf(\"=\");\n    if (looseMode) {\n        if (firstEq === 0) {\n            cookiePair = cookiePair.substr(1);\n            firstEq = cookiePair.indexOf(\"=\"); // might still need to split on '='\n        }\n    } else {\n        if (firstEq <= 0) {\n            return; // needs to have non-empty \"cookie-name\"\n        }\n    }\n    var cookieName, cookieValue;\n    if (firstEq <= 0) {\n        cookieName = \"\";\n        cookieValue = cookiePair.trim();\n    } else {\n        cookieName = cookiePair.substr(0, firstEq).trim();\n        cookieValue = cookiePair.substr(firstEq + 1).trim();\n    }\n    if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {\n        return;\n    }\n    var c = new Cookie();\n    c.key = cookieName;\n    c.value = cookieValue;\n    return c;\n}\nfunction parse(str, options) {\n    if (!options || typeof options !== \"object\") {\n        options = {};\n    }\n    str = str.trim();\n    // We use a regex to parse the \"name-value-pair\" part of S5.2\n    var firstSemi = str.indexOf(\";\"); // S5.2 step 1\n    var cookiePair = firstSemi === -1 ? str : str.substr(0, firstSemi);\n    var c = parseCookiePair(cookiePair, !!options.loose);\n    if (!c) {\n        return;\n    }\n    if (firstSemi === -1) {\n        return c;\n    }\n    // S5.2.3 \"unparsed-attributes consist of the remainder of the set-cookie-string\n    // (including the %x3B (\";\") in question).\" plus later on in the same section\n    // \"discard the first \";\" and trim\".\n    var unparsed = str.slice(firstSemi + 1).trim();\n    // \"If the unparsed-attributes string is empty, skip the rest of these\n    // steps.\"\n    if (unparsed.length === 0) {\n        return c;\n    }\n    /*\n   * S5.2 says that when looping over the items \"[p]rocess the attribute-name\n   * and attribute-value according to the requirements in the following\n   * subsections\" for every item.  Plus, for many of the individual attributes\n   * in S5.3 it says to use the \"attribute-value of the last attribute in the\n   * cookie-attribute-list\".  Therefore, in this implementation, we overwrite\n   * the previous value.\n   */ var cookie_avs = unparsed.split(\";\");\n    while(cookie_avs.length){\n        var av = cookie_avs.shift().trim();\n        if (av.length === 0) {\n            continue;\n        }\n        var av_sep = av.indexOf(\"=\");\n        var av_key, av_value;\n        if (av_sep === -1) {\n            av_key = av;\n            av_value = null;\n        } else {\n            av_key = av.substr(0, av_sep);\n            av_value = av.substr(av_sep + 1);\n        }\n        av_key = av_key.trim().toLowerCase();\n        if (av_value) {\n            av_value = av_value.trim();\n        }\n        switch(av_key){\n            case \"expires\":\n                if (av_value) {\n                    var exp = parseDate(av_value);\n                    // \"If the attribute-value failed to parse as a cookie date, ignore the\n                    // cookie-av.\"\n                    if (exp) {\n                        // over and underflow not realistically a concern: V8's getTime() seems to\n                        // store something larger than a 32-bit time_t (even with 32-bit node)\n                        c.expires = exp;\n                    }\n                }\n                break;\n            case \"max-age\":\n                if (av_value) {\n                    // \"If the first character of the attribute-value is not a DIGIT or a \"-\"\n                    // character ...[or]... If the remainder of attribute-value contains a\n                    // non-DIGIT character, ignore the cookie-av.\"\n                    if (/^-?[0-9]+$/.test(av_value)) {\n                        var delta = parseInt(av_value, 10);\n                        // \"If delta-seconds is less than or equal to zero (0), let expiry-time\n                        // be the earliest representable date and time.\"\n                        c.setMaxAge(delta);\n                    }\n                }\n                break;\n            case \"domain\":\n                // \"If the attribute-value is empty, the behavior is undefined.  However,\n                // the user agent SHOULD ignore the cookie-av entirely.\"\n                if (av_value) {\n                    // S5.2.3 \"Let cookie-domain be the attribute-value without the leading %x2E\n                    // (\".\") character.\"\n                    var domain = av_value.trim().replace(/^\\./, \"\");\n                    if (domain) {\n                        // \"Convert the cookie-domain to lower case.\"\n                        c.domain = domain.toLowerCase();\n                    }\n                }\n                break;\n            case \"path\":\n                /*\n       * \"If the attribute-value is empty or if the first character of the\n       * attribute-value is not %x2F (\"/\"):\n       *   Let cookie-path be the default-path.\n       * Otherwise:\n       *   Let cookie-path be the attribute-value.\"\n       *\n       * We'll represent the default-path as null since it depends on the\n       * context of the parsing.\n       */ c.path = av_value && av_value[0] === \"/\" ? av_value : null;\n                break;\n            case \"secure\":\n                /*\n       * \"If the attribute-name case-insensitively matches the string \"Secure\",\n       * the user agent MUST append an attribute to the cookie-attribute-list\n       * with an attribute-name of Secure and an empty attribute-value.\"\n       */ c.secure = true;\n                break;\n            case \"httponly\":\n                c.httpOnly = true;\n                break;\n            default:\n                c.extensions = c.extensions || [];\n                c.extensions.push(av);\n                break;\n        }\n    }\n    return c;\n}\n// avoid the V8 deoptimization monster!\nfunction jsonParse(str) {\n    var obj;\n    try {\n        obj = JSON.parse(str);\n    } catch (e) {\n        return e;\n    }\n    return obj;\n}\nfunction fromJSON(str) {\n    if (!str) {\n        return null;\n    }\n    var obj;\n    if (typeof str === \"string\") {\n        obj = jsonParse(str);\n        if (obj instanceof Error) {\n            return null;\n        }\n    } else {\n        // assume it's an Object\n        obj = str;\n    }\n    var c = new Cookie();\n    for(var i = 0; i < Cookie.serializableProperties.length; i++){\n        var prop = Cookie.serializableProperties[i];\n        if (obj[prop] === undefined || obj[prop] === Cookie.prototype[prop]) {\n            continue; // leave as prototype default\n        }\n        if (prop === \"expires\" || prop === \"creation\" || prop === \"lastAccessed\") {\n            if (obj[prop] === null) {\n                c[prop] = null;\n            } else {\n                c[prop] = obj[prop] == \"Infinity\" ? \"Infinity\" : new Date(obj[prop]);\n            }\n        } else {\n            c[prop] = obj[prop];\n        }\n    }\n    return c;\n}\n/* Section 5.4 part 2:\n * \"*  Cookies with longer paths are listed before cookies with\n *     shorter paths.\n *\n *  *  Among cookies that have equal-length path fields, cookies with\n *     earlier creation-times are listed before cookies with later\n *     creation-times.\"\n */ function cookieCompare(a, b) {\n    var cmp = 0;\n    // descending for length: b CMP a\n    var aPathLen = a.path ? a.path.length : 0;\n    var bPathLen = b.path ? b.path.length : 0;\n    cmp = bPathLen - aPathLen;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    // ascending for time: a CMP b\n    var aTime = a.creation ? a.creation.getTime() : MAX_TIME;\n    var bTime = b.creation ? b.creation.getTime() : MAX_TIME;\n    cmp = aTime - bTime;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    // break ties for the same millisecond (precision of JavaScript's clock)\n    cmp = a.creationIndex - b.creationIndex;\n    return cmp;\n}\n// Gives the permutation of all possible pathMatch()es of a given path. The\n// array is in longest-to-shortest order.  Handy for indexing.\nfunction permutePath(path) {\n    if (path === \"/\") {\n        return [\n            \"/\"\n        ];\n    }\n    if (path.lastIndexOf(\"/\") === path.length - 1) {\n        path = path.substr(0, path.length - 1);\n    }\n    var permutations = [\n        path\n    ];\n    while(path.length > 1){\n        var lindex = path.lastIndexOf(\"/\");\n        if (lindex === 0) {\n            break;\n        }\n        path = path.substr(0, lindex);\n        permutations.push(path);\n    }\n    permutations.push(\"/\");\n    return permutations;\n}\nfunction getCookieContext(url) {\n    if (url instanceof Object) {\n        return url;\n    }\n    // NOTE: decodeURI will throw on malformed URIs (see GH-32).\n    // Therefore, we will just skip decoding for such URIs.\n    try {\n        url = decodeURI(url);\n    } catch (err) {\n    // Silently swallow error\n    }\n    return urlParse(url);\n}\nfunction Cookie(options) {\n    options = options || {};\n    Object.keys(options).forEach(function(prop) {\n        if (Cookie.prototype.hasOwnProperty(prop) && Cookie.prototype[prop] !== options[prop] && prop.substr(0, 1) !== \"_\") {\n            this[prop] = options[prop];\n        }\n    }, this);\n    this.creation = this.creation || new Date();\n    // used to break creation ties in cookieCompare():\n    Object.defineProperty(this, \"creationIndex\", {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: ++Cookie.cookiesCreated\n    });\n}\nCookie.cookiesCreated = 0; // incremented each time a cookie is created\nCookie.parse = parse;\nCookie.fromJSON = fromJSON;\nCookie.prototype.key = \"\";\nCookie.prototype.value = \"\";\n// the order in which the RFC has them:\nCookie.prototype.expires = \"Infinity\"; // coerces to literal Infinity\nCookie.prototype.maxAge = null; // takes precedence over expires for TTL\nCookie.prototype.domain = null;\nCookie.prototype.path = null;\nCookie.prototype.secure = false;\nCookie.prototype.httpOnly = false;\nCookie.prototype.extensions = null;\n// set by the CookieJar:\nCookie.prototype.hostOnly = null; // boolean when set\nCookie.prototype.pathIsDefault = null; // boolean when set\nCookie.prototype.creation = null; // Date when set; defaulted by Cookie.parse\nCookie.prototype.lastAccessed = null; // Date when set\nObject.defineProperty(Cookie.prototype, \"creationIndex\", {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: 0\n});\nCookie.serializableProperties = Object.keys(Cookie.prototype).filter(function(prop) {\n    return !(Cookie.prototype[prop] instanceof Function || prop === \"creationIndex\" || prop.substr(0, 1) === \"_\");\n});\nCookie.prototype.inspect = function inspect() {\n    var now = Date.now();\n    return 'Cookie=\"' + this.toString() + \"; hostOnly=\" + (this.hostOnly != null ? this.hostOnly : \"?\") + \"; aAge=\" + (this.lastAccessed ? now - this.lastAccessed.getTime() + \"ms\" : \"?\") + \"; cAge=\" + (this.creation ? now - this.creation.getTime() + \"ms\" : \"?\") + '\"';\n};\n// Use the new custom inspection symbol to add the custom inspect function if\n// available.\nif (util.inspect.custom) {\n    Cookie.prototype[util.inspect.custom] = Cookie.prototype.inspect;\n}\nCookie.prototype.toJSON = function() {\n    var obj = {};\n    var props = Cookie.serializableProperties;\n    for(var i = 0; i < props.length; i++){\n        var prop = props[i];\n        if (this[prop] === Cookie.prototype[prop]) {\n            continue; // leave as prototype default\n        }\n        if (prop === \"expires\" || prop === \"creation\" || prop === \"lastAccessed\") {\n            if (this[prop] === null) {\n                obj[prop] = null;\n            } else {\n                obj[prop] = this[prop] == \"Infinity\" ? \"Infinity\" : this[prop].toISOString();\n            }\n        } else if (prop === \"maxAge\") {\n            if (this[prop] !== null) {\n                // again, intentionally not ===\n                obj[prop] = this[prop] == Infinity || this[prop] == -Infinity ? this[prop].toString() : this[prop];\n            }\n        } else {\n            if (this[prop] !== Cookie.prototype[prop]) {\n                obj[prop] = this[prop];\n            }\n        }\n    }\n    return obj;\n};\nCookie.prototype.clone = function() {\n    return fromJSON(this.toJSON());\n};\nCookie.prototype.validate = function validate() {\n    if (!COOKIE_OCTETS.test(this.value)) {\n        return false;\n    }\n    if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {\n        return false;\n    }\n    if (this.maxAge != null && this.maxAge <= 0) {\n        return false; // \"Max-Age=\" non-zero-digit *DIGIT\n    }\n    if (this.path != null && !PATH_VALUE.test(this.path)) {\n        return false;\n    }\n    var cdomain = this.cdomain();\n    if (cdomain) {\n        if (cdomain.match(/\\.$/)) {\n            return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this\n        }\n        var suffix = pubsuffix.getPublicSuffix(cdomain);\n        if (suffix == null) {\n            return false;\n        }\n    }\n    return true;\n};\nCookie.prototype.setExpires = function setExpires(exp) {\n    if (exp instanceof Date) {\n        this.expires = exp;\n    } else {\n        this.expires = parseDate(exp) || \"Infinity\";\n    }\n};\nCookie.prototype.setMaxAge = function setMaxAge(age) {\n    if (age === Infinity || age === -Infinity) {\n        this.maxAge = age.toString(); // so JSON.stringify() works\n    } else {\n        this.maxAge = age;\n    }\n};\n// gives Cookie header format\nCookie.prototype.cookieString = function cookieString() {\n    var val = this.value;\n    if (val == null) {\n        val = \"\";\n    }\n    if (this.key === \"\") {\n        return val;\n    }\n    return this.key + \"=\" + val;\n};\n// gives Set-Cookie header format\nCookie.prototype.toString = function toString() {\n    var str = this.cookieString();\n    if (this.expires != Infinity) {\n        if (this.expires instanceof Date) {\n            str += \"; Expires=\" + formatDate(this.expires);\n        } else {\n            str += \"; Expires=\" + this.expires;\n        }\n    }\n    if (this.maxAge != null && this.maxAge != Infinity) {\n        str += \"; Max-Age=\" + this.maxAge;\n    }\n    if (this.domain && !this.hostOnly) {\n        str += \"; Domain=\" + this.domain;\n    }\n    if (this.path) {\n        str += \"; Path=\" + this.path;\n    }\n    if (this.secure) {\n        str += \"; Secure\";\n    }\n    if (this.httpOnly) {\n        str += \"; HttpOnly\";\n    }\n    if (this.extensions) {\n        this.extensions.forEach(function(ext) {\n            str += \"; \" + ext;\n        });\n    }\n    return str;\n};\n// TTL() partially replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere)\n// S5.3 says to give the \"latest representable date\" for which we use Infinity\n// For \"expired\" we use 0\nCookie.prototype.TTL = function TTL(now) {\n    /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires\n   * attribute, the Max-Age attribute has precedence and controls the\n   * expiration date of the cookie.\n   * (Concurs with S5.3 step 3)\n   */ if (this.maxAge != null) {\n        return this.maxAge <= 0 ? 0 : this.maxAge * 1000;\n    }\n    var expires = this.expires;\n    if (expires != Infinity) {\n        if (!(expires instanceof Date)) {\n            expires = parseDate(expires) || Infinity;\n        }\n        if (expires == Infinity) {\n            return Infinity;\n        }\n        return expires.getTime() - (now || Date.now());\n    }\n    return Infinity;\n};\n// expiryTime() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere)\nCookie.prototype.expiryTime = function expiryTime(now) {\n    if (this.maxAge != null) {\n        var relativeTo = now || this.creation || new Date();\n        var age = this.maxAge <= 0 ? -Infinity : this.maxAge * 1000;\n        return relativeTo.getTime() + age;\n    }\n    if (this.expires == Infinity) {\n        return Infinity;\n    }\n    return this.expires.getTime();\n};\n// expiryDate() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere), except it returns a Date\nCookie.prototype.expiryDate = function expiryDate(now) {\n    var millisec = this.expiryTime(now);\n    if (millisec == Infinity) {\n        return new Date(MAX_TIME);\n    } else if (millisec == -Infinity) {\n        return new Date(MIN_TIME);\n    } else {\n        return new Date(millisec);\n    }\n};\n// This replaces the \"persistent-flag\" parts of S5.3 step 3\nCookie.prototype.isPersistent = function isPersistent() {\n    return this.maxAge != null || this.expires != Infinity;\n};\n// Mostly S5.1.2 and S5.2.3:\nCookie.prototype.cdomain = Cookie.prototype.canonicalizedDomain = function canonicalizedDomain() {\n    if (this.domain == null) {\n        return null;\n    }\n    return canonicalDomain(this.domain);\n};\nfunction CookieJar(store, options) {\n    if (typeof options === \"boolean\") {\n        options = {\n            rejectPublicSuffixes: options\n        };\n    } else if (options == null) {\n        options = {};\n    }\n    if (options.rejectPublicSuffixes != null) {\n        this.rejectPublicSuffixes = options.rejectPublicSuffixes;\n    }\n    if (options.looseMode != null) {\n        this.enableLooseMode = options.looseMode;\n    }\n    if (!store) {\n        store = new MemoryCookieStore();\n    }\n    this.store = store;\n}\nCookieJar.prototype.store = null;\nCookieJar.prototype.rejectPublicSuffixes = true;\nCookieJar.prototype.enableLooseMode = false;\nvar CAN_BE_SYNC = [];\nCAN_BE_SYNC.push(\"setCookie\");\nCookieJar.prototype.setCookie = function(cookie, url, options, cb) {\n    var err;\n    var context = getCookieContext(url);\n    if (options instanceof Function) {\n        cb = options;\n        options = {};\n    }\n    var host = canonicalDomain(context.hostname);\n    var loose = this.enableLooseMode;\n    if (options.loose != null) {\n        loose = options.loose;\n    }\n    // S5.3 step 1\n    if (!(cookie instanceof Cookie)) {\n        cookie = Cookie.parse(cookie, {\n            loose: loose\n        });\n    }\n    if (!cookie) {\n        err = new Error(\"Cookie failed to parse\");\n        return cb(options.ignoreError ? null : err);\n    }\n    // S5.3 step 2\n    var now = options.now || new Date(); // will assign later to save effort in the face of errors\n    // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()\n    // S5.3 step 4: NOOP; domain is null by default\n    // S5.3 step 5: public suffixes\n    if (this.rejectPublicSuffixes && cookie.domain) {\n        var suffix = pubsuffix.getPublicSuffix(cookie.cdomain());\n        if (suffix == null) {\n            err = new Error(\"Cookie has domain set to a public suffix\");\n            return cb(options.ignoreError ? null : err);\n        }\n    }\n    // S5.3 step 6:\n    if (cookie.domain) {\n        if (!domainMatch(host, cookie.cdomain(), false)) {\n            err = new Error(\"Cookie not in this host's domain. Cookie:\" + cookie.cdomain() + \" Request:\" + host);\n            return cb(options.ignoreError ? null : err);\n        }\n        if (cookie.hostOnly == null) {\n            cookie.hostOnly = false;\n        }\n    } else {\n        cookie.hostOnly = true;\n        cookie.domain = host;\n    }\n    //S5.2.4 If the attribute-value is empty or if the first character of the\n    //attribute-value is not %x2F (\"/\"):\n    //Let cookie-path be the default-path.\n    if (!cookie.path || cookie.path[0] !== \"/\") {\n        cookie.path = defaultPath(context.pathname);\n        cookie.pathIsDefault = true;\n    }\n    // S5.3 step 8: NOOP; secure attribute\n    // S5.3 step 9: NOOP; httpOnly attribute\n    // S5.3 step 10\n    if (options.http === false && cookie.httpOnly) {\n        err = new Error(\"Cookie is HttpOnly and this isn't an HTTP API\");\n        return cb(options.ignoreError ? null : err);\n    }\n    var store = this.store;\n    if (!store.updateCookie) {\n        store.updateCookie = function(oldCookie, newCookie, cb) {\n            this.putCookie(newCookie, cb);\n        };\n    }\n    function withCookie(err, oldCookie) {\n        if (err) {\n            return cb(err);\n        }\n        var next = function(err) {\n            if (err) {\n                return cb(err);\n            } else {\n                cb(null, cookie);\n            }\n        };\n        if (oldCookie) {\n            // S5.3 step 11 - \"If the cookie store contains a cookie with the same name,\n            // domain, and path as the newly created cookie:\"\n            if (options.http === false && oldCookie.httpOnly) {\n                err = new Error(\"old Cookie is HttpOnly and this isn't an HTTP API\");\n                return cb(options.ignoreError ? null : err);\n            }\n            cookie.creation = oldCookie.creation; // step 11.3\n            cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker\n            cookie.lastAccessed = now;\n            // Step 11.4 (delete cookie) is implied by just setting the new one:\n            store.updateCookie(oldCookie, cookie, next); // step 12\n        } else {\n            cookie.creation = cookie.lastAccessed = now;\n            store.putCookie(cookie, next); // step 12\n        }\n    }\n    store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);\n};\n// RFC6365 S5.4\nCAN_BE_SYNC.push(\"getCookies\");\nCookieJar.prototype.getCookies = function(url, options, cb) {\n    var context = getCookieContext(url);\n    if (options instanceof Function) {\n        cb = options;\n        options = {};\n    }\n    var host = canonicalDomain(context.hostname);\n    var path = context.pathname || \"/\";\n    var secure = options.secure;\n    if (secure == null && context.protocol && (context.protocol == \"https:\" || context.protocol == \"wss:\")) {\n        secure = true;\n    }\n    var http = options.http;\n    if (http == null) {\n        http = true;\n    }\n    var now = options.now || Date.now();\n    var expireCheck = options.expire !== false;\n    var allPaths = !!options.allPaths;\n    var store = this.store;\n    function matchingCookie(c) {\n        // \"Either:\n        //   The cookie's host-only-flag is true and the canonicalized\n        //   request-host is identical to the cookie's domain.\n        // Or:\n        //   The cookie's host-only-flag is false and the canonicalized\n        //   request-host domain-matches the cookie's domain.\"\n        if (c.hostOnly) {\n            if (c.domain != host) {\n                return false;\n            }\n        } else {\n            if (!domainMatch(host, c.domain, false)) {\n                return false;\n            }\n        }\n        // \"The request-uri's path path-matches the cookie's path.\"\n        if (!allPaths && !pathMatch(path, c.path)) {\n            return false;\n        }\n        // \"If the cookie's secure-only-flag is true, then the request-uri's\n        // scheme must denote a \"secure\" protocol\"\n        if (c.secure && !secure) {\n            return false;\n        }\n        // \"If the cookie's http-only-flag is true, then exclude the cookie if the\n        // cookie-string is being generated for a \"non-HTTP\" API\"\n        if (c.httpOnly && !http) {\n            return false;\n        }\n        // deferred from S5.3\n        // non-RFC: allow retention of expired cookies by choice\n        if (expireCheck && c.expiryTime() <= now) {\n            store.removeCookie(c.domain, c.path, c.key, function() {}); // result ignored\n            return false;\n        }\n        return true;\n    }\n    store.findCookies(host, allPaths ? null : path, function(err, cookies) {\n        if (err) {\n            return cb(err);\n        }\n        cookies = cookies.filter(matchingCookie);\n        // sorting of S5.4 part 2\n        if (options.sort !== false) {\n            cookies = cookies.sort(cookieCompare);\n        }\n        // S5.4 part 3\n        var now = new Date();\n        cookies.forEach(function(c) {\n            c.lastAccessed = now;\n        });\n        // TODO persist lastAccessed\n        cb(null, cookies);\n    });\n};\nCAN_BE_SYNC.push(\"getCookieString\");\nCookieJar.prototype.getCookieString = function() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var cb = args.pop();\n    var next = function(err, cookies) {\n        if (err) {\n            cb(err);\n        } else {\n            cb(null, cookies.sort(cookieCompare).map(function(c) {\n                return c.cookieString();\n            }).join(\"; \"));\n        }\n    };\n    args.push(next);\n    this.getCookies.apply(this, args);\n};\nCAN_BE_SYNC.push(\"getSetCookieStrings\");\nCookieJar.prototype.getSetCookieStrings = function() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var cb = args.pop();\n    var next = function(err, cookies) {\n        if (err) {\n            cb(err);\n        } else {\n            cb(null, cookies.map(function(c) {\n                return c.toString();\n            }));\n        }\n    };\n    args.push(next);\n    this.getCookies.apply(this, args);\n};\nCAN_BE_SYNC.push(\"serialize\");\nCookieJar.prototype.serialize = function(cb) {\n    var type = this.store.constructor.name;\n    if (type === \"Object\") {\n        type = null;\n    }\n    // update README.md \"Serialization Format\" if you change this, please!\n    var serialized = {\n        // The version of tough-cookie that serialized this jar. Generally a good\n        // practice since future versions can make data import decisions based on\n        // known past behavior. When/if this matters, use `semver`.\n        version: \"tough-cookie@\" + VERSION,\n        // add the store type, to make humans happy:\n        storeType: type,\n        // CookieJar configuration:\n        rejectPublicSuffixes: !!this.rejectPublicSuffixes,\n        // this gets filled from getAllCookies:\n        cookies: []\n    };\n    if (!(this.store.getAllCookies && typeof this.store.getAllCookies === \"function\")) {\n        return cb(new Error(\"store does not support getAllCookies and cannot be serialized\"));\n    }\n    this.store.getAllCookies(function(err, cookies) {\n        if (err) {\n            return cb(err);\n        }\n        serialized.cookies = cookies.map(function(cookie) {\n            // convert to serialized 'raw' cookies\n            cookie = cookie instanceof Cookie ? cookie.toJSON() : cookie;\n            // Remove the index so new ones get assigned during deserialization\n            delete cookie.creationIndex;\n            return cookie;\n        });\n        return cb(null, serialized);\n    });\n};\n// well-known name that JSON.stringify calls\nCookieJar.prototype.toJSON = function() {\n    return this.serializeSync();\n};\n// use the class method CookieJar.deserialize instead of calling this directly\nCAN_BE_SYNC.push(\"_importCookies\");\nCookieJar.prototype._importCookies = function(serialized, cb) {\n    var jar = this;\n    var cookies = serialized.cookies;\n    if (!cookies || !Array.isArray(cookies)) {\n        return cb(new Error(\"serialized jar has no cookies array\"));\n    }\n    cookies = cookies.slice(); // do not modify the original\n    function putNext(err) {\n        if (err) {\n            return cb(err);\n        }\n        if (!cookies.length) {\n            return cb(err, jar);\n        }\n        var cookie;\n        try {\n            cookie = fromJSON(cookies.shift());\n        } catch (e) {\n            return cb(e);\n        }\n        if (cookie === null) {\n            return putNext(null); // skip this cookie\n        }\n        jar.store.putCookie(cookie, putNext);\n    }\n    putNext();\n};\nCookieJar.deserialize = function(strOrObj, store, cb) {\n    if (arguments.length !== 3) {\n        // store is optional\n        cb = store;\n        store = null;\n    }\n    var serialized;\n    if (typeof strOrObj === \"string\") {\n        serialized = jsonParse(strOrObj);\n        if (serialized instanceof Error) {\n            return cb(serialized);\n        }\n    } else {\n        serialized = strOrObj;\n    }\n    var jar = new CookieJar(store, serialized.rejectPublicSuffixes);\n    jar._importCookies(serialized, function(err) {\n        if (err) {\n            return cb(err);\n        }\n        cb(null, jar);\n    });\n};\nCookieJar.deserializeSync = function(strOrObj, store) {\n    var serialized = typeof strOrObj === \"string\" ? JSON.parse(strOrObj) : strOrObj;\n    var jar = new CookieJar(store, serialized.rejectPublicSuffixes);\n    // catch this mistake early:\n    if (!jar.store.synchronous) {\n        throw new Error(\"CookieJar store is not synchronous; use async API instead.\");\n    }\n    jar._importCookiesSync(serialized);\n    return jar;\n};\nCookieJar.fromJSON = CookieJar.deserializeSync;\nCAN_BE_SYNC.push(\"clone\");\nCookieJar.prototype.clone = function(newStore, cb) {\n    if (arguments.length === 1) {\n        cb = newStore;\n        newStore = null;\n    }\n    this.serialize(function(err, serialized) {\n        if (err) {\n            return cb(err);\n        }\n        CookieJar.deserialize(newStore, serialized, cb);\n    });\n};\n// Use a closure to provide a true imperative API for synchronous stores.\nfunction syncWrap(method) {\n    return function() {\n        if (!this.store.synchronous) {\n            throw new Error(\"CookieJar store is not synchronous; use async API instead.\");\n        }\n        var args = Array.prototype.slice.call(arguments);\n        var syncErr, syncResult;\n        args.push(function syncCb(err, result) {\n            syncErr = err;\n            syncResult = result;\n        });\n        this[method].apply(this, args);\n        if (syncErr) {\n            throw syncErr;\n        }\n        return syncResult;\n    };\n}\n// wrap all declared CAN_BE_SYNC methods in the sync wrapper\nCAN_BE_SYNC.forEach(function(method) {\n    CookieJar.prototype[method + \"Sync\"] = syncWrap(method);\n});\nexports.CookieJar = CookieJar;\nexports.Cookie = Cookie;\nexports.Store = Store;\nexports.MemoryCookieStore = MemoryCookieStore;\nexports.parseDate = parseDate;\nexports.formatDate = formatDate;\nexports.parse = parse;\nexports.fromJSON = fromJSON;\nexports.domainMatch = domainMatch;\nexports.defaultPath = defaultPath;\nexports.pathMatch = pathMatch;\nexports.getPublicSuffix = pubsuffix.getPublicSuffix;\nexports.cookieCompare = cookieCompare;\nexports.permuteDomain = __webpack_require__(/*! ./permuteDomain */ \"(ssr)/./node_modules/tough-cookie/lib/permuteDomain.js\").permuteDomain;\nexports.permutePath = permutePath;\nexports.canonicalDomain = canonicalDomain;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tough-cookie/lib/cookie.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tough-cookie/lib/memstore.js":
/*!***************************************************!*\
  !*** ./node_modules/tough-cookie/lib/memstore.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \nvar Store = (__webpack_require__(/*! ./store */ \"(ssr)/./node_modules/tough-cookie/lib/store.js\").Store);\nvar permuteDomain = (__webpack_require__(/*! ./permuteDomain */ \"(ssr)/./node_modules/tough-cookie/lib/permuteDomain.js\").permuteDomain);\nvar pathMatch = (__webpack_require__(/*! ./pathMatch */ \"(ssr)/./node_modules/tough-cookie/lib/pathMatch.js\").pathMatch);\nvar util = __webpack_require__(/*! util */ \"util\");\nfunction MemoryCookieStore() {\n    Store.call(this);\n    this.idx = {};\n}\nutil.inherits(MemoryCookieStore, Store);\nexports.MemoryCookieStore = MemoryCookieStore;\nMemoryCookieStore.prototype.idx = null;\n// Since it's just a struct in RAM, this Store is synchronous\nMemoryCookieStore.prototype.synchronous = true;\n// force a default depth:\nMemoryCookieStore.prototype.inspect = function() {\n    return \"{ idx: \" + util.inspect(this.idx, false, 2) + \" }\";\n};\n// Use the new custom inspection symbol to add the custom inspect function if\n// available.\nif (util.inspect.custom) {\n    MemoryCookieStore.prototype[util.inspect.custom] = MemoryCookieStore.prototype.inspect;\n}\nMemoryCookieStore.prototype.findCookie = function(domain, path, key, cb) {\n    if (!this.idx[domain]) {\n        return cb(null, undefined);\n    }\n    if (!this.idx[domain][path]) {\n        return cb(null, undefined);\n    }\n    return cb(null, this.idx[domain][path][key] || null);\n};\nMemoryCookieStore.prototype.findCookies = function(domain, path, cb) {\n    var results = [];\n    if (!domain) {\n        return cb(null, []);\n    }\n    var pathMatcher;\n    if (!path) {\n        // null means \"all paths\"\n        pathMatcher = function matchAll(domainIndex) {\n            for(var curPath in domainIndex){\n                var pathIndex = domainIndex[curPath];\n                for(var key in pathIndex){\n                    results.push(pathIndex[key]);\n                }\n            }\n        };\n    } else {\n        pathMatcher = function matchRFC(domainIndex) {\n            //NOTE: we should use path-match algorithm from S5.1.4 here\n            //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)\n            Object.keys(domainIndex).forEach(function(cookiePath) {\n                if (pathMatch(path, cookiePath)) {\n                    var pathIndex = domainIndex[cookiePath];\n                    for(var key in pathIndex){\n                        results.push(pathIndex[key]);\n                    }\n                }\n            });\n        };\n    }\n    var domains = permuteDomain(domain) || [\n        domain\n    ];\n    var idx = this.idx;\n    domains.forEach(function(curDomain) {\n        var domainIndex = idx[curDomain];\n        if (!domainIndex) {\n            return;\n        }\n        pathMatcher(domainIndex);\n    });\n    cb(null, results);\n};\nMemoryCookieStore.prototype.putCookie = function(cookie, cb) {\n    if (!this.idx[cookie.domain]) {\n        this.idx[cookie.domain] = {};\n    }\n    if (!this.idx[cookie.domain][cookie.path]) {\n        this.idx[cookie.domain][cookie.path] = {};\n    }\n    this.idx[cookie.domain][cookie.path][cookie.key] = cookie;\n    cb(null);\n};\nMemoryCookieStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {\n    // updateCookie() may avoid updating cookies that are identical.  For example,\n    // lastAccessed may not be important to some stores and an equality\n    // comparison could exclude that field.\n    this.putCookie(newCookie, cb);\n};\nMemoryCookieStore.prototype.removeCookie = function(domain, path, key, cb) {\n    if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {\n        delete this.idx[domain][path][key];\n    }\n    cb(null);\n};\nMemoryCookieStore.prototype.removeCookies = function(domain, path, cb) {\n    if (this.idx[domain]) {\n        if (path) {\n            delete this.idx[domain][path];\n        } else {\n            delete this.idx[domain];\n        }\n    }\n    return cb(null);\n};\nMemoryCookieStore.prototype.getAllCookies = function(cb) {\n    var cookies = [];\n    var idx = this.idx;\n    var domains = Object.keys(idx);\n    domains.forEach(function(domain) {\n        var paths = Object.keys(idx[domain]);\n        paths.forEach(function(path) {\n            var keys = Object.keys(idx[domain][path]);\n            keys.forEach(function(key) {\n                if (key !== null) {\n                    cookies.push(idx[domain][path][key]);\n                }\n            });\n        });\n    });\n    // Sort by creationIndex so deserializing retains the creation order.\n    // When implementing your own store, this SHOULD retain the order too\n    cookies.sort(function(a, b) {\n        return (a.creationIndex || 0) - (b.creationIndex || 0);\n    });\n    cb(null, cookies);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9tZW1zdG9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E2QkMsR0FDRDtBQUNBLElBQUlBLFFBQVFDLDRGQUF3QjtBQUNwQyxJQUFJQyxnQkFBZ0JELG9IQUF3QztBQUM1RCxJQUFJRSxZQUFZRix3R0FBZ0M7QUFDaEQsSUFBSUcsT0FBT0gsbUJBQU9BLENBQUM7QUFFbkIsU0FBU0k7SUFDUEwsTUFBTU0sSUFBSSxDQUFDLElBQUk7SUFDZixJQUFJLENBQUNDLEdBQUcsR0FBRyxDQUFDO0FBQ2Q7QUFDQUgsS0FBS0ksUUFBUSxDQUFDSCxtQkFBbUJMO0FBQ2pDUyx5QkFBeUIsR0FBR0o7QUFDNUJBLGtCQUFrQkssU0FBUyxDQUFDSCxHQUFHLEdBQUc7QUFFbEMsNkRBQTZEO0FBQzdERixrQkFBa0JLLFNBQVMsQ0FBQ0MsV0FBVyxHQUFHO0FBRTFDLHlCQUF5QjtBQUN6Qk4sa0JBQWtCSyxTQUFTLENBQUNFLE9BQU8sR0FBRztJQUNwQyxPQUFPLFlBQVVSLEtBQUtRLE9BQU8sQ0FBQyxJQUFJLENBQUNMLEdBQUcsRUFBRSxPQUFPLEtBQUc7QUFDcEQ7QUFFQSw2RUFBNkU7QUFDN0UsYUFBYTtBQUNiLElBQUlILEtBQUtRLE9BQU8sQ0FBQ0MsTUFBTSxFQUFFO0lBQ3ZCUixrQkFBa0JLLFNBQVMsQ0FBQ04sS0FBS1EsT0FBTyxDQUFDQyxNQUFNLENBQUMsR0FBR1Isa0JBQWtCSyxTQUFTLENBQUNFLE9BQU87QUFDeEY7QUFFQVAsa0JBQWtCSyxTQUFTLENBQUNJLFVBQVUsR0FBRyxTQUFTQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxFQUFFO0lBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUNYLEdBQUcsQ0FBQ1EsT0FBTyxFQUFFO1FBQ3JCLE9BQU9HLEdBQUcsTUFBS0M7SUFDakI7SUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDWixHQUFHLENBQUNRLE9BQU8sQ0FBQ0MsS0FBSyxFQUFFO1FBQzNCLE9BQU9FLEdBQUcsTUFBS0M7SUFDakI7SUFDQSxPQUFPRCxHQUFHLE1BQUssSUFBSSxDQUFDWCxHQUFHLENBQUNRLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLElBQUU7QUFDOUM7QUFFQVosa0JBQWtCSyxTQUFTLENBQUNVLFdBQVcsR0FBRyxTQUFTTCxNQUFNLEVBQUVDLElBQUksRUFBRUUsRUFBRTtJQUNqRSxJQUFJRyxVQUFVLEVBQUU7SUFDaEIsSUFBSSxDQUFDTixRQUFRO1FBQ1gsT0FBT0csR0FBRyxNQUFLLEVBQUU7SUFDbkI7SUFFQSxJQUFJSTtJQUNKLElBQUksQ0FBQ04sTUFBTTtRQUNULHlCQUF5QjtRQUN6Qk0sY0FBYyxTQUFTQyxTQUFTQyxXQUFXO1lBQ3pDLElBQUssSUFBSUMsV0FBV0QsWUFBYTtnQkFDL0IsSUFBSUUsWUFBWUYsV0FBVyxDQUFDQyxRQUFRO2dCQUNwQyxJQUFLLElBQUlSLE9BQU9TLFVBQVc7b0JBQ3pCTCxRQUFRTSxJQUFJLENBQUNELFNBQVMsQ0FBQ1QsSUFBSTtnQkFDN0I7WUFDRjtRQUNGO0lBRUYsT0FBTztRQUNMSyxjQUFjLFNBQVNNLFNBQVNKLFdBQVc7WUFDeEMsMkRBQTJEO1lBQzNELHdJQUF3STtZQUN4SUssT0FBT0MsSUFBSSxDQUFDTixhQUFhTyxPQUFPLENBQUMsU0FBVUMsVUFBVTtnQkFDbkQsSUFBSTdCLFVBQVVhLE1BQU1nQixhQUFhO29CQUMvQixJQUFJTixZQUFZRixXQUFXLENBQUNRLFdBQVc7b0JBRXZDLElBQUssSUFBSWYsT0FBT1MsVUFBVzt3QkFDekJMLFFBQVFNLElBQUksQ0FBQ0QsU0FBUyxDQUFDVCxJQUFJO29CQUM3QjtnQkFDRjtZQUNGO1FBQ0Y7SUFDSDtJQUVBLElBQUlnQixVQUFVL0IsY0FBY2EsV0FBVztRQUFDQTtLQUFPO0lBQy9DLElBQUlSLE1BQU0sSUFBSSxDQUFDQSxHQUFHO0lBQ2xCMEIsUUFBUUYsT0FBTyxDQUFDLFNBQVNHLFNBQVM7UUFDaEMsSUFBSVYsY0FBY2pCLEdBQUcsQ0FBQzJCLFVBQVU7UUFDaEMsSUFBSSxDQUFDVixhQUFhO1lBQ2hCO1FBQ0Y7UUFDQUYsWUFBWUU7SUFDZDtJQUVBTixHQUFHLE1BQUtHO0FBQ1Y7QUFFQWhCLGtCQUFrQkssU0FBUyxDQUFDeUIsU0FBUyxHQUFHLFNBQVNDLE1BQU0sRUFBRWxCLEVBQUU7SUFDekQsSUFBSSxDQUFDLElBQUksQ0FBQ1gsR0FBRyxDQUFDNkIsT0FBT3JCLE1BQU0sQ0FBQyxFQUFFO1FBQzVCLElBQUksQ0FBQ1IsR0FBRyxDQUFDNkIsT0FBT3JCLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDN0I7SUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDUixHQUFHLENBQUM2QixPQUFPckIsTUFBTSxDQUFDLENBQUNxQixPQUFPcEIsSUFBSSxDQUFDLEVBQUU7UUFDekMsSUFBSSxDQUFDVCxHQUFHLENBQUM2QixPQUFPckIsTUFBTSxDQUFDLENBQUNxQixPQUFPcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUMxQztJQUNBLElBQUksQ0FBQ1QsR0FBRyxDQUFDNkIsT0FBT3JCLE1BQU0sQ0FBQyxDQUFDcUIsT0FBT3BCLElBQUksQ0FBQyxDQUFDb0IsT0FBT25CLEdBQUcsQ0FBQyxHQUFHbUI7SUFDbkRsQixHQUFHO0FBQ0w7QUFFQWIsa0JBQWtCSyxTQUFTLENBQUMyQixZQUFZLEdBQUcsU0FBU0MsU0FBUyxFQUFFQyxTQUFTLEVBQUVyQixFQUFFO0lBQzFFLDhFQUE4RTtJQUM5RSxtRUFBbUU7SUFDbkUsdUNBQXVDO0lBQ3ZDLElBQUksQ0FBQ2lCLFNBQVMsQ0FBQ0ksV0FBVXJCO0FBQzNCO0FBRUFiLGtCQUFrQkssU0FBUyxDQUFDOEIsWUFBWSxHQUFHLFNBQVN6QixNQUFNLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxFQUFFO0lBQ3ZFLElBQUksSUFBSSxDQUFDWCxHQUFHLENBQUNRLE9BQU8sSUFBSSxJQUFJLENBQUNSLEdBQUcsQ0FBQ1EsT0FBTyxDQUFDQyxLQUFLLElBQUksSUFBSSxDQUFDVCxHQUFHLENBQUNRLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLEVBQUU7UUFDN0UsT0FBTyxJQUFJLENBQUNWLEdBQUcsQ0FBQ1EsT0FBTyxDQUFDQyxLQUFLLENBQUNDLElBQUk7SUFDcEM7SUFDQUMsR0FBRztBQUNMO0FBRUFiLGtCQUFrQkssU0FBUyxDQUFDK0IsYUFBYSxHQUFHLFNBQVMxQixNQUFNLEVBQUVDLElBQUksRUFBRUUsRUFBRTtJQUNuRSxJQUFJLElBQUksQ0FBQ1gsR0FBRyxDQUFDUSxPQUFPLEVBQUU7UUFDcEIsSUFBSUMsTUFBTTtZQUNSLE9BQU8sSUFBSSxDQUFDVCxHQUFHLENBQUNRLE9BQU8sQ0FBQ0MsS0FBSztRQUMvQixPQUFPO1lBQ0wsT0FBTyxJQUFJLENBQUNULEdBQUcsQ0FBQ1EsT0FBTztRQUN6QjtJQUNGO0lBQ0EsT0FBT0csR0FBRztBQUNaO0FBRUFiLGtCQUFrQkssU0FBUyxDQUFDZ0MsYUFBYSxHQUFHLFNBQVN4QixFQUFFO0lBQ3JELElBQUl5QixVQUFVLEVBQUU7SUFDaEIsSUFBSXBDLE1BQU0sSUFBSSxDQUFDQSxHQUFHO0lBRWxCLElBQUkwQixVQUFVSixPQUFPQyxJQUFJLENBQUN2QjtJQUMxQjBCLFFBQVFGLE9BQU8sQ0FBQyxTQUFTaEIsTUFBTTtRQUM3QixJQUFJNkIsUUFBUWYsT0FBT0MsSUFBSSxDQUFDdkIsR0FBRyxDQUFDUSxPQUFPO1FBQ25DNkIsTUFBTWIsT0FBTyxDQUFDLFNBQVNmLElBQUk7WUFDekIsSUFBSWMsT0FBT0QsT0FBT0MsSUFBSSxDQUFDdkIsR0FBRyxDQUFDUSxPQUFPLENBQUNDLEtBQUs7WUFDeENjLEtBQUtDLE9BQU8sQ0FBQyxTQUFTZCxHQUFHO2dCQUN2QixJQUFJQSxRQUFRLE1BQU07b0JBQ2hCMEIsUUFBUWhCLElBQUksQ0FBQ3BCLEdBQUcsQ0FBQ1EsT0FBTyxDQUFDQyxLQUFLLENBQUNDLElBQUk7Z0JBQ3JDO1lBQ0Y7UUFDRjtJQUNGO0lBRUEscUVBQXFFO0lBQ3JFLHFFQUFxRTtJQUNyRTBCLFFBQVFFLElBQUksQ0FBQyxTQUFTQyxDQUFDLEVBQUNDLENBQUM7UUFDdkIsT0FBTyxDQUFDRCxFQUFFRSxhQUFhLElBQUUsS0FBTUQsQ0FBQUEsRUFBRUMsYUFBYSxJQUFFO0lBQ2xEO0lBRUE5QixHQUFHLE1BQU15QjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9tZW1zdG9yZS5qcz8xYTE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBTYWxlc2ZvcmNlLmNvbSwgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuICogYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiBTYWxlc2ZvcmNlLmNvbSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5XG4gKiBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuICogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4gKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuICogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiAqIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xudmFyIFN0b3JlID0gcmVxdWlyZSgnLi9zdG9yZScpLlN0b3JlO1xudmFyIHBlcm11dGVEb21haW4gPSByZXF1aXJlKCcuL3Blcm11dGVEb21haW4nKS5wZXJtdXRlRG9tYWluO1xudmFyIHBhdGhNYXRjaCA9IHJlcXVpcmUoJy4vcGF0aE1hdGNoJykucGF0aE1hdGNoO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIE1lbW9yeUNvb2tpZVN0b3JlKCkge1xuICBTdG9yZS5jYWxsKHRoaXMpO1xuICB0aGlzLmlkeCA9IHt9O1xufVxudXRpbC5pbmhlcml0cyhNZW1vcnlDb29raWVTdG9yZSwgU3RvcmUpO1xuZXhwb3J0cy5NZW1vcnlDb29raWVTdG9yZSA9IE1lbW9yeUNvb2tpZVN0b3JlO1xuTWVtb3J5Q29va2llU3RvcmUucHJvdG90eXBlLmlkeCA9IG51bGw7XG5cbi8vIFNpbmNlIGl0J3MganVzdCBhIHN0cnVjdCBpbiBSQU0sIHRoaXMgU3RvcmUgaXMgc3luY2hyb25vdXNcbk1lbW9yeUNvb2tpZVN0b3JlLnByb3RvdHlwZS5zeW5jaHJvbm91cyA9IHRydWU7XG5cbi8vIGZvcmNlIGEgZGVmYXVsdCBkZXB0aDpcbk1lbW9yeUNvb2tpZVN0b3JlLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBcInsgaWR4OiBcIit1dGlsLmluc3BlY3QodGhpcy5pZHgsIGZhbHNlLCAyKSsnIH0nO1xufTtcblxuLy8gVXNlIHRoZSBuZXcgY3VzdG9tIGluc3BlY3Rpb24gc3ltYm9sIHRvIGFkZCB0aGUgY3VzdG9tIGluc3BlY3QgZnVuY3Rpb24gaWZcbi8vIGF2YWlsYWJsZS5cbmlmICh1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIE1lbW9yeUNvb2tpZVN0b3JlLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IE1lbW9yeUNvb2tpZVN0b3JlLnByb3RvdHlwZS5pbnNwZWN0O1xufVxuXG5NZW1vcnlDb29raWVTdG9yZS5wcm90b3R5cGUuZmluZENvb2tpZSA9IGZ1bmN0aW9uKGRvbWFpbiwgcGF0aCwga2V5LCBjYikge1xuICBpZiAoIXRoaXMuaWR4W2RvbWFpbl0pIHtcbiAgICByZXR1cm4gY2IobnVsbCx1bmRlZmluZWQpO1xuICB9XG4gIGlmICghdGhpcy5pZHhbZG9tYWluXVtwYXRoXSkge1xuICAgIHJldHVybiBjYihudWxsLHVuZGVmaW5lZCk7XG4gIH1cbiAgcmV0dXJuIGNiKG51bGwsdGhpcy5pZHhbZG9tYWluXVtwYXRoXVtrZXldfHxudWxsKTtcbn07XG5cbk1lbW9yeUNvb2tpZVN0b3JlLnByb3RvdHlwZS5maW5kQ29va2llcyA9IGZ1bmN0aW9uKGRvbWFpbiwgcGF0aCwgY2IpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgaWYgKCFkb21haW4pIHtcbiAgICByZXR1cm4gY2IobnVsbCxbXSk7XG4gIH1cblxuICB2YXIgcGF0aE1hdGNoZXI7XG4gIGlmICghcGF0aCkge1xuICAgIC8vIG51bGwgbWVhbnMgXCJhbGwgcGF0aHNcIlxuICAgIHBhdGhNYXRjaGVyID0gZnVuY3Rpb24gbWF0Y2hBbGwoZG9tYWluSW5kZXgpIHtcbiAgICAgIGZvciAodmFyIGN1clBhdGggaW4gZG9tYWluSW5kZXgpIHtcbiAgICAgICAgdmFyIHBhdGhJbmRleCA9IGRvbWFpbkluZGV4W2N1clBhdGhdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGF0aEluZGV4KSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHBhdGhJbmRleFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgfSBlbHNlIHtcbiAgICBwYXRoTWF0Y2hlciA9IGZ1bmN0aW9uIG1hdGNoUkZDKGRvbWFpbkluZGV4KSB7XG4gICAgICAgLy9OT1RFOiB3ZSBzaG91bGQgdXNlIHBhdGgtbWF0Y2ggYWxnb3JpdGhtIGZyb20gUzUuMS40IGhlcmVcbiAgICAgICAvLyhzZWUgOiBodHRwczovL2dpdGh1Yi5jb20vQ2hyb21pdW1XZWJBcHBzL2Nocm9taXVtL2Jsb2IvYjNkM2I0ZGE4YmI5NGMxYjJlMDYxNjAwZGYxMDZkNTkwZmRhMzYyMC9uZXQvY29va2llcy9jYW5vbmljYWxfY29va2llLmNjI0wyOTkpXG4gICAgICAgT2JqZWN0LmtleXMoZG9tYWluSW5kZXgpLmZvckVhY2goZnVuY3Rpb24gKGNvb2tpZVBhdGgpIHtcbiAgICAgICAgIGlmIChwYXRoTWF0Y2gocGF0aCwgY29va2llUGF0aCkpIHtcbiAgICAgICAgICAgdmFyIHBhdGhJbmRleCA9IGRvbWFpbkluZGV4W2Nvb2tpZVBhdGhdO1xuXG4gICAgICAgICAgIGZvciAodmFyIGtleSBpbiBwYXRoSW5kZXgpIHtcbiAgICAgICAgICAgICByZXN1bHRzLnB1c2gocGF0aEluZGV4W2tleV0pO1xuICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgfSk7XG4gICAgIH07XG4gIH1cblxuICB2YXIgZG9tYWlucyA9IHBlcm11dGVEb21haW4oZG9tYWluKSB8fCBbZG9tYWluXTtcbiAgdmFyIGlkeCA9IHRoaXMuaWR4O1xuICBkb21haW5zLmZvckVhY2goZnVuY3Rpb24oY3VyRG9tYWluKSB7XG4gICAgdmFyIGRvbWFpbkluZGV4ID0gaWR4W2N1ckRvbWFpbl07XG4gICAgaWYgKCFkb21haW5JbmRleCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwYXRoTWF0Y2hlcihkb21haW5JbmRleCk7XG4gIH0pO1xuXG4gIGNiKG51bGwscmVzdWx0cyk7XG59O1xuXG5NZW1vcnlDb29raWVTdG9yZS5wcm90b3R5cGUucHV0Q29va2llID0gZnVuY3Rpb24oY29va2llLCBjYikge1xuICBpZiAoIXRoaXMuaWR4W2Nvb2tpZS5kb21haW5dKSB7XG4gICAgdGhpcy5pZHhbY29va2llLmRvbWFpbl0gPSB7fTtcbiAgfVxuICBpZiAoIXRoaXMuaWR4W2Nvb2tpZS5kb21haW5dW2Nvb2tpZS5wYXRoXSkge1xuICAgIHRoaXMuaWR4W2Nvb2tpZS5kb21haW5dW2Nvb2tpZS5wYXRoXSA9IHt9O1xuICB9XG4gIHRoaXMuaWR4W2Nvb2tpZS5kb21haW5dW2Nvb2tpZS5wYXRoXVtjb29raWUua2V5XSA9IGNvb2tpZTtcbiAgY2IobnVsbCk7XG59O1xuXG5NZW1vcnlDb29raWVTdG9yZS5wcm90b3R5cGUudXBkYXRlQ29va2llID0gZnVuY3Rpb24ob2xkQ29va2llLCBuZXdDb29raWUsIGNiKSB7XG4gIC8vIHVwZGF0ZUNvb2tpZSgpIG1heSBhdm9pZCB1cGRhdGluZyBjb29raWVzIHRoYXQgYXJlIGlkZW50aWNhbC4gIEZvciBleGFtcGxlLFxuICAvLyBsYXN0QWNjZXNzZWQgbWF5IG5vdCBiZSBpbXBvcnRhbnQgdG8gc29tZSBzdG9yZXMgYW5kIGFuIGVxdWFsaXR5XG4gIC8vIGNvbXBhcmlzb24gY291bGQgZXhjbHVkZSB0aGF0IGZpZWxkLlxuICB0aGlzLnB1dENvb2tpZShuZXdDb29raWUsY2IpO1xufTtcblxuTWVtb3J5Q29va2llU3RvcmUucHJvdG90eXBlLnJlbW92ZUNvb2tpZSA9IGZ1bmN0aW9uKGRvbWFpbiwgcGF0aCwga2V5LCBjYikge1xuICBpZiAodGhpcy5pZHhbZG9tYWluXSAmJiB0aGlzLmlkeFtkb21haW5dW3BhdGhdICYmIHRoaXMuaWR4W2RvbWFpbl1bcGF0aF1ba2V5XSkge1xuICAgIGRlbGV0ZSB0aGlzLmlkeFtkb21haW5dW3BhdGhdW2tleV07XG4gIH1cbiAgY2IobnVsbCk7XG59O1xuXG5NZW1vcnlDb29raWVTdG9yZS5wcm90b3R5cGUucmVtb3ZlQ29va2llcyA9IGZ1bmN0aW9uKGRvbWFpbiwgcGF0aCwgY2IpIHtcbiAgaWYgKHRoaXMuaWR4W2RvbWFpbl0pIHtcbiAgICBpZiAocGF0aCkge1xuICAgICAgZGVsZXRlIHRoaXMuaWR4W2RvbWFpbl1bcGF0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmlkeFtkb21haW5dO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2IobnVsbCk7XG59O1xuXG5NZW1vcnlDb29raWVTdG9yZS5wcm90b3R5cGUuZ2V0QWxsQ29va2llcyA9IGZ1bmN0aW9uKGNiKSB7XG4gIHZhciBjb29raWVzID0gW107XG4gIHZhciBpZHggPSB0aGlzLmlkeDtcblxuICB2YXIgZG9tYWlucyA9IE9iamVjdC5rZXlzKGlkeCk7XG4gIGRvbWFpbnMuZm9yRWFjaChmdW5jdGlvbihkb21haW4pIHtcbiAgICB2YXIgcGF0aHMgPSBPYmplY3Qua2V5cyhpZHhbZG9tYWluXSk7XG4gICAgcGF0aHMuZm9yRWFjaChmdW5jdGlvbihwYXRoKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGlkeFtkb21haW5dW3BhdGhdKTtcbiAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvb2tpZXMucHVzaChpZHhbZG9tYWluXVtwYXRoXVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIFNvcnQgYnkgY3JlYXRpb25JbmRleCBzbyBkZXNlcmlhbGl6aW5nIHJldGFpbnMgdGhlIGNyZWF0aW9uIG9yZGVyLlxuICAvLyBXaGVuIGltcGxlbWVudGluZyB5b3VyIG93biBzdG9yZSwgdGhpcyBTSE9VTEQgcmV0YWluIHRoZSBvcmRlciB0b29cbiAgY29va2llcy5zb3J0KGZ1bmN0aW9uKGEsYikge1xuICAgIHJldHVybiAoYS5jcmVhdGlvbkluZGV4fHwwKSAtIChiLmNyZWF0aW9uSW5kZXh8fDApO1xuICB9KTtcblxuICBjYihudWxsLCBjb29raWVzKTtcbn07XG4iXSwibmFtZXMiOlsiU3RvcmUiLCJyZXF1aXJlIiwicGVybXV0ZURvbWFpbiIsInBhdGhNYXRjaCIsInV0aWwiLCJNZW1vcnlDb29raWVTdG9yZSIsImNhbGwiLCJpZHgiLCJpbmhlcml0cyIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJzeW5jaHJvbm91cyIsImluc3BlY3QiLCJjdXN0b20iLCJmaW5kQ29va2llIiwiZG9tYWluIiwicGF0aCIsImtleSIsImNiIiwidW5kZWZpbmVkIiwiZmluZENvb2tpZXMiLCJyZXN1bHRzIiwicGF0aE1hdGNoZXIiLCJtYXRjaEFsbCIsImRvbWFpbkluZGV4IiwiY3VyUGF0aCIsInBhdGhJbmRleCIsInB1c2giLCJtYXRjaFJGQyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiY29va2llUGF0aCIsImRvbWFpbnMiLCJjdXJEb21haW4iLCJwdXRDb29raWUiLCJjb29raWUiLCJ1cGRhdGVDb29raWUiLCJvbGRDb29raWUiLCJuZXdDb29raWUiLCJyZW1vdmVDb29raWUiLCJyZW1vdmVDb29raWVzIiwiZ2V0QWxsQ29va2llcyIsImNvb2tpZXMiLCJwYXRocyIsInNvcnQiLCJhIiwiYiIsImNyZWF0aW9uSW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tough-cookie/lib/memstore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tough-cookie/lib/pathMatch.js":
/*!****************************************************!*\
  !*** ./node_modules/tough-cookie/lib/pathMatch.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \n/*\n * \"A request-path path-matches a given cookie-path if at least one of the\n * following conditions holds:\"\n */ function pathMatch(reqPath, cookiePath) {\n    // \"o  The cookie-path and the request-path are identical.\"\n    if (cookiePath === reqPath) {\n        return true;\n    }\n    var idx = reqPath.indexOf(cookiePath);\n    if (idx === 0) {\n        // \"o  The cookie-path is a prefix of the request-path, and the last\n        // character of the cookie-path is %x2F (\"/\").\"\n        if (cookiePath.substr(-1) === \"/\") {\n            return true;\n        }\n        // \" o  The cookie-path is a prefix of the request-path, and the first\n        // character of the request-path that is not included in the cookie- path\n        // is a %x2F (\"/\") character.\"\n        if (reqPath.substr(cookiePath.length, 1) === \"/\") {\n            return true;\n        }\n    }\n    return false;\n}\nexports.pathMatch = pathMatch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wYXRoTWF0Y2guanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNkJDLEdBQ1k7QUFDYjs7O0NBR0MsR0FDRCxTQUFTQSxVQUFXQyxPQUFPLEVBQUVDLFVBQVU7SUFDckMsMkRBQTJEO0lBQzNELElBQUlBLGVBQWVELFNBQVM7UUFDMUIsT0FBTztJQUNUO0lBRUEsSUFBSUUsTUFBTUYsUUFBUUcsT0FBTyxDQUFDRjtJQUMxQixJQUFJQyxRQUFRLEdBQUc7UUFDYixvRUFBb0U7UUFDcEUsK0NBQStDO1FBQy9DLElBQUlELFdBQVdHLE1BQU0sQ0FBQyxDQUFDLE9BQU8sS0FBSztZQUNqQyxPQUFPO1FBQ1Q7UUFFQSxzRUFBc0U7UUFDdEUseUVBQXlFO1FBQ3pFLDhCQUE4QjtRQUM5QixJQUFJSixRQUFRSSxNQUFNLENBQUNILFdBQVdJLE1BQU0sRUFBRSxPQUFPLEtBQUs7WUFDaEQsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPO0FBQ1Q7QUFFQUMsaUJBQWlCLEdBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wYXRoTWF0Y2guanM/Njc5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgU2FsZXNmb3JjZS5jb20sIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbiAqIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgU2FsZXNmb3JjZS5jb20gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heVxuICogYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4gKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4gKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuICogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuICogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiAqIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuICogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiAqIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4gKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuICogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblwidXNlIHN0cmljdFwiO1xuLypcbiAqIFwiQSByZXF1ZXN0LXBhdGggcGF0aC1tYXRjaGVzIGEgZ2l2ZW4gY29va2llLXBhdGggaWYgYXQgbGVhc3Qgb25lIG9mIHRoZVxuICogZm9sbG93aW5nIGNvbmRpdGlvbnMgaG9sZHM6XCJcbiAqL1xuZnVuY3Rpb24gcGF0aE1hdGNoIChyZXFQYXRoLCBjb29raWVQYXRoKSB7XG4gIC8vIFwibyAgVGhlIGNvb2tpZS1wYXRoIGFuZCB0aGUgcmVxdWVzdC1wYXRoIGFyZSBpZGVudGljYWwuXCJcbiAgaWYgKGNvb2tpZVBhdGggPT09IHJlcVBhdGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBpZHggPSByZXFQYXRoLmluZGV4T2YoY29va2llUGF0aCk7XG4gIGlmIChpZHggPT09IDApIHtcbiAgICAvLyBcIm8gIFRoZSBjb29raWUtcGF0aCBpcyBhIHByZWZpeCBvZiB0aGUgcmVxdWVzdC1wYXRoLCBhbmQgdGhlIGxhc3RcbiAgICAvLyBjaGFyYWN0ZXIgb2YgdGhlIGNvb2tpZS1wYXRoIGlzICV4MkYgKFwiL1wiKS5cIlxuICAgIGlmIChjb29raWVQYXRoLnN1YnN0cigtMSkgPT09IFwiL1wiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBcIiBvICBUaGUgY29va2llLXBhdGggaXMgYSBwcmVmaXggb2YgdGhlIHJlcXVlc3QtcGF0aCwgYW5kIHRoZSBmaXJzdFxuICAgIC8vIGNoYXJhY3RlciBvZiB0aGUgcmVxdWVzdC1wYXRoIHRoYXQgaXMgbm90IGluY2x1ZGVkIGluIHRoZSBjb29raWUtIHBhdGhcbiAgICAvLyBpcyBhICV4MkYgKFwiL1wiKSBjaGFyYWN0ZXIuXCJcbiAgICBpZiAocmVxUGF0aC5zdWJzdHIoY29va2llUGF0aC5sZW5ndGgsIDEpID09PSBcIi9cIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnRzLnBhdGhNYXRjaCA9IHBhdGhNYXRjaDtcbiJdLCJuYW1lcyI6WyJwYXRoTWF0Y2giLCJyZXFQYXRoIiwiY29va2llUGF0aCIsImlkeCIsImluZGV4T2YiLCJzdWJzdHIiLCJsZW5ndGgiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tough-cookie/lib/pathMatch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tough-cookie/lib/permuteDomain.js":
/*!********************************************************!*\
  !*** ./node_modules/tough-cookie/lib/permuteDomain.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \nvar pubsuffix = __webpack_require__(/*! ./pubsuffix-psl */ \"(ssr)/./node_modules/tough-cookie/lib/pubsuffix-psl.js\");\n// Gives the permutation of all possible domainMatch()es of a given domain. The\n// array is in shortest-to-longest order.  Handy for indexing.\nfunction permuteDomain(domain) {\n    var pubSuf = pubsuffix.getPublicSuffix(domain);\n    if (!pubSuf) {\n        return null;\n    }\n    if (pubSuf == domain) {\n        return [\n            domain\n        ];\n    }\n    var prefix = domain.slice(0, -(pubSuf.length + 1)); // \".example.com\"\n    var parts = prefix.split(\".\").reverse();\n    var cur = pubSuf;\n    var permutations = [\n        cur\n    ];\n    while(parts.length){\n        cur = parts.shift() + \".\" + cur;\n        permutations.push(cur);\n    }\n    return permutations;\n}\nexports.permuteDomain = permuteDomain;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wZXJtdXRlRG9tYWluLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTZCQyxHQUNZO0FBQ2IsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUM7QUFFeEIsK0VBQStFO0FBQy9FLDhEQUE4RDtBQUM5RCxTQUFTQyxjQUFlQyxNQUFNO0lBQzVCLElBQUlDLFNBQVNKLFVBQVVLLGVBQWUsQ0FBQ0Y7SUFDdkMsSUFBSSxDQUFDQyxRQUFRO1FBQ1gsT0FBTztJQUNUO0lBQ0EsSUFBSUEsVUFBVUQsUUFBUTtRQUNwQixPQUFPO1lBQUNBO1NBQU87SUFDakI7SUFFQSxJQUFJRyxTQUFTSCxPQUFPSSxLQUFLLENBQUMsR0FBRyxDQUFFSCxDQUFBQSxPQUFPSSxNQUFNLEdBQUcsS0FBSyxpQkFBaUI7SUFDckUsSUFBSUMsUUFBUUgsT0FBT0ksS0FBSyxDQUFDLEtBQUtDLE9BQU87SUFDckMsSUFBSUMsTUFBTVI7SUFDVixJQUFJUyxlQUFlO1FBQUNEO0tBQUk7SUFDeEIsTUFBT0gsTUFBTUQsTUFBTSxDQUFFO1FBQ25CSSxNQUFNSCxNQUFNSyxLQUFLLEtBQUssTUFBTUY7UUFDNUJDLGFBQWFFLElBQUksQ0FBQ0g7SUFDcEI7SUFDQSxPQUFPQztBQUNUO0FBRUFHLHFCQUFxQixHQUFHZCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3RvdWdoLWNvb2tpZS9saWIvcGVybXV0ZURvbWFpbi5qcz9kZTY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBTYWxlc2ZvcmNlLmNvbSwgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuICogYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiBTYWxlc2ZvcmNlLmNvbSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5XG4gKiBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuICogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4gKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuICogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiAqIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcHVic3VmZml4ID0gcmVxdWlyZSgnLi9wdWJzdWZmaXgtcHNsJyk7XG5cbi8vIEdpdmVzIHRoZSBwZXJtdXRhdGlvbiBvZiBhbGwgcG9zc2libGUgZG9tYWluTWF0Y2goKWVzIG9mIGEgZ2l2ZW4gZG9tYWluLiBUaGVcbi8vIGFycmF5IGlzIGluIHNob3J0ZXN0LXRvLWxvbmdlc3Qgb3JkZXIuICBIYW5keSBmb3IgaW5kZXhpbmcuXG5mdW5jdGlvbiBwZXJtdXRlRG9tYWluIChkb21haW4pIHtcbiAgdmFyIHB1YlN1ZiA9IHB1YnN1ZmZpeC5nZXRQdWJsaWNTdWZmaXgoZG9tYWluKTtcbiAgaWYgKCFwdWJTdWYpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocHViU3VmID09IGRvbWFpbikge1xuICAgIHJldHVybiBbZG9tYWluXTtcbiAgfVxuXG4gIHZhciBwcmVmaXggPSBkb21haW4uc2xpY2UoMCwgLShwdWJTdWYubGVuZ3RoICsgMSkpOyAvLyBcIi5leGFtcGxlLmNvbVwiXG4gIHZhciBwYXJ0cyA9IHByZWZpeC5zcGxpdCgnLicpLnJldmVyc2UoKTtcbiAgdmFyIGN1ciA9IHB1YlN1ZjtcbiAgdmFyIHBlcm11dGF0aW9ucyA9IFtjdXJdO1xuICB3aGlsZSAocGFydHMubGVuZ3RoKSB7XG4gICAgY3VyID0gcGFydHMuc2hpZnQoKSArICcuJyArIGN1cjtcbiAgICBwZXJtdXRhdGlvbnMucHVzaChjdXIpO1xuICB9XG4gIHJldHVybiBwZXJtdXRhdGlvbnM7XG59XG5cbmV4cG9ydHMucGVybXV0ZURvbWFpbiA9IHBlcm11dGVEb21haW47XG4iXSwibmFtZXMiOlsicHVic3VmZml4IiwicmVxdWlyZSIsInBlcm11dGVEb21haW4iLCJkb21haW4iLCJwdWJTdWYiLCJnZXRQdWJsaWNTdWZmaXgiLCJwcmVmaXgiLCJzbGljZSIsImxlbmd0aCIsInBhcnRzIiwic3BsaXQiLCJyZXZlcnNlIiwiY3VyIiwicGVybXV0YXRpb25zIiwic2hpZnQiLCJwdXNoIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tough-cookie/lib/permuteDomain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tough-cookie/lib/pubsuffix-psl.js":
/*!********************************************************!*\
  !*** ./node_modules/tough-cookie/lib/pubsuffix-psl.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * Copyright (c) 2018, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \nvar psl = __webpack_require__(/*! psl */ \"(ssr)/./node_modules/psl/dist/psl.cjs\");\nfunction getPublicSuffix(domain) {\n    return psl.get(domain);\n}\nexports.getPublicSuffix = getPublicSuffix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wdWJzdWZmaXgtcHNsLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTZCQyxHQUNEO0FBQ0EsSUFBSUEsTUFBTUMsbUJBQU9BLENBQUM7QUFFbEIsU0FBU0MsZ0JBQWdCQyxNQUFNO0lBQzdCLE9BQU9ILElBQUlJLEdBQUcsQ0FBQ0Q7QUFDakI7QUFFQUUsdUJBQXVCLEdBQUdIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wdWJzdWZmaXgtcHNsLmpzPzc3NDciXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTgsIFNhbGVzZm9yY2UuY29tLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gKiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIFNhbGVzZm9yY2UuY29tIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXlcbiAqIGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXRcbiAqIHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuICogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuICogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiAqIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiAqIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiAqIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4gKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiAqIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4gKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuICogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiAqIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG4ndXNlIHN0cmljdCc7XG52YXIgcHNsID0gcmVxdWlyZSgncHNsJyk7XG5cbmZ1bmN0aW9uIGdldFB1YmxpY1N1ZmZpeChkb21haW4pIHtcbiAgcmV0dXJuIHBzbC5nZXQoZG9tYWluKTtcbn1cblxuZXhwb3J0cy5nZXRQdWJsaWNTdWZmaXggPSBnZXRQdWJsaWNTdWZmaXg7XG4iXSwibmFtZXMiOlsicHNsIiwicmVxdWlyZSIsImdldFB1YmxpY1N1ZmZpeCIsImRvbWFpbiIsImdldCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tough-cookie/lib/pubsuffix-psl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tough-cookie/lib/store.js":
/*!************************************************!*\
  !*** ./node_modules/tough-cookie/lib/store.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \n/*jshint unused:false */ function Store() {}\nexports.Store = Store;\n// Stores may be synchronous, but are still required to use a\n// Continuation-Passing Style API.  The CookieJar itself will expose a \"*Sync\"\n// API that converts from synchronous-callbacks to imperative style.\nStore.prototype.synchronous = false;\nStore.prototype.findCookie = function(domain, path, key, cb) {\n    throw new Error(\"findCookie is not implemented\");\n};\nStore.prototype.findCookies = function(domain, path, cb) {\n    throw new Error(\"findCookies is not implemented\");\n};\nStore.prototype.putCookie = function(cookie, cb) {\n    throw new Error(\"putCookie is not implemented\");\n};\nStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {\n    // recommended default implementation:\n    // return this.putCookie(newCookie, cb);\n    throw new Error(\"updateCookie is not implemented\");\n};\nStore.prototype.removeCookie = function(domain, path, key, cb) {\n    throw new Error(\"removeCookie is not implemented\");\n};\nStore.prototype.removeCookies = function(domain, path, cb) {\n    throw new Error(\"removeCookies is not implemented\");\n};\nStore.prototype.getAllCookies = function(cb) {\n    throw new Error(\"getAllCookies is not implemented (therefore jar cannot be serialized)\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9zdG9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E2QkMsR0FDRDtBQUNBLHNCQUFzQixHQUV0QixTQUFTQSxTQUNUO0FBQ0FDLGFBQWEsR0FBR0Q7QUFFaEIsNkRBQTZEO0FBQzdELDhFQUE4RTtBQUM5RSxvRUFBb0U7QUFDcEVBLE1BQU1FLFNBQVMsQ0FBQ0MsV0FBVyxHQUFHO0FBRTlCSCxNQUFNRSxTQUFTLENBQUNFLFVBQVUsR0FBRyxTQUFTQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxFQUFFO0lBQ3pELE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVBVCxNQUFNRSxTQUFTLENBQUNRLFdBQVcsR0FBRyxTQUFTTCxNQUFNLEVBQUVDLElBQUksRUFBRUUsRUFBRTtJQUNyRCxNQUFNLElBQUlDLE1BQU07QUFDbEI7QUFFQVQsTUFBTUUsU0FBUyxDQUFDUyxTQUFTLEdBQUcsU0FBU0MsTUFBTSxFQUFFSixFQUFFO0lBQzdDLE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVBVCxNQUFNRSxTQUFTLENBQUNXLFlBQVksR0FBRyxTQUFTQyxTQUFTLEVBQUVDLFNBQVMsRUFBRVAsRUFBRTtJQUM5RCxzQ0FBc0M7SUFDdEMsd0NBQXdDO0lBQ3hDLE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVBVCxNQUFNRSxTQUFTLENBQUNjLFlBQVksR0FBRyxTQUFTWCxNQUFNLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxFQUFFO0lBQzNELE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVBVCxNQUFNRSxTQUFTLENBQUNlLGFBQWEsR0FBRyxTQUFTWixNQUFNLEVBQUVDLElBQUksRUFBRUUsRUFBRTtJQUN2RCxNQUFNLElBQUlDLE1BQU07QUFDbEI7QUFFQVQsTUFBTUUsU0FBUyxDQUFDZ0IsYUFBYSxHQUFHLFNBQVNWLEVBQUU7SUFDekMsTUFBTSxJQUFJQyxNQUFNO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9zdG9yZS5qcz85OTA2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBTYWxlc2ZvcmNlLmNvbSwgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuICogYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiBTYWxlc2ZvcmNlLmNvbSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5XG4gKiBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuICogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4gKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuICogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiAqIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuLypqc2hpbnQgdW51c2VkOmZhbHNlICovXG5cbmZ1bmN0aW9uIFN0b3JlKCkge1xufVxuZXhwb3J0cy5TdG9yZSA9IFN0b3JlO1xuXG4vLyBTdG9yZXMgbWF5IGJlIHN5bmNocm9ub3VzLCBidXQgYXJlIHN0aWxsIHJlcXVpcmVkIHRvIHVzZSBhXG4vLyBDb250aW51YXRpb24tUGFzc2luZyBTdHlsZSBBUEkuICBUaGUgQ29va2llSmFyIGl0c2VsZiB3aWxsIGV4cG9zZSBhIFwiKlN5bmNcIlxuLy8gQVBJIHRoYXQgY29udmVydHMgZnJvbSBzeW5jaHJvbm91cy1jYWxsYmFja3MgdG8gaW1wZXJhdGl2ZSBzdHlsZS5cblN0b3JlLnByb3RvdHlwZS5zeW5jaHJvbm91cyA9IGZhbHNlO1xuXG5TdG9yZS5wcm90b3R5cGUuZmluZENvb2tpZSA9IGZ1bmN0aW9uKGRvbWFpbiwgcGF0aCwga2V5LCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2ZpbmRDb29raWUgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZmluZENvb2tpZXMgPSBmdW5jdGlvbihkb21haW4sIHBhdGgsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignZmluZENvb2tpZXMgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucHV0Q29va2llID0gZnVuY3Rpb24oY29va2llLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3B1dENvb2tpZSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS51cGRhdGVDb29raWUgPSBmdW5jdGlvbihvbGRDb29raWUsIG5ld0Nvb2tpZSwgY2IpIHtcbiAgLy8gcmVjb21tZW5kZWQgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbjpcbiAgLy8gcmV0dXJuIHRoaXMucHV0Q29va2llKG5ld0Nvb2tpZSwgY2IpO1xuICB0aHJvdyBuZXcgRXJyb3IoJ3VwZGF0ZUNvb2tpZSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZW1vdmVDb29raWUgPSBmdW5jdGlvbihkb21haW4sIHBhdGgsIGtleSwgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVDb29raWUgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVtb3ZlQ29va2llcyA9IGZ1bmN0aW9uKGRvbWFpbiwgcGF0aCwgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVDb29raWVzIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLmdldEFsbENvb2tpZXMgPSBmdW5jdGlvbihjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2dldEFsbENvb2tpZXMgaXMgbm90IGltcGxlbWVudGVkICh0aGVyZWZvcmUgamFyIGNhbm5vdCBiZSBzZXJpYWxpemVkKScpO1xufTtcbiJdLCJuYW1lcyI6WyJTdG9yZSIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJzeW5jaHJvbm91cyIsImZpbmRDb29raWUiLCJkb21haW4iLCJwYXRoIiwia2V5IiwiY2IiLCJFcnJvciIsImZpbmRDb29raWVzIiwicHV0Q29va2llIiwiY29va2llIiwidXBkYXRlQ29va2llIiwib2xkQ29va2llIiwibmV3Q29va2llIiwicmVtb3ZlQ29va2llIiwicmVtb3ZlQ29va2llcyIsImdldEFsbENvb2tpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tough-cookie/lib/store.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/lib/cookie.js":
/*!*************************************************!*\
  !*** ./node_modules/tough-cookie/lib/cookie.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \nvar net = __webpack_require__(/*! net */ \"net\");\nvar urlParse = (__webpack_require__(/*! url */ \"url\").parse);\nvar util = __webpack_require__(/*! util */ \"util\");\nvar pubsuffix = __webpack_require__(/*! ./pubsuffix-psl */ \"(rsc)/./node_modules/tough-cookie/lib/pubsuffix-psl.js\");\nvar Store = (__webpack_require__(/*! ./store */ \"(rsc)/./node_modules/tough-cookie/lib/store.js\").Store);\nvar MemoryCookieStore = (__webpack_require__(/*! ./memstore */ \"(rsc)/./node_modules/tough-cookie/lib/memstore.js\").MemoryCookieStore);\nvar pathMatch = (__webpack_require__(/*! ./pathMatch */ \"(rsc)/./node_modules/tough-cookie/lib/pathMatch.js\").pathMatch);\nvar VERSION = (__webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/tough-cookie/package.json\").version);\nvar punycode;\ntry {\n    punycode = __webpack_require__(/*! punycode */ \"punycode\");\n} catch (e) {\n    console.warn(\"tough-cookie: can't load punycode; won't use punycode for domain normalization\");\n}\n// From RFC6265 S4.1.1\n// note that it excludes \\x3B \";\"\nvar COOKIE_OCTETS = /^[\\x21\\x23-\\x2B\\x2D-\\x3A\\x3C-\\x5B\\x5D-\\x7E]+$/;\nvar CONTROL_CHARS = /[\\x00-\\x1F]/;\n// From Chromium // '\\r', '\\n' and '\\0' should be treated as a terminator in\n// the \"relaxed\" mode, see:\n// https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60\nvar TERMINATORS = [\n    \"\\n\",\n    \"\\r\",\n    \"\\x00\"\n];\n// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or \";\"'\n// Note ';' is \\x3B\nvar PATH_VALUE = /[\\x20-\\x3A\\x3C-\\x7E]+/;\n// date-time parsing constants (RFC6265 S5.1.1)\nvar DATE_DELIM = /[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]/;\nvar MONTH_TO_NUM = {\n    jan: 0,\n    feb: 1,\n    mar: 2,\n    apr: 3,\n    may: 4,\n    jun: 5,\n    jul: 6,\n    aug: 7,\n    sep: 8,\n    oct: 9,\n    nov: 10,\n    dec: 11\n};\nvar NUM_TO_MONTH = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\nvar NUM_TO_DAY = [\n    \"Sun\",\n    \"Mon\",\n    \"Tue\",\n    \"Wed\",\n    \"Thu\",\n    \"Fri\",\n    \"Sat\"\n];\nvar MAX_TIME = 2147483647000; // 31-bit max\nvar MIN_TIME = 0; // 31-bit min\n/*\n * Parses a Natural number (i.e., non-negative integer) with either the\n *    <min>*<max>DIGIT ( non-digit *OCTET )\n * or\n *    <min>*<max>DIGIT\n * grammar (RFC6265 S5.1.1).\n *\n * The \"trailingOK\" boolean controls if the grammar accepts a\n * \"( non-digit *OCTET )\" trailer.\n */ function parseDigits(token, minDigits, maxDigits, trailingOK) {\n    var count = 0;\n    while(count < token.length){\n        var c = token.charCodeAt(count);\n        // \"non-digit = %x00-2F / %x3A-FF\"\n        if (c <= 0x2F || c >= 0x3A) {\n            break;\n        }\n        count++;\n    }\n    // constrain to a minimum and maximum number of digits.\n    if (count < minDigits || count > maxDigits) {\n        return null;\n    }\n    if (!trailingOK && count != token.length) {\n        return null;\n    }\n    return parseInt(token.substr(0, count), 10);\n}\nfunction parseTime(token) {\n    var parts = token.split(\":\");\n    var result = [\n        0,\n        0,\n        0\n    ];\n    /* RF6256 S5.1.1:\n   *      time            = hms-time ( non-digit *OCTET )\n   *      hms-time        = time-field \":\" time-field \":\" time-field\n   *      time-field      = 1*2DIGIT\n   */ if (parts.length !== 3) {\n        return null;\n    }\n    for(var i = 0; i < 3; i++){\n        // \"time-field\" must be strictly \"1*2DIGIT\", HOWEVER, \"hms-time\" can be\n        // followed by \"( non-digit *OCTET )\" so therefore the last time-field can\n        // have a trailer\n        var trailingOK = i == 2;\n        var num = parseDigits(parts[i], 1, 2, trailingOK);\n        if (num === null) {\n            return null;\n        }\n        result[i] = num;\n    }\n    return result;\n}\nfunction parseMonth(token) {\n    token = String(token).substr(0, 3).toLowerCase();\n    var num = MONTH_TO_NUM[token];\n    return num >= 0 ? num : null;\n}\n/*\n * RFC6265 S5.1.1 date parser (see RFC for full grammar)\n */ function parseDate(str) {\n    if (!str) {\n        return;\n    }\n    /* RFC6265 S5.1.1:\n   * 2. Process each date-token sequentially in the order the date-tokens\n   * appear in the cookie-date\n   */ var tokens = str.split(DATE_DELIM);\n    if (!tokens) {\n        return;\n    }\n    var hour = null;\n    var minute = null;\n    var second = null;\n    var dayOfMonth = null;\n    var month = null;\n    var year = null;\n    for(var i = 0; i < tokens.length; i++){\n        var token = tokens[i].trim();\n        if (!token.length) {\n            continue;\n        }\n        var result;\n        /* 2.1. If the found-time flag is not set and the token matches the time\n     * production, set the found-time flag and set the hour- value,\n     * minute-value, and second-value to the numbers denoted by the digits in\n     * the date-token, respectively.  Skip the remaining sub-steps and continue\n     * to the next date-token.\n     */ if (second === null) {\n            result = parseTime(token);\n            if (result) {\n                hour = result[0];\n                minute = result[1];\n                second = result[2];\n                continue;\n            }\n        }\n        /* 2.2. If the found-day-of-month flag is not set and the date-token matches\n     * the day-of-month production, set the found-day-of- month flag and set\n     * the day-of-month-value to the number denoted by the date-token.  Skip\n     * the remaining sub-steps and continue to the next date-token.\n     */ if (dayOfMonth === null) {\n            // \"day-of-month = 1*2DIGIT ( non-digit *OCTET )\"\n            result = parseDigits(token, 1, 2, true);\n            if (result !== null) {\n                dayOfMonth = result;\n                continue;\n            }\n        }\n        /* 2.3. If the found-month flag is not set and the date-token matches the\n     * month production, set the found-month flag and set the month-value to\n     * the month denoted by the date-token.  Skip the remaining sub-steps and\n     * continue to the next date-token.\n     */ if (month === null) {\n            result = parseMonth(token);\n            if (result !== null) {\n                month = result;\n                continue;\n            }\n        }\n        /* 2.4. If the found-year flag is not set and the date-token matches the\n     * year production, set the found-year flag and set the year-value to the\n     * number denoted by the date-token.  Skip the remaining sub-steps and\n     * continue to the next date-token.\n     */ if (year === null) {\n            // \"year = 2*4DIGIT ( non-digit *OCTET )\"\n            result = parseDigits(token, 2, 4, true);\n            if (result !== null) {\n                year = result;\n                /* From S5.1.1:\n         * 3.  If the year-value is greater than or equal to 70 and less\n         * than or equal to 99, increment the year-value by 1900.\n         * 4.  If the year-value is greater than or equal to 0 and less\n         * than or equal to 69, increment the year-value by 2000.\n         */ if (year >= 70 && year <= 99) {\n                    year += 1900;\n                } else if (year >= 0 && year <= 69) {\n                    year += 2000;\n                }\n            }\n        }\n    }\n    /* RFC 6265 S5.1.1\n   * \"5. Abort these steps and fail to parse the cookie-date if:\n   *     *  at least one of the found-day-of-month, found-month, found-\n   *        year, or found-time flags is not set,\n   *     *  the day-of-month-value is less than 1 or greater than 31,\n   *     *  the year-value is less than 1601,\n   *     *  the hour-value is greater than 23,\n   *     *  the minute-value is greater than 59, or\n   *     *  the second-value is greater than 59.\n   *     (Note that leap seconds cannot be represented in this syntax.)\"\n   *\n   * So, in order as above:\n   */ if (dayOfMonth === null || month === null || year === null || second === null || dayOfMonth < 1 || dayOfMonth > 31 || year < 1601 || hour > 23 || minute > 59 || second > 59) {\n        return;\n    }\n    return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));\n}\nfunction formatDate(date) {\n    var d = date.getUTCDate();\n    d = d >= 10 ? d : \"0\" + d;\n    var h = date.getUTCHours();\n    h = h >= 10 ? h : \"0\" + h;\n    var m = date.getUTCMinutes();\n    m = m >= 10 ? m : \"0\" + m;\n    var s = date.getUTCSeconds();\n    s = s >= 10 ? s : \"0\" + s;\n    return NUM_TO_DAY[date.getUTCDay()] + \", \" + d + \" \" + NUM_TO_MONTH[date.getUTCMonth()] + \" \" + date.getUTCFullYear() + \" \" + h + \":\" + m + \":\" + s + \" GMT\";\n}\n// S5.1.2 Canonicalized Host Names\nfunction canonicalDomain(str) {\n    if (str == null) {\n        return null;\n    }\n    str = str.trim().replace(/^\\./, \"\"); // S4.1.2.3 & S5.2.3: ignore leading .\n    // convert to IDN if any non-ASCII characters\n    if (punycode && /[^\\u0001-\\u007f]/.test(str)) {\n        str = punycode.toASCII(str);\n    }\n    return str.toLowerCase();\n}\n// S5.1.3 Domain Matching\nfunction domainMatch(str, domStr, canonicalize) {\n    if (str == null || domStr == null) {\n        return null;\n    }\n    if (canonicalize !== false) {\n        str = canonicalDomain(str);\n        domStr = canonicalDomain(domStr);\n    }\n    /*\n   * \"The domain string and the string are identical. (Note that both the\n   * domain string and the string will have been canonicalized to lower case at\n   * this point)\"\n   */ if (str == domStr) {\n        return true;\n    }\n    /* \"All of the following [three] conditions hold:\" (order adjusted from the RFC) */ /* \"* The string is a host name (i.e., not an IP address).\" */ if (net.isIP(str)) {\n        return false;\n    }\n    /* \"* The domain string is a suffix of the string\" */ var idx = str.indexOf(domStr);\n    if (idx <= 0) {\n        return false; // it's a non-match (-1) or prefix (0)\n    }\n    // e.g \"a.b.c\".indexOf(\"b.c\") === 2\n    // 5 === 3+2\n    if (str.length !== domStr.length + idx) {\n        return false;\n    }\n    /* \"* The last character of the string that is not included in the domain\n  * string is a %x2E (\".\") character.\" */ if (str.substr(idx - 1, 1) !== \".\") {\n        return false;\n    }\n    return true;\n}\n// RFC6265 S5.1.4 Paths and Path-Match\n/*\n * \"The user agent MUST use an algorithm equivalent to the following algorithm\n * to compute the default-path of a cookie:\"\n *\n * Assumption: the path (and not query part or absolute uri) is passed in.\n */ function defaultPath(path) {\n    // \"2. If the uri-path is empty or if the first character of the uri-path is not\n    // a %x2F (\"/\") character, output %x2F (\"/\") and skip the remaining steps.\n    if (!path || path.substr(0, 1) !== \"/\") {\n        return \"/\";\n    }\n    // \"3. If the uri-path contains no more than one %x2F (\"/\") character, output\n    // %x2F (\"/\") and skip the remaining step.\"\n    if (path === \"/\") {\n        return path;\n    }\n    var rightSlash = path.lastIndexOf(\"/\");\n    if (rightSlash === 0) {\n        return \"/\";\n    }\n    // \"4. Output the characters of the uri-path from the first character up to,\n    // but not including, the right-most %x2F (\"/\").\"\n    return path.slice(0, rightSlash);\n}\nfunction trimTerminator(str) {\n    for(var t = 0; t < TERMINATORS.length; t++){\n        var terminatorIdx = str.indexOf(TERMINATORS[t]);\n        if (terminatorIdx !== -1) {\n            str = str.substr(0, terminatorIdx);\n        }\n    }\n    return str;\n}\nfunction parseCookiePair(cookiePair, looseMode) {\n    cookiePair = trimTerminator(cookiePair);\n    var firstEq = cookiePair.indexOf(\"=\");\n    if (looseMode) {\n        if (firstEq === 0) {\n            cookiePair = cookiePair.substr(1);\n            firstEq = cookiePair.indexOf(\"=\"); // might still need to split on '='\n        }\n    } else {\n        if (firstEq <= 0) {\n            return; // needs to have non-empty \"cookie-name\"\n        }\n    }\n    var cookieName, cookieValue;\n    if (firstEq <= 0) {\n        cookieName = \"\";\n        cookieValue = cookiePair.trim();\n    } else {\n        cookieName = cookiePair.substr(0, firstEq).trim();\n        cookieValue = cookiePair.substr(firstEq + 1).trim();\n    }\n    if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {\n        return;\n    }\n    var c = new Cookie();\n    c.key = cookieName;\n    c.value = cookieValue;\n    return c;\n}\nfunction parse(str, options) {\n    if (!options || typeof options !== \"object\") {\n        options = {};\n    }\n    str = str.trim();\n    // We use a regex to parse the \"name-value-pair\" part of S5.2\n    var firstSemi = str.indexOf(\";\"); // S5.2 step 1\n    var cookiePair = firstSemi === -1 ? str : str.substr(0, firstSemi);\n    var c = parseCookiePair(cookiePair, !!options.loose);\n    if (!c) {\n        return;\n    }\n    if (firstSemi === -1) {\n        return c;\n    }\n    // S5.2.3 \"unparsed-attributes consist of the remainder of the set-cookie-string\n    // (including the %x3B (\";\") in question).\" plus later on in the same section\n    // \"discard the first \";\" and trim\".\n    var unparsed = str.slice(firstSemi + 1).trim();\n    // \"If the unparsed-attributes string is empty, skip the rest of these\n    // steps.\"\n    if (unparsed.length === 0) {\n        return c;\n    }\n    /*\n   * S5.2 says that when looping over the items \"[p]rocess the attribute-name\n   * and attribute-value according to the requirements in the following\n   * subsections\" for every item.  Plus, for many of the individual attributes\n   * in S5.3 it says to use the \"attribute-value of the last attribute in the\n   * cookie-attribute-list\".  Therefore, in this implementation, we overwrite\n   * the previous value.\n   */ var cookie_avs = unparsed.split(\";\");\n    while(cookie_avs.length){\n        var av = cookie_avs.shift().trim();\n        if (av.length === 0) {\n            continue;\n        }\n        var av_sep = av.indexOf(\"=\");\n        var av_key, av_value;\n        if (av_sep === -1) {\n            av_key = av;\n            av_value = null;\n        } else {\n            av_key = av.substr(0, av_sep);\n            av_value = av.substr(av_sep + 1);\n        }\n        av_key = av_key.trim().toLowerCase();\n        if (av_value) {\n            av_value = av_value.trim();\n        }\n        switch(av_key){\n            case \"expires\":\n                if (av_value) {\n                    var exp = parseDate(av_value);\n                    // \"If the attribute-value failed to parse as a cookie date, ignore the\n                    // cookie-av.\"\n                    if (exp) {\n                        // over and underflow not realistically a concern: V8's getTime() seems to\n                        // store something larger than a 32-bit time_t (even with 32-bit node)\n                        c.expires = exp;\n                    }\n                }\n                break;\n            case \"max-age\":\n                if (av_value) {\n                    // \"If the first character of the attribute-value is not a DIGIT or a \"-\"\n                    // character ...[or]... If the remainder of attribute-value contains a\n                    // non-DIGIT character, ignore the cookie-av.\"\n                    if (/^-?[0-9]+$/.test(av_value)) {\n                        var delta = parseInt(av_value, 10);\n                        // \"If delta-seconds is less than or equal to zero (0), let expiry-time\n                        // be the earliest representable date and time.\"\n                        c.setMaxAge(delta);\n                    }\n                }\n                break;\n            case \"domain\":\n                // \"If the attribute-value is empty, the behavior is undefined.  However,\n                // the user agent SHOULD ignore the cookie-av entirely.\"\n                if (av_value) {\n                    // S5.2.3 \"Let cookie-domain be the attribute-value without the leading %x2E\n                    // (\".\") character.\"\n                    var domain = av_value.trim().replace(/^\\./, \"\");\n                    if (domain) {\n                        // \"Convert the cookie-domain to lower case.\"\n                        c.domain = domain.toLowerCase();\n                    }\n                }\n                break;\n            case \"path\":\n                /*\n       * \"If the attribute-value is empty or if the first character of the\n       * attribute-value is not %x2F (\"/\"):\n       *   Let cookie-path be the default-path.\n       * Otherwise:\n       *   Let cookie-path be the attribute-value.\"\n       *\n       * We'll represent the default-path as null since it depends on the\n       * context of the parsing.\n       */ c.path = av_value && av_value[0] === \"/\" ? av_value : null;\n                break;\n            case \"secure\":\n                /*\n       * \"If the attribute-name case-insensitively matches the string \"Secure\",\n       * the user agent MUST append an attribute to the cookie-attribute-list\n       * with an attribute-name of Secure and an empty attribute-value.\"\n       */ c.secure = true;\n                break;\n            case \"httponly\":\n                c.httpOnly = true;\n                break;\n            default:\n                c.extensions = c.extensions || [];\n                c.extensions.push(av);\n                break;\n        }\n    }\n    return c;\n}\n// avoid the V8 deoptimization monster!\nfunction jsonParse(str) {\n    var obj;\n    try {\n        obj = JSON.parse(str);\n    } catch (e) {\n        return e;\n    }\n    return obj;\n}\nfunction fromJSON(str) {\n    if (!str) {\n        return null;\n    }\n    var obj;\n    if (typeof str === \"string\") {\n        obj = jsonParse(str);\n        if (obj instanceof Error) {\n            return null;\n        }\n    } else {\n        // assume it's an Object\n        obj = str;\n    }\n    var c = new Cookie();\n    for(var i = 0; i < Cookie.serializableProperties.length; i++){\n        var prop = Cookie.serializableProperties[i];\n        if (obj[prop] === undefined || obj[prop] === Cookie.prototype[prop]) {\n            continue; // leave as prototype default\n        }\n        if (prop === \"expires\" || prop === \"creation\" || prop === \"lastAccessed\") {\n            if (obj[prop] === null) {\n                c[prop] = null;\n            } else {\n                c[prop] = obj[prop] == \"Infinity\" ? \"Infinity\" : new Date(obj[prop]);\n            }\n        } else {\n            c[prop] = obj[prop];\n        }\n    }\n    return c;\n}\n/* Section 5.4 part 2:\n * \"*  Cookies with longer paths are listed before cookies with\n *     shorter paths.\n *\n *  *  Among cookies that have equal-length path fields, cookies with\n *     earlier creation-times are listed before cookies with later\n *     creation-times.\"\n */ function cookieCompare(a, b) {\n    var cmp = 0;\n    // descending for length: b CMP a\n    var aPathLen = a.path ? a.path.length : 0;\n    var bPathLen = b.path ? b.path.length : 0;\n    cmp = bPathLen - aPathLen;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    // ascending for time: a CMP b\n    var aTime = a.creation ? a.creation.getTime() : MAX_TIME;\n    var bTime = b.creation ? b.creation.getTime() : MAX_TIME;\n    cmp = aTime - bTime;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    // break ties for the same millisecond (precision of JavaScript's clock)\n    cmp = a.creationIndex - b.creationIndex;\n    return cmp;\n}\n// Gives the permutation of all possible pathMatch()es of a given path. The\n// array is in longest-to-shortest order.  Handy for indexing.\nfunction permutePath(path) {\n    if (path === \"/\") {\n        return [\n            \"/\"\n        ];\n    }\n    if (path.lastIndexOf(\"/\") === path.length - 1) {\n        path = path.substr(0, path.length - 1);\n    }\n    var permutations = [\n        path\n    ];\n    while(path.length > 1){\n        var lindex = path.lastIndexOf(\"/\");\n        if (lindex === 0) {\n            break;\n        }\n        path = path.substr(0, lindex);\n        permutations.push(path);\n    }\n    permutations.push(\"/\");\n    return permutations;\n}\nfunction getCookieContext(url) {\n    if (url instanceof Object) {\n        return url;\n    }\n    // NOTE: decodeURI will throw on malformed URIs (see GH-32).\n    // Therefore, we will just skip decoding for such URIs.\n    try {\n        url = decodeURI(url);\n    } catch (err) {\n    // Silently swallow error\n    }\n    return urlParse(url);\n}\nfunction Cookie(options) {\n    options = options || {};\n    Object.keys(options).forEach(function(prop) {\n        if (Cookie.prototype.hasOwnProperty(prop) && Cookie.prototype[prop] !== options[prop] && prop.substr(0, 1) !== \"_\") {\n            this[prop] = options[prop];\n        }\n    }, this);\n    this.creation = this.creation || new Date();\n    // used to break creation ties in cookieCompare():\n    Object.defineProperty(this, \"creationIndex\", {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: ++Cookie.cookiesCreated\n    });\n}\nCookie.cookiesCreated = 0; // incremented each time a cookie is created\nCookie.parse = parse;\nCookie.fromJSON = fromJSON;\nCookie.prototype.key = \"\";\nCookie.prototype.value = \"\";\n// the order in which the RFC has them:\nCookie.prototype.expires = \"Infinity\"; // coerces to literal Infinity\nCookie.prototype.maxAge = null; // takes precedence over expires for TTL\nCookie.prototype.domain = null;\nCookie.prototype.path = null;\nCookie.prototype.secure = false;\nCookie.prototype.httpOnly = false;\nCookie.prototype.extensions = null;\n// set by the CookieJar:\nCookie.prototype.hostOnly = null; // boolean when set\nCookie.prototype.pathIsDefault = null; // boolean when set\nCookie.prototype.creation = null; // Date when set; defaulted by Cookie.parse\nCookie.prototype.lastAccessed = null; // Date when set\nObject.defineProperty(Cookie.prototype, \"creationIndex\", {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: 0\n});\nCookie.serializableProperties = Object.keys(Cookie.prototype).filter(function(prop) {\n    return !(Cookie.prototype[prop] instanceof Function || prop === \"creationIndex\" || prop.substr(0, 1) === \"_\");\n});\nCookie.prototype.inspect = function inspect() {\n    var now = Date.now();\n    return 'Cookie=\"' + this.toString() + \"; hostOnly=\" + (this.hostOnly != null ? this.hostOnly : \"?\") + \"; aAge=\" + (this.lastAccessed ? now - this.lastAccessed.getTime() + \"ms\" : \"?\") + \"; cAge=\" + (this.creation ? now - this.creation.getTime() + \"ms\" : \"?\") + '\"';\n};\n// Use the new custom inspection symbol to add the custom inspect function if\n// available.\nif (util.inspect.custom) {\n    Cookie.prototype[util.inspect.custom] = Cookie.prototype.inspect;\n}\nCookie.prototype.toJSON = function() {\n    var obj = {};\n    var props = Cookie.serializableProperties;\n    for(var i = 0; i < props.length; i++){\n        var prop = props[i];\n        if (this[prop] === Cookie.prototype[prop]) {\n            continue; // leave as prototype default\n        }\n        if (prop === \"expires\" || prop === \"creation\" || prop === \"lastAccessed\") {\n            if (this[prop] === null) {\n                obj[prop] = null;\n            } else {\n                obj[prop] = this[prop] == \"Infinity\" ? \"Infinity\" : this[prop].toISOString();\n            }\n        } else if (prop === \"maxAge\") {\n            if (this[prop] !== null) {\n                // again, intentionally not ===\n                obj[prop] = this[prop] == Infinity || this[prop] == -Infinity ? this[prop].toString() : this[prop];\n            }\n        } else {\n            if (this[prop] !== Cookie.prototype[prop]) {\n                obj[prop] = this[prop];\n            }\n        }\n    }\n    return obj;\n};\nCookie.prototype.clone = function() {\n    return fromJSON(this.toJSON());\n};\nCookie.prototype.validate = function validate() {\n    if (!COOKIE_OCTETS.test(this.value)) {\n        return false;\n    }\n    if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {\n        return false;\n    }\n    if (this.maxAge != null && this.maxAge <= 0) {\n        return false; // \"Max-Age=\" non-zero-digit *DIGIT\n    }\n    if (this.path != null && !PATH_VALUE.test(this.path)) {\n        return false;\n    }\n    var cdomain = this.cdomain();\n    if (cdomain) {\n        if (cdomain.match(/\\.$/)) {\n            return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this\n        }\n        var suffix = pubsuffix.getPublicSuffix(cdomain);\n        if (suffix == null) {\n            return false;\n        }\n    }\n    return true;\n};\nCookie.prototype.setExpires = function setExpires(exp) {\n    if (exp instanceof Date) {\n        this.expires = exp;\n    } else {\n        this.expires = parseDate(exp) || \"Infinity\";\n    }\n};\nCookie.prototype.setMaxAge = function setMaxAge(age) {\n    if (age === Infinity || age === -Infinity) {\n        this.maxAge = age.toString(); // so JSON.stringify() works\n    } else {\n        this.maxAge = age;\n    }\n};\n// gives Cookie header format\nCookie.prototype.cookieString = function cookieString() {\n    var val = this.value;\n    if (val == null) {\n        val = \"\";\n    }\n    if (this.key === \"\") {\n        return val;\n    }\n    return this.key + \"=\" + val;\n};\n// gives Set-Cookie header format\nCookie.prototype.toString = function toString() {\n    var str = this.cookieString();\n    if (this.expires != Infinity) {\n        if (this.expires instanceof Date) {\n            str += \"; Expires=\" + formatDate(this.expires);\n        } else {\n            str += \"; Expires=\" + this.expires;\n        }\n    }\n    if (this.maxAge != null && this.maxAge != Infinity) {\n        str += \"; Max-Age=\" + this.maxAge;\n    }\n    if (this.domain && !this.hostOnly) {\n        str += \"; Domain=\" + this.domain;\n    }\n    if (this.path) {\n        str += \"; Path=\" + this.path;\n    }\n    if (this.secure) {\n        str += \"; Secure\";\n    }\n    if (this.httpOnly) {\n        str += \"; HttpOnly\";\n    }\n    if (this.extensions) {\n        this.extensions.forEach(function(ext) {\n            str += \"; \" + ext;\n        });\n    }\n    return str;\n};\n// TTL() partially replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere)\n// S5.3 says to give the \"latest representable date\" for which we use Infinity\n// For \"expired\" we use 0\nCookie.prototype.TTL = function TTL(now) {\n    /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires\n   * attribute, the Max-Age attribute has precedence and controls the\n   * expiration date of the cookie.\n   * (Concurs with S5.3 step 3)\n   */ if (this.maxAge != null) {\n        return this.maxAge <= 0 ? 0 : this.maxAge * 1000;\n    }\n    var expires = this.expires;\n    if (expires != Infinity) {\n        if (!(expires instanceof Date)) {\n            expires = parseDate(expires) || Infinity;\n        }\n        if (expires == Infinity) {\n            return Infinity;\n        }\n        return expires.getTime() - (now || Date.now());\n    }\n    return Infinity;\n};\n// expiryTime() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere)\nCookie.prototype.expiryTime = function expiryTime(now) {\n    if (this.maxAge != null) {\n        var relativeTo = now || this.creation || new Date();\n        var age = this.maxAge <= 0 ? -Infinity : this.maxAge * 1000;\n        return relativeTo.getTime() + age;\n    }\n    if (this.expires == Infinity) {\n        return Infinity;\n    }\n    return this.expires.getTime();\n};\n// expiryDate() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere), except it returns a Date\nCookie.prototype.expiryDate = function expiryDate(now) {\n    var millisec = this.expiryTime(now);\n    if (millisec == Infinity) {\n        return new Date(MAX_TIME);\n    } else if (millisec == -Infinity) {\n        return new Date(MIN_TIME);\n    } else {\n        return new Date(millisec);\n    }\n};\n// This replaces the \"persistent-flag\" parts of S5.3 step 3\nCookie.prototype.isPersistent = function isPersistent() {\n    return this.maxAge != null || this.expires != Infinity;\n};\n// Mostly S5.1.2 and S5.2.3:\nCookie.prototype.cdomain = Cookie.prototype.canonicalizedDomain = function canonicalizedDomain() {\n    if (this.domain == null) {\n        return null;\n    }\n    return canonicalDomain(this.domain);\n};\nfunction CookieJar(store, options) {\n    if (typeof options === \"boolean\") {\n        options = {\n            rejectPublicSuffixes: options\n        };\n    } else if (options == null) {\n        options = {};\n    }\n    if (options.rejectPublicSuffixes != null) {\n        this.rejectPublicSuffixes = options.rejectPublicSuffixes;\n    }\n    if (options.looseMode != null) {\n        this.enableLooseMode = options.looseMode;\n    }\n    if (!store) {\n        store = new MemoryCookieStore();\n    }\n    this.store = store;\n}\nCookieJar.prototype.store = null;\nCookieJar.prototype.rejectPublicSuffixes = true;\nCookieJar.prototype.enableLooseMode = false;\nvar CAN_BE_SYNC = [];\nCAN_BE_SYNC.push(\"setCookie\");\nCookieJar.prototype.setCookie = function(cookie, url, options, cb) {\n    var err;\n    var context = getCookieContext(url);\n    if (options instanceof Function) {\n        cb = options;\n        options = {};\n    }\n    var host = canonicalDomain(context.hostname);\n    var loose = this.enableLooseMode;\n    if (options.loose != null) {\n        loose = options.loose;\n    }\n    // S5.3 step 1\n    if (!(cookie instanceof Cookie)) {\n        cookie = Cookie.parse(cookie, {\n            loose: loose\n        });\n    }\n    if (!cookie) {\n        err = new Error(\"Cookie failed to parse\");\n        return cb(options.ignoreError ? null : err);\n    }\n    // S5.3 step 2\n    var now = options.now || new Date(); // will assign later to save effort in the face of errors\n    // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()\n    // S5.3 step 4: NOOP; domain is null by default\n    // S5.3 step 5: public suffixes\n    if (this.rejectPublicSuffixes && cookie.domain) {\n        var suffix = pubsuffix.getPublicSuffix(cookie.cdomain());\n        if (suffix == null) {\n            err = new Error(\"Cookie has domain set to a public suffix\");\n            return cb(options.ignoreError ? null : err);\n        }\n    }\n    // S5.3 step 6:\n    if (cookie.domain) {\n        if (!domainMatch(host, cookie.cdomain(), false)) {\n            err = new Error(\"Cookie not in this host's domain. Cookie:\" + cookie.cdomain() + \" Request:\" + host);\n            return cb(options.ignoreError ? null : err);\n        }\n        if (cookie.hostOnly == null) {\n            cookie.hostOnly = false;\n        }\n    } else {\n        cookie.hostOnly = true;\n        cookie.domain = host;\n    }\n    //S5.2.4 If the attribute-value is empty or if the first character of the\n    //attribute-value is not %x2F (\"/\"):\n    //Let cookie-path be the default-path.\n    if (!cookie.path || cookie.path[0] !== \"/\") {\n        cookie.path = defaultPath(context.pathname);\n        cookie.pathIsDefault = true;\n    }\n    // S5.3 step 8: NOOP; secure attribute\n    // S5.3 step 9: NOOP; httpOnly attribute\n    // S5.3 step 10\n    if (options.http === false && cookie.httpOnly) {\n        err = new Error(\"Cookie is HttpOnly and this isn't an HTTP API\");\n        return cb(options.ignoreError ? null : err);\n    }\n    var store = this.store;\n    if (!store.updateCookie) {\n        store.updateCookie = function(oldCookie, newCookie, cb) {\n            this.putCookie(newCookie, cb);\n        };\n    }\n    function withCookie(err, oldCookie) {\n        if (err) {\n            return cb(err);\n        }\n        var next = function(err) {\n            if (err) {\n                return cb(err);\n            } else {\n                cb(null, cookie);\n            }\n        };\n        if (oldCookie) {\n            // S5.3 step 11 - \"If the cookie store contains a cookie with the same name,\n            // domain, and path as the newly created cookie:\"\n            if (options.http === false && oldCookie.httpOnly) {\n                err = new Error(\"old Cookie is HttpOnly and this isn't an HTTP API\");\n                return cb(options.ignoreError ? null : err);\n            }\n            cookie.creation = oldCookie.creation; // step 11.3\n            cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker\n            cookie.lastAccessed = now;\n            // Step 11.4 (delete cookie) is implied by just setting the new one:\n            store.updateCookie(oldCookie, cookie, next); // step 12\n        } else {\n            cookie.creation = cookie.lastAccessed = now;\n            store.putCookie(cookie, next); // step 12\n        }\n    }\n    store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);\n};\n// RFC6365 S5.4\nCAN_BE_SYNC.push(\"getCookies\");\nCookieJar.prototype.getCookies = function(url, options, cb) {\n    var context = getCookieContext(url);\n    if (options instanceof Function) {\n        cb = options;\n        options = {};\n    }\n    var host = canonicalDomain(context.hostname);\n    var path = context.pathname || \"/\";\n    var secure = options.secure;\n    if (secure == null && context.protocol && (context.protocol == \"https:\" || context.protocol == \"wss:\")) {\n        secure = true;\n    }\n    var http = options.http;\n    if (http == null) {\n        http = true;\n    }\n    var now = options.now || Date.now();\n    var expireCheck = options.expire !== false;\n    var allPaths = !!options.allPaths;\n    var store = this.store;\n    function matchingCookie(c) {\n        // \"Either:\n        //   The cookie's host-only-flag is true and the canonicalized\n        //   request-host is identical to the cookie's domain.\n        // Or:\n        //   The cookie's host-only-flag is false and the canonicalized\n        //   request-host domain-matches the cookie's domain.\"\n        if (c.hostOnly) {\n            if (c.domain != host) {\n                return false;\n            }\n        } else {\n            if (!domainMatch(host, c.domain, false)) {\n                return false;\n            }\n        }\n        // \"The request-uri's path path-matches the cookie's path.\"\n        if (!allPaths && !pathMatch(path, c.path)) {\n            return false;\n        }\n        // \"If the cookie's secure-only-flag is true, then the request-uri's\n        // scheme must denote a \"secure\" protocol\"\n        if (c.secure && !secure) {\n            return false;\n        }\n        // \"If the cookie's http-only-flag is true, then exclude the cookie if the\n        // cookie-string is being generated for a \"non-HTTP\" API\"\n        if (c.httpOnly && !http) {\n            return false;\n        }\n        // deferred from S5.3\n        // non-RFC: allow retention of expired cookies by choice\n        if (expireCheck && c.expiryTime() <= now) {\n            store.removeCookie(c.domain, c.path, c.key, function() {}); // result ignored\n            return false;\n        }\n        return true;\n    }\n    store.findCookies(host, allPaths ? null : path, function(err, cookies) {\n        if (err) {\n            return cb(err);\n        }\n        cookies = cookies.filter(matchingCookie);\n        // sorting of S5.4 part 2\n        if (options.sort !== false) {\n            cookies = cookies.sort(cookieCompare);\n        }\n        // S5.4 part 3\n        var now = new Date();\n        cookies.forEach(function(c) {\n            c.lastAccessed = now;\n        });\n        // TODO persist lastAccessed\n        cb(null, cookies);\n    });\n};\nCAN_BE_SYNC.push(\"getCookieString\");\nCookieJar.prototype.getCookieString = function() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var cb = args.pop();\n    var next = function(err, cookies) {\n        if (err) {\n            cb(err);\n        } else {\n            cb(null, cookies.sort(cookieCompare).map(function(c) {\n                return c.cookieString();\n            }).join(\"; \"));\n        }\n    };\n    args.push(next);\n    this.getCookies.apply(this, args);\n};\nCAN_BE_SYNC.push(\"getSetCookieStrings\");\nCookieJar.prototype.getSetCookieStrings = function() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var cb = args.pop();\n    var next = function(err, cookies) {\n        if (err) {\n            cb(err);\n        } else {\n            cb(null, cookies.map(function(c) {\n                return c.toString();\n            }));\n        }\n    };\n    args.push(next);\n    this.getCookies.apply(this, args);\n};\nCAN_BE_SYNC.push(\"serialize\");\nCookieJar.prototype.serialize = function(cb) {\n    var type = this.store.constructor.name;\n    if (type === \"Object\") {\n        type = null;\n    }\n    // update README.md \"Serialization Format\" if you change this, please!\n    var serialized = {\n        // The version of tough-cookie that serialized this jar. Generally a good\n        // practice since future versions can make data import decisions based on\n        // known past behavior. When/if this matters, use `semver`.\n        version: \"tough-cookie@\" + VERSION,\n        // add the store type, to make humans happy:\n        storeType: type,\n        // CookieJar configuration:\n        rejectPublicSuffixes: !!this.rejectPublicSuffixes,\n        // this gets filled from getAllCookies:\n        cookies: []\n    };\n    if (!(this.store.getAllCookies && typeof this.store.getAllCookies === \"function\")) {\n        return cb(new Error(\"store does not support getAllCookies and cannot be serialized\"));\n    }\n    this.store.getAllCookies(function(err, cookies) {\n        if (err) {\n            return cb(err);\n        }\n        serialized.cookies = cookies.map(function(cookie) {\n            // convert to serialized 'raw' cookies\n            cookie = cookie instanceof Cookie ? cookie.toJSON() : cookie;\n            // Remove the index so new ones get assigned during deserialization\n            delete cookie.creationIndex;\n            return cookie;\n        });\n        return cb(null, serialized);\n    });\n};\n// well-known name that JSON.stringify calls\nCookieJar.prototype.toJSON = function() {\n    return this.serializeSync();\n};\n// use the class method CookieJar.deserialize instead of calling this directly\nCAN_BE_SYNC.push(\"_importCookies\");\nCookieJar.prototype._importCookies = function(serialized, cb) {\n    var jar = this;\n    var cookies = serialized.cookies;\n    if (!cookies || !Array.isArray(cookies)) {\n        return cb(new Error(\"serialized jar has no cookies array\"));\n    }\n    cookies = cookies.slice(); // do not modify the original\n    function putNext(err) {\n        if (err) {\n            return cb(err);\n        }\n        if (!cookies.length) {\n            return cb(err, jar);\n        }\n        var cookie;\n        try {\n            cookie = fromJSON(cookies.shift());\n        } catch (e) {\n            return cb(e);\n        }\n        if (cookie === null) {\n            return putNext(null); // skip this cookie\n        }\n        jar.store.putCookie(cookie, putNext);\n    }\n    putNext();\n};\nCookieJar.deserialize = function(strOrObj, store, cb) {\n    if (arguments.length !== 3) {\n        // store is optional\n        cb = store;\n        store = null;\n    }\n    var serialized;\n    if (typeof strOrObj === \"string\") {\n        serialized = jsonParse(strOrObj);\n        if (serialized instanceof Error) {\n            return cb(serialized);\n        }\n    } else {\n        serialized = strOrObj;\n    }\n    var jar = new CookieJar(store, serialized.rejectPublicSuffixes);\n    jar._importCookies(serialized, function(err) {\n        if (err) {\n            return cb(err);\n        }\n        cb(null, jar);\n    });\n};\nCookieJar.deserializeSync = function(strOrObj, store) {\n    var serialized = typeof strOrObj === \"string\" ? JSON.parse(strOrObj) : strOrObj;\n    var jar = new CookieJar(store, serialized.rejectPublicSuffixes);\n    // catch this mistake early:\n    if (!jar.store.synchronous) {\n        throw new Error(\"CookieJar store is not synchronous; use async API instead.\");\n    }\n    jar._importCookiesSync(serialized);\n    return jar;\n};\nCookieJar.fromJSON = CookieJar.deserializeSync;\nCAN_BE_SYNC.push(\"clone\");\nCookieJar.prototype.clone = function(newStore, cb) {\n    if (arguments.length === 1) {\n        cb = newStore;\n        newStore = null;\n    }\n    this.serialize(function(err, serialized) {\n        if (err) {\n            return cb(err);\n        }\n        CookieJar.deserialize(newStore, serialized, cb);\n    });\n};\n// Use a closure to provide a true imperative API for synchronous stores.\nfunction syncWrap(method) {\n    return function() {\n        if (!this.store.synchronous) {\n            throw new Error(\"CookieJar store is not synchronous; use async API instead.\");\n        }\n        var args = Array.prototype.slice.call(arguments);\n        var syncErr, syncResult;\n        args.push(function syncCb(err, result) {\n            syncErr = err;\n            syncResult = result;\n        });\n        this[method].apply(this, args);\n        if (syncErr) {\n            throw syncErr;\n        }\n        return syncResult;\n    };\n}\n// wrap all declared CAN_BE_SYNC methods in the sync wrapper\nCAN_BE_SYNC.forEach(function(method) {\n    CookieJar.prototype[method + \"Sync\"] = syncWrap(method);\n});\nexports.CookieJar = CookieJar;\nexports.Cookie = Cookie;\nexports.Store = Store;\nexports.MemoryCookieStore = MemoryCookieStore;\nexports.parseDate = parseDate;\nexports.formatDate = formatDate;\nexports.parse = parse;\nexports.fromJSON = fromJSON;\nexports.domainMatch = domainMatch;\nexports.defaultPath = defaultPath;\nexports.pathMatch = pathMatch;\nexports.getPublicSuffix = pubsuffix.getPublicSuffix;\nexports.cookieCompare = cookieCompare;\nexports.permuteDomain = __webpack_require__(/*! ./permuteDomain */ \"(rsc)/./node_modules/tough-cookie/lib/permuteDomain.js\").permuteDomain;\nexports.permutePath = permutePath;\nexports.canonicalDomain = canonicalDomain;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/lib/cookie.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/lib/memstore.js":
/*!***************************************************!*\
  !*** ./node_modules/tough-cookie/lib/memstore.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \nvar Store = (__webpack_require__(/*! ./store */ \"(rsc)/./node_modules/tough-cookie/lib/store.js\").Store);\nvar permuteDomain = (__webpack_require__(/*! ./permuteDomain */ \"(rsc)/./node_modules/tough-cookie/lib/permuteDomain.js\").permuteDomain);\nvar pathMatch = (__webpack_require__(/*! ./pathMatch */ \"(rsc)/./node_modules/tough-cookie/lib/pathMatch.js\").pathMatch);\nvar util = __webpack_require__(/*! util */ \"util\");\nfunction MemoryCookieStore() {\n    Store.call(this);\n    this.idx = {};\n}\nutil.inherits(MemoryCookieStore, Store);\nexports.MemoryCookieStore = MemoryCookieStore;\nMemoryCookieStore.prototype.idx = null;\n// Since it's just a struct in RAM, this Store is synchronous\nMemoryCookieStore.prototype.synchronous = true;\n// force a default depth:\nMemoryCookieStore.prototype.inspect = function() {\n    return \"{ idx: \" + util.inspect(this.idx, false, 2) + \" }\";\n};\n// Use the new custom inspection symbol to add the custom inspect function if\n// available.\nif (util.inspect.custom) {\n    MemoryCookieStore.prototype[util.inspect.custom] = MemoryCookieStore.prototype.inspect;\n}\nMemoryCookieStore.prototype.findCookie = function(domain, path, key, cb) {\n    if (!this.idx[domain]) {\n        return cb(null, undefined);\n    }\n    if (!this.idx[domain][path]) {\n        return cb(null, undefined);\n    }\n    return cb(null, this.idx[domain][path][key] || null);\n};\nMemoryCookieStore.prototype.findCookies = function(domain, path, cb) {\n    var results = [];\n    if (!domain) {\n        return cb(null, []);\n    }\n    var pathMatcher;\n    if (!path) {\n        // null means \"all paths\"\n        pathMatcher = function matchAll(domainIndex) {\n            for(var curPath in domainIndex){\n                var pathIndex = domainIndex[curPath];\n                for(var key in pathIndex){\n                    results.push(pathIndex[key]);\n                }\n            }\n        };\n    } else {\n        pathMatcher = function matchRFC(domainIndex) {\n            //NOTE: we should use path-match algorithm from S5.1.4 here\n            //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)\n            Object.keys(domainIndex).forEach(function(cookiePath) {\n                if (pathMatch(path, cookiePath)) {\n                    var pathIndex = domainIndex[cookiePath];\n                    for(var key in pathIndex){\n                        results.push(pathIndex[key]);\n                    }\n                }\n            });\n        };\n    }\n    var domains = permuteDomain(domain) || [\n        domain\n    ];\n    var idx = this.idx;\n    domains.forEach(function(curDomain) {\n        var domainIndex = idx[curDomain];\n        if (!domainIndex) {\n            return;\n        }\n        pathMatcher(domainIndex);\n    });\n    cb(null, results);\n};\nMemoryCookieStore.prototype.putCookie = function(cookie, cb) {\n    if (!this.idx[cookie.domain]) {\n        this.idx[cookie.domain] = {};\n    }\n    if (!this.idx[cookie.domain][cookie.path]) {\n        this.idx[cookie.domain][cookie.path] = {};\n    }\n    this.idx[cookie.domain][cookie.path][cookie.key] = cookie;\n    cb(null);\n};\nMemoryCookieStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {\n    // updateCookie() may avoid updating cookies that are identical.  For example,\n    // lastAccessed may not be important to some stores and an equality\n    // comparison could exclude that field.\n    this.putCookie(newCookie, cb);\n};\nMemoryCookieStore.prototype.removeCookie = function(domain, path, key, cb) {\n    if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {\n        delete this.idx[domain][path][key];\n    }\n    cb(null);\n};\nMemoryCookieStore.prototype.removeCookies = function(domain, path, cb) {\n    if (this.idx[domain]) {\n        if (path) {\n            delete this.idx[domain][path];\n        } else {\n            delete this.idx[domain];\n        }\n    }\n    return cb(null);\n};\nMemoryCookieStore.prototype.getAllCookies = function(cb) {\n    var cookies = [];\n    var idx = this.idx;\n    var domains = Object.keys(idx);\n    domains.forEach(function(domain) {\n        var paths = Object.keys(idx[domain]);\n        paths.forEach(function(path) {\n            var keys = Object.keys(idx[domain][path]);\n            keys.forEach(function(key) {\n                if (key !== null) {\n                    cookies.push(idx[domain][path][key]);\n                }\n            });\n        });\n    });\n    // Sort by creationIndex so deserializing retains the creation order.\n    // When implementing your own store, this SHOULD retain the order too\n    cookies.sort(function(a, b) {\n        return (a.creationIndex || 0) - (b.creationIndex || 0);\n    });\n    cb(null, cookies);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/lib/memstore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/lib/pathMatch.js":
/*!****************************************************!*\
  !*** ./node_modules/tough-cookie/lib/pathMatch.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \n/*\n * \"A request-path path-matches a given cookie-path if at least one of the\n * following conditions holds:\"\n */ function pathMatch(reqPath, cookiePath) {\n    // \"o  The cookie-path and the request-path are identical.\"\n    if (cookiePath === reqPath) {\n        return true;\n    }\n    var idx = reqPath.indexOf(cookiePath);\n    if (idx === 0) {\n        // \"o  The cookie-path is a prefix of the request-path, and the last\n        // character of the cookie-path is %x2F (\"/\").\"\n        if (cookiePath.substr(-1) === \"/\") {\n            return true;\n        }\n        // \" o  The cookie-path is a prefix of the request-path, and the first\n        // character of the request-path that is not included in the cookie- path\n        // is a %x2F (\"/\") character.\"\n        if (reqPath.substr(cookiePath.length, 1) === \"/\") {\n            return true;\n        }\n    }\n    return false;\n}\nexports.pathMatch = pathMatch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wYXRoTWF0Y2guanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNkJDLEdBQ1k7QUFDYjs7O0NBR0MsR0FDRCxTQUFTQSxVQUFXQyxPQUFPLEVBQUVDLFVBQVU7SUFDckMsMkRBQTJEO0lBQzNELElBQUlBLGVBQWVELFNBQVM7UUFDMUIsT0FBTztJQUNUO0lBRUEsSUFBSUUsTUFBTUYsUUFBUUcsT0FBTyxDQUFDRjtJQUMxQixJQUFJQyxRQUFRLEdBQUc7UUFDYixvRUFBb0U7UUFDcEUsK0NBQStDO1FBQy9DLElBQUlELFdBQVdHLE1BQU0sQ0FBQyxDQUFDLE9BQU8sS0FBSztZQUNqQyxPQUFPO1FBQ1Q7UUFFQSxzRUFBc0U7UUFDdEUseUVBQXlFO1FBQ3pFLDhCQUE4QjtRQUM5QixJQUFJSixRQUFRSSxNQUFNLENBQUNILFdBQVdJLE1BQU0sRUFBRSxPQUFPLEtBQUs7WUFDaEQsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPO0FBQ1Q7QUFFQUMsaUJBQWlCLEdBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wYXRoTWF0Y2guanM/Njc5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgU2FsZXNmb3JjZS5jb20sIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbiAqIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgU2FsZXNmb3JjZS5jb20gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heVxuICogYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dFxuICogc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4gKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4gKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuICogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuICogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiAqIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuICogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiAqIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4gKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuICogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblwidXNlIHN0cmljdFwiO1xuLypcbiAqIFwiQSByZXF1ZXN0LXBhdGggcGF0aC1tYXRjaGVzIGEgZ2l2ZW4gY29va2llLXBhdGggaWYgYXQgbGVhc3Qgb25lIG9mIHRoZVxuICogZm9sbG93aW5nIGNvbmRpdGlvbnMgaG9sZHM6XCJcbiAqL1xuZnVuY3Rpb24gcGF0aE1hdGNoIChyZXFQYXRoLCBjb29raWVQYXRoKSB7XG4gIC8vIFwibyAgVGhlIGNvb2tpZS1wYXRoIGFuZCB0aGUgcmVxdWVzdC1wYXRoIGFyZSBpZGVudGljYWwuXCJcbiAgaWYgKGNvb2tpZVBhdGggPT09IHJlcVBhdGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBpZHggPSByZXFQYXRoLmluZGV4T2YoY29va2llUGF0aCk7XG4gIGlmIChpZHggPT09IDApIHtcbiAgICAvLyBcIm8gIFRoZSBjb29raWUtcGF0aCBpcyBhIHByZWZpeCBvZiB0aGUgcmVxdWVzdC1wYXRoLCBhbmQgdGhlIGxhc3RcbiAgICAvLyBjaGFyYWN0ZXIgb2YgdGhlIGNvb2tpZS1wYXRoIGlzICV4MkYgKFwiL1wiKS5cIlxuICAgIGlmIChjb29raWVQYXRoLnN1YnN0cigtMSkgPT09IFwiL1wiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBcIiBvICBUaGUgY29va2llLXBhdGggaXMgYSBwcmVmaXggb2YgdGhlIHJlcXVlc3QtcGF0aCwgYW5kIHRoZSBmaXJzdFxuICAgIC8vIGNoYXJhY3RlciBvZiB0aGUgcmVxdWVzdC1wYXRoIHRoYXQgaXMgbm90IGluY2x1ZGVkIGluIHRoZSBjb29raWUtIHBhdGhcbiAgICAvLyBpcyBhICV4MkYgKFwiL1wiKSBjaGFyYWN0ZXIuXCJcbiAgICBpZiAocmVxUGF0aC5zdWJzdHIoY29va2llUGF0aC5sZW5ndGgsIDEpID09PSBcIi9cIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnRzLnBhdGhNYXRjaCA9IHBhdGhNYXRjaDtcbiJdLCJuYW1lcyI6WyJwYXRoTWF0Y2giLCJyZXFQYXRoIiwiY29va2llUGF0aCIsImlkeCIsImluZGV4T2YiLCJzdWJzdHIiLCJsZW5ndGgiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/lib/pathMatch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/lib/permuteDomain.js":
/*!********************************************************!*\
  !*** ./node_modules/tough-cookie/lib/permuteDomain.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \nvar pubsuffix = __webpack_require__(/*! ./pubsuffix-psl */ \"(rsc)/./node_modules/tough-cookie/lib/pubsuffix-psl.js\");\n// Gives the permutation of all possible domainMatch()es of a given domain. The\n// array is in shortest-to-longest order.  Handy for indexing.\nfunction permuteDomain(domain) {\n    var pubSuf = pubsuffix.getPublicSuffix(domain);\n    if (!pubSuf) {\n        return null;\n    }\n    if (pubSuf == domain) {\n        return [\n            domain\n        ];\n    }\n    var prefix = domain.slice(0, -(pubSuf.length + 1)); // \".example.com\"\n    var parts = prefix.split(\".\").reverse();\n    var cur = pubSuf;\n    var permutations = [\n        cur\n    ];\n    while(parts.length){\n        cur = parts.shift() + \".\" + cur;\n        permutations.push(cur);\n    }\n    return permutations;\n}\nexports.permuteDomain = permuteDomain;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wZXJtdXRlRG9tYWluLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTZCQyxHQUNZO0FBQ2IsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUM7QUFFeEIsK0VBQStFO0FBQy9FLDhEQUE4RDtBQUM5RCxTQUFTQyxjQUFlQyxNQUFNO0lBQzVCLElBQUlDLFNBQVNKLFVBQVVLLGVBQWUsQ0FBQ0Y7SUFDdkMsSUFBSSxDQUFDQyxRQUFRO1FBQ1gsT0FBTztJQUNUO0lBQ0EsSUFBSUEsVUFBVUQsUUFBUTtRQUNwQixPQUFPO1lBQUNBO1NBQU87SUFDakI7SUFFQSxJQUFJRyxTQUFTSCxPQUFPSSxLQUFLLENBQUMsR0FBRyxDQUFFSCxDQUFBQSxPQUFPSSxNQUFNLEdBQUcsS0FBSyxpQkFBaUI7SUFDckUsSUFBSUMsUUFBUUgsT0FBT0ksS0FBSyxDQUFDLEtBQUtDLE9BQU87SUFDckMsSUFBSUMsTUFBTVI7SUFDVixJQUFJUyxlQUFlO1FBQUNEO0tBQUk7SUFDeEIsTUFBT0gsTUFBTUQsTUFBTSxDQUFFO1FBQ25CSSxNQUFNSCxNQUFNSyxLQUFLLEtBQUssTUFBTUY7UUFDNUJDLGFBQWFFLElBQUksQ0FBQ0g7SUFDcEI7SUFDQSxPQUFPQztBQUNUO0FBRUFHLHFCQUFxQixHQUFHZCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3RvdWdoLWNvb2tpZS9saWIvcGVybXV0ZURvbWFpbi5qcz9kZTY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBTYWxlc2ZvcmNlLmNvbSwgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuICogYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiBTYWxlc2ZvcmNlLmNvbSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5XG4gKiBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuICogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4gKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuICogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiAqIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcHVic3VmZml4ID0gcmVxdWlyZSgnLi9wdWJzdWZmaXgtcHNsJyk7XG5cbi8vIEdpdmVzIHRoZSBwZXJtdXRhdGlvbiBvZiBhbGwgcG9zc2libGUgZG9tYWluTWF0Y2goKWVzIG9mIGEgZ2l2ZW4gZG9tYWluLiBUaGVcbi8vIGFycmF5IGlzIGluIHNob3J0ZXN0LXRvLWxvbmdlc3Qgb3JkZXIuICBIYW5keSBmb3IgaW5kZXhpbmcuXG5mdW5jdGlvbiBwZXJtdXRlRG9tYWluIChkb21haW4pIHtcbiAgdmFyIHB1YlN1ZiA9IHB1YnN1ZmZpeC5nZXRQdWJsaWNTdWZmaXgoZG9tYWluKTtcbiAgaWYgKCFwdWJTdWYpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocHViU3VmID09IGRvbWFpbikge1xuICAgIHJldHVybiBbZG9tYWluXTtcbiAgfVxuXG4gIHZhciBwcmVmaXggPSBkb21haW4uc2xpY2UoMCwgLShwdWJTdWYubGVuZ3RoICsgMSkpOyAvLyBcIi5leGFtcGxlLmNvbVwiXG4gIHZhciBwYXJ0cyA9IHByZWZpeC5zcGxpdCgnLicpLnJldmVyc2UoKTtcbiAgdmFyIGN1ciA9IHB1YlN1ZjtcbiAgdmFyIHBlcm11dGF0aW9ucyA9IFtjdXJdO1xuICB3aGlsZSAocGFydHMubGVuZ3RoKSB7XG4gICAgY3VyID0gcGFydHMuc2hpZnQoKSArICcuJyArIGN1cjtcbiAgICBwZXJtdXRhdGlvbnMucHVzaChjdXIpO1xuICB9XG4gIHJldHVybiBwZXJtdXRhdGlvbnM7XG59XG5cbmV4cG9ydHMucGVybXV0ZURvbWFpbiA9IHBlcm11dGVEb21haW47XG4iXSwibmFtZXMiOlsicHVic3VmZml4IiwicmVxdWlyZSIsInBlcm11dGVEb21haW4iLCJkb21haW4iLCJwdWJTdWYiLCJnZXRQdWJsaWNTdWZmaXgiLCJwcmVmaXgiLCJzbGljZSIsImxlbmd0aCIsInBhcnRzIiwic3BsaXQiLCJyZXZlcnNlIiwiY3VyIiwicGVybXV0YXRpb25zIiwic2hpZnQiLCJwdXNoIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/lib/permuteDomain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/lib/pubsuffix-psl.js":
/*!********************************************************!*\
  !*** ./node_modules/tough-cookie/lib/pubsuffix-psl.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * Copyright (c) 2018, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \nvar psl = __webpack_require__(/*! psl */ \"(rsc)/./node_modules/psl/dist/psl.cjs\");\nfunction getPublicSuffix(domain) {\n    return psl.get(domain);\n}\nexports.getPublicSuffix = getPublicSuffix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wdWJzdWZmaXgtcHNsLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTZCQyxHQUNEO0FBQ0EsSUFBSUEsTUFBTUMsbUJBQU9BLENBQUM7QUFFbEIsU0FBU0MsZ0JBQWdCQyxNQUFNO0lBQzdCLE9BQU9ILElBQUlJLEdBQUcsQ0FBQ0Q7QUFDakI7QUFFQUUsdUJBQXVCLEdBQUdIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9wdWJzdWZmaXgtcHNsLmpzPzc3NDciXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTgsIFNhbGVzZm9yY2UuY29tLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gKiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIFNhbGVzZm9yY2UuY29tIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXlcbiAqIGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXRcbiAqIHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuICogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuICogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiAqIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiAqIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiAqIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4gKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiAqIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4gKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuICogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiAqIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG4ndXNlIHN0cmljdCc7XG52YXIgcHNsID0gcmVxdWlyZSgncHNsJyk7XG5cbmZ1bmN0aW9uIGdldFB1YmxpY1N1ZmZpeChkb21haW4pIHtcbiAgcmV0dXJuIHBzbC5nZXQoZG9tYWluKTtcbn1cblxuZXhwb3J0cy5nZXRQdWJsaWNTdWZmaXggPSBnZXRQdWJsaWNTdWZmaXg7XG4iXSwibmFtZXMiOlsicHNsIiwicmVxdWlyZSIsImdldFB1YmxpY1N1ZmZpeCIsImRvbWFpbiIsImdldCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/lib/pubsuffix-psl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/lib/store.js":
/*!************************************************!*\
  !*** ./node_modules/tough-cookie/lib/store.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */ \n/*jshint unused:false */ function Store() {}\nexports.Store = Store;\n// Stores may be synchronous, but are still required to use a\n// Continuation-Passing Style API.  The CookieJar itself will expose a \"*Sync\"\n// API that converts from synchronous-callbacks to imperative style.\nStore.prototype.synchronous = false;\nStore.prototype.findCookie = function(domain, path, key, cb) {\n    throw new Error(\"findCookie is not implemented\");\n};\nStore.prototype.findCookies = function(domain, path, cb) {\n    throw new Error(\"findCookies is not implemented\");\n};\nStore.prototype.putCookie = function(cookie, cb) {\n    throw new Error(\"putCookie is not implemented\");\n};\nStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {\n    // recommended default implementation:\n    // return this.putCookie(newCookie, cb);\n    throw new Error(\"updateCookie is not implemented\");\n};\nStore.prototype.removeCookie = function(domain, path, key, cb) {\n    throw new Error(\"removeCookie is not implemented\");\n};\nStore.prototype.removeCookies = function(domain, path, cb) {\n    throw new Error(\"removeCookies is not implemented\");\n};\nStore.prototype.getAllCookies = function(cb) {\n    throw new Error(\"getAllCookies is not implemented (therefore jar cannot be serialized)\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9zdG9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E2QkMsR0FDRDtBQUNBLHNCQUFzQixHQUV0QixTQUFTQSxTQUNUO0FBQ0FDLGFBQWEsR0FBR0Q7QUFFaEIsNkRBQTZEO0FBQzdELDhFQUE4RTtBQUM5RSxvRUFBb0U7QUFDcEVBLE1BQU1FLFNBQVMsQ0FBQ0MsV0FBVyxHQUFHO0FBRTlCSCxNQUFNRSxTQUFTLENBQUNFLFVBQVUsR0FBRyxTQUFTQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxFQUFFO0lBQ3pELE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVBVCxNQUFNRSxTQUFTLENBQUNRLFdBQVcsR0FBRyxTQUFTTCxNQUFNLEVBQUVDLElBQUksRUFBRUUsRUFBRTtJQUNyRCxNQUFNLElBQUlDLE1BQU07QUFDbEI7QUFFQVQsTUFBTUUsU0FBUyxDQUFDUyxTQUFTLEdBQUcsU0FBU0MsTUFBTSxFQUFFSixFQUFFO0lBQzdDLE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVBVCxNQUFNRSxTQUFTLENBQUNXLFlBQVksR0FBRyxTQUFTQyxTQUFTLEVBQUVDLFNBQVMsRUFBRVAsRUFBRTtJQUM5RCxzQ0FBc0M7SUFDdEMsd0NBQXdDO0lBQ3hDLE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVBVCxNQUFNRSxTQUFTLENBQUNjLFlBQVksR0FBRyxTQUFTWCxNQUFNLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxFQUFFO0lBQzNELE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVBVCxNQUFNRSxTQUFTLENBQUNlLGFBQWEsR0FBRyxTQUFTWixNQUFNLEVBQUVDLElBQUksRUFBRUUsRUFBRTtJQUN2RCxNQUFNLElBQUlDLE1BQU07QUFDbEI7QUFFQVQsTUFBTUUsU0FBUyxDQUFDZ0IsYUFBYSxHQUFHLFNBQVNWLEVBQUU7SUFDekMsTUFBTSxJQUFJQyxNQUFNO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2xpYi9zdG9yZS5qcz85OTA2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBTYWxlc2ZvcmNlLmNvbSwgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuICogYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiBTYWxlc2ZvcmNlLmNvbSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5XG4gKiBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuICogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4gKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuICogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiAqIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuLypqc2hpbnQgdW51c2VkOmZhbHNlICovXG5cbmZ1bmN0aW9uIFN0b3JlKCkge1xufVxuZXhwb3J0cy5TdG9yZSA9IFN0b3JlO1xuXG4vLyBTdG9yZXMgbWF5IGJlIHN5bmNocm9ub3VzLCBidXQgYXJlIHN0aWxsIHJlcXVpcmVkIHRvIHVzZSBhXG4vLyBDb250aW51YXRpb24tUGFzc2luZyBTdHlsZSBBUEkuICBUaGUgQ29va2llSmFyIGl0c2VsZiB3aWxsIGV4cG9zZSBhIFwiKlN5bmNcIlxuLy8gQVBJIHRoYXQgY29udmVydHMgZnJvbSBzeW5jaHJvbm91cy1jYWxsYmFja3MgdG8gaW1wZXJhdGl2ZSBzdHlsZS5cblN0b3JlLnByb3RvdHlwZS5zeW5jaHJvbm91cyA9IGZhbHNlO1xuXG5TdG9yZS5wcm90b3R5cGUuZmluZENvb2tpZSA9IGZ1bmN0aW9uKGRvbWFpbiwgcGF0aCwga2V5LCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2ZpbmRDb29raWUgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZmluZENvb2tpZXMgPSBmdW5jdGlvbihkb21haW4sIHBhdGgsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignZmluZENvb2tpZXMgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucHV0Q29va2llID0gZnVuY3Rpb24oY29va2llLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3B1dENvb2tpZSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS51cGRhdGVDb29raWUgPSBmdW5jdGlvbihvbGRDb29raWUsIG5ld0Nvb2tpZSwgY2IpIHtcbiAgLy8gcmVjb21tZW5kZWQgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbjpcbiAgLy8gcmV0dXJuIHRoaXMucHV0Q29va2llKG5ld0Nvb2tpZSwgY2IpO1xuICB0aHJvdyBuZXcgRXJyb3IoJ3VwZGF0ZUNvb2tpZSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZW1vdmVDb29raWUgPSBmdW5jdGlvbihkb21haW4sIHBhdGgsIGtleSwgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVDb29raWUgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVtb3ZlQ29va2llcyA9IGZ1bmN0aW9uKGRvbWFpbiwgcGF0aCwgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVDb29raWVzIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLmdldEFsbENvb2tpZXMgPSBmdW5jdGlvbihjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2dldEFsbENvb2tpZXMgaXMgbm90IGltcGxlbWVudGVkICh0aGVyZWZvcmUgamFyIGNhbm5vdCBiZSBzZXJpYWxpemVkKScpO1xufTtcbiJdLCJuYW1lcyI6WyJTdG9yZSIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJzeW5jaHJvbm91cyIsImZpbmRDb29raWUiLCJkb21haW4iLCJwYXRoIiwia2V5IiwiY2IiLCJFcnJvciIsImZpbmRDb29raWVzIiwicHV0Q29va2llIiwiY29va2llIiwidXBkYXRlQ29va2llIiwib2xkQ29va2llIiwibmV3Q29va2llIiwicmVtb3ZlQ29va2llIiwicmVtb3ZlQ29va2llcyIsImdldEFsbENvb2tpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/lib/store.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/package.json":
/*!************************************************!*\
  !*** ./node_modules/tough-cookie/package.json ***!
  \************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"author":{"name":"Jeremy Stashewsky","email":"jstash@gmail.com","website":"https://github.com/stash"},"contributors":[{"name":"Alexander Savin","website":"https://github.com/apsavin"},{"name":"Ian Livingstone","website":"https://github.com/ianlivingstone"},{"name":"Ivan Nikulin","website":"https://github.com/inikulin"},{"name":"Lalit Kapoor","website":"https://github.com/lalitkapoor"},{"name":"Sam Thompson","website":"https://github.com/sambthompson"},{"name":"Sebastian Mayr","website":"https://github.com/Sebmaster"}],"license":"BSD-3-Clause","name":"tough-cookie","description":"RFC6265 Cookies and Cookie Jar for node.js","keywords":["HTTP","cookie","cookies","set-cookie","cookiejar","jar","RFC6265","RFC2965"],"version":"2.4.3","homepage":"https://github.com/salesforce/tough-cookie","repository":{"type":"git","url":"git://github.com/salesforce/tough-cookie.git"},"bugs":{"url":"https://github.com/salesforce/tough-cookie/issues"},"main":"./lib/cookie","files":["lib"],"scripts":{"test":"vows test/*_test.js","cover":"nyc --reporter=lcov --reporter=html vows test/*_test.js"},"engines":{"node":">=0.8"},"devDependencies":{"async":"^1.4.2","nyc":"^11.6.0","string.prototype.repeat":"^0.2.0","vows":"^0.8.1"},"dependencies":{"psl":"^1.1.24","punycode":"^1.4.1"}}');

/***/ }),

/***/ "(ssr)/./node_modules/tough-cookie/package.json":
/*!************************************************!*\
  !*** ./node_modules/tough-cookie/package.json ***!
  \************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"author":{"name":"Jeremy Stashewsky","email":"jstash@gmail.com","website":"https://github.com/stash"},"contributors":[{"name":"Alexander Savin","website":"https://github.com/apsavin"},{"name":"Ian Livingstone","website":"https://github.com/ianlivingstone"},{"name":"Ivan Nikulin","website":"https://github.com/inikulin"},{"name":"Lalit Kapoor","website":"https://github.com/lalitkapoor"},{"name":"Sam Thompson","website":"https://github.com/sambthompson"},{"name":"Sebastian Mayr","website":"https://github.com/Sebmaster"}],"license":"BSD-3-Clause","name":"tough-cookie","description":"RFC6265 Cookies and Cookie Jar for node.js","keywords":["HTTP","cookie","cookies","set-cookie","cookiejar","jar","RFC6265","RFC2965"],"version":"2.4.3","homepage":"https://github.com/salesforce/tough-cookie","repository":{"type":"git","url":"git://github.com/salesforce/tough-cookie.git"},"bugs":{"url":"https://github.com/salesforce/tough-cookie/issues"},"main":"./lib/cookie","files":["lib"],"scripts":{"test":"vows test/*_test.js","cover":"nyc --reporter=lcov --reporter=html vows test/*_test.js"},"engines":{"node":">=0.8"},"devDependencies":{"async":"^1.4.2","nyc":"^11.6.0","string.prototype.repeat":"^0.2.0","vows":"^0.8.1"},"dependencies":{"psl":"^1.1.24","punycode":"^1.4.1"}}');

/***/ })

};
;