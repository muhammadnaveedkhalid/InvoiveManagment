"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/winston-transport";
exports.ids = ["vendor-chunks/winston-transport"];
exports.modules = {

/***/ "(ssr)/./node_modules/winston-transport/index.js":
/*!*************************************************!*\
  !*** ./node_modules/winston-transport/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Expose modern transport directly as the export\nmodule.exports = __webpack_require__(/*! ./modern */ \"(ssr)/./node_modules/winston-transport/modern.js\");\n// Expose legacy stream\nmodule.exports.LegacyTransportStream = __webpack_require__(/*! ./legacy */ \"(ssr)/./node_modules/winston-transport/legacy.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxpREFBaUQ7QUFDakRBLHdHQUF5QjtBQUV6Qix1QkFBdUI7QUFDdkJBLDhIQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24tdHJhbnNwb3J0L2luZGV4LmpzP2U2YmYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBFeHBvc2UgbW9kZXJuIHRyYW5zcG9ydCBkaXJlY3RseSBhcyB0aGUgZXhwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kZXJuJyk7XG5cbi8vIEV4cG9zZSBsZWdhY3kgc3RyZWFtXG5tb2R1bGUuZXhwb3J0cy5MZWdhY3lUcmFuc3BvcnRTdHJlYW0gPSByZXF1aXJlKCcuL2xlZ2FjeScpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiTGVnYWN5VHJhbnNwb3J0U3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston-transport/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston-transport/legacy.js":
/*!**************************************************!*\
  !*** ./node_modules/winston-transport/legacy.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst util = __webpack_require__(/*! util */ \"util\");\nconst { LEVEL } = __webpack_require__(/*! triple-beam */ \"(ssr)/./node_modules/triple-beam/index.js\");\nconst TransportStream = __webpack_require__(/*! ./modern */ \"(ssr)/./node_modules/winston-transport/modern.js\");\n/**\n * Constructor function for the LegacyTransportStream. This is an internal\n * wrapper `winston >= 3` uses to wrap older transports implementing\n * log(level, message, meta).\n * @param {Object} options - Options for this TransportStream instance.\n * @param {Transpot} options.transport - winston@2 or older Transport to wrap.\n */ const LegacyTransportStream = module.exports = function LegacyTransportStream(options = {}) {\n    TransportStream.call(this, options);\n    if (!options.transport || typeof options.transport.log !== \"function\") {\n        throw new Error(\"Invalid transport, must be an object with a log method.\");\n    }\n    this.transport = options.transport;\n    this.level = this.level || options.transport.level;\n    this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;\n    // Display our deprecation notice.\n    this._deprecated();\n    // Properly bubble up errors from the transport to the\n    // LegacyTransportStream instance, but only once no matter how many times\n    // this transport is shared.\n    function transportError(err) {\n        this.emit(\"error\", err, this.transport);\n    }\n    if (!this.transport.__winstonError) {\n        this.transport.__winstonError = transportError.bind(this);\n        this.transport.on(\"error\", this.transport.__winstonError);\n    }\n};\n/*\n * Inherit from TransportStream using Node.js built-ins\n */ util.inherits(LegacyTransportStream, TransportStream);\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */ LegacyTransportStream.prototype._write = function _write(info, enc, callback) {\n    if (this.silent || info.exception === true && !this.handleExceptions) {\n        return callback(null);\n    }\n    // Remark: This has to be handled in the base transport now because we\n    // cannot conditionally write to our pipe targets as stream.\n    if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {\n        this.transport.log(info[LEVEL], info.message, info, this._nop);\n    }\n    callback(null);\n};\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */ LegacyTransportStream.prototype._writev = function _writev(chunks, callback) {\n    for(let i = 0; i < chunks.length; i++){\n        if (this._accept(chunks[i])) {\n            this.transport.log(chunks[i].chunk[LEVEL], chunks[i].chunk.message, chunks[i].chunk, this._nop);\n            chunks[i].callback();\n        }\n    }\n    return callback(null);\n};\n/**\n * Displays a deprecation notice. Defined as a function so it can be\n * overriden in tests.\n * @returns {undefined}\n */ LegacyTransportStream.prototype._deprecated = function _deprecated() {\n    // eslint-disable-next-line no-console\n    console.error([\n        `${this.transport.name} is a legacy winston transport. Consider upgrading: `,\n        \"- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md\"\n    ].join(\"\\n\"));\n};\n/**\n * Clean up error handling state on the legacy transport associated\n * with this instance.\n * @returns {undefined}\n */ LegacyTransportStream.prototype.close = function close() {\n    if (this.transport.close) {\n        this.transport.close();\n    }\n    if (this.transport.__winstonError) {\n        this.transport.removeListener(\"error\", this.transport.__winstonError);\n        this.transport.__winstonError = null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston-transport/legacy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/winston-transport/modern.js":
/*!**************************************************!*\
  !*** ./node_modules/winston-transport/modern.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst util = __webpack_require__(/*! util */ \"util\");\nconst Writable = __webpack_require__(/*! readable-stream/lib/_stream_writable.js */ \"(ssr)/./node_modules/readable-stream/lib/_stream_writable.js\");\nconst { LEVEL } = __webpack_require__(/*! triple-beam */ \"(ssr)/./node_modules/triple-beam/index.js\");\n/**\n * Constructor function for the TransportStream. This is the base prototype\n * that all `winston >= 3` transports should inherit from.\n * @param {Object} options - Options for this TransportStream instance\n * @param {String} options.level - Highest level according to RFC5424.\n * @param {Boolean} options.handleExceptions - If true, info with\n * { exception: true } will be written.\n * @param {Function} options.log - Custom log function for simple Transport\n * creation\n * @param {Function} options.close - Called on \"unpipe\" from parent.\n */ const TransportStream = module.exports = function TransportStream(options = {}) {\n    Writable.call(this, {\n        objectMode: true,\n        highWaterMark: options.highWaterMark\n    });\n    this.format = options.format;\n    this.level = options.level;\n    this.handleExceptions = options.handleExceptions;\n    this.handleRejections = options.handleRejections;\n    this.silent = options.silent;\n    if (options.log) this.log = options.log;\n    if (options.logv) this.logv = options.logv;\n    if (options.close) this.close = options.close;\n    // Get the levels from the source we are piped from.\n    this.once(\"pipe\", (logger)=>{\n        // Remark (indexzero): this bookkeeping can only support multiple\n        // Logger parents with the same `levels`. This comes into play in\n        // the `winston.Container` code in which `container.add` takes\n        // a fully realized set of options with pre-constructed TransportStreams.\n        this.levels = logger.levels;\n        this.parent = logger;\n    });\n    // If and/or when the transport is removed from this instance\n    this.once(\"unpipe\", (src)=>{\n        // Remark (indexzero): this bookkeeping can only support multiple\n        // Logger parents with the same `levels`. This comes into play in\n        // the `winston.Container` code in which `container.add` takes\n        // a fully realized set of options with pre-constructed TransportStreams.\n        if (src === this.parent) {\n            this.parent = null;\n            if (this.close) {\n                this.close();\n            }\n        }\n    });\n};\n/*\n * Inherit from Writeable using Node.js built-ins\n */ util.inherits(TransportStream, Writable);\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */ TransportStream.prototype._write = function _write(info, enc, callback) {\n    if (this.silent || info.exception === true && !this.handleExceptions) {\n        return callback(null);\n    }\n    // Remark: This has to be handled in the base transport now because we\n    // cannot conditionally write to our pipe targets as stream. We always\n    // prefer any explicit level set on the Transport itself falling back to\n    // any level set on the parent.\n    const level = this.level || this.parent && this.parent.level;\n    if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n        if (info && !this.format) {\n            return this.log(info, callback);\n        }\n        let errState;\n        let transformed;\n        // We trap(and re-throw) any errors generated by the user-provided format, but also\n        // guarantee that the streams callback is invoked so that we can continue flowing.\n        try {\n            transformed = this.format.transform(Object.assign({}, info), this.format.options);\n        } catch (err) {\n            errState = err;\n        }\n        if (errState || !transformed) {\n            // eslint-disable-next-line callback-return\n            callback();\n            if (errState) throw errState;\n            return;\n        }\n        return this.log(transformed, callback);\n    }\n    this._writableState.sync = false;\n    return callback(null);\n};\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */ TransportStream.prototype._writev = function _writev(chunks, callback) {\n    if (this.logv) {\n        const infos = chunks.filter(this._accept, this);\n        if (!infos.length) {\n            return callback(null);\n        }\n        // Remark (indexzero): from a performance perspective if Transport\n        // implementers do choose to implement logv should we make it their\n        // responsibility to invoke their format?\n        return this.logv(infos, callback);\n    }\n    for(let i = 0; i < chunks.length; i++){\n        if (!this._accept(chunks[i])) continue;\n        if (chunks[i].chunk && !this.format) {\n            this.log(chunks[i].chunk, chunks[i].callback);\n            continue;\n        }\n        let errState;\n        let transformed;\n        // We trap(and re-throw) any errors generated by the user-provided format, but also\n        // guarantee that the streams callback is invoked so that we can continue flowing.\n        try {\n            transformed = this.format.transform(Object.assign({}, chunks[i].chunk), this.format.options);\n        } catch (err) {\n            errState = err;\n        }\n        if (errState || !transformed) {\n            // eslint-disable-next-line callback-return\n            chunks[i].callback();\n            if (errState) {\n                // eslint-disable-next-line callback-return\n                callback(null);\n                throw errState;\n            }\n        } else {\n            this.log(transformed, chunks[i].callback);\n        }\n    }\n    return callback(null);\n};\n/**\n * Predicate function that returns true if the specfied `info` on the\n * WriteReq, `write`, should be passed down into the derived\n * TransportStream's I/O via `.log(info, callback)`.\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\n * representing the log message.\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\n * logged.\n */ TransportStream.prototype._accept = function _accept(write) {\n    const info = write.chunk;\n    if (this.silent) {\n        return false;\n    }\n    // We always prefer any explicit level set on the Transport itself\n    // falling back to any level set on the parent.\n    const level = this.level || this.parent && this.parent.level;\n    // Immediately check the average case: log level filtering.\n    if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {\n        // Ensure the info object is valid based on `{ exception }`:\n        // 1. { handleExceptions: true }: all `info` objects are valid\n        // 2. { exception: false }: accepted by all transports.\n        if (this.handleExceptions || info.exception !== true) {\n            return true;\n        }\n    }\n    return false;\n};\n/**\n * _nop is short for \"No operation\"\n * @returns {Boolean} Intentionally false.\n */ TransportStream.prototype._nop = function _nop() {\n    // eslint-disable-next-line no-undefined\n    return void undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvbW9kZXJuLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDckIsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUM7QUFDekIsTUFBTSxFQUFFRSxLQUFLLEVBQUUsR0FBR0YsbUJBQU9BLENBQUM7QUFFMUI7Ozs7Ozs7Ozs7Q0FVQyxHQUNELE1BQU1HLGtCQUFrQkMsT0FBT0MsT0FBTyxHQUFHLFNBQVNGLGdCQUFnQkcsVUFBVSxDQUFDLENBQUM7SUFDNUVMLFNBQVNNLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFBRUMsWUFBWTtRQUFNQyxlQUFlSCxRQUFRRyxhQUFhO0lBQUM7SUFFN0UsSUFBSSxDQUFDQyxNQUFNLEdBQUdKLFFBQVFJLE1BQU07SUFDNUIsSUFBSSxDQUFDQyxLQUFLLEdBQUdMLFFBQVFLLEtBQUs7SUFDMUIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR04sUUFBUU0sZ0JBQWdCO0lBQ2hELElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUdQLFFBQVFPLGdCQUFnQjtJQUNoRCxJQUFJLENBQUNDLE1BQU0sR0FBR1IsUUFBUVEsTUFBTTtJQUU1QixJQUFJUixRQUFRUyxHQUFHLEVBQUUsSUFBSSxDQUFDQSxHQUFHLEdBQUdULFFBQVFTLEdBQUc7SUFDdkMsSUFBSVQsUUFBUVUsSUFBSSxFQUFFLElBQUksQ0FBQ0EsSUFBSSxHQUFHVixRQUFRVSxJQUFJO0lBQzFDLElBQUlWLFFBQVFXLEtBQUssRUFBRSxJQUFJLENBQUNBLEtBQUssR0FBR1gsUUFBUVcsS0FBSztJQUU3QyxvREFBb0Q7SUFDcEQsSUFBSSxDQUFDQyxJQUFJLENBQUMsUUFBUUMsQ0FBQUE7UUFDaEIsaUVBQWlFO1FBQ2pFLGlFQUFpRTtRQUNqRSw4REFBOEQ7UUFDOUQseUVBQXlFO1FBQ3pFLElBQUksQ0FBQ0MsTUFBTSxHQUFHRCxPQUFPQyxNQUFNO1FBQzNCLElBQUksQ0FBQ0MsTUFBTSxH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QTREO1FBQzVELDhEQUE4RDtRQUM5RCx1REFBdUQ7UUFDdkQsSUFBSSxJQUFJLENBQUNVLGdCQUFnQixJQUFJYyxLQUFLRyxTQUFTLEtBQUssTUFBTTtZQUNwRCxPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU87QUFDVDtBQUVBOzs7Q0FHQyxHQUNEMUIsZ0JBQWdCcUIsU0FBUyxDQUFDdUIsSUFBSSxHQUFHLFNBQVNBO0lBQ3hDLHdDQUF3QztJQUN4QyxPQUFPLEtBQUtDO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy93aW5zdG9uLXRyYW5zcG9ydC9tb2Rlcm4uanM/OGE2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBXcml0YWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuY29uc3QgeyBMRVZFTCB9ID0gcmVxdWlyZSgndHJpcGxlLWJlYW0nKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIFRyYW5zcG9ydFN0cmVhbS4gVGhpcyBpcyB0aGUgYmFzZSBwcm90b3R5cGVcbiAqIHRoYXQgYWxsIGB3aW5zdG9uID49IDNgIHRyYW5zcG9ydHMgc2hvdWxkIGluaGVyaXQgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhpcyBUcmFuc3BvcnRTdHJlYW0gaW5zdGFuY2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmxldmVsIC0gSGlnaGVzdCBsZXZlbCBhY2NvcmRpbmcgdG8gUkZDNTQyNC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5oYW5kbGVFeGNlcHRpb25zIC0gSWYgdHJ1ZSwgaW5mbyB3aXRoXG4gKiB7IGV4Y2VwdGlvbjogdHJ1ZSB9IHdpbGwgYmUgd3JpdHRlbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMubG9nIC0gQ3VzdG9tIGxvZyBmdW5jdGlvbiBmb3Igc2ltcGxlIFRyYW5zcG9ydFxuICogY3JlYXRpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMuY2xvc2UgLSBDYWxsZWQgb24gXCJ1bnBpcGVcIiBmcm9tIHBhcmVudC5cbiAqL1xuY29uc3QgVHJhbnNwb3J0U3RyZWFtID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUcmFuc3BvcnRTdHJlYW0ob3B0aW9ucyA9IHt9KSB7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgeyBvYmplY3RNb2RlOiB0cnVlLCBoaWdoV2F0ZXJNYXJrOiBvcHRpb25zLmhpZ2hXYXRlck1hcmsgfSk7XG5cbiAgdGhpcy5mb3JtYXQgPSBvcHRpb25zLmZvcm1hdDtcbiAgdGhpcy5sZXZlbCA9IG9wdGlvbnMubGV2ZWw7XG4gIHRoaXMuaGFuZGxlRXhjZXB0aW9ucyA9IG9wdGlvbnMuaGFuZGxlRXhjZXB0aW9ucztcbiAgdGhpcy5oYW5kbGVSZWplY3Rpb25zID0gb3B0aW9ucy5oYW5kbGVSZWplY3Rpb25zO1xuICB0aGlzLnNpbGVudCA9IG9wdGlvbnMuc2lsZW50O1xuXG4gIGlmIChvcHRpb25zLmxvZykgdGhpcy5sb2cgPSBvcHRpb25zLmxvZztcbiAgaWYgKG9wdGlvbnMubG9ndikgdGhpcy5sb2d2ID0gb3B0aW9ucy5sb2d2O1xuICBpZiAob3B0aW9ucy5jbG9zZSkgdGhpcy5jbG9zZSA9IG9wdGlvbnMuY2xvc2U7XG5cbiAgLy8gR2V0IHRoZSBsZXZlbHMgZnJvbSB0aGUgc291cmNlIHdlIGFyZSBwaXBlZCBmcm9tLlxuICB0aGlzLm9uY2UoJ3BpcGUnLCBsb2dnZXIgPT4ge1xuICAgIC8vIFJlbWFyayAoaW5kZXh6ZXJvKTogdGhpcyBib29ra2VlcGluZyBjYW4gb25seSBzdXBwb3J0IG11bHRpcGxlXG4gICAgLy8gTG9nZ2VyIHBhcmVudHMgd2l0aCB0aGUgc2FtZSBgbGV2ZWxzYC4gVGhpcyBjb21lcyBpbnRvIHBsYXkgaW5cbiAgICAvLyB0aGUgYHdpbnN0b24uQ29udGFpbmVyYCBjb2RlIGluIHdoaWNoIGBjb250YWluZXIuYWRkYCB0YWtlc1xuICAgIC8vIGEgZnVsbHkgcmVhbGl6ZWQgc2V0IG9mIG9wdGlvbnMgd2l0aCBwcmUtY29uc3RydWN0ZWQgVHJhbnNwb3J0U3RyZWFtcy5cbiAgICB0aGlzLmxldmVscyA9IGxvZ2dlci5sZXZlbHM7XG4gICAgdGhpcy5wYXJlbnQgPSBsb2dnZXI7XG4gIH0pO1xuXG4gIC8vIElmIGFuZC9vciB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgcmVtb3ZlZCBmcm9tIHRoaXMgaW5zdGFuY2VcbiAgdGhpcy5vbmNlKCd1bnBpcGUnLCBzcmMgPT4ge1xuICAgIC8vIFJlbWFyayAoaW5kZXh6ZXJvKTogdGhpcyBib29ra2VlcGluZyBjYW4gb25seSBzdXBwb3J0IG11bHRpcGxlXG4gICAgLy8gTG9nZ2VyIHBhcmVudHMgd2l0aCB0aGUgc2FtZSBgbGV2ZWxzYC4gVGhpcyBjb21lcyBpbnRvIHBsYXkgaW5cbiAgICAvLyB0aGUgYHdpbnN0b24uQ29udGFpbmVyYCBjb2RlIGluIHdoaWNoIGBjb250YWluZXIuYWRkYCB0YWtlc1xuICAgIC8vIGEgZnVsbHkgcmVhbGl6ZWQgc2V0IG9mIG9wdGlvbnMgd2l0aCBwcmUtY29uc3RydWN0ZWQgVHJhbnNwb3J0U3RyZWFtcy5cbiAgICBpZiAoc3JjID09PSB0aGlzLnBhcmVudCkge1xuICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgaWYgKHRoaXMuY2xvc2UpIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG4vKlxuICogSW5oZXJpdCBmcm9tIFdyaXRlYWJsZSB1c2luZyBOb2RlLmpzIGJ1aWx0LWluc1xuICovXG51dGlsLmluaGVyaXRzKFRyYW5zcG9ydFN0cmVhbSwgV3JpdGFibGUpO1xuXG4vKipcbiAqIFdyaXRlcyB0aGUgaW5mbyBvYmplY3QgdG8gb3VyIHRyYW5zcG9ydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7bWl4ZWR9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge21peGVkfSBlbmMgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAcHJpdmF0ZVxuICovXG5UcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZShpbmZvLCBlbmMsIGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLnNpbGVudCB8fCAoaW5mby5leGNlcHRpb24gPT09IHRydWUgJiYgIXRoaXMuaGFuZGxlRXhjZXB0aW9ucykpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gIH1cblxuICAvLyBSZW1hcms6IFRoaXMgaGFzIHRvIGJlIGhhbmRsZWQgaW4gdGhlIGJhc2UgdHJhbnNwb3J0IG5vdyBiZWNhdXNlIHdlXG4gIC8vIGNhbm5vdCBjb25kaXRpb25hbGx5IHdyaXRlIHRvIG91ciBwaXBlIHRhcmdldHMgYXMgc3RyZWFtLiBXZSBhbHdheXNcbiAgLy8gcHJlZmVyIGFueSBleHBsaWNpdCBsZXZlbCBzZXQgb24gdGhlIFRyYW5zcG9ydCBpdHNlbGYgZmFsbGluZyBiYWNrIHRvXG4gIC8vIGFueSBsZXZlbCBzZXQgb24gdGhlIHBhcmVudC5cbiAgY29uc3QgbGV2ZWwgPSB0aGlzLmxldmVsIHx8ICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5sZXZlbCk7XG5cbiAgaWYgKCFsZXZlbCB8fCB0aGlzLmxldmVsc1tsZXZlbF0gPj0gdGhpcy5sZXZlbHNbaW5mb1tMRVZFTF1dKSB7XG4gICAgaWYgKGluZm8gJiYgIXRoaXMuZm9ybWF0KSB7XG4gICAgICByZXR1cm4gdGhpcy5sb2coaW5mbywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGxldCBlcnJTdGF0ZTtcbiAgICBsZXQgdHJhbnNmb3JtZWQ7XG5cbiAgICAvLyBXZSB0cmFwKGFuZCByZS10aHJvdykgYW55IGVycm9ycyBnZW5lcmF0ZWQgYnkgdGhlIHVzZXItcHJvdmlkZWQgZm9ybWF0LCBidXQgYWxzb1xuICAgIC8vIGd1YXJhbnRlZSB0aGF0IHRoZSBzdHJlYW1zIGNhbGxiYWNrIGlzIGludm9rZWQgc28gdGhhdCB3ZSBjYW4gY29udGludWUgZmxvd2luZy5cbiAgICB0cnkge1xuICAgICAgdHJhbnNmb3JtZWQgPSB0aGlzLmZvcm1hdC50cmFuc2Zvcm0oT2JqZWN0LmFzc2lnbih7fSwgaW5mbyksIHRoaXMuZm9ybWF0Lm9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZXJyU3RhdGUgPSBlcnI7XG4gICAgfVxuXG4gICAgaWYgKGVyclN0YXRlIHx8ICF0cmFuc2Zvcm1lZCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIGlmIChlcnJTdGF0ZSkgdGhyb3cgZXJyU3RhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubG9nKHRyYW5zZm9ybWVkLCBjYWxsYmFjayk7XG4gIH1cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG4gIHJldHVybiBjYWxsYmFjayhudWxsKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIHRoZSBiYXRjaCBvZiBpbmZvIG9iamVjdHMgKGkuZS4gXCJvYmplY3QgY2h1bmtzXCIpIHRvIG91ciB0cmFuc3BvcnRcbiAqIGluc3RhbmNlIGFmdGVyIHBlcmZvcm1pbmcgYW55IG5lY2Vzc2FyeSBmaWx0ZXJpbmcuXG4gKiBAcGFyYW0ge21peGVkfSBjaHVua3MgLSBUT0RPOiBhZGQgcGFyYW1zIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW1zIGRlc2NyaXB0aW9uLlxuICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm5zIGRlc2NyaXB0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuVHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fd3JpdGV2ID0gZnVuY3Rpb24gX3dyaXRldihjaHVua3MsIGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLmxvZ3YpIHtcbiAgICBjb25zdCBpbmZvcyA9IGNodW5rcy5maWx0ZXIodGhpcy5fYWNjZXB0LCB0aGlzKTtcbiAgICBpZiAoIWluZm9zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgIH1cblxuICAgIC8vIFJlbWFyayAoaW5kZXh6ZXJvKTogZnJvbSBhIHBlcmZvcm1hbmNlIHBlcnNwZWN0aXZlIGlmIFRyYW5zcG9ydFxuICAgIC8vIGltcGxlbWVudGVycyBkbyBjaG9vc2UgdG8gaW1wbGVtZW50IGxvZ3Ygc2hvdWxkIHdlIG1ha2UgaXQgdGhlaXJcbiAgICAvLyByZXNwb25zaWJpbGl0eSB0byBpbnZva2UgdGhlaXIgZm9ybWF0P1xuICAgIHJldHVybiB0aGlzLmxvZ3YoaW5mb3MsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2h1bmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCF0aGlzLl9hY2NlcHQoY2h1bmtzW2ldKSkgY29udGludWU7XG5cbiAgICBpZiAoY2h1bmtzW2ldLmNodW5rICYmICF0aGlzLmZvcm1hdCkge1xuICAgICAgdGhpcy5sb2coY2h1bmtzW2ldLmNodW5rLCBjaHVua3NbaV0uY2FsbGJhY2spO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbGV0IGVyclN0YXRlO1xuICAgIGxldCB0cmFuc2Zvcm1lZDtcblxuICAgIC8vIFdlIHRyYXAoYW5kIHJlLXRocm93KSBhbnkgZXJyb3JzIGdlbmVyYXRlZCBieSB0aGUgdXNlci1wcm92aWRlZCBmb3JtYXQsIGJ1dCBhbHNvXG4gICAgLy8gZ3VhcmFudGVlIHRoYXQgdGhlIHN0cmVhbXMgY2FsbGJhY2sgaXMgaW52b2tlZCBzbyB0aGF0IHdlIGNhbiBjb250aW51ZSBmbG93aW5nLlxuICAgIHRyeSB7XG4gICAgICB0cmFuc2Zvcm1lZCA9IHRoaXMuZm9ybWF0LnRyYW5zZm9ybShcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgY2h1bmtzW2ldLmNodW5rKSxcbiAgICAgICAgdGhpcy5mb3JtYXQub3B0aW9uc1xuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGVyclN0YXRlID0gZXJyO1xuICAgIH1cblxuICAgIGlmIChlcnJTdGF0ZSB8fCAhdHJhbnNmb3JtZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgIGNodW5rc1tpXS5jYWxsYmFjaygpO1xuICAgICAgaWYgKGVyclN0YXRlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYWxsYmFjay1yZXR1cm5cbiAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIHRocm93IGVyclN0YXRlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZyh0cmFuc2Zvcm1lZCwgY2h1bmtzW2ldLmNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG59O1xuXG4vKipcbiAqIFByZWRpY2F0ZSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2ZpZWQgYGluZm9gIG9uIHRoZVxuICogV3JpdGVSZXEsIGB3cml0ZWAsIHNob3VsZCBiZSBwYXNzZWQgZG93biBpbnRvIHRoZSBkZXJpdmVkXG4gKiBUcmFuc3BvcnRTdHJlYW0ncyBJL08gdmlhIGAubG9nKGluZm8sIGNhbGxiYWNrKWAuXG4gKiBAcGFyYW0ge1dyaXRlUmVxfSB3cml0ZSAtIHdpbnN0b25AMyBOb2RlLmpzIFdyaXRlUmVxIGZvciB0aGUgYGluZm9gIG9iamVjdFxuICogcmVwcmVzZW50aW5nIHRoZSBsb2cgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSAtIFZhbHVlIGluZGljYXRpbmcgaWYgdGhlIGB3cml0ZWAgc2hvdWxkIGJlIGFjY2VwdGVkICZcbiAqIGxvZ2dlZC5cbiAqL1xuVHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fYWNjZXB0ID0gZnVuY3Rpb24gX2FjY2VwdCh3cml0ZSkge1xuICBjb25zdCBpbmZvID0gd3JpdGUuY2h1bms7XG4gIGlmICh0aGlzLnNpbGVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFdlIGFsd2F5cyBwcmVmZXIgYW55IGV4cGxpY2l0IGxldmVsIHNldCBvbiB0aGUgVHJhbnNwb3J0IGl0c2VsZlxuICAvLyBmYWxsaW5nIGJhY2sgdG8gYW55IGxldmVsIHNldCBvbiB0aGUgcGFyZW50LlxuICBjb25zdCBsZXZlbCA9IHRoaXMubGV2ZWwgfHwgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmxldmVsKTtcblxuICAvLyBJbW1lZGlhdGVseSBjaGVjayB0aGUgYXZlcmFnZSBjYXNlOiBsb2cgbGV2ZWwgZmlsdGVyaW5nLlxuICBpZiAoXG4gICAgaW5mby5leGNlcHRpb24gPT09IHRydWUgfHxcbiAgICAhbGV2ZWwgfHxcbiAgICB0aGlzLmxldmVsc1tsZXZlbF0gPj0gdGhpcy5sZXZlbHNbaW5mb1tMRVZFTF1dXG4gICkge1xuICAgIC8vIEVuc3VyZSB0aGUgaW5mbyBvYmplY3QgaXMgdmFsaWQgYmFzZWQgb24gYHsgZXhjZXB0aW9uIH1gOlxuICAgIC8vIDEuIHsgaGFuZGxlRXhjZXB0aW9uczogdHJ1ZSB9OiBhbGwgYGluZm9gIG9iamVjdHMgYXJlIHZhbGlkXG4gICAgLy8gMi4geyBleGNlcHRpb246IGZhbHNlIH06IGFjY2VwdGVkIGJ5IGFsbCB0cmFuc3BvcnRzLlxuICAgIGlmICh0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgfHwgaW5mby5leGNlcHRpb24gIT09IHRydWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogX25vcCBpcyBzaG9ydCBmb3IgXCJObyBvcGVyYXRpb25cIlxuICogQHJldHVybnMge0Jvb2xlYW59IEludGVudGlvbmFsbHkgZmFsc2UuXG4gKi9cblRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX25vcCA9IGZ1bmN0aW9uIF9ub3AoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZmluZWRcbiAgcmV0dXJuIHZvaWQgdW5kZWZpbmVkO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsIldyaXRhYmxlIiwiTEVWRUwiLCJUcmFuc3BvcnRTdHJlYW0iLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsImNhbGwiLCJvYmplY3RNb2RlIiwiaGlnaFdhdGVyTWFyayIsImZvcm1hdCIsImxldmVsIiwiaGFuZGxlRXhjZXB0aW9ucyIsImhhbmRsZVJlamVjdGlvbnMiLCJzaWxlbnQiLCJsb2ciLCJsb2d2IiwiY2xvc2UiLCJvbmNlIiwibG9nZ2VyIiwibGV2ZWxzIiwicGFyZW50Iiwic3JjIiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJfd3JpdGUiLCJpbmZvIiwiZW5jIiwiY2FsbGJhY2siLCJleGNlcHRpb24iLCJlcnJTdGF0ZSIsInRyYW5zZm9ybWVkIiwidHJhbnNmb3JtIiwiT2JqZWN0IiwiYXNzaWduIiwiZXJyIiwiX3dyaXRhYmxlU3RhdGUiLCJzeW5jIiwiX3dyaXRldiIsImNodW5rcyIsImluZm9zIiwiZmlsdGVyIiwiX2FjY2VwdCIsImxlbmd0aCIsImkiLCJjaHVuayIsIndyaXRlIiwiX25vcCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/winston-transport/modern.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston-transport/index.js":
/*!*************************************************!*\
  !*** ./node_modules/winston-transport/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Expose modern transport directly as the export\nmodule.exports = __webpack_require__(/*! ./modern */ \"(rsc)/./node_modules/winston-transport/modern.js\");\n// Expose legacy stream\nmodule.exports.LegacyTransportStream = __webpack_require__(/*! ./legacy */ \"(rsc)/./node_modules/winston-transport/legacy.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxpREFBaUQ7QUFDakRBLHdHQUF5QjtBQUV6Qix1QkFBdUI7QUFDdkJBLDhIQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3dpbnN0b24tdHJhbnNwb3J0L2luZGV4LmpzP2U2YmYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBFeHBvc2UgbW9kZXJuIHRyYW5zcG9ydCBkaXJlY3RseSBhcyB0aGUgZXhwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kZXJuJyk7XG5cbi8vIEV4cG9zZSBsZWdhY3kgc3RyZWFtXG5tb2R1bGUuZXhwb3J0cy5MZWdhY3lUcmFuc3BvcnRTdHJlYW0gPSByZXF1aXJlKCcuL2xlZ2FjeScpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiTGVnYWN5VHJhbnNwb3J0U3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston-transport/legacy.js":
/*!**************************************************!*\
  !*** ./node_modules/winston-transport/legacy.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst util = __webpack_require__(/*! util */ \"util\");\nconst { LEVEL } = __webpack_require__(/*! triple-beam */ \"(rsc)/./node_modules/triple-beam/index.js\");\nconst TransportStream = __webpack_require__(/*! ./modern */ \"(rsc)/./node_modules/winston-transport/modern.js\");\n/**\n * Constructor function for the LegacyTransportStream. This is an internal\n * wrapper `winston >= 3` uses to wrap older transports implementing\n * log(level, message, meta).\n * @param {Object} options - Options for this TransportStream instance.\n * @param {Transpot} options.transport - winston@2 or older Transport to wrap.\n */ const LegacyTransportStream = module.exports = function LegacyTransportStream(options = {}) {\n    TransportStream.call(this, options);\n    if (!options.transport || typeof options.transport.log !== \"function\") {\n        throw new Error(\"Invalid transport, must be an object with a log method.\");\n    }\n    this.transport = options.transport;\n    this.level = this.level || options.transport.level;\n    this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;\n    // Display our deprecation notice.\n    this._deprecated();\n    // Properly bubble up errors from the transport to the\n    // LegacyTransportStream instance, but only once no matter how many times\n    // this transport is shared.\n    function transportError(err) {\n        this.emit(\"error\", err, this.transport);\n    }\n    if (!this.transport.__winstonError) {\n        this.transport.__winstonError = transportError.bind(this);\n        this.transport.on(\"error\", this.transport.__winstonError);\n    }\n};\n/*\n * Inherit from TransportStream using Node.js built-ins\n */ util.inherits(LegacyTransportStream, TransportStream);\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */ LegacyTransportStream.prototype._write = function _write(info, enc, callback) {\n    if (this.silent || info.exception === true && !this.handleExceptions) {\n        return callback(null);\n    }\n    // Remark: This has to be handled in the base transport now because we\n    // cannot conditionally write to our pipe targets as stream.\n    if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {\n        this.transport.log(info[LEVEL], info.message, info, this._nop);\n    }\n    callback(null);\n};\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */ LegacyTransportStream.prototype._writev = function _writev(chunks, callback) {\n    for(let i = 0; i < chunks.length; i++){\n        if (this._accept(chunks[i])) {\n            this.transport.log(chunks[i].chunk[LEVEL], chunks[i].chunk.message, chunks[i].chunk, this._nop);\n            chunks[i].callback();\n        }\n    }\n    return callback(null);\n};\n/**\n * Displays a deprecation notice. Defined as a function so it can be\n * overriden in tests.\n * @returns {undefined}\n */ LegacyTransportStream.prototype._deprecated = function _deprecated() {\n    // eslint-disable-next-line no-console\n    console.error([\n        `${this.transport.name} is a legacy winston transport. Consider upgrading: `,\n        \"- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md\"\n    ].join(\"\\n\"));\n};\n/**\n * Clean up error handling state on the legacy transport associated\n * with this instance.\n * @returns {undefined}\n */ LegacyTransportStream.prototype.close = function close() {\n    if (this.transport.close) {\n        this.transport.close();\n    }\n    if (this.transport.__winstonError) {\n        this.transport.removeListener(\"error\", this.transport.__winstonError);\n        this.transport.__winstonError = null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston-transport/legacy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston-transport/modern.js":
/*!**************************************************!*\
  !*** ./node_modules/winston-transport/modern.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst util = __webpack_require__(/*! util */ \"util\");\nconst Writable = __webpack_require__(/*! readable-stream/lib/_stream_writable.js */ \"(rsc)/./node_modules/readable-stream/lib/_stream_writable.js\");\nconst { LEVEL } = __webpack_require__(/*! triple-beam */ \"(rsc)/./node_modules/triple-beam/index.js\");\n/**\n * Constructor function for the TransportStream. This is the base prototype\n * that all `winston >= 3` transports should inherit from.\n * @param {Object} options - Options for this TransportStream instance\n * @param {String} options.level - Highest level according to RFC5424.\n * @param {Boolean} options.handleExceptions - If true, info with\n * { exception: true } will be written.\n * @param {Function} options.log - Custom log function for simple Transport\n * creation\n * @param {Function} options.close - Called on \"unpipe\" from parent.\n */ const TransportStream = module.exports = function TransportStream(options = {}) {\n    Writable.call(this, {\n        objectMode: true,\n        highWaterMark: options.highWaterMark\n    });\n    this.format = options.format;\n    this.level = options.level;\n    this.handleExceptions = options.handleExceptions;\n    this.handleRejections = options.handleRejections;\n    this.silent = options.silent;\n    if (options.log) this.log = options.log;\n    if (options.logv) this.logv = options.logv;\n    if (options.close) this.close = options.close;\n    // Get the levels from the source we are piped from.\n    this.once(\"pipe\", (logger)=>{\n        // Remark (indexzero): this bookkeeping can only support multiple\n        // Logger parents with the same `levels`. This comes into play in\n        // the `winston.Container` code in which `container.add` takes\n        // a fully realized set of options with pre-constructed TransportStreams.\n        this.levels = logger.levels;\n        this.parent = logger;\n    });\n    // If and/or when the transport is removed from this instance\n    this.once(\"unpipe\", (src)=>{\n        // Remark (indexzero): this bookkeeping can only support multiple\n        // Logger parents with the same `levels`. This comes into play in\n        // the `winston.Container` code in which `container.add` takes\n        // a fully realized set of options with pre-constructed TransportStreams.\n        if (src === this.parent) {\n            this.parent = null;\n            if (this.close) {\n                this.close();\n            }\n        }\n    });\n};\n/*\n * Inherit from Writeable using Node.js built-ins\n */ util.inherits(TransportStream, Writable);\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */ TransportStream.prototype._write = function _write(info, enc, callback) {\n    if (this.silent || info.exception === true && !this.handleExceptions) {\n        return callback(null);\n    }\n    // Remark: This has to be handled in the base transport now because we\n    // cannot conditionally write to our pipe targets as stream. We always\n    // prefer any explicit level set on the Transport itself falling back to\n    // any level set on the parent.\n    const level = this.level || this.parent && this.parent.level;\n    if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n        if (info && !this.format) {\n            return this.log(info, callback);\n        }\n        let errState;\n        let transformed;\n        // We trap(and re-throw) any errors generated by the user-provided format, but also\n        // guarantee that the streams callback is invoked so that we can continue flowing.\n        try {\n            transformed = this.format.transform(Object.assign({}, info), this.format.options);\n        } catch (err) {\n            errState = err;\n        }\n        if (errState || !transformed) {\n            // eslint-disable-next-line callback-return\n            callback();\n            if (errState) throw errState;\n            return;\n        }\n        return this.log(transformed, callback);\n    }\n    this._writableState.sync = false;\n    return callback(null);\n};\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */ TransportStream.prototype._writev = function _writev(chunks, callback) {\n    if (this.logv) {\n        const infos = chunks.filter(this._accept, this);\n        if (!infos.length) {\n            return callback(null);\n        }\n        // Remark (indexzero): from a performance perspective if Transport\n        // implementers do choose to implement logv should we make it their\n        // responsibility to invoke their format?\n        return this.logv(infos, callback);\n    }\n    for(let i = 0; i < chunks.length; i++){\n        if (!this._accept(chunks[i])) continue;\n        if (chunks[i].chunk && !this.format) {\n            this.log(chunks[i].chunk, chunks[i].callback);\n            continue;\n        }\n        let errState;\n        let transformed;\n        // We trap(and re-throw) any errors generated by the user-provided format, but also\n        // guarantee that the streams callback is invoked so that we can continue flowing.\n        try {\n            transformed = this.format.transform(Object.assign({}, chunks[i].chunk), this.format.options);\n        } catch (err) {\n            errState = err;\n        }\n        if (errState || !transformed) {\n            // eslint-disable-next-line callback-return\n            chunks[i].callback();\n            if (errState) {\n                // eslint-disable-next-line callback-return\n                callback(null);\n                throw errState;\n            }\n        } else {\n            this.log(transformed, chunks[i].callback);\n        }\n    }\n    return callback(null);\n};\n/**\n * Predicate function that returns true if the specfied `info` on the\n * WriteReq, `write`, should be passed down into the derived\n * TransportStream's I/O via `.log(info, callback)`.\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\n * representing the log message.\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\n * logged.\n */ TransportStream.prototype._accept = function _accept(write) {\n    const info = write.chunk;\n    if (this.silent) {\n        return false;\n    }\n    // We always prefer any explicit level set on the Transport itself\n    // falling back to any level set on the parent.\n    const level = this.level || this.parent && this.parent.level;\n    // Immediately check the average case: log level filtering.\n    if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {\n        // Ensure the info object is valid based on `{ exception }`:\n        // 1. { handleExceptions: true }: all `info` objects are valid\n        // 2. { exception: false }: accepted by all transports.\n        if (this.handleExceptions || info.exception !== true) {\n            return true;\n        }\n    }\n    return false;\n};\n/**\n * _nop is short for \"No operation\"\n * @returns {Boolean} Intentionally false.\n */ TransportStream.prototype._nop = function _nop() {\n    // eslint-disable-next-line no-undefined\n    return void undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston-transport/modern.js\n");

/***/ })

};
;