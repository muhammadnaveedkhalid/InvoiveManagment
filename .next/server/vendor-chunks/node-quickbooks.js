"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-quickbooks";
exports.ids = ["vendor-chunks/node-quickbooks"];
exports.modules = {

/***/ "(ssr)/./node_modules/node-quickbooks/index.js":
/*!***********************************************!*\
  !*** ./node_modules/node-quickbooks/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * @file Node.js client for QuickBooks V3 API\n * @name node-quickbooks\n * @author Michael Cohen <michael_cohen@intuit.com>\n * @license ISC\n * @copyright 2014 Michael Cohen\n */ \nvar request = __webpack_require__(/*! request */ \"(ssr)/./node_modules/request/index.js\"), uuid = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\"), debug = __webpack_require__(/*! request-debug */ \"(ssr)/./node_modules/request-debug/index.js\"), util = __webpack_require__(/*! util */ \"util\"), formatISO = __webpack_require__(/*! date-fns/fp/formatISO */ \"(ssr)/./node_modules/date-fns/esm/fp/formatISO/index.js\"), _ = __webpack_require__(/*! underscore */ \"(ssr)/./node_modules/underscore/modules/index-all.js\"), Promise = __webpack_require__(/*! bluebird */ \"(ssr)/./node_modules/bluebird/js/release/bluebird.js\"), version = (__webpack_require__(/*! ./package.json */ \"(ssr)/./node_modules/node-quickbooks/package.json\").version), xmlParser = new (__webpack_require__(/*! fast-xml-parser */ \"(ssr)/./node_modules/fast-xml-parser/src/fxp.js\").XMLParser)();\nmodule.exports = QuickBooks;\nQuickBooks.APP_CENTER_BASE = \"https://appcenter.intuit.com\";\nQuickBooks.V3_ENDPOINT_BASE_URL = \"https://sandbox-quickbooks.api.intuit.com/v3/company/\";\nQuickBooks.QUERY_OPERATORS = [\n    \"=\",\n    \"IN\",\n    \"<\",\n    \">\",\n    \"<=\",\n    \">=\",\n    \"LIKE\"\n];\nQuickBooks.TOKEN_URL = \"https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer\";\nQuickBooks.REVOKE_URL = \"https://developer.api.intuit.com/v2/oauth2/tokens/revoke\";\nvar OAUTH_ENDPOINTS = {\n    \"1.0a\": function(callback) {\n        callback({\n            REQUEST_TOKEN_URL: \"https://oauth.intuit.com/oauth/v1/get_request_token\",\n            ACCESS_TOKEN_URL: \"https://oauth.intuit.com/oauth/v1/get_access_token\",\n            APP_CENTER_URL: QuickBooks.APP_CENTER_BASE + \"/Connect/Begin?oauth_token=\",\n            RECONNECT_URL: QuickBooks.APP_CENTER_BASE + \"/api/v1/connection/reconnect\",\n            DISCONNECT_URL: QuickBooks.APP_CENTER_BASE + \"/api/v1/connection/disconnect\"\n        });\n    },\n    \"2.0\": function(callback, discoveryUrl) {\n        var NEW_ENDPOINT_CONFIGURATION = {};\n        request({\n            url: discoveryUrl,\n            headers: {\n                Accept: \"application/json\"\n            }\n        }, function(err, res) {\n            if (err) {\n                console.log(err);\n                return err;\n            }\n            var json;\n            try {\n                json = JSON.parse(res.body);\n            } catch (error) {\n                console.log(error);\n                return error;\n            }\n            NEW_ENDPOINT_CONFIGURATION.AUTHORIZATION_URL = json.authorization_endpoint;\n            ;\n            NEW_ENDPOINT_CONFIGURATION.TOKEN_URL = json.token_endpoint;\n            NEW_ENDPOINT_CONFIGURATION.USER_INFO_URL = json.userinfo_endpoint;\n            NEW_ENDPOINT_CONFIGURATION.REVOKE_URL = json.revocation_endpoint;\n            callback(NEW_ENDPOINT_CONFIGURATION);\n        });\n    }\n};\nOAUTH_ENDPOINTS[\"1.0\"] = OAUTH_ENDPOINTS[\"1.0a\"];\n/**\n * Sets endpoints per OAuth version\n *\n * @param version - 1.0 for OAuth 1.0a, 2.0 for OAuth 2.0\n * @param useSandbox - true to use the OAuth 2.0 sandbox discovery document, false (or unspecified, for backward compatibility) to use the prod discovery document.\n */ QuickBooks.setOauthVersion = function(version1, useSandbox) {\n    version1 = typeof version1 === \"number\" ? version1.toFixed(1) : version1;\n    QuickBooks.version = version1;\n    var discoveryUrl = useSandbox ? \"https://developer.intuit.com/.well-known/openid_sandbox_configuration/\" : \"https://developer.api.intuit.com/.well-known/openid_configuration/\";\n    OAUTH_ENDPOINTS[version1](function(endpoints) {\n        for(var k in endpoints){\n            QuickBooks[k] = endpoints[k];\n        }\n    }, discoveryUrl);\n};\nQuickBooks.setOauthVersion(\"1.0\");\n/**\n * Node.js client encapsulating access to the QuickBooks V3 Rest API. An instance\n * of this class should be instantiated on behalf of each user accessing the api.\n *\n * @param consumerKey - application key\n * @param consumerSecret  - application password\n * @param token - the OAuth generated user-specific key\n * @param tokenSecret - the OAuth generated user-specific password\n * @param realmId - QuickBooks companyId, returned as a request parameter when the user is redirected to the provided callback URL following authentication\n * @param useSandbox - boolean - See https://developer.intuit.com/v2/blog/2014/10/24/intuit-developer-now-offers-quickbooks-sandboxes\n * @param debug - boolean flag to turn on logging of HTTP requests, including headers and body\n * @param minorversion - integer to set minorversion in request\n * @constructor\n */ function QuickBooks(consumerKey, consumerSecret, token, tokenSecret, realmId, useSandbox, debug, minorversion, oauthversion, refreshToken) {\n    var prefix = _.isObject(consumerKey) ? \"consumerKey.\" : \"\";\n    this.consumerKey = eval(prefix + \"consumerKey\");\n    this.consumerSecret = eval(prefix + \"consumerSecret\");\n    this.token = eval(prefix + \"token\");\n    this.tokenSecret = eval(prefix + \"tokenSecret\");\n    this.realmId = eval(prefix + \"realmId\");\n    this.useSandbox = eval(prefix + \"useSandbox\");\n    this.debug = eval(prefix + \"debug\");\n    this.endpoint = this.useSandbox ? QuickBooks.V3_ENDPOINT_BASE_URL : QuickBooks.V3_ENDPOINT_BASE_URL.replace(\"sandbox-\", \"\");\n    this.minorversion = eval(prefix + \"minorversion\") || 65;\n    this.oauthversion = eval(prefix + \"oauthversion\") || \"1.0a\";\n    this.refreshToken = eval(prefix + \"refreshToken\") || null;\n    if (!eval(prefix + \"tokenSecret\") && this.oauthversion !== \"2.0\") {\n        throw new Error(\"tokenSecret not defined\");\n    }\n}\n/**\n *\n * Use the refresh token to obtain a new access token.\n *\n *\n */ QuickBooks.prototype.refreshAccessToken = function(callback) {\n    var auth = Buffer.from(this.consumerKey + \":\" + this.consumerSecret).toString(\"base64\");\n    var postBody = {\n        url: QuickBooks.TOKEN_URL,\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: \"Basic \" + auth\n        },\n        form: {\n            grant_type: \"refresh_token\",\n            refresh_token: this.refreshToken\n        }\n    };\n    request.post(postBody, (function(e, r, data) {\n        if (r && r.body && r.error !== \"invalid_grant\") {\n            var refreshResponse = JSON.parse(r.body);\n            this.refreshToken = refreshResponse.refresh_token;\n            this.token = refreshResponse.access_token;\n            if (callback) callback(e, refreshResponse);\n        } else {\n            if (callback) callback(e, r, data);\n        }\n    }).bind(this));\n};\n/**\n * Use either refresh token or access token to revoke access (OAuth2).\n *\n * @param useRefresh - boolean - Indicates which token to use: true to use the refresh token, false to use the access token.\n * @param {function} callback - Callback function to call with error/response/data results.\n */ QuickBooks.prototype.revokeAccess = function(useRefresh, callback) {\n    var auth = Buffer.from(this.consumerKey + \":\" + this.consumerSecret).toString(\"base64\");\n    var revokeToken = useRefresh ? this.refreshToken : this.token;\n    var postBody = {\n        url: QuickBooks.REVOKE_URL,\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: \"Basic \" + auth\n        },\n        form: {\n            token: revokeToken\n        }\n    };\n    request.post(postBody, (function(e, r, data) {\n        if (r && r.statusCode === 200) {\n            this.refreshToken = null;\n            this.token = null;\n            this.realmId = null;\n        }\n        if (callback) callback(e, r, data);\n    }).bind(this));\n};\n/**\n * Get user info (OAuth2).\n *\n * @param {function} callback - Callback function to call with error/response/data results.\n */ QuickBooks.prototype.getUserInfo = function(callback) {\n    module.request(this, \"get\", {\n        url: QuickBooks.USER_INFO_URL\n    }, null, callback);\n};\n/**\n * Batch operation to enable an application to perform multiple operations in a single request.\n * The following batch items are supported:\n     create\n     update\n     delete\n     query\n * The maximum number of batch items in a single request is 30.\n *\n * @param  {object} items - JavaScript array of batch items\n * @param  {function} callback - Callback function which is called with any error and list of BatchItemResponses\n */ QuickBooks.prototype.batch = function(items, callback) {\n    module.request(this, \"post\", {\n        url: \"/batch\"\n    }, {\n        BatchItemRequest: items\n    }, callback);\n};\n/**\n * The change data capture (CDC) operation returns a list of entities that have changed since a specified time.\n *\n * @param  {object} entities - Comma separated list or JavaScript array of entities to search for changes\n * @param  {object} since - JavaScript Date or string representation of the form '2012-07-20T22:25:51-07:00' to look back for changes until\n * @param  {function} callback - Callback function which is called with any error and list of changes\n */ QuickBooks.prototype.changeDataCapture = function(entities, since, callback) {\n    var url = \"/cdc?entities=\";\n    url += typeof entities === \"string\" ? entities : entities.join(\",\");\n    url += \"&changedSince=\";\n    url += typeof since === \"string\" ? since : formatISO(since);\n    module.request(this, \"get\", {\n        url: url\n    }, null, callback);\n};\n/**\n * Uploads a file as an Attachable in QBO, optionally linking it to the specified\n * QBO Entity.\n *\n * @param  {string} filename - the name of the file\n * @param  {string} contentType - the mime type of the file\n * @param  {object} stream - ReadableStream of file contents\n * @param  {object} entityType - optional string name of the QBO entity the Attachable will be linked to (e.g. Invoice)\n * @param  {object} entityId - optional Id of the QBO entity the Attachable will be linked to\n * @param  {function} callback - callback which receives the newly created Attachable\n */ QuickBooks.prototype.upload = function(filename, contentType, stream, entityType, entityId, callback) {\n    var that = this;\n    var opts = {\n        url: \"/upload\",\n        formData: {\n            file_content_01: {\n                value: stream,\n                options: {\n                    filename: filename,\n                    contentType: contentType\n                }\n            }\n        }\n    };\n    module.request(this, \"post\", opts, null, module.unwrap(function(err, data) {\n        if (err || data[0].Fault) {\n            (callback || entityType)(err || data[0], null);\n        } else if (_.isFunction(entityType)) {\n            entityType(null, data[0].Attachable);\n        } else {\n            var id = data[0].Attachable.Id;\n            that.updateAttachable({\n                Id: id,\n                SyncToken: \"0\",\n                AttachableRef: [\n                    {\n                        EntityRef: {\n                            type: entityType,\n                            value: entityId + \"\"\n                        }\n                    }\n                ]\n            }, function(err, data) {\n                callback(err, data);\n            });\n        }\n    }, \"AttachableResponse\"));\n};\n/**\n * Creates the Account in QuickBooks\n *\n * @param  {object} account - The unsaved account, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Account\n */ QuickBooks.prototype.createAccount = function(account, callback) {\n    module.create(this, \"account\", account, callback);\n};\n/**\n * Creates the Attachable in QuickBooks\n *\n * @param  {object} attachable - The unsaved attachable, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Attachable\n */ QuickBooks.prototype.createAttachable = function(attachable, callback) {\n    module.create(this, \"attachable\", attachable, callback);\n};\n/**\n * Creates the Bill in QuickBooks\n *\n * @param  {object} bill - The unsaved bill, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Bill\n */ QuickBooks.prototype.createBill = function(bill, callback) {\n    module.create(this, \"bill\", bill, callback);\n};\n/**\n * Creates the BillPayment in QuickBooks\n *\n * @param  {object} billPayment - The unsaved billPayment, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent BillPayment\n */ QuickBooks.prototype.createBillPayment = function(billPayment, callback) {\n    module.create(this, \"billPayment\", billPayment, callback);\n};\n/**\n * Creates the Class in QuickBooks\n *\n * @param  {object} class - The unsaved class, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Class\n */ QuickBooks.prototype.createClass = function(klass, callback) {\n    module.create(this, \"class\", klass, callback);\n};\n/**\n * Creates the CreditMemo in QuickBooks\n *\n * @param  {object} creditMemo - The unsaved creditMemo, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent CreditMemo\n */ QuickBooks.prototype.createCreditMemo = function(creditMemo, callback) {\n    module.create(this, \"creditMemo\", creditMemo, callback);\n};\n/**\n * Creates the Customer in QuickBooks\n *\n * @param  {object} customer - The unsaved customer, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Customer\n */ QuickBooks.prototype.createCustomer = function(customer, callback) {\n    module.create(this, \"customer\", customer, callback);\n};\n/**\n * Creates the Department in QuickBooks\n *\n * @param  {object} department - The unsaved department, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Department\n */ QuickBooks.prototype.createDepartment = function(department, callback) {\n    module.create(this, \"department\", department, callback);\n};\n/**\n * Creates the Deposit in QuickBooks\n *\n * @param  {object} deposit - The unsaved Deposit, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Deposit\n */ QuickBooks.prototype.createDeposit = function(deposit, callback) {\n    module.create(this, \"deposit\", deposit, callback);\n};\n/**\n * Creates the Employee in QuickBooks\n *\n * @param  {object} employee - The unsaved employee, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Employee\n */ QuickBooks.prototype.createEmployee = function(employee, callback) {\n    module.create(this, \"employee\", employee, callback);\n};\n/**\n * Creates the Estimate in QuickBooks\n *\n * @param  {object} estimate - The unsaved estimate, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Estimate\n */ QuickBooks.prototype.createEstimate = function(estimate, callback) {\n    module.create(this, \"estimate\", estimate, callback);\n};\n/**\n * Creates the Invoice in QuickBooks\n *\n * @param  {object} invoice - The unsaved invoice, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */ QuickBooks.prototype.createInvoice = function(invoice, callback) {\n    module.create(this, \"invoice\", invoice, callback);\n};\n/**\n * Creates the Item in QuickBooks\n *\n * @param  {object} item - The unsaved item, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Item\n */ QuickBooks.prototype.createItem = function(item, callback) {\n    module.create(this, \"item\", item, callback);\n};\n/**\n * Creates the JournalCode in QuickBooks\n *\n * @param  {object} journalCode - The unsaved journalCode, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalCode\n */ QuickBooks.prototype.createJournalCode = function(journalCode, callback) {\n    module.create(this, \"journalCode\", journalCode, callback);\n};\n/**\n * Creates the JournalEntry in QuickBooks\n *\n * @param  {object} journalEntry - The unsaved journalEntry, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalEntry\n */ QuickBooks.prototype.createJournalEntry = function(journalEntry, callback) {\n    module.create(this, \"journalEntry\", journalEntry, callback);\n};\n/**\n * Creates the Payment in QuickBooks\n *\n * @param  {object} payment - The unsaved payment, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */ QuickBooks.prototype.createPayment = function(payment, callback) {\n    module.create(this, \"payment\", payment, callback);\n};\n/**\n * Creates the PaymentMethod in QuickBooks\n *\n * @param  {object} paymentMethod - The unsaved paymentMethod, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent PaymentMethod\n */ QuickBooks.prototype.createPaymentMethod = function(paymentMethod, callback) {\n    module.create(this, \"paymentMethod\", paymentMethod, callback);\n};\n/**\n * Creates the Purchase in QuickBooks\n *\n * @param  {object} purchase - The unsaved purchase, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Purchase\n */ QuickBooks.prototype.createPurchase = function(purchase, callback) {\n    module.create(this, \"purchase\", purchase, callback);\n};\n/**\n * Creates the PurchaseOrder in QuickBooks\n *\n * @param  {object} purchaseOrder - The unsaved purchaseOrder, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent PurchaseOrder\n */ QuickBooks.prototype.createPurchaseOrder = function(purchaseOrder, callback) {\n    module.create(this, \"purchaseOrder\", purchaseOrder, callback);\n};\n/**\n * Creates the RefundReceipt in QuickBooks\n *\n * @param  {object} refundReceipt - The unsaved refundReceipt, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent RefundReceipt\n */ QuickBooks.prototype.createRefundReceipt = function(refundReceipt, callback) {\n    module.create(this, \"refundReceipt\", refundReceipt, callback);\n};\n/**\n * Creates the SalesReceipt in QuickBooks\n *\n * @param  {object} salesReceipt - The unsaved salesReceipt, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent SalesReceipt\n */ QuickBooks.prototype.createSalesReceipt = function(salesReceipt, callback) {\n    module.create(this, \"salesReceipt\", salesReceipt, callback);\n};\n/**\n * Creates the TaxAgency in QuickBooks\n *\n * @param  {object} taxAgency - The unsaved taxAgency, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxAgency\n */ QuickBooks.prototype.createTaxAgency = function(taxAgency, callback) {\n    module.create(this, \"taxAgency\", taxAgency, callback);\n};\n/**\n * Creates the TaxService in QuickBooks\n *\n * @param  {object} taxService - The unsaved taxService, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxService\n */ QuickBooks.prototype.createTaxService = function(taxService, callback) {\n    module.create(this, \"taxService/taxcode\", taxService, callback);\n};\n/**\n * Creates the Term in QuickBooks\n *\n * @param  {object} term - The unsaved term, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Term\n */ QuickBooks.prototype.createTerm = function(term, callback) {\n    module.create(this, \"term\", term, callback);\n};\n/**\n * Creates the TimeActivity in QuickBooks\n *\n * @param  {object} timeActivity - The unsaved timeActivity, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent TimeActivity\n */ QuickBooks.prototype.createTimeActivity = function(timeActivity, callback) {\n    module.create(this, \"timeActivity\", timeActivity, callback);\n};\n/**\n * Creates the Transfer in QuickBooks\n *\n * @param  {object} transfer - The unsaved Transfer, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Transfer\n */ QuickBooks.prototype.createTransfer = function(transfer, callback) {\n    module.create(this, \"transfer\", transfer, callback);\n};\n/**\n * Creates the Vendor in QuickBooks\n *\n * @param  {object} vendor - The unsaved vendor, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Vendor\n */ QuickBooks.prototype.createVendor = function(vendor, callback) {\n    module.create(this, \"vendor\", vendor, callback);\n};\n/**\n * Creates the VendorCredit in QuickBooks\n *\n * @param  {object} vendorCredit - The unsaved vendorCredit, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent VendorCredit\n */ QuickBooks.prototype.createVendorCredit = function(vendorCredit, callback) {\n    module.create(this, \"vendorCredit\", vendorCredit, callback);\n};\n/**\n * Retrieves the Account from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Account\n * @param  {function} callback - Callback function which is called with any error and the persistent Account\n */ QuickBooks.prototype.getAccount = function(id, callback) {\n    module.read(this, \"account\", id, callback);\n};\n/**\n * Retrieves the Attachable from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Attachable\n * @param  {function} callback - Callback function which is called with any error and the persistent Attachable\n */ QuickBooks.prototype.getAttachable = function(id, callback) {\n    module.read(this, \"attachable\", id, callback);\n};\n/**\n * Retrieves the Bill from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Bill\n * @param  {function} callback - Callback function which is called with any error and the persistent Bill\n */ QuickBooks.prototype.getBill = function(id, callback) {\n    module.read(this, \"bill\", id, callback);\n};\n/**\n * Retrieves the BillPayment from QuickBooks\n *\n * @param  {string} Id - The Id of persistent BillPayment\n * @param  {function} callback - Callback function which is called with any error and the persistent BillPayment\n */ QuickBooks.prototype.getBillPayment = function(id, callback) {\n    module.read(this, \"billPayment\", id, callback);\n};\n/**\n * Retrieves the Class from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Class\n * @param  {function} callback - Callback function which is called with any error and the persistent Class\n */ QuickBooks.prototype.getClass = function(id, callback) {\n    module.read(this, \"class\", id, callback);\n};\n/**\n * Retrieves the CompanyInfo from QuickBooks\n *\n * @param  {string} Id - The Id of persistent CompanyInfo\n * @param  {function} callback - Callback function which is called with any error and the persistent CompanyInfo\n */ QuickBooks.prototype.getCompanyInfo = function(id, callback) {\n    module.read(this, \"companyInfo\", id, callback);\n};\n/**\n * Retrieves the CompanyCurrency from QuickBooks\n *\n * @param  {string} Id - The Id of persistent CompanyCurrency\n * @param  {function} callback - Callback function which is called with any error and the persistent CompanyCurrency\n */ QuickBooks.prototype.getCompanyCurrency = function(id, callback) {\n    module.read(this, \"companyCurrency\", id, callback);\n};\n/**\n * Retrieves the CreditMemo from QuickBooks\n *\n * @param  {string} Id - The Id of persistent CreditMemo\n * @param  {function} callback - Callback function which is called with any error and the persistent CreditMemo\n */ QuickBooks.prototype.getCreditMemo = function(id, callback) {\n    module.read(this, \"creditMemo\", id, callback);\n};\n/**\n * Retrieves the Customer from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Customer\n * @param  {function} callback - Callback function which is called with any error and the persistent Customer\n */ QuickBooks.prototype.getCustomer = function(id, callback) {\n    module.read(this, \"customer\", id, callback);\n};\n/**\n * Retrieves the CustomerType from QuickBooks\n *\n * @param  {string} Id - The Id of persistent CustomerType\n * @param  {function} callback - Callback function which is called with any error and the persistent CustomerType\n */ QuickBooks.prototype.getCustomerType = function(id, callback) {\n    module.read(this, \"customerType\", id, callback);\n};\n/**\n * Retrieves the Department from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Department\n * @param  {function} callback - Callback function which is called with any error and the persistent Department\n */ QuickBooks.prototype.getDepartment = function(id, callback) {\n    module.read(this, \"department\", id, callback);\n};\n/**\n * Retrieves the Deposit from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Deposit\n * @param  {function} callback - Callback function which is called with any error and the persistent Deposit\n */ QuickBooks.prototype.getDeposit = function(id, callback) {\n    module.read(this, \"deposit\", id, callback);\n};\n/**\n * Retrieves the Employee from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Employee\n * @param  {function} callback - Callback function which is called with any error and the persistent Employee\n */ QuickBooks.prototype.getEmployee = function(id, callback) {\n    module.read(this, \"employee\", id, callback);\n};\n/**\n * Retrieves the Estimate from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Estimate\n * @param  {function} callback - Callback function which is called with any error and the persistent Estimate\n */ QuickBooks.prototype.getEstimate = function(id, callback) {\n    module.read(this, \"estimate\", id, callback);\n};\n/**\n * Retrieves an ExchangeRate from QuickBooks\n *\n * @param  {object} options - An object with options including the required `sourcecurrencycode` parameter and optional `asofdate` parameter.\n * @param  {function} callback - Callback function which is called with any error and the ExchangeRate\n */ QuickBooks.prototype.getExchangeRate = function(options, callback) {\n    var url = \"/exchangerate\";\n    module.request(this, \"get\", {\n        url: url,\n        qs: options\n    }, null, callback);\n};\n/**\n * Retrieves the Estimate PDF from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Estimate\n * @param  {function} callback - Callback function which is called with any error and the Estimate PDF\n */ QuickBooks.prototype.getEstimatePdf = function(id, callback) {\n    module.read(this, \"Estimate\", id + \"/pdf\", callback);\n};\n/**\n * Emails the Estimate PDF from QuickBooks to the address supplied in Estimate.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent Estimate\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in Estimate.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the Estimate PDF\n */ QuickBooks.prototype.sendEstimatePdf = function(id, sendTo, callback) {\n    var path = \"/estimate/\" + id + \"/send\";\n    callback = _.isFunction(sendTo) ? sendTo : callback;\n    if (sendTo && !_.isFunction(sendTo)) {\n        path += \"?sendTo=\" + sendTo;\n    }\n    module.request(this, \"post\", {\n        url: path\n    }, null, module.unwrap(callback, \"Estimate\"));\n};\n/**\n * Retrieves the Invoice from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Invoice\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */ QuickBooks.prototype.getInvoice = function(id, callback) {\n    module.read(this, \"invoice\", id, callback);\n};\n/**\n * Retrieves the Invoice PDF from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Invoice\n * @param  {function} callback - Callback function which is called with any error and the Invoice PDF\n */ QuickBooks.prototype.getInvoicePdf = function(id, callback) {\n    module.read(this, \"Invoice\", id + \"/pdf\", callback);\n};\n/**\n * Emails the Invoice PDF from QuickBooks to the address supplied in Invoice.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent Invoice\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in Invoice.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the Invoice PDF\n */ QuickBooks.prototype.sendInvoicePdf = function(id, sendTo, callback) {\n    var path = \"/invoice/\" + id + \"/send\";\n    callback = _.isFunction(sendTo) ? sendTo : callback;\n    if (sendTo && !_.isFunction(sendTo)) {\n        path += \"?sendTo=\" + sendTo;\n    }\n    module.request(this, \"post\", {\n        url: path\n    }, null, module.unwrap(callback, \"Invoice\"));\n};\n/**\n * Retrieves the Credit Memo PDF from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Credit Memo\n * @param  {function} callback - Callback function which is called with any error and the Credit Memo PDF\n */ QuickBooks.prototype.getCreditMemoPdf = function(id, callback) {\n    module.read(this, \"CreditMemo\", id + \"/pdf\", callback);\n};\n/**\n * Emails the Credit Memo PDF from QuickBooks to the address supplied in CreditMemo.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent Credit Memo\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in CreditMemo.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the Credit Memo PDF\n */ QuickBooks.prototype.sendCreditMemoPdf = function(id, sendTo, callback) {\n    var path = \"/creditmemo/\" + id + \"/send\";\n    callback = _.isFunction(sendTo) ? sendTo : callback;\n    if (sendTo && !_.isFunction(sendTo)) {\n        path += \"?sendTo=\" + sendTo;\n    }\n    module.request(this, \"post\", {\n        url: path\n    }, null, module.unwrap(callback, \"CreditMemo\"));\n};\n/**\n * Emails the Purchase Order from QuickBooks to the address supplied in PurchaseOrder.POEmail.Address\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent Purchase Order\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in PurchaseOrder.POEmail.Address will be used\n * @param  {function} callback - Callback function which is called with any error and the Invoice PDF\n */ QuickBooks.prototype.sendPurchaseOrder = function(id, sendTo, callback) {\n    var path = \"/purchaseorder/\" + id + \"/send\";\n    callback = _.isFunction(sendTo) ? sendTo : callback;\n    if (sendTo && !_.isFunction(sendTo)) {\n        path += \"?sendTo=\" + sendTo;\n    }\n    module.request(this, \"post\", {\n        url: path\n    }, null, module.unwrap(callback, \"PurchaseOrder\"));\n};\n/**\n * Retrieves the Item from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Item\n * @param  {function} callback - Callback function which is called with any error and the persistent Item\n */ QuickBooks.prototype.getItem = function(id, callback) {\n    module.read(this, \"item\", id, callback);\n};\n/**\n * Retrieves the JournalCode from QuickBooks\n *\n * @param  {string} Id - The Id of persistent JournalCode\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalCode\n */ QuickBooks.prototype.getJournalCode = function(id, callback) {\n    module.read(this, \"journalCode\", id, callback);\n};\n/**\n * Retrieves the JournalEntry from QuickBooks\n *\n * @param  {string} Id - The Id of persistent JournalEntry\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalEntry\n */ QuickBooks.prototype.getJournalEntry = function(id, callback) {\n    module.read(this, \"journalEntry\", id, callback);\n};\n/**\n * Retrieves the Payment from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Payment\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */ QuickBooks.prototype.getPayment = function(id, callback) {\n    module.read(this, \"payment\", id, callback);\n};\n/**\n * Retrieves the PaymentMethod from QuickBooks\n *\n * @param  {string} Id - The Id of persistent PaymentMethod\n * @param  {function} callback - Callback function which is called with any error and the persistent PaymentMethod\n */ QuickBooks.prototype.getPaymentMethod = function(id, callback) {\n    module.read(this, \"paymentMethod\", id, callback);\n};\n/**\n * Retrieves the Preferences from QuickBooks\n *\n * @param  {function} callback - Callback function which is called with any error and the persistent Preferences\n */ QuickBooks.prototype.getPreferences = function(callback) {\n    module.read(this, \"preferences\", null, callback);\n};\n/**\n * Retrieves the Purchase from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Purchase\n * @param  {function} callback - Callback function which is called with any error and the persistent Purchase\n */ QuickBooks.prototype.getPurchase = function(id, callback) {\n    module.read(this, \"purchase\", id, callback);\n};\n/**\n * Retrieves the PurchaseOrder from QuickBooks\n *\n * @param  {string} Id - The Id of persistent PurchaseOrder\n * @param  {function} callback - Callback function which is called with any error and the persistent PurchaseOrder\n */ QuickBooks.prototype.getPurchaseOrder = function(id, callback) {\n    module.read(this, \"purchaseOrder\", id, callback);\n};\n/**\n * Retrieves the RefundReceipt from QuickBooks\n *\n * @param  {string} Id - The Id of persistent RefundReceipt\n * @param  {function} callback - Callback function which is called with any error and the persistent RefundReceipt\n */ QuickBooks.prototype.getRefundReceipt = function(id, callback) {\n    module.read(this, \"refundReceipt\", id, callback);\n};\n/**\n * Retrieves the Reports from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Reports\n * @param  {function} callback - Callback function which is called with any error and the persistent Reports\n */ QuickBooks.prototype.getReports = function(id, callback) {\n    module.read(this, \"reports\", id, callback);\n};\n/**\n * Retrieves the SalesReceipt from QuickBooks\n *\n * @param  {string} Id - The Id of persistent SalesReceipt\n * @param  {function} callback - Callback function which is called with any error and the persistent SalesReceipt\n */ QuickBooks.prototype.getSalesReceipt = function(id, callback) {\n    module.read(this, \"salesReceipt\", id, callback);\n};\n/**\n * Retrieves the SalesReceipt PDF from QuickBooks\n *\n * @param  {string} Id - The Id of persistent SalesReceipt\n * @param  {function} callback - Callback function which is called with any error and the SalesReceipt PDF\n */ QuickBooks.prototype.getSalesReceiptPdf = function(id, callback) {\n    module.read(this, \"salesReceipt\", id + \"/pdf\", callback);\n};\n/**\n * Emails the SalesReceipt PDF from QuickBooks to the address supplied in SalesReceipt.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent SalesReceipt\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in SalesReceipt.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the SalesReceipt PDF\n */ QuickBooks.prototype.sendSalesReceiptPdf = function(id, sendTo, callback) {\n    var path = \"/salesreceipt/\" + id + \"/send\";\n    callback = _.isFunction(sendTo) ? sendTo : callback;\n    if (sendTo && !_.isFunction(sendTo)) {\n        path += \"?sendTo=\" + sendTo;\n    }\n    module.request(this, \"post\", {\n        url: path\n    }, null, module.unwrap(callback, \"SalesReceipt\"));\n};\n/**\n * Retrieves the TaxAgency from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TaxAgency\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxAgency\n */ QuickBooks.prototype.getTaxAgency = function(id, callback) {\n    module.read(this, \"taxAgency\", id, callback);\n};\n/**\n * Retrieves the TaxCode from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TaxCode\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxCode\n */ QuickBooks.prototype.getTaxCode = function(id, callback) {\n    module.read(this, \"taxCode\", id, callback);\n};\n/**\n * Retrieves the TaxRate from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TaxRate\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxRate\n */ QuickBooks.prototype.getTaxRate = function(id, callback) {\n    module.read(this, \"taxRate\", id, callback);\n};\n/**\n * Retrieves the Term from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Term\n * @param  {function} callback - Callback function which is called with any error and the persistent Term\n */ QuickBooks.prototype.getTerm = function(id, callback) {\n    module.read(this, \"term\", id, callback);\n};\n/**\n * Retrieves the TimeActivity from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TimeActivity\n * @param  {function} callback - Callback function which is called with any error and the persistent TimeActivity\n */ QuickBooks.prototype.getTimeActivity = function(id, callback) {\n    module.read(this, \"timeActivity\", id, callback);\n};\n/**\n * Retrieves the Transfer from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Term\n * @param  {function} callback - Callback function which is called with any error and the persistent Transfer\n */ QuickBooks.prototype.getTransfer = function(id, callback) {\n    module.read(this, \"transfer\", id, callback);\n};\n/**\n * Retrieves the Vendor from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Vendor\n * @param  {function} callback - Callback function which is called with any error and the persistent Vendor\n */ QuickBooks.prototype.getVendor = function(id, callback) {\n    module.read(this, \"vendor\", id, callback);\n};\n/**\n * Retrieves the VendorCredit from QuickBooks\n *\n * @param  {string} Id - The Id of persistent VendorCredit\n * @param  {function} callback - Callback function which is called with any error and the persistent VendorCredit\n */ QuickBooks.prototype.getVendorCredit = function(id, callback) {\n    module.read(this, \"vendorCredit\", id, callback);\n};\n/**\n * Updates QuickBooks version of Account\n *\n * @param  {object} account - The persistent Account, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Account\n */ QuickBooks.prototype.updateAccount = function(account, callback) {\n    module.update(this, \"account\", account, callback);\n};\n/**\n * Updates QuickBooks version of Attachable\n *\n * @param  {object} attachable - The persistent Attachable, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Attachable\n */ QuickBooks.prototype.updateAttachable = function(attachable, callback) {\n    module.update(this, \"attachable\", attachable, callback);\n};\n/**\n * Updates QuickBooks version of Bill\n *\n * @param  {object} bill - The persistent Bill, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Bill\n */ QuickBooks.prototype.updateBill = function(bill, callback) {\n    module.update(this, \"bill\", bill, callback);\n};\n/**\n * Updates QuickBooks version of BillPayment\n *\n * @param  {object} billPayment - The persistent BillPayment, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent BillPayment\n */ QuickBooks.prototype.updateBillPayment = function(billPayment, callback) {\n    module.update(this, \"billPayment\", billPayment, callback);\n};\n/**\n * Updates QuickBooks version of Class\n *\n * @param  {object} class - The persistent Class, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Class\n */ QuickBooks.prototype.updateClass = function(klass, callback) {\n    module.update(this, \"class\", klass, callback);\n};\n/**\n * Updates QuickBooks version of CompanyInfo\n *\n * @param  {object} companyInfo - The persistent CompanyInfo, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent CompanyInfo\n */ QuickBooks.prototype.updateCompanyInfo = function(companyInfo, callback) {\n    module.update(this, \"companyInfo\", companyInfo, callback);\n};\n/**\n * Updates QuickBooks version of CreditMemo\n *\n * @param  {object} creditMemo - The persistent CreditMemo, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent CreditMemo\n */ QuickBooks.prototype.updateCreditMemo = function(creditMemo, callback) {\n    module.update(this, \"creditMemo\", creditMemo, callback);\n};\n/**\n * Updates QuickBooks version of Customer\n *\n * @param  {object} customer - The persistent Customer, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Customer\n */ QuickBooks.prototype.updateCustomer = function(customer, callback) {\n    module.update(this, \"customer\", customer, callback);\n};\n/**\n * Updates QuickBooks version of Department\n *\n * @param  {object} department - The persistent Department, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Department\n */ QuickBooks.prototype.updateDepartment = function(department, callback) {\n    module.update(this, \"department\", department, callback);\n};\n/**\n * Updates QuickBooks version of Deposit\n *\n * @param  {object} deposit - The persistent Deposit, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Deposit\n */ QuickBooks.prototype.updateDeposit = function(deposit, callback) {\n    module.update(this, \"deposit\", deposit, callback);\n};\n/**\n * Updates QuickBooks version of Employee\n *\n * @param  {object} employee - The persistent Employee, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Employee\n */ QuickBooks.prototype.updateEmployee = function(employee, callback) {\n    module.update(this, \"employee\", employee, callback);\n};\n/**\n * Updates QuickBooks version of Estimate\n *\n * @param  {object} estimate - The persistent Estimate, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Estimate\n */ QuickBooks.prototype.updateEstimate = function(estimate, callback) {\n    module.update(this, \"estimate\", estimate, callback);\n};\n/**\n * Updates QuickBooks version of Invoice\n *\n * @param  {object} invoice - The persistent Invoice, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */ QuickBooks.prototype.updateInvoice = function(invoice, callback) {\n    module.update(this, \"invoice\", invoice, callback);\n};\n/**\n * Updates QuickBooks version of Item\n *\n * @param  {object} item - The persistent Item, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Item\n */ QuickBooks.prototype.updateItem = function(item, callback) {\n    var opts = {};\n    if (item.doNotUpdateAccountOnTxns && item.doNotUpdateAccountOnTxns.toString() === \"true\") {\n        opts.qs = {\n            include: \"donotupdateaccountontxns\"\n        };\n        delete item.doNotUpdateAccountOnTxns;\n    }\n    module.update(this, \"item\", item, callback, opts);\n};\n/**\n * Updates QuickBooks version of JournalCode\n *\n * @param  {object} journalCode - The persistent JournalCode, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalCode\n */ QuickBooks.prototype.updateJournalCode = function(journalCode, callback) {\n    module.update(this, \"journalCode\", journalCode, callback);\n};\n/**\n * Updates QuickBooks version of JournalEntry\n *\n * @param  {object} journalEntry - The persistent JournalEntry, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalEntry\n */ QuickBooks.prototype.updateJournalEntry = function(journalEntry, callback) {\n    module.update(this, \"journalEntry\", journalEntry, callback);\n};\n/**\n * Updates QuickBooks version of Payment\n *\n * @param  {object} payment - The persistent Payment, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */ QuickBooks.prototype.updatePayment = function(payment, callback) {\n    module.update(this, \"payment\", payment, callback);\n};\n/**\n * Updates QuickBooks version of PaymentMethod\n *\n * @param  {object} paymentMethod - The persistent PaymentMethod, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent PaymentMethod\n */ QuickBooks.prototype.updatePaymentMethod = function(paymentMethod, callback) {\n    module.update(this, \"paymentMethod\", paymentMethod, callback);\n};\n/**\n * Updates QuickBooks version of Preferences\n *\n * @param  {object} preferences - The persistent Preferences, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Preferences\n */ QuickBooks.prototype.updatePreferences = function(preferences, callback) {\n    module.update(this, \"preferences\", preferences, callback);\n};\n/**\n * Updates QuickBooks version of Purchase\n *\n * @param  {object} purchase - The persistent Purchase, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Purchase\n */ QuickBooks.prototype.updatePurchase = function(purchase, callback) {\n    module.update(this, \"purchase\", purchase, callback);\n};\n/**\n * Updates QuickBooks version of PurchaseOrder\n *\n * @param  {object} purchaseOrder - The persistent PurchaseOrder, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent PurchaseOrder\n */ QuickBooks.prototype.updatePurchaseOrder = function(purchaseOrder, callback) {\n    module.update(this, \"purchaseOrder\", purchaseOrder, callback);\n};\n/**\n * Updates QuickBooks version of RefundReceipt\n *\n * @param  {object} refundReceipt - The persistent RefundReceipt, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent RefundReceipt\n */ QuickBooks.prototype.updateRefundReceipt = function(refundReceipt, callback) {\n    module.update(this, \"refundReceipt\", refundReceipt, callback);\n};\n/**\n * Updates QuickBooks version of SalesReceipt\n *\n * @param  {object} salesReceipt - The persistent SalesReceipt, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent SalesReceipt\n */ QuickBooks.prototype.updateSalesReceipt = function(salesReceipt, callback) {\n    module.update(this, \"salesReceipt\", salesReceipt, callback);\n};\n/**\n * Updates QuickBooks version of TaxAgency\n *\n * @param  {object} taxAgency - The persistent TaxAgency, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxAgency\n */ QuickBooks.prototype.updateTaxAgency = function(taxAgency, callback) {\n    module.update(this, \"taxAgency\", taxAgency, callback);\n};\n/**\n * Updates QuickBooks version of TaxCode\n *\n * @param  {object} taxCode - The persistent TaxCode, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxCode\n */ QuickBooks.prototype.updateTaxCode = function(taxCode, callback) {\n    module.update(this, \"taxCode\", taxCode, callback);\n};\n/**\n * Updates QuickBooks version of TaxRate\n *\n * @param  {object} taxRate - The persistent TaxRate, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxRate\n */ QuickBooks.prototype.updateTaxRate = function(taxRate, callback) {\n    module.update(this, \"taxRate\", taxRate, callback);\n};\n/**\n * Updates QuickBooks version of Term\n *\n * @param  {object} term - The persistent Term, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Term\n */ QuickBooks.prototype.updateTerm = function(term, callback) {\n    module.update(this, \"term\", term, callback);\n};\n/**\n * Updates QuickBooks version of TimeActivity\n *\n * @param  {object} timeActivity - The persistent TimeActivity, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TimeActivity\n */ QuickBooks.prototype.updateTimeActivity = function(timeActivity, callback) {\n    module.update(this, \"timeActivity\", timeActivity, callback);\n};\n/**\n * Updates QuickBooks version of Transfer\n *\n * @param  {object} Transfer - The persistent Transfer, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Transfer\n */ QuickBooks.prototype.updateTransfer = function(transfer, callback) {\n    module.update(this, \"transfer\", transfer, callback);\n};\n/**\n * Updates QuickBooks version of Vendor\n *\n * @param  {object} vendor - The persistent Vendor, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Vendor\n */ QuickBooks.prototype.updateVendor = function(vendor, callback) {\n    module.update(this, \"vendor\", vendor, callback);\n};\n/**\n * Updates QuickBooks version of VendorCredit\n *\n * @param  {object} vendorCredit - The persistent VendorCredit, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent VendorCredit\n */ QuickBooks.prototype.updateVendorCredit = function(vendorCredit, callback) {\n    module.update(this, \"vendorCredit\", vendorCredit, callback);\n};\n/**\n * Updates QuickBooks version of ExchangeRate\n *\n * @param  {object} exchangeRate - The persistent ExchangeRate, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent ExchangeRate\n */ QuickBooks.prototype.updateExchangeRate = function(exchangeRate, callback) {\n    module.update(this, \"exchangerate\", exchangeRate, callback);\n};\n/**\n * Deletes the Attachable from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Attachable to be deleted, or the Id of the Attachable, in which case an extra GET request will be issued to first retrieve the Attachable\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Attachable\n */ QuickBooks.prototype.deleteAttachable = function(idOrEntity, callback) {\n    module.delete(this, \"attachable\", idOrEntity, callback);\n};\n/**\n * Deletes the Bill from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Bill to be deleted, or the Id of the Bill, in which case an extra GET request will be issued to first retrieve the Bill\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Bill\n */ QuickBooks.prototype.deleteBill = function(idOrEntity, callback) {\n    module.delete(this, \"bill\", idOrEntity, callback);\n};\n/**\n * Deletes the BillPayment from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent BillPayment to be deleted, or the Id of the BillPayment, in which case an extra GET request will be issued to first retrieve the BillPayment\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent BillPayment\n */ QuickBooks.prototype.deleteBillPayment = function(idOrEntity, callback) {\n    module.delete(this, \"billPayment\", idOrEntity, callback);\n};\n/**\n * Deletes the CreditMemo from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent CreditMemo to be deleted, or the Id of the CreditMemo, in which case an extra GET request will be issued to first retrieve the CreditMemo\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent CreditMemo\n */ QuickBooks.prototype.deleteCreditMemo = function(idOrEntity, callback) {\n    module.delete(this, \"creditMemo\", idOrEntity, callback);\n};\n/**\n * Deletes the Deposit from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Deposit to be deleted, or the Id of the Deposit, in which case an extra GET request will be issued to first retrieve the Deposit\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Deposit\n */ QuickBooks.prototype.deleteDeposit = function(idOrEntity, callback) {\n    module.delete(this, \"deposit\", idOrEntity, callback);\n};\n/**\n * Deletes the Estimate from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Estimate to be deleted, or the Id of the Estimate, in which case an extra GET request will be issued to first retrieve the Estimate\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Estimate\n */ QuickBooks.prototype.deleteEstimate = function(idOrEntity, callback) {\n    module.delete(this, \"estimate\", idOrEntity, callback);\n};\n/**\n * Deletes the Invoice from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Invoice to be deleted, or the Id of the Invoice, in which case an extra GET request will be issued to first retrieve the Invoice\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Invoice\n */ QuickBooks.prototype.deleteInvoice = function(idOrEntity, callback) {\n    module.delete(this, \"invoice\", idOrEntity, callback);\n};\n/**\n * Deletes the JournalCode from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent JournalCode to be deleted, or the Id of the JournalCode, in which case an extra GET request will be issued to first retrieve the JournalCode\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent JournalCode\n */ QuickBooks.prototype.deleteJournalCode = function(idOrEntity, callback) {\n    module.delete(this, \"journalCode\", idOrEntity, callback);\n};\n/**\n * Deletes the JournalEntry from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent JournalEntry to be deleted, or the Id of the JournalEntry, in which case an extra GET request will be issued to first retrieve the JournalEntry\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent JournalEntry\n */ QuickBooks.prototype.deleteJournalEntry = function(idOrEntity, callback) {\n    module.delete(this, \"journalEntry\", idOrEntity, callback);\n};\n/**\n * Deletes the Payment from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Payment to be deleted, or the Id of the Payment, in which case an extra GET request will be issued to first retrieve the Payment\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Payment\n */ QuickBooks.prototype.deletePayment = function(idOrEntity, callback) {\n    module.delete(this, \"payment\", idOrEntity, callback);\n};\n/**\n * Deletes the Purchase from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Purchase to be deleted, or the Id of the Purchase, in which case an extra GET request will be issued to first retrieve the Purchase\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Purchase\n */ QuickBooks.prototype.deletePurchase = function(idOrEntity, callback) {\n    module.delete(this, \"purchase\", idOrEntity, callback);\n};\n/**\n * Deletes the PurchaseOrder from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent PurchaseOrder to be deleted, or the Id of the PurchaseOrder, in which case an extra GET request will be issued to first retrieve the PurchaseOrder\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent PurchaseOrder\n */ QuickBooks.prototype.deletePurchaseOrder = function(idOrEntity, callback) {\n    module.delete(this, \"purchaseOrder\", idOrEntity, callback);\n};\n/**\n * Deletes the RefundReceipt from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent RefundReceipt to be deleted, or the Id of the RefundReceipt, in which case an extra GET request will be issued to first retrieve the RefundReceipt\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent RefundReceipt\n */ QuickBooks.prototype.deleteRefundReceipt = function(idOrEntity, callback) {\n    module.delete(this, \"refundReceipt\", idOrEntity, callback);\n};\n/**\n * Deletes the SalesReceipt from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent SalesReceipt to be deleted, or the Id of the SalesReceipt, in which case an extra GET request will be issued to first retrieve the SalesReceipt\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent SalesReceipt\n */ QuickBooks.prototype.deleteSalesReceipt = function(idOrEntity, callback) {\n    module.delete(this, \"salesReceipt\", idOrEntity, callback);\n};\n/**\n * Deletes the TimeActivity from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent TimeActivity to be deleted, or the Id of the TimeActivity, in which case an extra GET request will be issued to first retrieve the TimeActivity\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent TimeActivity\n */ QuickBooks.prototype.deleteTimeActivity = function(idOrEntity, callback) {\n    module.delete(this, \"timeActivity\", idOrEntity, callback);\n};\n/**\n * Deletes the Transfer from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Transfer to be deleted, or the Id of the Transfer, in which case an extra GET request will be issued to first retrieve the Transfer\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Transfer\n */ QuickBooks.prototype.deleteTransfer = function(idOrEntity, callback) {\n    module.delete(this, \"transfer\", idOrEntity, callback);\n};\n/**\n * Deletes the VendorCredit from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent VendorCredit to be deleted, or the Id of the VendorCredit, in which case an extra GET request will be issued to first retrieve the VendorCredit\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent VendorCredit\n */ QuickBooks.prototype.deleteVendorCredit = function(idOrEntity, callback) {\n    module.delete(this, \"vendorCredit\", idOrEntity, callback);\n};\n/**\n * Voids the Invoice from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Invoice to be voided, or the Id of the Invoice, in which case an extra GET request will be issued to first retrieve the Invoice\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */ QuickBooks.prototype.voidInvoice = function(idOrEntity, callback) {\n    module.void(this, \"invoice\", idOrEntity, callback);\n};\n/**\n * Voids QuickBooks version of Payment\n *\n * @param  {object} payment - The persistent Payment, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */ QuickBooks.prototype.voidPayment = function(payment, callback) {\n    payment.void = true;\n    payment.sparse = true;\n    module.update(this, \"payment\", payment, callback);\n};\n/**\n * Finds all Accounts in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Account\n */ QuickBooks.prototype.findAccounts = function(criteria, callback) {\n    module.query(this, \"account\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Attachables in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Attachable\n */ QuickBooks.prototype.findAttachables = function(criteria, callback) {\n    module.query(this, \"attachable\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Bills in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Bill\n */ QuickBooks.prototype.findBills = function(criteria, callback) {\n    module.query(this, \"bill\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all BillPayments in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of BillPayment\n */ QuickBooks.prototype.findBillPayments = function(criteria, callback) {\n    module.query(this, \"billPayment\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Budgets in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Budget\n */ QuickBooks.prototype.findBudgets = function(criteria, callback) {\n    module.query(this, \"budget\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Classs in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Class\n */ QuickBooks.prototype.findClasses = function(criteria, callback) {\n    module.query(this, \"class\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all CompanyInfos in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of CompanyInfo\n */ QuickBooks.prototype.findCompanyInfos = function(criteria, callback) {\n    module.query(this, \"companyInfo\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all CompanyCurrencies in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of CompanyCurrencies\n */ QuickBooks.prototype.findCompanyCurrencies = function(criteria, callback) {\n    module.query(this, \"companyCurrency\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all CreditMemos in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of CreditMemo\n */ QuickBooks.prototype.findCreditMemos = function(criteria, callback) {\n    module.query(this, \"creditMemo\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Customers in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Customer\n */ QuickBooks.prototype.findCustomers = function(criteria, callback) {\n    module.query(this, \"customer\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all CustomerTypes in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of CustomerType\n */ QuickBooks.prototype.findCustomerTypes = function(criteria, callback) {\n    module.query(this, \"customerType\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Departments in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Department\n */ QuickBooks.prototype.findDepartments = function(criteria, callback) {\n    module.query(this, \"department\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Deposits in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Deposit\n */ QuickBooks.prototype.findDeposits = function(criteria, callback) {\n    module.query(this, \"deposit\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Employees in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Employee\n */ QuickBooks.prototype.findEmployees = function(criteria, callback) {\n    module.query(this, \"employee\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Estimates in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Estimate\n */ QuickBooks.prototype.findEstimates = function(criteria, callback) {\n    module.query(this, \"estimate\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Invoices in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Invoice\n */ QuickBooks.prototype.findInvoices = function(criteria, callback) {\n    module.query(this, \"invoice\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Items in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Item\n */ QuickBooks.prototype.findItems = function(criteria, callback) {\n    module.query(this, \"item\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all JournalCodes in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of JournalCode\n */ QuickBooks.prototype.findJournalCodes = function(criteria, callback) {\n    module.query(this, \"journalCode\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all JournalEntrys in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of JournalEntry\n */ QuickBooks.prototype.findJournalEntries = function(criteria, callback) {\n    module.query(this, \"journalEntry\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Payments in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Payment\n */ QuickBooks.prototype.findPayments = function(criteria, callback) {\n    module.query(this, \"payment\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all PaymentMethods in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of PaymentMethod\n */ QuickBooks.prototype.findPaymentMethods = function(criteria, callback) {\n    module.query(this, \"paymentMethod\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Preferencess in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Preferences\n */ QuickBooks.prototype.findPreferenceses = function(criteria, callback) {\n    module.query(this, \"preferences\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Purchases in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Purchase\n */ QuickBooks.prototype.findPurchases = function(criteria, callback) {\n    module.query(this, \"purchase\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all PurchaseOrders in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of PurchaseOrder\n */ QuickBooks.prototype.findPurchaseOrders = function(criteria, callback) {\n    module.query(this, \"purchaseOrder\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all RefundReceipts in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of RefundReceipt\n */ QuickBooks.prototype.findRefundReceipts = function(criteria, callback) {\n    module.query(this, \"refundReceipt\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all SalesReceipts in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of SalesReceipt\n */ QuickBooks.prototype.findSalesReceipts = function(criteria, callback) {\n    module.query(this, \"salesReceipt\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all TaxAgencys in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TaxAgency\n */ QuickBooks.prototype.findTaxAgencies = function(criteria, callback) {\n    module.query(this, \"taxAgency\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all TaxCodes in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TaxCode\n */ QuickBooks.prototype.findTaxCodes = function(criteria, callback) {\n    module.query(this, \"taxCode\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all TaxRates in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TaxRate\n */ QuickBooks.prototype.findTaxRates = function(criteria, callback) {\n    module.query(this, \"taxRate\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Terms in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Term\n */ QuickBooks.prototype.findTerms = function(criteria, callback) {\n    module.query(this, \"term\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all TimeActivitys in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TimeActivity\n */ QuickBooks.prototype.findTimeActivities = function(criteria, callback) {\n    module.query(this, \"timeActivity\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Transfers in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Transfer\n */ QuickBooks.prototype.findTransfers = function(criteria, callback) {\n    module.query(this, \"transfer\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Vendors in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Vendor\n */ QuickBooks.prototype.findVendors = function(criteria, callback) {\n    module.query(this, \"vendor\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all VendorCredits in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of VendorCredit\n */ QuickBooks.prototype.findVendorCredits = function(criteria, callback) {\n    module.query(this, \"vendorCredit\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all ExchangeRates in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of ExchangeRates\n */ QuickBooks.prototype.findExchangeRates = function(criteria, callback) {\n    module.query(this, \"exchangerate\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Retrieves the BalanceSheet Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the BalanceSheet Report\n */ QuickBooks.prototype.reportBalanceSheet = function(options, callback) {\n    module.report(this, \"BalanceSheet\", options, callback);\n};\n/**\n * Retrieves the ProfitAndLoss Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ProfitAndLoss Report\n */ QuickBooks.prototype.reportProfitAndLoss = function(options, callback) {\n    module.report(this, \"ProfitAndLoss\", options, callback);\n};\n/**\n * Retrieves the ProfitAndLossDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ProfitAndLossDetail Report\n */ QuickBooks.prototype.reportProfitAndLossDetail = function(options, callback) {\n    module.report(this, \"ProfitAndLossDetail\", options, callback);\n};\n/**\n * Retrieves the TrialBalance Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TrialBalance Report\n */ QuickBooks.prototype.reportTrialBalance = function(options, callback) {\n    module.report(this, \"TrialBalance\", options, callback);\n};\n/**\n * Retrieves the TrialBalanceFR Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TrialBalance Report\n */ QuickBooks.prototype.reportTrialBalanceFR = function(options, callback) {\n    module.report(this, \"TrialBalanceFR\", options, callback);\n};\n/**\n * Retrieves the CashFlow Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CashFlow Report\n */ QuickBooks.prototype.reportCashFlow = function(options, callback) {\n    module.report(this, \"CashFlow\", options, callback);\n};\n/**\n * Retrieves the InventoryValuationSummary Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the InventoryValuationSummary Report\n */ QuickBooks.prototype.reportInventoryValuationSummary = function(options, callback) {\n    module.report(this, \"InventoryValuationSummary\", options, callback);\n};\n/**\n * Retrieves the CustomerSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerSales Report\n */ QuickBooks.prototype.reportCustomerSales = function(options, callback) {\n    module.report(this, \"CustomerSales\", options, callback);\n};\n/**\n * Retrieves the ItemSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ItemSales Report\n */ QuickBooks.prototype.reportItemSales = function(options, callback) {\n    module.report(this, \"ItemSales\", options, callback);\n};\n/**\n * Retrieves the CustomerIncome Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerIncome Report\n */ QuickBooks.prototype.reportCustomerIncome = function(options, callback) {\n    module.report(this, \"CustomerIncome\", options, callback);\n};\n/**\n * Retrieves the CustomerBalance Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerBalance Report\n */ QuickBooks.prototype.reportCustomerBalance = function(options, callback) {\n    module.report(this, \"CustomerBalance\", options, callback);\n};\n/**\n * Retrieves the CustomerBalanceDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerBalanceDetail Report\n */ QuickBooks.prototype.reportCustomerBalanceDetail = function(options, callback) {\n    module.report(this, \"CustomerBalanceDetail\", options, callback);\n};\n/**\n * Retrieves the AgedReceivables Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedReceivables Report\n */ QuickBooks.prototype.reportAgedReceivables = function(options, callback) {\n    module.report(this, \"AgedReceivables\", options, callback);\n};\n/**\n * Retrieves the AgedReceivableDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedReceivableDetail Report\n */ QuickBooks.prototype.reportAgedReceivableDetail = function(options, callback) {\n    module.report(this, \"AgedReceivableDetail\", options, callback);\n};\n/**\n * Retrieves the VendorBalance Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the VendorBalance Report\n */ QuickBooks.prototype.reportVendorBalance = function(options, callback) {\n    module.report(this, \"VendorBalance\", options, callback);\n};\n/**\n * Retrieves the VendorBalanceDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the VendorBalanceDetail Report\n */ QuickBooks.prototype.reportVendorBalanceDetail = function(options, callback) {\n    module.report(this, \"VendorBalanceDetail\", options, callback);\n};\n/**\n * Retrieves the AgedPayables Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedPayables Report\n */ QuickBooks.prototype.reportAgedPayables = function(options, callback) {\n    module.report(this, \"AgedPayables\", options, callback);\n};\n/**\n * Retrieves the AgedPayableDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedPayableDetail Report\n */ QuickBooks.prototype.reportAgedPayableDetail = function(options, callback) {\n    module.report(this, \"AgedPayableDetail\", options, callback);\n};\n/**\n * Retrieves the VendorExpenses Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the VendorExpenses Report\n */ QuickBooks.prototype.reportVendorExpenses = function(options, callback) {\n    module.report(this, \"VendorExpenses\", options, callback);\n};\n/**\n * Retrieves the TransactionList Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TransactionList Report\n */ QuickBooks.prototype.reportTransactionList = function(options, callback) {\n    module.report(this, \"TransactionList\", options, callback);\n};\n/**\n * Retrieves the TransactionListWithSplits Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TransactionListWithSplits Report\n */ QuickBooks.prototype.reportTransactionListWithSplits = function(options, callback) {\n    module.report(this, \"TransactionListWithSplits\", options, callback);\n};\n/**\n * Retrieves the TransactionListByCustomer Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TransactionListByCustomer Report\n */ QuickBooks.prototype.reportTransactionListByCustomer = function(options, callback) {\n    module.report(this, \"TransactionListByCustomer\", options, callback);\n};\n/**\n * Retrieves the TransactionListByVendor Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TransactionListByVendor Report\n */ QuickBooks.prototype.reportTransactionListByVendor = function(options, callback) {\n    module.report(this, \"TransactionListByVendor\", options, callback);\n};\n/**\n * Retrieves the GeneralLedgerDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the GeneralLedgerDetail Report\n */ QuickBooks.prototype.reportGeneralLedgerDetail = function(options, callback) {\n    module.report(this, \"GeneralLedger\", options, callback);\n};\n/**\n * Retrieves the TaxSummary Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TaxSummary Report\n */ QuickBooks.prototype.reportTaxSummary = function(options, callback) {\n    module.report(this, \"TaxSummary\", options, callback);\n};\n/**\n * Retrieves the DepartmentSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the DepartmentSales Report\n */ QuickBooks.prototype.reportDepartmentSales = function(options, callback) {\n    module.report(this, \"DepartmentSales\", options, callback);\n};\n/**\n * Retrieves the ClassSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ClassSales Report\n */ QuickBooks.prototype.reportClassSales = function(options, callback) {\n    module.report(this, \"ClassSales\", options, callback);\n};\n/**\n * Retrieves the AccountListDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AccountListDetail Report\n */ QuickBooks.prototype.reportAccountListDetail = function(options, callback) {\n    module.report(this, \"AccountList\", options, callback);\n};\n/**\n * Retrieves the JournalReport Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the JournalReport Report\n */ QuickBooks.prototype.reportJournalReport = function(options, callback) {\n    module.report(this, \"JournalReport\", options, callback);\n};\nmodule.request = function(context, verb, options, entity, callback) {\n    var url = context.endpoint + context.realmId + options.url;\n    if (options.url === QuickBooks.RECONNECT_URL || options.url == QuickBooks.DISCONNECT_URL || options.url === QuickBooks.REVOKE_URL || options.url === QuickBooks.USER_INFO_URL) {\n        url = options.url;\n    }\n    var opts = {\n        url: url,\n        qs: options.qs || {},\n        headers: options.headers || {},\n        json: true\n    };\n    if (entity && entity.allowDuplicateDocNum) {\n        delete entity.allowDuplicateDocNum;\n        opts.qs.include = \"allowduplicatedocnum\";\n    }\n    if (entity && entity.requestId) {\n        opts.qs.requestid = entity.requestId;\n        delete entity.requestId;\n    }\n    opts.qs.minorversion = opts.qs.minorversion || context.minorversion;\n    opts.headers[\"User-Agent\"] = \"node-quickbooks: version \" + version;\n    opts.headers[\"Request-Id\"] = uuid.v1();\n    opts.qs.format = \"json\";\n    if (context.oauthversion == \"2.0\") {\n        opts.headers[\"Authorization\"] = \"Bearer \" + context.token;\n    } else {\n        opts.oauth = module.oauth(context);\n    }\n    ;\n    if (options.url.match(/pdf$/)) {\n        opts.headers[\"accept\"] = \"application/pdf\";\n        opts.encoding = null;\n    }\n    if (entity !== null) {\n        opts.body = entity;\n    }\n    if (options.formData) {\n        opts.formData = options.formData;\n    }\n    if ( true && context.debug) {\n        debug(request);\n    }\n    request[verb].call(context, opts, function(err, res, body) {\n        if ( true && context.debug) {\n            console.log(\"invoking endpoint: \" + url);\n            console.log(entity || \"\");\n            console.log(JSON.stringify(body, null, 2));\n        }\n        if (callback) {\n            if (err || res.statusCode >= 300 || _.isObject(body) && body.Fault && body.Fault.Error && body.Fault.Error.length || _.isString(body) && !_.isEmpty(body) && body.indexOf(\"<\") === 0) {\n                callback(err || body, body, res);\n            } else {\n                callback(null, body, res);\n            }\n        }\n    });\n};\nmodule.xmlRequest = function(context, url, rootTag, callback) {\n    module.request(context, \"get\", {\n        url: url\n    }, null, (err, body)=>{\n        var json = body.constructor === ({}).constructor ? body : body.constructor === \"\".constructor ? body.indexOf(\"<\") === 0 ? xmlParser.parse(body)[rootTag] : body : body;\n        callback(json.ErrorCode === 0 ? null : json, json);\n    });\n};\nQuickBooks.prototype.reconnect = function(callback) {\n    module.xmlRequest(this, QuickBooks.RECONNECT_URL, \"ReconnectResponse\", callback);\n};\nQuickBooks.prototype.disconnect = function(callback) {\n    module.xmlRequest(this, QuickBooks.DISCONNECT_URL, \"PlatformResponse\", callback);\n};\n// **********************  CRUD Api **********************\nmodule.create = function(context, entityName, entity, callback) {\n    var url = \"/\" + entityName.toLowerCase();\n    module.request(context, \"post\", {\n        url: url\n    }, entity, module.unwrap(callback, entityName));\n};\nmodule.read = function(context, entityName, id, callback) {\n    var url = \"/\" + entityName.toLowerCase();\n    if (id) url = url + \"/\" + id;\n    module.request(context, \"get\", {\n        url: url\n    }, null, module.unwrap(callback, entityName));\n};\nmodule.update = function(context, entityName, entity, callback, opts = {}) {\n    if (_.isUndefined(entity.Id) || _.isEmpty(entity.Id + \"\") || _.isUndefined(entity.SyncToken) || _.isEmpty(entity.SyncToken + \"\")) {\n        if (entityName !== \"exchangerate\") {\n            throw new Error(entityName + \" must contain Id and SyncToken fields: \" + util.inspect(entity, {\n                showHidden: false,\n                depth: null\n            }));\n        }\n    }\n    if (!entity.hasOwnProperty(\"sparse\")) {\n        entity.sparse = true;\n    }\n    opts.url = \"/\" + entityName.toLowerCase() + \"?operation=update\";\n    if (entity.void && entity.void.toString() === \"true\") {\n        opts.qs = {\n            include: \"void\"\n        };\n        delete entity.void;\n    }\n    module.request(context, \"post\", opts, entity, module.unwrap(callback, entityName));\n};\nmodule.delete = function(context, entityName, idOrEntity, callback) {\n    var url = \"/\" + entityName.toLowerCase() + \"?operation=delete\";\n    callback = callback || function() {};\n    if (_.isObject(idOrEntity)) {\n        module.request(context, \"post\", {\n            url: url\n        }, idOrEntity, callback);\n    } else {\n        module.read(context, entityName, idOrEntity, function(err, entity) {\n            if (err) {\n                callback(err);\n            } else {\n                module.request(context, \"post\", {\n                    url: url\n                }, entity, callback);\n            }\n        });\n    }\n};\nmodule.void = function(context, entityName, idOrEntity, callback) {\n    var url = \"/\" + entityName.toLowerCase() + \"?operation=void\";\n    callback = callback || function() {};\n    if (_.isObject(idOrEntity)) {\n        module.request(context, \"post\", {\n            url: url\n        }, idOrEntity, callback);\n    } else {\n        module.read(context, entityName, idOrEntity, function(err, entity) {\n            if (err) {\n                callback(err);\n            } else {\n                module.request(context, \"post\", {\n                    url: url\n                }, entity, callback);\n            }\n        });\n    }\n};\n// **********************  Query Api **********************\nmodule.requestPromise = Promise.promisify(module.request);\nmodule.query = function(context, entity, criteria) {\n    // criteria is potentially mutated within this function -\n    // so make a copy of it first\n    if (!_.isFunction(criteria) && (_.isObject(criteria) || _.isArray(criteria))) {\n        criteria = JSON.parse(JSON.stringify(criteria));\n    }\n    var url = \"/query?query@@select * from \" + entity;\n    var count = function(obj) {\n        for(var p in obj){\n            if (obj[p] && p.toLowerCase() === \"count\") {\n                url = url.replace(\"select * from\", \"select count(*) from\");\n                delete obj[p];\n            }\n        }\n    };\n    count(criteria);\n    if (_.isArray(criteria)) {\n        for(var i = 0; i < criteria.length; i++){\n            if (_.isObject(criteria[i])) {\n                var j = Object.keys(criteria[i]).length;\n                count(criteria[i]);\n                if (j !== Object.keys(criteria[i]).length) {\n                    criteria.splice(i, i + 1);\n                }\n            }\n        }\n    }\n    var fetchAll = false, limit = 1000, offset = 1;\n    if (_.isArray(criteria)) {\n        var lmt = _.find(criteria, function(obj) {\n            return obj.field && obj.field === \"limit\";\n        });\n        if (lmt) limit = lmt.value;\n        var ofs = _.find(criteria, function(obj) {\n            return obj.field && obj.field === \"offset\";\n        });\n        if (!ofs) {\n            criteria.push({\n                field: \"offset\",\n                value: 1\n            });\n        } else {\n            offset = ofs.value;\n        }\n        var fa = _.find(criteria, function(obj) {\n            return obj.field && obj.field === \"fetchAll\";\n        });\n        if (fa && fa.value) fetchAll = true;\n    } else if (_.isObject(criteria)) {\n        limit = criteria.limit = criteria.limit || 1000;\n        offset = criteria.offset = criteria.offset || 1;\n        if (criteria.fetchAll) fetchAll = true;\n    }\n    if (criteria && !_.isFunction(criteria)) {\n        url += module.criteriaToString(criteria) || \"\";\n        url = url.replace(/%/g, \"%25\").replace(/'/g, \"%27\").replace(/=/g, \"%3D\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\").replace(/&/g, \"%26\").replace(/#/g, \"%23\").replace(/\\\\/g, \"%5C\").replace(/\\+/g, \"%2B\");\n    }\n    url = url.replace(\"@@\", \"=\");\n    return new Promise(function(resolve, reject) {\n        module.requestPromise(context, \"get\", {\n            url: url\n        }, null).then(function(data) {\n            var fields = Object.keys(data.QueryResponse);\n            var key = _.find(fields, function(k) {\n                return k.toLowerCase() === entity.toLowerCase();\n            });\n            if (fetchAll) {\n                if (data && data.QueryResponse && data.QueryResponse.maxResults === limit) {\n                    if (_.isArray(criteria)) {\n                        _.each(criteria, function(e) {\n                            if (e.field === \"offset\") e.value = e.value + limit;\n                        });\n                    } else if (_.isObject(criteria)) {\n                        criteria.offset = criteria.offset + limit;\n                    }\n                    return module.query(context, entity, criteria).then(function(more) {\n                        data.QueryResponse[key] = data.QueryResponse[key].concat(more.QueryResponse[key] || []);\n                        data.QueryResponse.maxResults = data.QueryResponse.maxResults + (more.QueryResponse.maxResults || 0);\n                        data.time = more.time || data.time;\n                        resolve(data);\n                    });\n                } else {\n                    resolve(data);\n                }\n            } else {\n                resolve(data);\n            }\n        }).catch(function(err) {\n            reject(err);\n        });\n    });\n};\n// **********************  Report Api **********************\nmodule.report = function(context, reportType, criteria, callback) {\n    var url = \"/reports/\" + reportType;\n    if (criteria && typeof criteria !== \"function\") {\n        url += module.reportCriteria(criteria) || \"\";\n    }\n    module.request(context, \"get\", {\n        url: url\n    }, null, typeof criteria === \"function\" ? criteria : callback);\n};\nmodule.oauth = function(context) {\n    return {\n        consumer_key: context.consumerKey,\n        consumer_secret: context.consumerSecret,\n        token: context.token,\n        token_secret: context.tokenSecret\n    };\n};\nmodule.isNumeric = function(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n};\nmodule.checkProperty = function(field, name) {\n    return field && field.toLowerCase() === name;\n};\nmodule.toCriterion = function(c) {\n    var fields = _.keys(c);\n    if (_.intersection(fields, [\n        \"field\",\n        \"value\"\n    ]).length === 2) {\n        return {\n            field: c.field,\n            value: c.value,\n            operator: c.operator || \"=\"\n        };\n    } else {\n        return fields.map(function(k) {\n            return {\n                field: k,\n                value: c[k],\n                operator: _.isArray(c[k]) ? \"IN\" : \"=\"\n            };\n        });\n    }\n};\nmodule.criteriaToString = function(criteria) {\n    if (_.isString(criteria)) return criteria.indexOf(\" \") === 0 ? criteria : \" \" + criteria;\n    var cs = _.isArray(criteria) ? criteria.map(module.toCriterion) : module.toCriterion(criteria);\n    var flattened = _.flatten(cs);\n    var sql = \"\", limit, offset, desc, asc;\n    for(var i = 0, l = flattened.length; i < l; i++){\n        var criterion = flattened[i];\n        if (module.checkProperty(criterion.field, \"fetchall\")) {\n            continue;\n        }\n        if (module.checkProperty(criterion.field, \"limit\")) {\n            limit = criterion.value;\n            continue;\n        }\n        if (module.checkProperty(criterion.field, \"offset\")) {\n            offset = criterion.value;\n            continue;\n        }\n        if (module.checkProperty(criterion.field, \"desc\")) {\n            desc = criterion.value;\n            continue;\n        }\n        if (module.checkProperty(criterion.field, \"asc\")) {\n            asc = criterion.value;\n            continue;\n        }\n        if (sql != \"\") {\n            sql += \" and \";\n        }\n        sql += criterion.field + \" \" + criterion.operator + \" \";\n        var quote = function(x) {\n            return _.isString(x) ? \"'\" + x.replace(/'/g, \"\\\\'\") + \"'\" : x;\n        };\n        if (_.isArray(criterion.value)) {\n            sql += \"(\" + criterion.value.map(quote).join(\",\") + \")\";\n        } else {\n            sql += quote(criterion.value);\n        }\n    }\n    if (sql != \"\") {\n        sql = \" where \" + sql;\n    }\n    if (asc) sql += \" orderby \" + asc + \" asc\";\n    if (desc) sql += \" orderby \" + desc + \" desc\";\n    sql += \" startposition \" + (offset || 1);\n    sql += \" maxresults \" + (limit || 1000);\n    return sql;\n};\nmodule.reportCriteria = function(criteria) {\n    var s = \"?\";\n    for(var p in criteria){\n        s += p + \"=\" + criteria[p] + \"&\";\n    }\n    return s;\n};\nmodule.capitalize = function(s) {\n    return s.substring(0, 1).toUpperCase() + s.substring(1);\n};\nQuickBooks.prototype.capitalize = module.capitalize;\nmodule.pluralize = function(s) {\n    var last = s.substring(s.length - 1);\n    if (last === \"s\") {\n        return s + \"es\";\n    } else if (last === \"y\") {\n        return s.substring(0, s.length - 1) + \"ies\";\n    } else {\n        return s + \"s\";\n    }\n};\nQuickBooks.prototype.pluralize = module.pluralize;\nmodule.unwrap = function(callback, entityName) {\n    if (!callback) return function(err, data, res) {};\n    return function(err, data, res) {\n        if (err) {\n            if (callback) callback(err, null, res);\n        } else {\n            var name = module.capitalize(entityName);\n            if (callback) callback(err, (data || {})[name] || data, res);\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-quickbooks/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-quickbooks/index.js":
/*!***********************************************!*\
  !*** ./node_modules/node-quickbooks/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * @file Node.js client for QuickBooks V3 API\n * @name node-quickbooks\n * @author Michael Cohen <michael_cohen@intuit.com>\n * @license ISC\n * @copyright 2014 Michael Cohen\n */ \nvar request = __webpack_require__(/*! request */ \"(rsc)/./node_modules/request/index.js\"), uuid = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\"), debug = __webpack_require__(/*! request-debug */ \"(rsc)/./node_modules/request-debug/index.js\"), util = __webpack_require__(/*! util */ \"util\"), formatISO = __webpack_require__(/*! date-fns/fp/formatISO */ \"(rsc)/./node_modules/date-fns/esm/fp/formatISO/index.js\"), _ = __webpack_require__(/*! underscore */ \"(rsc)/./node_modules/underscore/modules/index-all.js\"), Promise = __webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\"), version = (__webpack_require__(/*! ./package.json */ \"(rsc)/./node_modules/node-quickbooks/package.json\").version), xmlParser = new (__webpack_require__(/*! fast-xml-parser */ \"(rsc)/./node_modules/fast-xml-parser/src/fxp.js\").XMLParser)();\nmodule.exports = QuickBooks;\nQuickBooks.APP_CENTER_BASE = \"https://appcenter.intuit.com\";\nQuickBooks.V3_ENDPOINT_BASE_URL = \"https://sandbox-quickbooks.api.intuit.com/v3/company/\";\nQuickBooks.QUERY_OPERATORS = [\n    \"=\",\n    \"IN\",\n    \"<\",\n    \">\",\n    \"<=\",\n    \">=\",\n    \"LIKE\"\n];\nQuickBooks.TOKEN_URL = \"https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer\";\nQuickBooks.REVOKE_URL = \"https://developer.api.intuit.com/v2/oauth2/tokens/revoke\";\nvar OAUTH_ENDPOINTS = {\n    \"1.0a\": function(callback) {\n        callback({\n            REQUEST_TOKEN_URL: \"https://oauth.intuit.com/oauth/v1/get_request_token\",\n            ACCESS_TOKEN_URL: \"https://oauth.intuit.com/oauth/v1/get_access_token\",\n            APP_CENTER_URL: QuickBooks.APP_CENTER_BASE + \"/Connect/Begin?oauth_token=\",\n            RECONNECT_URL: QuickBooks.APP_CENTER_BASE + \"/api/v1/connection/reconnect\",\n            DISCONNECT_URL: QuickBooks.APP_CENTER_BASE + \"/api/v1/connection/disconnect\"\n        });\n    },\n    \"2.0\": function(callback, discoveryUrl) {\n        var NEW_ENDPOINT_CONFIGURATION = {};\n        request({\n            url: discoveryUrl,\n            headers: {\n                Accept: \"application/json\"\n            }\n        }, function(err, res) {\n            if (err) {\n                console.log(err);\n                return err;\n            }\n            var json;\n            try {\n                json = JSON.parse(res.body);\n            } catch (error) {\n                console.log(error);\n                return error;\n            }\n            NEW_ENDPOINT_CONFIGURATION.AUTHORIZATION_URL = json.authorization_endpoint;\n            ;\n            NEW_ENDPOINT_CONFIGURATION.TOKEN_URL = json.token_endpoint;\n            NEW_ENDPOINT_CONFIGURATION.USER_INFO_URL = json.userinfo_endpoint;\n            NEW_ENDPOINT_CONFIGURATION.REVOKE_URL = json.revocation_endpoint;\n            callback(NEW_ENDPOINT_CONFIGURATION);\n        });\n    }\n};\nOAUTH_ENDPOINTS[\"1.0\"] = OAUTH_ENDPOINTS[\"1.0a\"];\n/**\n * Sets endpoints per OAuth version\n *\n * @param version - 1.0 for OAuth 1.0a, 2.0 for OAuth 2.0\n * @param useSandbox - true to use the OAuth 2.0 sandbox discovery document, false (or unspecified, for backward compatibility) to use the prod discovery document.\n */ QuickBooks.setOauthVersion = function(version1, useSandbox) {\n    version1 = typeof version1 === \"number\" ? version1.toFixed(1) : version1;\n    QuickBooks.version = version1;\n    var discoveryUrl = useSandbox ? \"https://developer.intuit.com/.well-known/openid_sandbox_configuration/\" : \"https://developer.api.intuit.com/.well-known/openid_configuration/\";\n    OAUTH_ENDPOINTS[version1](function(endpoints) {\n        for(var k in endpoints){\n            QuickBooks[k] = endpoints[k];\n        }\n    }, discoveryUrl);\n};\nQuickBooks.setOauthVersion(\"1.0\");\n/**\n * Node.js client encapsulating access to the QuickBooks V3 Rest API. An instance\n * of this class should be instantiated on behalf of each user accessing the api.\n *\n * @param consumerKey - application key\n * @param consumerSecret  - application password\n * @param token - the OAuth generated user-specific key\n * @param tokenSecret - the OAuth generated user-specific password\n * @param realmId - QuickBooks companyId, returned as a request parameter when the user is redirected to the provided callback URL following authentication\n * @param useSandbox - boolean - See https://developer.intuit.com/v2/blog/2014/10/24/intuit-developer-now-offers-quickbooks-sandboxes\n * @param debug - boolean flag to turn on logging of HTTP requests, including headers and body\n * @param minorversion - integer to set minorversion in request\n * @constructor\n */ function QuickBooks(consumerKey, consumerSecret, token, tokenSecret, realmId, useSandbox, debug, minorversion, oauthversion, refreshToken) {\n    var prefix = _.isObject(consumerKey) ? \"consumerKey.\" : \"\";\n    this.consumerKey = eval(prefix + \"consumerKey\");\n    this.consumerSecret = eval(prefix + \"consumerSecret\");\n    this.token = eval(prefix + \"token\");\n    this.tokenSecret = eval(prefix + \"tokenSecret\");\n    this.realmId = eval(prefix + \"realmId\");\n    this.useSandbox = eval(prefix + \"useSandbox\");\n    this.debug = eval(prefix + \"debug\");\n    this.endpoint = this.useSandbox ? QuickBooks.V3_ENDPOINT_BASE_URL : QuickBooks.V3_ENDPOINT_BASE_URL.replace(\"sandbox-\", \"\");\n    this.minorversion = eval(prefix + \"minorversion\") || 65;\n    this.oauthversion = eval(prefix + \"oauthversion\") || \"1.0a\";\n    this.refreshToken = eval(prefix + \"refreshToken\") || null;\n    if (!eval(prefix + \"tokenSecret\") && this.oauthversion !== \"2.0\") {\n        throw new Error(\"tokenSecret not defined\");\n    }\n}\n/**\n *\n * Use the refresh token to obtain a new access token.\n *\n *\n */ QuickBooks.prototype.refreshAccessToken = function(callback) {\n    var auth = Buffer.from(this.consumerKey + \":\" + this.consumerSecret).toString(\"base64\");\n    var postBody = {\n        url: QuickBooks.TOKEN_URL,\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: \"Basic \" + auth\n        },\n        form: {\n            grant_type: \"refresh_token\",\n            refresh_token: this.refreshToken\n        }\n    };\n    request.post(postBody, (function(e, r, data) {\n        if (r && r.body && r.error !== \"invalid_grant\") {\n            var refreshResponse = JSON.parse(r.body);\n            this.refreshToken = refreshResponse.refresh_token;\n            this.token = refreshResponse.access_token;\n            if (callback) callback(e, refreshResponse);\n        } else {\n            if (callback) callback(e, r, data);\n        }\n    }).bind(this));\n};\n/**\n * Use either refresh token or access token to revoke access (OAuth2).\n *\n * @param useRefresh - boolean - Indicates which token to use: true to use the refresh token, false to use the access token.\n * @param {function} callback - Callback function to call with error/response/data results.\n */ QuickBooks.prototype.revokeAccess = function(useRefresh, callback) {\n    var auth = Buffer.from(this.consumerKey + \":\" + this.consumerSecret).toString(\"base64\");\n    var revokeToken = useRefresh ? this.refreshToken : this.token;\n    var postBody = {\n        url: QuickBooks.REVOKE_URL,\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Authorization: \"Basic \" + auth\n        },\n        form: {\n            token: revokeToken\n        }\n    };\n    request.post(postBody, (function(e, r, data) {\n        if (r && r.statusCode === 200) {\n            this.refreshToken = null;\n            this.token = null;\n            this.realmId = null;\n        }\n        if (callback) callback(e, r, data);\n    }).bind(this));\n};\n/**\n * Get user info (OAuth2).\n *\n * @param {function} callback - Callback function to call with error/response/data results.\n */ QuickBooks.prototype.getUserInfo = function(callback) {\n    module.request(this, \"get\", {\n        url: QuickBooks.USER_INFO_URL\n    }, null, callback);\n};\n/**\n * Batch operation to enable an application to perform multiple operations in a single request.\n * The following batch items are supported:\n     create\n     update\n     delete\n     query\n * The maximum number of batch items in a single request is 30.\n *\n * @param  {object} items - JavaScript array of batch items\n * @param  {function} callback - Callback function which is called with any error and list of BatchItemResponses\n */ QuickBooks.prototype.batch = function(items, callback) {\n    module.request(this, \"post\", {\n        url: \"/batch\"\n    }, {\n        BatchItemRequest: items\n    }, callback);\n};\n/**\n * The change data capture (CDC) operation returns a list of entities that have changed since a specified time.\n *\n * @param  {object} entities - Comma separated list or JavaScript array of entities to search for changes\n * @param  {object} since - JavaScript Date or string representation of the form '2012-07-20T22:25:51-07:00' to look back for changes until\n * @param  {function} callback - Callback function which is called with any error and list of changes\n */ QuickBooks.prototype.changeDataCapture = function(entities, since, callback) {\n    var url = \"/cdc?entities=\";\n    url += typeof entities === \"string\" ? entities : entities.join(\",\");\n    url += \"&changedSince=\";\n    url += typeof since === \"string\" ? since : formatISO(since);\n    module.request(this, \"get\", {\n        url: url\n    }, null, callback);\n};\n/**\n * Uploads a file as an Attachable in QBO, optionally linking it to the specified\n * QBO Entity.\n *\n * @param  {string} filename - the name of the file\n * @param  {string} contentType - the mime type of the file\n * @param  {object} stream - ReadableStream of file contents\n * @param  {object} entityType - optional string name of the QBO entity the Attachable will be linked to (e.g. Invoice)\n * @param  {object} entityId - optional Id of the QBO entity the Attachable will be linked to\n * @param  {function} callback - callback which receives the newly created Attachable\n */ QuickBooks.prototype.upload = function(filename, contentType, stream, entityType, entityId, callback) {\n    var that = this;\n    var opts = {\n        url: \"/upload\",\n        formData: {\n            file_content_01: {\n                value: stream,\n                options: {\n                    filename: filename,\n                    contentType: contentType\n                }\n            }\n        }\n    };\n    module.request(this, \"post\", opts, null, module.unwrap(function(err, data) {\n        if (err || data[0].Fault) {\n            (callback || entityType)(err || data[0], null);\n        } else if (_.isFunction(entityType)) {\n            entityType(null, data[0].Attachable);\n        } else {\n            var id = data[0].Attachable.Id;\n            that.updateAttachable({\n                Id: id,\n                SyncToken: \"0\",\n                AttachableRef: [\n                    {\n                        EntityRef: {\n                            type: entityType,\n                            value: entityId + \"\"\n                        }\n                    }\n                ]\n            }, function(err, data) {\n                callback(err, data);\n            });\n        }\n    }, \"AttachableResponse\"));\n};\n/**\n * Creates the Account in QuickBooks\n *\n * @param  {object} account - The unsaved account, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Account\n */ QuickBooks.prototype.createAccount = function(account, callback) {\n    module.create(this, \"account\", account, callback);\n};\n/**\n * Creates the Attachable in QuickBooks\n *\n * @param  {object} attachable - The unsaved attachable, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Attachable\n */ QuickBooks.prototype.createAttachable = function(attachable, callback) {\n    module.create(this, \"attachable\", attachable, callback);\n};\n/**\n * Creates the Bill in QuickBooks\n *\n * @param  {object} bill - The unsaved bill, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Bill\n */ QuickBooks.prototype.createBill = function(bill, callback) {\n    module.create(this, \"bill\", bill, callback);\n};\n/**\n * Creates the BillPayment in QuickBooks\n *\n * @param  {object} billPayment - The unsaved billPayment, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent BillPayment\n */ QuickBooks.prototype.createBillPayment = function(billPayment, callback) {\n    module.create(this, \"billPayment\", billPayment, callback);\n};\n/**\n * Creates the Class in QuickBooks\n *\n * @param  {object} class - The unsaved class, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Class\n */ QuickBooks.prototype.createClass = function(klass, callback) {\n    module.create(this, \"class\", klass, callback);\n};\n/**\n * Creates the CreditMemo in QuickBooks\n *\n * @param  {object} creditMemo - The unsaved creditMemo, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent CreditMemo\n */ QuickBooks.prototype.createCreditMemo = function(creditMemo, callback) {\n    module.create(this, \"creditMemo\", creditMemo, callback);\n};\n/**\n * Creates the Customer in QuickBooks\n *\n * @param  {object} customer - The unsaved customer, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Customer\n */ QuickBooks.prototype.createCustomer = function(customer, callback) {\n    module.create(this, \"customer\", customer, callback);\n};\n/**\n * Creates the Department in QuickBooks\n *\n * @param  {object} department - The unsaved department, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Department\n */ QuickBooks.prototype.createDepartment = function(department, callback) {\n    module.create(this, \"department\", department, callback);\n};\n/**\n * Creates the Deposit in QuickBooks\n *\n * @param  {object} deposit - The unsaved Deposit, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Deposit\n */ QuickBooks.prototype.createDeposit = function(deposit, callback) {\n    module.create(this, \"deposit\", deposit, callback);\n};\n/**\n * Creates the Employee in QuickBooks\n *\n * @param  {object} employee - The unsaved employee, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Employee\n */ QuickBooks.prototype.createEmployee = function(employee, callback) {\n    module.create(this, \"employee\", employee, callback);\n};\n/**\n * Creates the Estimate in QuickBooks\n *\n * @param  {object} estimate - The unsaved estimate, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Estimate\n */ QuickBooks.prototype.createEstimate = function(estimate, callback) {\n    module.create(this, \"estimate\", estimate, callback);\n};\n/**\n * Creates the Invoice in QuickBooks\n *\n * @param  {object} invoice - The unsaved invoice, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */ QuickBooks.prototype.createInvoice = function(invoice, callback) {\n    module.create(this, \"invoice\", invoice, callback);\n};\n/**\n * Creates the Item in QuickBooks\n *\n * @param  {object} item - The unsaved item, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Item\n */ QuickBooks.prototype.createItem = function(item, callback) {\n    module.create(this, \"item\", item, callback);\n};\n/**\n * Creates the JournalCode in QuickBooks\n *\n * @param  {object} journalCode - The unsaved journalCode, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalCode\n */ QuickBooks.prototype.createJournalCode = function(journalCode, callback) {\n    module.create(this, \"journalCode\", journalCode, callback);\n};\n/**\n * Creates the JournalEntry in QuickBooks\n *\n * @param  {object} journalEntry - The unsaved journalEntry, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalEntry\n */ QuickBooks.prototype.createJournalEntry = function(journalEntry, callback) {\n    module.create(this, \"journalEntry\", journalEntry, callback);\n};\n/**\n * Creates the Payment in QuickBooks\n *\n * @param  {object} payment - The unsaved payment, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */ QuickBooks.prototype.createPayment = function(payment, callback) {\n    module.create(this, \"payment\", payment, callback);\n};\n/**\n * Creates the PaymentMethod in QuickBooks\n *\n * @param  {object} paymentMethod - The unsaved paymentMethod, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent PaymentMethod\n */ QuickBooks.prototype.createPaymentMethod = function(paymentMethod, callback) {\n    module.create(this, \"paymentMethod\", paymentMethod, callback);\n};\n/**\n * Creates the Purchase in QuickBooks\n *\n * @param  {object} purchase - The unsaved purchase, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Purchase\n */ QuickBooks.prototype.createPurchase = function(purchase, callback) {\n    module.create(this, \"purchase\", purchase, callback);\n};\n/**\n * Creates the PurchaseOrder in QuickBooks\n *\n * @param  {object} purchaseOrder - The unsaved purchaseOrder, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent PurchaseOrder\n */ QuickBooks.prototype.createPurchaseOrder = function(purchaseOrder, callback) {\n    module.create(this, \"purchaseOrder\", purchaseOrder, callback);\n};\n/**\n * Creates the RefundReceipt in QuickBooks\n *\n * @param  {object} refundReceipt - The unsaved refundReceipt, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent RefundReceipt\n */ QuickBooks.prototype.createRefundReceipt = function(refundReceipt, callback) {\n    module.create(this, \"refundReceipt\", refundReceipt, callback);\n};\n/**\n * Creates the SalesReceipt in QuickBooks\n *\n * @param  {object} salesReceipt - The unsaved salesReceipt, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent SalesReceipt\n */ QuickBooks.prototype.createSalesReceipt = function(salesReceipt, callback) {\n    module.create(this, \"salesReceipt\", salesReceipt, callback);\n};\n/**\n * Creates the TaxAgency in QuickBooks\n *\n * @param  {object} taxAgency - The unsaved taxAgency, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxAgency\n */ QuickBooks.prototype.createTaxAgency = function(taxAgency, callback) {\n    module.create(this, \"taxAgency\", taxAgency, callback);\n};\n/**\n * Creates the TaxService in QuickBooks\n *\n * @param  {object} taxService - The unsaved taxService, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxService\n */ QuickBooks.prototype.createTaxService = function(taxService, callback) {\n    module.create(this, \"taxService/taxcode\", taxService, callback);\n};\n/**\n * Creates the Term in QuickBooks\n *\n * @param  {object} term - The unsaved term, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Term\n */ QuickBooks.prototype.createTerm = function(term, callback) {\n    module.create(this, \"term\", term, callback);\n};\n/**\n * Creates the TimeActivity in QuickBooks\n *\n * @param  {object} timeActivity - The unsaved timeActivity, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent TimeActivity\n */ QuickBooks.prototype.createTimeActivity = function(timeActivity, callback) {\n    module.create(this, \"timeActivity\", timeActivity, callback);\n};\n/**\n * Creates the Transfer in QuickBooks\n *\n * @param  {object} transfer - The unsaved Transfer, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Transfer\n */ QuickBooks.prototype.createTransfer = function(transfer, callback) {\n    module.create(this, \"transfer\", transfer, callback);\n};\n/**\n * Creates the Vendor in QuickBooks\n *\n * @param  {object} vendor - The unsaved vendor, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent Vendor\n */ QuickBooks.prototype.createVendor = function(vendor, callback) {\n    module.create(this, \"vendor\", vendor, callback);\n};\n/**\n * Creates the VendorCredit in QuickBooks\n *\n * @param  {object} vendorCredit - The unsaved vendorCredit, to be persisted in QuickBooks\n * @param  {function} callback - Callback function which is called with any error and the persistent VendorCredit\n */ QuickBooks.prototype.createVendorCredit = function(vendorCredit, callback) {\n    module.create(this, \"vendorCredit\", vendorCredit, callback);\n};\n/**\n * Retrieves the Account from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Account\n * @param  {function} callback - Callback function which is called with any error and the persistent Account\n */ QuickBooks.prototype.getAccount = function(id, callback) {\n    module.read(this, \"account\", id, callback);\n};\n/**\n * Retrieves the Attachable from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Attachable\n * @param  {function} callback - Callback function which is called with any error and the persistent Attachable\n */ QuickBooks.prototype.getAttachable = function(id, callback) {\n    module.read(this, \"attachable\", id, callback);\n};\n/**\n * Retrieves the Bill from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Bill\n * @param  {function} callback - Callback function which is called with any error and the persistent Bill\n */ QuickBooks.prototype.getBill = function(id, callback) {\n    module.read(this, \"bill\", id, callback);\n};\n/**\n * Retrieves the BillPayment from QuickBooks\n *\n * @param  {string} Id - The Id of persistent BillPayment\n * @param  {function} callback - Callback function which is called with any error and the persistent BillPayment\n */ QuickBooks.prototype.getBillPayment = function(id, callback) {\n    module.read(this, \"billPayment\", id, callback);\n};\n/**\n * Retrieves the Class from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Class\n * @param  {function} callback - Callback function which is called with any error and the persistent Class\n */ QuickBooks.prototype.getClass = function(id, callback) {\n    module.read(this, \"class\", id, callback);\n};\n/**\n * Retrieves the CompanyInfo from QuickBooks\n *\n * @param  {string} Id - The Id of persistent CompanyInfo\n * @param  {function} callback - Callback function which is called with any error and the persistent CompanyInfo\n */ QuickBooks.prototype.getCompanyInfo = function(id, callback) {\n    module.read(this, \"companyInfo\", id, callback);\n};\n/**\n * Retrieves the CompanyCurrency from QuickBooks\n *\n * @param  {string} Id - The Id of persistent CompanyCurrency\n * @param  {function} callback - Callback function which is called with any error and the persistent CompanyCurrency\n */ QuickBooks.prototype.getCompanyCurrency = function(id, callback) {\n    module.read(this, \"companyCurrency\", id, callback);\n};\n/**\n * Retrieves the CreditMemo from QuickBooks\n *\n * @param  {string} Id - The Id of persistent CreditMemo\n * @param  {function} callback - Callback function which is called with any error and the persistent CreditMemo\n */ QuickBooks.prototype.getCreditMemo = function(id, callback) {\n    module.read(this, \"creditMemo\", id, callback);\n};\n/**\n * Retrieves the Customer from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Customer\n * @param  {function} callback - Callback function which is called with any error and the persistent Customer\n */ QuickBooks.prototype.getCustomer = function(id, callback) {\n    module.read(this, \"customer\", id, callback);\n};\n/**\n * Retrieves the CustomerType from QuickBooks\n *\n * @param  {string} Id - The Id of persistent CustomerType\n * @param  {function} callback - Callback function which is called with any error and the persistent CustomerType\n */ QuickBooks.prototype.getCustomerType = function(id, callback) {\n    module.read(this, \"customerType\", id, callback);\n};\n/**\n * Retrieves the Department from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Department\n * @param  {function} callback - Callback function which is called with any error and the persistent Department\n */ QuickBooks.prototype.getDepartment = function(id, callback) {\n    module.read(this, \"department\", id, callback);\n};\n/**\n * Retrieves the Deposit from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Deposit\n * @param  {function} callback - Callback function which is called with any error and the persistent Deposit\n */ QuickBooks.prototype.getDeposit = function(id, callback) {\n    module.read(this, \"deposit\", id, callback);\n};\n/**\n * Retrieves the Employee from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Employee\n * @param  {function} callback - Callback function which is called with any error and the persistent Employee\n */ QuickBooks.prototype.getEmployee = function(id, callback) {\n    module.read(this, \"employee\", id, callback);\n};\n/**\n * Retrieves the Estimate from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Estimate\n * @param  {function} callback - Callback function which is called with any error and the persistent Estimate\n */ QuickBooks.prototype.getEstimate = function(id, callback) {\n    module.read(this, \"estimate\", id, callback);\n};\n/**\n * Retrieves an ExchangeRate from QuickBooks\n *\n * @param  {object} options - An object with options including the required `sourcecurrencycode` parameter and optional `asofdate` parameter.\n * @param  {function} callback - Callback function which is called with any error and the ExchangeRate\n */ QuickBooks.prototype.getExchangeRate = function(options, callback) {\n    var url = \"/exchangerate\";\n    module.request(this, \"get\", {\n        url: url,\n        qs: options\n    }, null, callback);\n};\n/**\n * Retrieves the Estimate PDF from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Estimate\n * @param  {function} callback - Callback function which is called with any error and the Estimate PDF\n */ QuickBooks.prototype.getEstimatePdf = function(id, callback) {\n    module.read(this, \"Estimate\", id + \"/pdf\", callback);\n};\n/**\n * Emails the Estimate PDF from QuickBooks to the address supplied in Estimate.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent Estimate\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in Estimate.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the Estimate PDF\n */ QuickBooks.prototype.sendEstimatePdf = function(id, sendTo, callback) {\n    var path = \"/estimate/\" + id + \"/send\";\n    callback = _.isFunction(sendTo) ? sendTo : callback;\n    if (sendTo && !_.isFunction(sendTo)) {\n        path += \"?sendTo=\" + sendTo;\n    }\n    module.request(this, \"post\", {\n        url: path\n    }, null, module.unwrap(callback, \"Estimate\"));\n};\n/**\n * Retrieves the Invoice from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Invoice\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */ QuickBooks.prototype.getInvoice = function(id, callback) {\n    module.read(this, \"invoice\", id, callback);\n};\n/**\n * Retrieves the Invoice PDF from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Invoice\n * @param  {function} callback - Callback function which is called with any error and the Invoice PDF\n */ QuickBooks.prototype.getInvoicePdf = function(id, callback) {\n    module.read(this, \"Invoice\", id + \"/pdf\", callback);\n};\n/**\n * Emails the Invoice PDF from QuickBooks to the address supplied in Invoice.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent Invoice\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in Invoice.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the Invoice PDF\n */ QuickBooks.prototype.sendInvoicePdf = function(id, sendTo, callback) {\n    var path = \"/invoice/\" + id + \"/send\";\n    callback = _.isFunction(sendTo) ? sendTo : callback;\n    if (sendTo && !_.isFunction(sendTo)) {\n        path += \"?sendTo=\" + sendTo;\n    }\n    module.request(this, \"post\", {\n        url: path\n    }, null, module.unwrap(callback, \"Invoice\"));\n};\n/**\n * Retrieves the Credit Memo PDF from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Credit Memo\n * @param  {function} callback - Callback function which is called with any error and the Credit Memo PDF\n */ QuickBooks.prototype.getCreditMemoPdf = function(id, callback) {\n    module.read(this, \"CreditMemo\", id + \"/pdf\", callback);\n};\n/**\n * Emails the Credit Memo PDF from QuickBooks to the address supplied in CreditMemo.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent Credit Memo\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in CreditMemo.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the Credit Memo PDF\n */ QuickBooks.prototype.sendCreditMemoPdf = function(id, sendTo, callback) {\n    var path = \"/creditmemo/\" + id + \"/send\";\n    callback = _.isFunction(sendTo) ? sendTo : callback;\n    if (sendTo && !_.isFunction(sendTo)) {\n        path += \"?sendTo=\" + sendTo;\n    }\n    module.request(this, \"post\", {\n        url: path\n    }, null, module.unwrap(callback, \"CreditMemo\"));\n};\n/**\n * Emails the Purchase Order from QuickBooks to the address supplied in PurchaseOrder.POEmail.Address\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent Purchase Order\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in PurchaseOrder.POEmail.Address will be used\n * @param  {function} callback - Callback function which is called with any error and the Invoice PDF\n */ QuickBooks.prototype.sendPurchaseOrder = function(id, sendTo, callback) {\n    var path = \"/purchaseorder/\" + id + \"/send\";\n    callback = _.isFunction(sendTo) ? sendTo : callback;\n    if (sendTo && !_.isFunction(sendTo)) {\n        path += \"?sendTo=\" + sendTo;\n    }\n    module.request(this, \"post\", {\n        url: path\n    }, null, module.unwrap(callback, \"PurchaseOrder\"));\n};\n/**\n * Retrieves the Item from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Item\n * @param  {function} callback - Callback function which is called with any error and the persistent Item\n */ QuickBooks.prototype.getItem = function(id, callback) {\n    module.read(this, \"item\", id, callback);\n};\n/**\n * Retrieves the JournalCode from QuickBooks\n *\n * @param  {string} Id - The Id of persistent JournalCode\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalCode\n */ QuickBooks.prototype.getJournalCode = function(id, callback) {\n    module.read(this, \"journalCode\", id, callback);\n};\n/**\n * Retrieves the JournalEntry from QuickBooks\n *\n * @param  {string} Id - The Id of persistent JournalEntry\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalEntry\n */ QuickBooks.prototype.getJournalEntry = function(id, callback) {\n    module.read(this, \"journalEntry\", id, callback);\n};\n/**\n * Retrieves the Payment from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Payment\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */ QuickBooks.prototype.getPayment = function(id, callback) {\n    module.read(this, \"payment\", id, callback);\n};\n/**\n * Retrieves the PaymentMethod from QuickBooks\n *\n * @param  {string} Id - The Id of persistent PaymentMethod\n * @param  {function} callback - Callback function which is called with any error and the persistent PaymentMethod\n */ QuickBooks.prototype.getPaymentMethod = function(id, callback) {\n    module.read(this, \"paymentMethod\", id, callback);\n};\n/**\n * Retrieves the Preferences from QuickBooks\n *\n * @param  {function} callback - Callback function which is called with any error and the persistent Preferences\n */ QuickBooks.prototype.getPreferences = function(callback) {\n    module.read(this, \"preferences\", null, callback);\n};\n/**\n * Retrieves the Purchase from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Purchase\n * @param  {function} callback - Callback function which is called with any error and the persistent Purchase\n */ QuickBooks.prototype.getPurchase = function(id, callback) {\n    module.read(this, \"purchase\", id, callback);\n};\n/**\n * Retrieves the PurchaseOrder from QuickBooks\n *\n * @param  {string} Id - The Id of persistent PurchaseOrder\n * @param  {function} callback - Callback function which is called with any error and the persistent PurchaseOrder\n */ QuickBooks.prototype.getPurchaseOrder = function(id, callback) {\n    module.read(this, \"purchaseOrder\", id, callback);\n};\n/**\n * Retrieves the RefundReceipt from QuickBooks\n *\n * @param  {string} Id - The Id of persistent RefundReceipt\n * @param  {function} callback - Callback function which is called with any error and the persistent RefundReceipt\n */ QuickBooks.prototype.getRefundReceipt = function(id, callback) {\n    module.read(this, \"refundReceipt\", id, callback);\n};\n/**\n * Retrieves the Reports from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Reports\n * @param  {function} callback - Callback function which is called with any error and the persistent Reports\n */ QuickBooks.prototype.getReports = function(id, callback) {\n    module.read(this, \"reports\", id, callback);\n};\n/**\n * Retrieves the SalesReceipt from QuickBooks\n *\n * @param  {string} Id - The Id of persistent SalesReceipt\n * @param  {function} callback - Callback function which is called with any error and the persistent SalesReceipt\n */ QuickBooks.prototype.getSalesReceipt = function(id, callback) {\n    module.read(this, \"salesReceipt\", id, callback);\n};\n/**\n * Retrieves the SalesReceipt PDF from QuickBooks\n *\n * @param  {string} Id - The Id of persistent SalesReceipt\n * @param  {function} callback - Callback function which is called with any error and the SalesReceipt PDF\n */ QuickBooks.prototype.getSalesReceiptPdf = function(id, callback) {\n    module.read(this, \"salesReceipt\", id + \"/pdf\", callback);\n};\n/**\n * Emails the SalesReceipt PDF from QuickBooks to the address supplied in SalesReceipt.BillEmail.EmailAddress\n * or the specified 'sendTo' address\n *\n * @param  {string} Id - The Id of persistent SalesReceipt\n * @param  {string} sendTo - optional email address to send the PDF to. If not provided, address supplied in SalesReceipt.BillEmail.EmailAddress will be used\n * @param  {function} callback - Callback function which is called with any error and the SalesReceipt PDF\n */ QuickBooks.prototype.sendSalesReceiptPdf = function(id, sendTo, callback) {\n    var path = \"/salesreceipt/\" + id + \"/send\";\n    callback = _.isFunction(sendTo) ? sendTo : callback;\n    if (sendTo && !_.isFunction(sendTo)) {\n        path += \"?sendTo=\" + sendTo;\n    }\n    module.request(this, \"post\", {\n        url: path\n    }, null, module.unwrap(callback, \"SalesReceipt\"));\n};\n/**\n * Retrieves the TaxAgency from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TaxAgency\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxAgency\n */ QuickBooks.prototype.getTaxAgency = function(id, callback) {\n    module.read(this, \"taxAgency\", id, callback);\n};\n/**\n * Retrieves the TaxCode from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TaxCode\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxCode\n */ QuickBooks.prototype.getTaxCode = function(id, callback) {\n    module.read(this, \"taxCode\", id, callback);\n};\n/**\n * Retrieves the TaxRate from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TaxRate\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxRate\n */ QuickBooks.prototype.getTaxRate = function(id, callback) {\n    module.read(this, \"taxRate\", id, callback);\n};\n/**\n * Retrieves the Term from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Term\n * @param  {function} callback - Callback function which is called with any error and the persistent Term\n */ QuickBooks.prototype.getTerm = function(id, callback) {\n    module.read(this, \"term\", id, callback);\n};\n/**\n * Retrieves the TimeActivity from QuickBooks\n *\n * @param  {string} Id - The Id of persistent TimeActivity\n * @param  {function} callback - Callback function which is called with any error and the persistent TimeActivity\n */ QuickBooks.prototype.getTimeActivity = function(id, callback) {\n    module.read(this, \"timeActivity\", id, callback);\n};\n/**\n * Retrieves the Transfer from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Term\n * @param  {function} callback - Callback function which is called with any error and the persistent Transfer\n */ QuickBooks.prototype.getTransfer = function(id, callback) {\n    module.read(this, \"transfer\", id, callback);\n};\n/**\n * Retrieves the Vendor from QuickBooks\n *\n * @param  {string} Id - The Id of persistent Vendor\n * @param  {function} callback - Callback function which is called with any error and the persistent Vendor\n */ QuickBooks.prototype.getVendor = function(id, callback) {\n    module.read(this, \"vendor\", id, callback);\n};\n/**\n * Retrieves the VendorCredit from QuickBooks\n *\n * @param  {string} Id - The Id of persistent VendorCredit\n * @param  {function} callback - Callback function which is called with any error and the persistent VendorCredit\n */ QuickBooks.prototype.getVendorCredit = function(id, callback) {\n    module.read(this, \"vendorCredit\", id, callback);\n};\n/**\n * Updates QuickBooks version of Account\n *\n * @param  {object} account - The persistent Account, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Account\n */ QuickBooks.prototype.updateAccount = function(account, callback) {\n    module.update(this, \"account\", account, callback);\n};\n/**\n * Updates QuickBooks version of Attachable\n *\n * @param  {object} attachable - The persistent Attachable, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Attachable\n */ QuickBooks.prototype.updateAttachable = function(attachable, callback) {\n    module.update(this, \"attachable\", attachable, callback);\n};\n/**\n * Updates QuickBooks version of Bill\n *\n * @param  {object} bill - The persistent Bill, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Bill\n */ QuickBooks.prototype.updateBill = function(bill, callback) {\n    module.update(this, \"bill\", bill, callback);\n};\n/**\n * Updates QuickBooks version of BillPayment\n *\n * @param  {object} billPayment - The persistent BillPayment, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent BillPayment\n */ QuickBooks.prototype.updateBillPayment = function(billPayment, callback) {\n    module.update(this, \"billPayment\", billPayment, callback);\n};\n/**\n * Updates QuickBooks version of Class\n *\n * @param  {object} class - The persistent Class, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Class\n */ QuickBooks.prototype.updateClass = function(klass, callback) {\n    module.update(this, \"class\", klass, callback);\n};\n/**\n * Updates QuickBooks version of CompanyInfo\n *\n * @param  {object} companyInfo - The persistent CompanyInfo, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent CompanyInfo\n */ QuickBooks.prototype.updateCompanyInfo = function(companyInfo, callback) {\n    module.update(this, \"companyInfo\", companyInfo, callback);\n};\n/**\n * Updates QuickBooks version of CreditMemo\n *\n * @param  {object} creditMemo - The persistent CreditMemo, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent CreditMemo\n */ QuickBooks.prototype.updateCreditMemo = function(creditMemo, callback) {\n    module.update(this, \"creditMemo\", creditMemo, callback);\n};\n/**\n * Updates QuickBooks version of Customer\n *\n * @param  {object} customer - The persistent Customer, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Customer\n */ QuickBooks.prototype.updateCustomer = function(customer, callback) {\n    module.update(this, \"customer\", customer, callback);\n};\n/**\n * Updates QuickBooks version of Department\n *\n * @param  {object} department - The persistent Department, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Department\n */ QuickBooks.prototype.updateDepartment = function(department, callback) {\n    module.update(this, \"department\", department, callback);\n};\n/**\n * Updates QuickBooks version of Deposit\n *\n * @param  {object} deposit - The persistent Deposit, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Deposit\n */ QuickBooks.prototype.updateDeposit = function(deposit, callback) {\n    module.update(this, \"deposit\", deposit, callback);\n};\n/**\n * Updates QuickBooks version of Employee\n *\n * @param  {object} employee - The persistent Employee, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Employee\n */ QuickBooks.prototype.updateEmployee = function(employee, callback) {\n    module.update(this, \"employee\", employee, callback);\n};\n/**\n * Updates QuickBooks version of Estimate\n *\n * @param  {object} estimate - The persistent Estimate, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Estimate\n */ QuickBooks.prototype.updateEstimate = function(estimate, callback) {\n    module.update(this, \"estimate\", estimate, callback);\n};\n/**\n * Updates QuickBooks version of Invoice\n *\n * @param  {object} invoice - The persistent Invoice, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */ QuickBooks.prototype.updateInvoice = function(invoice, callback) {\n    module.update(this, \"invoice\", invoice, callback);\n};\n/**\n * Updates QuickBooks version of Item\n *\n * @param  {object} item - The persistent Item, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Item\n */ QuickBooks.prototype.updateItem = function(item, callback) {\n    var opts = {};\n    if (item.doNotUpdateAccountOnTxns && item.doNotUpdateAccountOnTxns.toString() === \"true\") {\n        opts.qs = {\n            include: \"donotupdateaccountontxns\"\n        };\n        delete item.doNotUpdateAccountOnTxns;\n    }\n    module.update(this, \"item\", item, callback, opts);\n};\n/**\n * Updates QuickBooks version of JournalCode\n *\n * @param  {object} journalCode - The persistent JournalCode, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalCode\n */ QuickBooks.prototype.updateJournalCode = function(journalCode, callback) {\n    module.update(this, \"journalCode\", journalCode, callback);\n};\n/**\n * Updates QuickBooks version of JournalEntry\n *\n * @param  {object} journalEntry - The persistent JournalEntry, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent JournalEntry\n */ QuickBooks.prototype.updateJournalEntry = function(journalEntry, callback) {\n    module.update(this, \"journalEntry\", journalEntry, callback);\n};\n/**\n * Updates QuickBooks version of Payment\n *\n * @param  {object} payment - The persistent Payment, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */ QuickBooks.prototype.updatePayment = function(payment, callback) {\n    module.update(this, \"payment\", payment, callback);\n};\n/**\n * Updates QuickBooks version of PaymentMethod\n *\n * @param  {object} paymentMethod - The persistent PaymentMethod, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent PaymentMethod\n */ QuickBooks.prototype.updatePaymentMethod = function(paymentMethod, callback) {\n    module.update(this, \"paymentMethod\", paymentMethod, callback);\n};\n/**\n * Updates QuickBooks version of Preferences\n *\n * @param  {object} preferences - The persistent Preferences, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Preferences\n */ QuickBooks.prototype.updatePreferences = function(preferences, callback) {\n    module.update(this, \"preferences\", preferences, callback);\n};\n/**\n * Updates QuickBooks version of Purchase\n *\n * @param  {object} purchase - The persistent Purchase, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Purchase\n */ QuickBooks.prototype.updatePurchase = function(purchase, callback) {\n    module.update(this, \"purchase\", purchase, callback);\n};\n/**\n * Updates QuickBooks version of PurchaseOrder\n *\n * @param  {object} purchaseOrder - The persistent PurchaseOrder, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent PurchaseOrder\n */ QuickBooks.prototype.updatePurchaseOrder = function(purchaseOrder, callback) {\n    module.update(this, \"purchaseOrder\", purchaseOrder, callback);\n};\n/**\n * Updates QuickBooks version of RefundReceipt\n *\n * @param  {object} refundReceipt - The persistent RefundReceipt, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent RefundReceipt\n */ QuickBooks.prototype.updateRefundReceipt = function(refundReceipt, callback) {\n    module.update(this, \"refundReceipt\", refundReceipt, callback);\n};\n/**\n * Updates QuickBooks version of SalesReceipt\n *\n * @param  {object} salesReceipt - The persistent SalesReceipt, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent SalesReceipt\n */ QuickBooks.prototype.updateSalesReceipt = function(salesReceipt, callback) {\n    module.update(this, \"salesReceipt\", salesReceipt, callback);\n};\n/**\n * Updates QuickBooks version of TaxAgency\n *\n * @param  {object} taxAgency - The persistent TaxAgency, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxAgency\n */ QuickBooks.prototype.updateTaxAgency = function(taxAgency, callback) {\n    module.update(this, \"taxAgency\", taxAgency, callback);\n};\n/**\n * Updates QuickBooks version of TaxCode\n *\n * @param  {object} taxCode - The persistent TaxCode, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxCode\n */ QuickBooks.prototype.updateTaxCode = function(taxCode, callback) {\n    module.update(this, \"taxCode\", taxCode, callback);\n};\n/**\n * Updates QuickBooks version of TaxRate\n *\n * @param  {object} taxRate - The persistent TaxRate, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TaxRate\n */ QuickBooks.prototype.updateTaxRate = function(taxRate, callback) {\n    module.update(this, \"taxRate\", taxRate, callback);\n};\n/**\n * Updates QuickBooks version of Term\n *\n * @param  {object} term - The persistent Term, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Term\n */ QuickBooks.prototype.updateTerm = function(term, callback) {\n    module.update(this, \"term\", term, callback);\n};\n/**\n * Updates QuickBooks version of TimeActivity\n *\n * @param  {object} timeActivity - The persistent TimeActivity, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent TimeActivity\n */ QuickBooks.prototype.updateTimeActivity = function(timeActivity, callback) {\n    module.update(this, \"timeActivity\", timeActivity, callback);\n};\n/**\n * Updates QuickBooks version of Transfer\n *\n * @param  {object} Transfer - The persistent Transfer, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Transfer\n */ QuickBooks.prototype.updateTransfer = function(transfer, callback) {\n    module.update(this, \"transfer\", transfer, callback);\n};\n/**\n * Updates QuickBooks version of Vendor\n *\n * @param  {object} vendor - The persistent Vendor, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Vendor\n */ QuickBooks.prototype.updateVendor = function(vendor, callback) {\n    module.update(this, \"vendor\", vendor, callback);\n};\n/**\n * Updates QuickBooks version of VendorCredit\n *\n * @param  {object} vendorCredit - The persistent VendorCredit, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent VendorCredit\n */ QuickBooks.prototype.updateVendorCredit = function(vendorCredit, callback) {\n    module.update(this, \"vendorCredit\", vendorCredit, callback);\n};\n/**\n * Updates QuickBooks version of ExchangeRate\n *\n * @param  {object} exchangeRate - The persistent ExchangeRate, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent ExchangeRate\n */ QuickBooks.prototype.updateExchangeRate = function(exchangeRate, callback) {\n    module.update(this, \"exchangerate\", exchangeRate, callback);\n};\n/**\n * Deletes the Attachable from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Attachable to be deleted, or the Id of the Attachable, in which case an extra GET request will be issued to first retrieve the Attachable\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Attachable\n */ QuickBooks.prototype.deleteAttachable = function(idOrEntity, callback) {\n    module.delete(this, \"attachable\", idOrEntity, callback);\n};\n/**\n * Deletes the Bill from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Bill to be deleted, or the Id of the Bill, in which case an extra GET request will be issued to first retrieve the Bill\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Bill\n */ QuickBooks.prototype.deleteBill = function(idOrEntity, callback) {\n    module.delete(this, \"bill\", idOrEntity, callback);\n};\n/**\n * Deletes the BillPayment from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent BillPayment to be deleted, or the Id of the BillPayment, in which case an extra GET request will be issued to first retrieve the BillPayment\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent BillPayment\n */ QuickBooks.prototype.deleteBillPayment = function(idOrEntity, callback) {\n    module.delete(this, \"billPayment\", idOrEntity, callback);\n};\n/**\n * Deletes the CreditMemo from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent CreditMemo to be deleted, or the Id of the CreditMemo, in which case an extra GET request will be issued to first retrieve the CreditMemo\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent CreditMemo\n */ QuickBooks.prototype.deleteCreditMemo = function(idOrEntity, callback) {\n    module.delete(this, \"creditMemo\", idOrEntity, callback);\n};\n/**\n * Deletes the Deposit from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Deposit to be deleted, or the Id of the Deposit, in which case an extra GET request will be issued to first retrieve the Deposit\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Deposit\n */ QuickBooks.prototype.deleteDeposit = function(idOrEntity, callback) {\n    module.delete(this, \"deposit\", idOrEntity, callback);\n};\n/**\n * Deletes the Estimate from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Estimate to be deleted, or the Id of the Estimate, in which case an extra GET request will be issued to first retrieve the Estimate\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Estimate\n */ QuickBooks.prototype.deleteEstimate = function(idOrEntity, callback) {\n    module.delete(this, \"estimate\", idOrEntity, callback);\n};\n/**\n * Deletes the Invoice from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Invoice to be deleted, or the Id of the Invoice, in which case an extra GET request will be issued to first retrieve the Invoice\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Invoice\n */ QuickBooks.prototype.deleteInvoice = function(idOrEntity, callback) {\n    module.delete(this, \"invoice\", idOrEntity, callback);\n};\n/**\n * Deletes the JournalCode from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent JournalCode to be deleted, or the Id of the JournalCode, in which case an extra GET request will be issued to first retrieve the JournalCode\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent JournalCode\n */ QuickBooks.prototype.deleteJournalCode = function(idOrEntity, callback) {\n    module.delete(this, \"journalCode\", idOrEntity, callback);\n};\n/**\n * Deletes the JournalEntry from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent JournalEntry to be deleted, or the Id of the JournalEntry, in which case an extra GET request will be issued to first retrieve the JournalEntry\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent JournalEntry\n */ QuickBooks.prototype.deleteJournalEntry = function(idOrEntity, callback) {\n    module.delete(this, \"journalEntry\", idOrEntity, callback);\n};\n/**\n * Deletes the Payment from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Payment to be deleted, or the Id of the Payment, in which case an extra GET request will be issued to first retrieve the Payment\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Payment\n */ QuickBooks.prototype.deletePayment = function(idOrEntity, callback) {\n    module.delete(this, \"payment\", idOrEntity, callback);\n};\n/**\n * Deletes the Purchase from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Purchase to be deleted, or the Id of the Purchase, in which case an extra GET request will be issued to first retrieve the Purchase\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Purchase\n */ QuickBooks.prototype.deletePurchase = function(idOrEntity, callback) {\n    module.delete(this, \"purchase\", idOrEntity, callback);\n};\n/**\n * Deletes the PurchaseOrder from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent PurchaseOrder to be deleted, or the Id of the PurchaseOrder, in which case an extra GET request will be issued to first retrieve the PurchaseOrder\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent PurchaseOrder\n */ QuickBooks.prototype.deletePurchaseOrder = function(idOrEntity, callback) {\n    module.delete(this, \"purchaseOrder\", idOrEntity, callback);\n};\n/**\n * Deletes the RefundReceipt from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent RefundReceipt to be deleted, or the Id of the RefundReceipt, in which case an extra GET request will be issued to first retrieve the RefundReceipt\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent RefundReceipt\n */ QuickBooks.prototype.deleteRefundReceipt = function(idOrEntity, callback) {\n    module.delete(this, \"refundReceipt\", idOrEntity, callback);\n};\n/**\n * Deletes the SalesReceipt from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent SalesReceipt to be deleted, or the Id of the SalesReceipt, in which case an extra GET request will be issued to first retrieve the SalesReceipt\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent SalesReceipt\n */ QuickBooks.prototype.deleteSalesReceipt = function(idOrEntity, callback) {\n    module.delete(this, \"salesReceipt\", idOrEntity, callback);\n};\n/**\n * Deletes the TimeActivity from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent TimeActivity to be deleted, or the Id of the TimeActivity, in which case an extra GET request will be issued to first retrieve the TimeActivity\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent TimeActivity\n */ QuickBooks.prototype.deleteTimeActivity = function(idOrEntity, callback) {\n    module.delete(this, \"timeActivity\", idOrEntity, callback);\n};\n/**\n * Deletes the Transfer from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Transfer to be deleted, or the Id of the Transfer, in which case an extra GET request will be issued to first retrieve the Transfer\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent Transfer\n */ QuickBooks.prototype.deleteTransfer = function(idOrEntity, callback) {\n    module.delete(this, \"transfer\", idOrEntity, callback);\n};\n/**\n * Deletes the VendorCredit from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent VendorCredit to be deleted, or the Id of the VendorCredit, in which case an extra GET request will be issued to first retrieve the VendorCredit\n * @param  {function} callback - Callback function which is called with any error and the status of the persistent VendorCredit\n */ QuickBooks.prototype.deleteVendorCredit = function(idOrEntity, callback) {\n    module.delete(this, \"vendorCredit\", idOrEntity, callback);\n};\n/**\n * Voids the Invoice from QuickBooks\n *\n * @param  {object} idOrEntity - The persistent Invoice to be voided, or the Id of the Invoice, in which case an extra GET request will be issued to first retrieve the Invoice\n * @param  {function} callback - Callback function which is called with any error and the persistent Invoice\n */ QuickBooks.prototype.voidInvoice = function(idOrEntity, callback) {\n    module.void(this, \"invoice\", idOrEntity, callback);\n};\n/**\n * Voids QuickBooks version of Payment\n *\n * @param  {object} payment - The persistent Payment, including Id and SyncToken fields\n * @param  {function} callback - Callback function which is called with any error and the persistent Payment\n */ QuickBooks.prototype.voidPayment = function(payment, callback) {\n    payment.void = true;\n    payment.sparse = true;\n    module.update(this, \"payment\", payment, callback);\n};\n/**\n * Finds all Accounts in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Account\n */ QuickBooks.prototype.findAccounts = function(criteria, callback) {\n    module.query(this, \"account\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Attachables in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Attachable\n */ QuickBooks.prototype.findAttachables = function(criteria, callback) {\n    module.query(this, \"attachable\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Bills in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Bill\n */ QuickBooks.prototype.findBills = function(criteria, callback) {\n    module.query(this, \"bill\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all BillPayments in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of BillPayment\n */ QuickBooks.prototype.findBillPayments = function(criteria, callback) {\n    module.query(this, \"billPayment\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Budgets in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Budget\n */ QuickBooks.prototype.findBudgets = function(criteria, callback) {\n    module.query(this, \"budget\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Classs in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Class\n */ QuickBooks.prototype.findClasses = function(criteria, callback) {\n    module.query(this, \"class\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all CompanyInfos in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of CompanyInfo\n */ QuickBooks.prototype.findCompanyInfos = function(criteria, callback) {\n    module.query(this, \"companyInfo\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all CompanyCurrencies in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of CompanyCurrencies\n */ QuickBooks.prototype.findCompanyCurrencies = function(criteria, callback) {\n    module.query(this, \"companyCurrency\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all CreditMemos in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of CreditMemo\n */ QuickBooks.prototype.findCreditMemos = function(criteria, callback) {\n    module.query(this, \"creditMemo\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Customers in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Customer\n */ QuickBooks.prototype.findCustomers = function(criteria, callback) {\n    module.query(this, \"customer\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all CustomerTypes in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of CustomerType\n */ QuickBooks.prototype.findCustomerTypes = function(criteria, callback) {\n    module.query(this, \"customerType\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Departments in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Department\n */ QuickBooks.prototype.findDepartments = function(criteria, callback) {\n    module.query(this, \"department\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Deposits in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Deposit\n */ QuickBooks.prototype.findDeposits = function(criteria, callback) {\n    module.query(this, \"deposit\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Employees in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Employee\n */ QuickBooks.prototype.findEmployees = function(criteria, callback) {\n    module.query(this, \"employee\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Estimates in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Estimate\n */ QuickBooks.prototype.findEstimates = function(criteria, callback) {\n    module.query(this, \"estimate\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Invoices in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Invoice\n */ QuickBooks.prototype.findInvoices = function(criteria, callback) {\n    module.query(this, \"invoice\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Items in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Item\n */ QuickBooks.prototype.findItems = function(criteria, callback) {\n    module.query(this, \"item\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all JournalCodes in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of JournalCode\n */ QuickBooks.prototype.findJournalCodes = function(criteria, callback) {\n    module.query(this, \"journalCode\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all JournalEntrys in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of JournalEntry\n */ QuickBooks.prototype.findJournalEntries = function(criteria, callback) {\n    module.query(this, \"journalEntry\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Payments in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Payment\n */ QuickBooks.prototype.findPayments = function(criteria, callback) {\n    module.query(this, \"payment\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all PaymentMethods in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of PaymentMethod\n */ QuickBooks.prototype.findPaymentMethods = function(criteria, callback) {\n    module.query(this, \"paymentMethod\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Preferencess in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Preferences\n */ QuickBooks.prototype.findPreferenceses = function(criteria, callback) {\n    module.query(this, \"preferences\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Purchases in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Purchase\n */ QuickBooks.prototype.findPurchases = function(criteria, callback) {\n    module.query(this, \"purchase\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all PurchaseOrders in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of PurchaseOrder\n */ QuickBooks.prototype.findPurchaseOrders = function(criteria, callback) {\n    module.query(this, \"purchaseOrder\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all RefundReceipts in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of RefundReceipt\n */ QuickBooks.prototype.findRefundReceipts = function(criteria, callback) {\n    module.query(this, \"refundReceipt\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all SalesReceipts in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of SalesReceipt\n */ QuickBooks.prototype.findSalesReceipts = function(criteria, callback) {\n    module.query(this, \"salesReceipt\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all TaxAgencys in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TaxAgency\n */ QuickBooks.prototype.findTaxAgencies = function(criteria, callback) {\n    module.query(this, \"taxAgency\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all TaxCodes in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TaxCode\n */ QuickBooks.prototype.findTaxCodes = function(criteria, callback) {\n    module.query(this, \"taxCode\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all TaxRates in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TaxRate\n */ QuickBooks.prototype.findTaxRates = function(criteria, callback) {\n    module.query(this, \"taxRate\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Terms in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Term\n */ QuickBooks.prototype.findTerms = function(criteria, callback) {\n    module.query(this, \"term\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all TimeActivitys in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of TimeActivity\n */ QuickBooks.prototype.findTimeActivities = function(criteria, callback) {\n    module.query(this, \"timeActivity\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Transfers in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Transfer\n */ QuickBooks.prototype.findTransfers = function(criteria, callback) {\n    module.query(this, \"transfer\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all Vendors in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of Vendor\n */ QuickBooks.prototype.findVendors = function(criteria, callback) {\n    module.query(this, \"vendor\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all VendorCredits in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of VendorCredit\n */ QuickBooks.prototype.findVendorCredits = function(criteria, callback) {\n    module.query(this, \"vendorCredit\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Finds all ExchangeRates in QuickBooks, optionally matching the specified criteria\n *\n * @param  {object} criteria - (Optional) String or single-valued map converted to a where clause of the form \"where key = 'value'\"\n * @param  {function} callback - Callback function which is called with any error and the list of ExchangeRates\n */ QuickBooks.prototype.findExchangeRates = function(criteria, callback) {\n    module.query(this, \"exchangerate\", criteria).then(function(data) {\n        (callback || criteria)(null, data);\n    }).catch(function(err) {\n        (callback || criteria)(err, err);\n    });\n};\n/**\n * Retrieves the BalanceSheet Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the BalanceSheet Report\n */ QuickBooks.prototype.reportBalanceSheet = function(options, callback) {\n    module.report(this, \"BalanceSheet\", options, callback);\n};\n/**\n * Retrieves the ProfitAndLoss Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ProfitAndLoss Report\n */ QuickBooks.prototype.reportProfitAndLoss = function(options, callback) {\n    module.report(this, \"ProfitAndLoss\", options, callback);\n};\n/**\n * Retrieves the ProfitAndLossDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ProfitAndLossDetail Report\n */ QuickBooks.prototype.reportProfitAndLossDetail = function(options, callback) {\n    module.report(this, \"ProfitAndLossDetail\", options, callback);\n};\n/**\n * Retrieves the TrialBalance Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TrialBalance Report\n */ QuickBooks.prototype.reportTrialBalance = function(options, callback) {\n    module.report(this, \"TrialBalance\", options, callback);\n};\n/**\n * Retrieves the TrialBalanceFR Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TrialBalance Report\n */ QuickBooks.prototype.reportTrialBalanceFR = function(options, callback) {\n    module.report(this, \"TrialBalanceFR\", options, callback);\n};\n/**\n * Retrieves the CashFlow Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CashFlow Report\n */ QuickBooks.prototype.reportCashFlow = function(options, callback) {\n    module.report(this, \"CashFlow\", options, callback);\n};\n/**\n * Retrieves the InventoryValuationSummary Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the InventoryValuationSummary Report\n */ QuickBooks.prototype.reportInventoryValuationSummary = function(options, callback) {\n    module.report(this, \"InventoryValuationSummary\", options, callback);\n};\n/**\n * Retrieves the CustomerSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerSales Report\n */ QuickBooks.prototype.reportCustomerSales = function(options, callback) {\n    module.report(this, \"CustomerSales\", options, callback);\n};\n/**\n * Retrieves the ItemSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ItemSales Report\n */ QuickBooks.prototype.reportItemSales = function(options, callback) {\n    module.report(this, \"ItemSales\", options, callback);\n};\n/**\n * Retrieves the CustomerIncome Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerIncome Report\n */ QuickBooks.prototype.reportCustomerIncome = function(options, callback) {\n    module.report(this, \"CustomerIncome\", options, callback);\n};\n/**\n * Retrieves the CustomerBalance Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerBalance Report\n */ QuickBooks.prototype.reportCustomerBalance = function(options, callback) {\n    module.report(this, \"CustomerBalance\", options, callback);\n};\n/**\n * Retrieves the CustomerBalanceDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the CustomerBalanceDetail Report\n */ QuickBooks.prototype.reportCustomerBalanceDetail = function(options, callback) {\n    module.report(this, \"CustomerBalanceDetail\", options, callback);\n};\n/**\n * Retrieves the AgedReceivables Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedReceivables Report\n */ QuickBooks.prototype.reportAgedReceivables = function(options, callback) {\n    module.report(this, \"AgedReceivables\", options, callback);\n};\n/**\n * Retrieves the AgedReceivableDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedReceivableDetail Report\n */ QuickBooks.prototype.reportAgedReceivableDetail = function(options, callback) {\n    module.report(this, \"AgedReceivableDetail\", options, callback);\n};\n/**\n * Retrieves the VendorBalance Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the VendorBalance Report\n */ QuickBooks.prototype.reportVendorBalance = function(options, callback) {\n    module.report(this, \"VendorBalance\", options, callback);\n};\n/**\n * Retrieves the VendorBalanceDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the VendorBalanceDetail Report\n */ QuickBooks.prototype.reportVendorBalanceDetail = function(options, callback) {\n    module.report(this, \"VendorBalanceDetail\", options, callback);\n};\n/**\n * Retrieves the AgedPayables Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedPayables Report\n */ QuickBooks.prototype.reportAgedPayables = function(options, callback) {\n    module.report(this, \"AgedPayables\", options, callback);\n};\n/**\n * Retrieves the AgedPayableDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AgedPayableDetail Report\n */ QuickBooks.prototype.reportAgedPayableDetail = function(options, callback) {\n    module.report(this, \"AgedPayableDetail\", options, callback);\n};\n/**\n * Retrieves the VendorExpenses Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the VendorExpenses Report\n */ QuickBooks.prototype.reportVendorExpenses = function(options, callback) {\n    module.report(this, \"VendorExpenses\", options, callback);\n};\n/**\n * Retrieves the TransactionList Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TransactionList Report\n */ QuickBooks.prototype.reportTransactionList = function(options, callback) {\n    module.report(this, \"TransactionList\", options, callback);\n};\n/**\n * Retrieves the TransactionListWithSplits Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TransactionListWithSplits Report\n */ QuickBooks.prototype.reportTransactionListWithSplits = function(options, callback) {\n    module.report(this, \"TransactionListWithSplits\", options, callback);\n};\n/**\n * Retrieves the TransactionListByCustomer Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TransactionListByCustomer Report\n */ QuickBooks.prototype.reportTransactionListByCustomer = function(options, callback) {\n    module.report(this, \"TransactionListByCustomer\", options, callback);\n};\n/**\n * Retrieves the TransactionListByVendor Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TransactionListByVendor Report\n */ QuickBooks.prototype.reportTransactionListByVendor = function(options, callback) {\n    module.report(this, \"TransactionListByVendor\", options, callback);\n};\n/**\n * Retrieves the GeneralLedgerDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the GeneralLedgerDetail Report\n */ QuickBooks.prototype.reportGeneralLedgerDetail = function(options, callback) {\n    module.report(this, \"GeneralLedger\", options, callback);\n};\n/**\n * Retrieves the TaxSummary Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the TaxSummary Report\n */ QuickBooks.prototype.reportTaxSummary = function(options, callback) {\n    module.report(this, \"TaxSummary\", options, callback);\n};\n/**\n * Retrieves the DepartmentSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the DepartmentSales Report\n */ QuickBooks.prototype.reportDepartmentSales = function(options, callback) {\n    module.report(this, \"DepartmentSales\", options, callback);\n};\n/**\n * Retrieves the ClassSales Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the ClassSales Report\n */ QuickBooks.prototype.reportClassSales = function(options, callback) {\n    module.report(this, \"ClassSales\", options, callback);\n};\n/**\n * Retrieves the AccountListDetail Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the AccountListDetail Report\n */ QuickBooks.prototype.reportAccountListDetail = function(options, callback) {\n    module.report(this, \"AccountList\", options, callback);\n};\n/**\n * Retrieves the JournalReport Report from QuickBooks\n *\n * @param  {object} options - (Optional) Map of key-value pairs passed as options to the Report\n * @param  {function} callback - Callback function which is called with any error and the JournalReport Report\n */ QuickBooks.prototype.reportJournalReport = function(options, callback) {\n    module.report(this, \"JournalReport\", options, callback);\n};\nmodule.request = function(context, verb, options, entity, callback) {\n    var url = context.endpoint + context.realmId + options.url;\n    if (options.url === QuickBooks.RECONNECT_URL || options.url == QuickBooks.DISCONNECT_URL || options.url === QuickBooks.REVOKE_URL || options.url === QuickBooks.USER_INFO_URL) {\n        url = options.url;\n    }\n    var opts = {\n        url: url,\n        qs: options.qs || {},\n        headers: options.headers || {},\n        json: true\n    };\n    if (entity && entity.allowDuplicateDocNum) {\n        delete entity.allowDuplicateDocNum;\n        opts.qs.include = \"allowduplicatedocnum\";\n    }\n    if (entity && entity.requestId) {\n        opts.qs.requestid = entity.requestId;\n        delete entity.requestId;\n    }\n    opts.qs.minorversion = opts.qs.minorversion || context.minorversion;\n    opts.headers[\"User-Agent\"] = \"node-quickbooks: version \" + version;\n    opts.headers[\"Request-Id\"] = uuid.v1();\n    opts.qs.format = \"json\";\n    if (context.oauthversion == \"2.0\") {\n        opts.headers[\"Authorization\"] = \"Bearer \" + context.token;\n    } else {\n        opts.oauth = module.oauth(context);\n    }\n    ;\n    if (options.url.match(/pdf$/)) {\n        opts.headers[\"accept\"] = \"application/pdf\";\n        opts.encoding = null;\n    }\n    if (entity !== null) {\n        opts.body = entity;\n    }\n    if (options.formData) {\n        opts.formData = options.formData;\n    }\n    if ( true && context.debug) {\n        debug(request);\n    }\n    request[verb].call(context, opts, function(err, res, body) {\n        if ( true && context.debug) {\n            console.log(\"invoking endpoint: \" + url);\n            console.log(entity || \"\");\n            console.log(JSON.stringify(body, null, 2));\n        }\n        if (callback) {\n            if (err || res.statusCode >= 300 || _.isObject(body) && body.Fault && body.Fault.Error && body.Fault.Error.length || _.isString(body) && !_.isEmpty(body) && body.indexOf(\"<\") === 0) {\n                callback(err || body, body, res);\n            } else {\n                callback(null, body, res);\n            }\n        }\n    });\n};\nmodule.xmlRequest = function(context, url, rootTag, callback) {\n    module.request(context, \"get\", {\n        url: url\n    }, null, (err, body)=>{\n        var json = body.constructor === ({}).constructor ? body : body.constructor === \"\".constructor ? body.indexOf(\"<\") === 0 ? xmlParser.parse(body)[rootTag] : body : body;\n        callback(json.ErrorCode === 0 ? null : json, json);\n    });\n};\nQuickBooks.prototype.reconnect = function(callback) {\n    module.xmlRequest(this, QuickBooks.RECONNECT_URL, \"ReconnectResponse\", callback);\n};\nQuickBooks.prototype.disconnect = function(callback) {\n    module.xmlRequest(this, QuickBooks.DISCONNECT_URL, \"PlatformResponse\", callback);\n};\n// **********************  CRUD Api **********************\nmodule.create = function(context, entityName, entity, callback) {\n    var url = \"/\" + entityName.toLowerCase();\n    module.request(context, \"post\", {\n        url: url\n    }, entity, module.unwrap(callback, entityName));\n};\nmodule.read = function(context, entityName, id, callback) {\n    var url = \"/\" + entityName.toLowerCase();\n    if (id) url = url + \"/\" + id;\n    module.request(context, \"get\", {\n        url: url\n    }, null, module.unwrap(callback, entityName));\n};\nmodule.update = function(context, entityName, entity, callback, opts = {}) {\n    if (_.isUndefined(entity.Id) || _.isEmpty(entity.Id + \"\") || _.isUndefined(entity.SyncToken) || _.isEmpty(entity.SyncToken + \"\")) {\n        if (entityName !== \"exchangerate\") {\n            throw new Error(entityName + \" must contain Id and SyncToken fields: \" + util.inspect(entity, {\n                showHidden: false,\n                depth: null\n            }));\n        }\n    }\n    if (!entity.hasOwnProperty(\"sparse\")) {\n        entity.sparse = true;\n    }\n    opts.url = \"/\" + entityName.toLowerCase() + \"?operation=update\";\n    if (entity.void && entity.void.toString() === \"true\") {\n        opts.qs = {\n            include: \"void\"\n        };\n        delete entity.void;\n    }\n    module.request(context, \"post\", opts, entity, module.unwrap(callback, entityName));\n};\nmodule.delete = function(context, entityName, idOrEntity, callback) {\n    var url = \"/\" + entityName.toLowerCase() + \"?operation=delete\";\n    callback = callback || function() {};\n    if (_.isObject(idOrEntity)) {\n        module.request(context, \"post\", {\n            url: url\n        }, idOrEntity, callback);\n    } else {\n        module.read(context, entityName, idOrEntity, function(err, entity) {\n            if (err) {\n                callback(err);\n            } else {\n                module.request(context, \"post\", {\n                    url: url\n                }, entity, callback);\n            }\n        });\n    }\n};\nmodule.void = function(context, entityName, idOrEntity, callback) {\n    var url = \"/\" + entityName.toLowerCase() + \"?operation=void\";\n    callback = callback || function() {};\n    if (_.isObject(idOrEntity)) {\n        module.request(context, \"post\", {\n            url: url\n        }, idOrEntity, callback);\n    } else {\n        module.read(context, entityName, idOrEntity, function(err, entity) {\n            if (err) {\n                callback(err);\n            } else {\n                module.request(context, \"post\", {\n                    url: url\n                }, entity, callback);\n            }\n        });\n    }\n};\n// **********************  Query Api **********************\nmodule.requestPromise = Promise.promisify(module.request);\nmodule.query = function(context, entity, criteria) {\n    // criteria is potentially mutated within this function -\n    // so make a copy of it first\n    if (!_.isFunction(criteria) && (_.isObject(criteria) || _.isArray(criteria))) {\n        criteria = JSON.parse(JSON.stringify(criteria));\n    }\n    var url = \"/query?query@@select * from \" + entity;\n    var count = function(obj) {\n        for(var p in obj){\n            if (obj[p] && p.toLowerCase() === \"count\") {\n                url = url.replace(\"select * from\", \"select count(*) from\");\n                delete obj[p];\n            }\n        }\n    };\n    count(criteria);\n    if (_.isArray(criteria)) {\n        for(var i = 0; i < criteria.length; i++){\n            if (_.isObject(criteria[i])) {\n                var j = Object.keys(criteria[i]).length;\n                count(criteria[i]);\n                if (j !== Object.keys(criteria[i]).length) {\n                    criteria.splice(i, i + 1);\n                }\n            }\n        }\n    }\n    var fetchAll = false, limit = 1000, offset = 1;\n    if (_.isArray(criteria)) {\n        var lmt = _.find(criteria, function(obj) {\n            return obj.field && obj.field === \"limit\";\n        });\n        if (lmt) limit = lmt.value;\n        var ofs = _.find(criteria, function(obj) {\n            return obj.field && obj.field === \"offset\";\n        });\n        if (!ofs) {\n            criteria.push({\n                field: \"offset\",\n                value: 1\n            });\n        } else {\n            offset = ofs.value;\n        }\n        var fa = _.find(criteria, function(obj) {\n            return obj.field && obj.field === \"fetchAll\";\n        });\n        if (fa && fa.value) fetchAll = true;\n    } else if (_.isObject(criteria)) {\n        limit = criteria.limit = criteria.limit || 1000;\n        offset = criteria.offset = criteria.offset || 1;\n        if (criteria.fetchAll) fetchAll = true;\n    }\n    if (criteria && !_.isFunction(criteria)) {\n        url += module.criteriaToString(criteria) || \"\";\n        url = url.replace(/%/g, \"%25\").replace(/'/g, \"%27\").replace(/=/g, \"%3D\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\").replace(/&/g, \"%26\").replace(/#/g, \"%23\").replace(/\\\\/g, \"%5C\").replace(/\\+/g, \"%2B\");\n    }\n    url = url.replace(\"@@\", \"=\");\n    return new Promise(function(resolve, reject) {\n        module.requestPromise(context, \"get\", {\n            url: url\n        }, null).then(function(data) {\n            var fields = Object.keys(data.QueryResponse);\n            var key = _.find(fields, function(k) {\n                return k.toLowerCase() === entity.toLowerCase();\n            });\n            if (fetchAll) {\n                if (data && data.QueryResponse && data.QueryResponse.maxResults === limit) {\n                    if (_.isArray(criteria)) {\n                        _.each(criteria, function(e) {\n                            if (e.field === \"offset\") e.value = e.value + limit;\n                        });\n                    } else if (_.isObject(criteria)) {\n                        criteria.offset = criteria.offset + limit;\n                    }\n                    return module.query(context, entity, criteria).then(function(more) {\n                        data.QueryResponse[key] = data.QueryResponse[key].concat(more.QueryResponse[key] || []);\n                        data.QueryResponse.maxResults = data.QueryResponse.maxResults + (more.QueryResponse.maxResults || 0);\n                        data.time = more.time || data.time;\n                        resolve(data);\n                    });\n                } else {\n                    resolve(data);\n                }\n            } else {\n                resolve(data);\n            }\n        }).catch(function(err) {\n            reject(err);\n        });\n    });\n};\n// **********************  Report Api **********************\nmodule.report = function(context, reportType, criteria, callback) {\n    var url = \"/reports/\" + reportType;\n    if (criteria && typeof criteria !== \"function\") {\n        url += module.reportCriteria(criteria) || \"\";\n    }\n    module.request(context, \"get\", {\n        url: url\n    }, null, typeof criteria === \"function\" ? criteria : callback);\n};\nmodule.oauth = function(context) {\n    return {\n        consumer_key: context.consumerKey,\n        consumer_secret: context.consumerSecret,\n        token: context.token,\n        token_secret: context.tokenSecret\n    };\n};\nmodule.isNumeric = function(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n};\nmodule.checkProperty = function(field, name) {\n    return field && field.toLowerCase() === name;\n};\nmodule.toCriterion = function(c) {\n    var fields = _.keys(c);\n    if (_.intersection(fields, [\n        \"field\",\n        \"value\"\n    ]).length === 2) {\n        return {\n            field: c.field,\n            value: c.value,\n            operator: c.operator || \"=\"\n        };\n    } else {\n        return fields.map(function(k) {\n            return {\n                field: k,\n                value: c[k],\n                operator: _.isArray(c[k]) ? \"IN\" : \"=\"\n            };\n        });\n    }\n};\nmodule.criteriaToString = function(criteria) {\n    if (_.isString(criteria)) return criteria.indexOf(\" \") === 0 ? criteria : \" \" + criteria;\n    var cs = _.isArray(criteria) ? criteria.map(module.toCriterion) : module.toCriterion(criteria);\n    var flattened = _.flatten(cs);\n    var sql = \"\", limit, offset, desc, asc;\n    for(var i = 0, l = flattened.length; i < l; i++){\n        var criterion = flattened[i];\n        if (module.checkProperty(criterion.field, \"fetchall\")) {\n            continue;\n        }\n        if (module.checkProperty(criterion.field, \"limit\")) {\n            limit = criterion.value;\n            continue;\n        }\n        if (module.checkProperty(criterion.field, \"offset\")) {\n            offset = criterion.value;\n            continue;\n        }\n        if (module.checkProperty(criterion.field, \"desc\")) {\n            desc = criterion.value;\n            continue;\n        }\n        if (module.checkProperty(criterion.field, \"asc\")) {\n            asc = criterion.value;\n            continue;\n        }\n        if (sql != \"\") {\n            sql += \" and \";\n        }\n        sql += criterion.field + \" \" + criterion.operator + \" \";\n        var quote = function(x) {\n            return _.isString(x) ? \"'\" + x.replace(/'/g, \"\\\\'\") + \"'\" : x;\n        };\n        if (_.isArray(criterion.value)) {\n            sql += \"(\" + criterion.value.map(quote).join(\",\") + \")\";\n        } else {\n            sql += quote(criterion.value);\n        }\n    }\n    if (sql != \"\") {\n        sql = \" where \" + sql;\n    }\n    if (asc) sql += \" orderby \" + asc + \" asc\";\n    if (desc) sql += \" orderby \" + desc + \" desc\";\n    sql += \" startposition \" + (offset || 1);\n    sql += \" maxresults \" + (limit || 1000);\n    return sql;\n};\nmodule.reportCriteria = function(criteria) {\n    var s = \"?\";\n    for(var p in criteria){\n        s += p + \"=\" + criteria[p] + \"&\";\n    }\n    return s;\n};\nmodule.capitalize = function(s) {\n    return s.substring(0, 1).toUpperCase() + s.substring(1);\n};\nQuickBooks.prototype.capitalize = module.capitalize;\nmodule.pluralize = function(s) {\n    var last = s.substring(s.length - 1);\n    if (last === \"s\") {\n        return s + \"es\";\n    } else if (last === \"y\") {\n        return s.substring(0, s.length - 1) + \"ies\";\n    } else {\n        return s + \"s\";\n    }\n};\nQuickBooks.prototype.pluralize = module.pluralize;\nmodule.unwrap = function(callback, entityName) {\n    if (!callback) return function(err, data, res) {};\n    return function(err, data, res) {\n        if (err) {\n            if (callback) callback(err, null, res);\n        } else {\n            var name = module.capitalize(entityName);\n            if (callback) callback(err, (data || {})[name] || data, res);\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-quickbooks/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-quickbooks/package.json":
/*!***************************************************!*\
  !*** ./node_modules/node-quickbooks/package.json ***!
  \***************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"node-quickbooks","version":"2.0.45","description":"node.js client for Intuit\'s IPP QuickBooks V3 API.","main":"index.js","scripts":{"test":"mocha"},"keywords":["Intuit","QuickBooks","IPP"],"author":"Michael Cohen","license":"ISC","dependencies":{"bluebird":"3.3.4","date-fns":"^2.9.0","fast-xml-parser":"^4.3.2","querystring":"0.2.0","request":"2.88.0","request-debug":"0.2.0","underscore":"1.12.1","util":"0.10.3","uuid":"^8.3.2"},"devDependencies":{"async":"0.9.0","bluebird":"2.9.25","expect":"0.1.1","mocha":"10.1.0","ramda":"0.17.1"},"directories":{"example":"example","test":"test"},"repository":{"type":"git","url":"https://github.com/mcohen01/node-quickbooks.git"},"bugs":{"url":"https://github.com/mcohen01/node-quickbooks/issues"},"homepage":"https://github.com/mcohen01/node-quickbooks"}');

/***/ }),

/***/ "(ssr)/./node_modules/node-quickbooks/package.json":
/*!***************************************************!*\
  !*** ./node_modules/node-quickbooks/package.json ***!
  \***************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"node-quickbooks","version":"2.0.45","description":"node.js client for Intuit\'s IPP QuickBooks V3 API.","main":"index.js","scripts":{"test":"mocha"},"keywords":["Intuit","QuickBooks","IPP"],"author":"Michael Cohen","license":"ISC","dependencies":{"bluebird":"3.3.4","date-fns":"^2.9.0","fast-xml-parser":"^4.3.2","querystring":"0.2.0","request":"2.88.0","request-debug":"0.2.0","underscore":"1.12.1","util":"0.10.3","uuid":"^8.3.2"},"devDependencies":{"async":"0.9.0","bluebird":"2.9.25","expect":"0.1.1","mocha":"10.1.0","ramda":"0.17.1"},"directories":{"example":"example","test":"test"},"repository":{"type":"git","url":"https://github.com/mcohen01/node-quickbooks.git"},"bugs":{"url":"https://github.com/mcohen01/node-quickbooks/issues"},"homepage":"https://github.com/mcohen01/node-quickbooks"}');

/***/ })

};
;