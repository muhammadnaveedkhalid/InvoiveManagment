"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/intuit-oauth";
exports.ids = ["vendor-chunks/intuit-oauth"];
exports.modules = {

/***/ "(ssr)/./node_modules/intuit-oauth/src/OAuthClient.js":
/*!******************************************************!*\
  !*** ./node_modules/intuit-oauth/src/OAuthClient.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable no-undef */ /* eslint-disable camelcase */ /**\n\n Copyright (c) 2018 Intuit\n #\n # Licensed under the Apache License, Version 2.0 (the \"License\");\n # you may not use this file except in compliance with the License.\n # You may obtain a copy of the License at\n #\n #  http://www.apache.org/licenses/LICENSE-2.0\n #\n # Unless required by applicable law or agreed to in writing, software\n # distributed under the License is distributed on an \"AS IS\" BASIS,\n # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n # See the License for the specific language governing permissions and\n # limitations under the License.\n\n */ /**\n * @namespace OAuthClient\n */ \nconst atob = __webpack_require__(/*! atob */ \"(ssr)/./node_modules/atob/node-atob.js\");\nconst Csrf = __webpack_require__(/*! csrf */ \"(ssr)/./node_modules/csrf/index.js\");\nconst queryString = __webpack_require__(/*! query-string */ \"(ssr)/./node_modules/query-string/index.js\");\nconst axios = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst winston = __webpack_require__(/*! winston */ \"(ssr)/./node_modules/winston/lib/winston.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst jwt = __webpack_require__(/*! jsonwebtoken */ \"(ssr)/./node_modules/jsonwebtoken/index.js\");\nconst AuthResponse = __webpack_require__(/*! ./response/AuthResponse */ \"(ssr)/./node_modules/intuit-oauth/src/response/AuthResponse.js\");\nconst version = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/intuit-oauth/package.json\");\nconst Token = __webpack_require__(/*! ./access-token/Token */ \"(ssr)/./node_modules/intuit-oauth/src/access-token/Token.js\");\n/**\n * @constructor\n * @param {string} config.environment\n * @param {string} config.appSecret\n * @param {string} config.appKey\n * @param {string} [config.cachePrefix]\n */ function OAuthClient(config) {\n    this.environment = config.environment;\n    this.clientId = config.clientId;\n    this.clientSecret = config.clientSecret;\n    this.redirectUri = config.redirectUri;\n    this.token = new Token(config.token);\n    this.logging = !!(Object.prototype.hasOwnProperty.call(config, \"logging\") && config.logging === true);\n    this.logger = null;\n    this.state = new Csrf();\n    if (this.logging) {\n        const dir = \"./logs\";\n        if (!fs.existsSync(dir)) {\n            fs.mkdirSync(dir);\n        }\n        this.logger = winston.createLogger({\n            level: \"info\",\n            format: winston.format.combine(winston.format.timestamp(), winston.format.printf((info)=>`${info.timestamp} ${info.level}: ${info.message}`)),\n            transports: [\n                new winston.transports.File({\n                    filename: path.join(dir, \"oAuthClient-log.log\")\n                })\n            ]\n        });\n    }\n}\nOAuthClient.cacheId = \"cacheID\";\nOAuthClient.authorizeEndpoint = \"https://appcenter.intuit.com/connect/oauth2\";\nOAuthClient.tokenEndpoint = \"https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer\";\nOAuthClient.revokeEndpoint = \"https://developer.api.intuit.com/v2/oauth2/tokens/revoke\";\nOAuthClient.userinfo_endpoint_production = \"https://accounts.platform.intuit.com/v1/openid_connect/userinfo\";\nOAuthClient.userinfo_endpoint_sandbox = \"https://sandbox-accounts.platform.intuit.com/v1/openid_connect/userinfo\";\nOAuthClient.migrate_sandbox = \"https://developer-sandbox.api.intuit.com/v2/oauth2/tokens/migrate\";\nOAuthClient.migrate_production = \"https://developer.api.intuit.com/v2/oauth2/tokens/migrate\";\nOAuthClient.environment = {\n    sandbox: \"https://sandbox-quickbooks.api.intuit.com/\",\n    production: \"https://quickbooks.api.intuit.com/\"\n};\nOAuthClient.jwks_uri = \"https://oauth.platform.intuit.com/op/v1/jwks\";\nOAuthClient.scopes = {\n    Accounting: \"com.intuit.quickbooks.accounting\",\n    Payment: \"com.intuit.quickbooks.payment\",\n    Payroll: \"com.intuit.quickbooks.payroll\",\n    TimeTracking: \"com.intuit.quickbooks.payroll.timetracking\",\n    Benefits: \"com.intuit.quickbooks.payroll.benefits\",\n    Profile: \"profile\",\n    Email: \"email\",\n    Phone: \"phone\",\n    Address: \"address\",\n    OpenId: \"openid\",\n    Intuit_name: \"intuit_name\"\n};\nOAuthClient.user_agent = `Intuit-OAuthClient-JS_${version.version}_${os.type()}_${os.release()}_${os.platform()}`;\nOAuthClient.prototype.setAuthorizeURLs = function setAuthorizeURLs(params) {\n    // check if the customURL's are passed correctly\n    if (!params) {\n        throw new Error(\"Provide the custom authorize URL's\");\n    }\n    OAuthClient.authorizeEndpoint = params.authorizeEndpoint;\n    OAuthClient.tokenEndpoint = params.tokenEndpoint;\n    OAuthClient.revokeEndpoint = params.revokeEndpoint;\n    this.environment === \"sandbox\" ? OAuthClient.userinfo_endpoint_sandbox = params.userInfoEndpoint : OAuthClient.userinfo_endpoint_production = params.userInfoEndpoint;\n    return this;\n};\n/**\n * Redirect  User to Authorization Page\n * *\n * @param params\n * @returns {string} authorize Uri\n */ OAuthClient.prototype.authorizeUri = function authorizeUri(params) {\n    params = params || {};\n    // check if the scopes is provided\n    if (!params.scope) throw new Error(\"Provide the scopes\");\n    const authUri = `${OAuthClient.authorizeEndpoint}?${queryString.stringify({\n        response_type: \"code\",\n        redirect_uri: this.redirectUri,\n        client_id: this.clientId,\n        scope: Array.isArray(params.scope) ? params.scope.join(\" \") : params.scope,\n        state: params.state || this.state.create(this.state.secretSync())\n    })}`;\n    this.log(\"info\", \"The Authorize Uri is :\", authUri);\n    return authUri;\n};\n/**\n * Create Token { exchange authorization code for bearer_token }\n * *\n * @param {string|Object} uri\n * @returns {Promise}\n */ OAuthClient.prototype.createToken = function createToken(uri) {\n    return new Promise((resolve)=>{\n        if (!uri) throw new Error(\"Provide the Uri\");\n        const params = queryString.parse(uri.split(\"?\").reverse()[0]);\n        this.getToken().realmId = params.realmId ? params.realmId : \"\";\n        if (\"state\" in params) this.getToken().state = params.state;\n        const body = {};\n        if (params.code) {\n            body.grant_type = \"authorization_code\";\n            body.code = params.code;\n            body.redirect_uri = params.redirectUri || this.redirectUri;\n        }\n        const request = {\n            url: OAuthClient.tokenEndpoint,\n            data: body,\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${this.authHeader()}`,\n                \"Content-Type\": AuthResponse._urlencodedContentType,\n                Accept: AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const authResponse = res.hasOwnProperty(\"json\") ? res : null;\n        const json = authResponse && authResponse.json || res;\n        this.token.setToken(json);\n        this.log(\"info\", \"Create Token response is : \", JSON.stringify(authResponse && authResponse.json, null, 2));\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Create Token () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Refresh the access_token\n * *\n * @returns {Promise}\n */ OAuthClient.prototype.refresh = function refresh() {\n    return new Promise((resolve)=>{\n        this.validateToken();\n        const body = {};\n        body.grant_type = \"refresh_token\";\n        body.refresh_token = this.getToken().refresh_token;\n        const request = {\n            url: OAuthClient.tokenEndpoint,\n            data: body,\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${this.authHeader()}`,\n                \"Content-Type\": AuthResponse._urlencodedContentType,\n                Accept: AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const authResponse = res.hasOwnProperty(\"json\") ? res : null;\n        const json = authResponse && authResponse.json || res;\n        this.token.setToken(json);\n        this.log(\"info\", \"Refresh Token () response is : \", JSON.stringify(authResponse && authResponse.json, null, 2));\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Refresh Token () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Refresh Tokens by passing refresh_token parameter explicitly\n * *\n * @param {string} refresh_token\n * @returns {Promise}\n */ OAuthClient.prototype.refreshUsingToken = function refreshUsingToken(refresh_token) {\n    return new Promise((resolve)=>{\n        if (!refresh_token) throw new Error(\"The Refresh token is missing\");\n        const body = {};\n        body.grant_type = \"refresh_token\";\n        body.refresh_token = refresh_token;\n        const request = {\n            url: OAuthClient.tokenEndpoint,\n            data: body,\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${this.authHeader()}`,\n                \"Content-Type\": AuthResponse._urlencodedContentType,\n                Accept: AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const authResponse = res.hasOwnProperty(\"json\") ? res : null;\n        const json = authResponse && authResponse.json || res;\n        this.token.setToken(json);\n        this.log(\"info\", \"Refresh usingToken () response is : \", JSON.stringify(authResponse && authResponse.json, null, 2));\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Refresh Token () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Revoke access_token/refresh_token\n * *\n * @param {Object} params.access_token (optional)\n * @param {Object} params.refresh_token (optional)\n * @returns {Promise}\n */ OAuthClient.prototype.revoke = function revoke(params) {\n    return new Promise((resolve)=>{\n        params = params || {};\n        const body = {};\n        body.token = params.access_token || params.refresh_token || (this.getToken().isAccessTokenValid() ? this.getToken().access_token : this.getToken().refresh_token);\n        const request = {\n            url: OAuthClient.revokeEndpoint,\n            data: body,\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${this.authHeader()}`,\n                Accept: AuthResponse._jsonContentType,\n                \"Content-Type\": AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const authResponse = res.hasOwnProperty(\"json\") ? res : null;\n        this.token.clearToken();\n        this.log(\"info\", \"Revoke Token () response is : \", JSON.stringify(authResponse && authResponse.json, null, 2));\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Revoke Token () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Get User Info  { Get User Info }\n * *\n * @returns {Promise}\n */ OAuthClient.prototype.getUserInfo = function getUserInfo() {\n    return new Promise((resolve)=>{\n        const request = {\n            url: this.environment === \"sandbox\" ? OAuthClient.userinfo_endpoint_sandbox : OAuthClient.userinfo_endpoint_production,\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${this.token.access_token}`,\n                Accept: AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const authResponse = res.hasOwnProperty(\"json\") ? res : null;\n        this.log(\"info\", \"The Get User Info () response is : \", JSON.stringify(authResponse && authResponse.json, null, 2));\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Get User Info ()  threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Make API call. Pass the url,method,headers using `params` object\n *\n * @param {params} params\n * @param {string} params.url\n * @param {string} params.method (optional) default is GET\n * @param {Object} params.headers (optional)\n * @param {Object} params.body (optional)\n * @param {string} params.responseType (optional) default is json - options are json, text, stream, arraybuffer\n * @returns {Promise}\n */ OAuthClient.prototype.makeApiCall = function makeApiCall(params) {\n    return new Promise((resolve)=>{\n        params = params || {};\n        const responseType = params.responseType ? params.responseType : \"json\";\n        const baseHeaders = {\n            Authorization: `Bearer ${this.getToken().access_token}`,\n            Accept: AuthResponse._jsonContentType,\n            \"User-Agent\": OAuthClient.user_agent\n        };\n        const headers = params.headers && typeof params.headers === \"object\" ? Object.assign({}, baseHeaders, params.headers) : Object.assign({}, baseHeaders);\n        const request = {\n            url: params.url,\n            method: params.method || \"GET\",\n            headers,\n            responseType\n        };\n        params.body && (request.data = params.body);\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const { body, ...authResponse } = res;\n        this.log(\"info\", \"The makeAPICall () response is : \", JSON.stringify(authResponse.json, null, 2));\n        if (authResponse.json === null && body) {\n            return {\n                ...authResponse,\n                body: body\n            };\n        }\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Get makeAPICall ()  threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Validate id_token\n * *\n * @param {Object} params(optional)\n * @returns {Promise<AuthResponse>}\n */ OAuthClient.prototype.validateIdToken = function validateIdToken(params = {}) {\n    return new Promise((resolve)=>{\n        if (!this.getToken().id_token) throw new Error(\"The bearer token does not have id_token\");\n        const id_token = this.getToken().id_token || params.id_token;\n        // Decode ID Token\n        const token_parts = id_token.split(\".\");\n        const id_token_header = JSON.parse(atob(token_parts[0]));\n        const id_token_payload = JSON.parse(atob(token_parts[1]));\n        // Step 1 : First check if the issuer is as mentioned in \"issuer\"\n        if (id_token_payload.iss !== \"https://oauth.platform.intuit.com/op/v1\") return false;\n        // Step 2 : check if the aud field in idToken contains application's clientId\n        if (!id_token_payload.aud.find((audience)=>audience === this.clientId)) return false;\n        // Step 3 : ensure the timestamp has not elapsed\n        if (id_token_payload.exp < Date.now() / 1000) return false;\n        const request = {\n            url: OAuthClient.jwks_uri,\n            method: \"GET\",\n            headers: {\n                Accept: AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        return resolve(this.getKeyFromJWKsURI(id_token, id_token_header.kid, request));\n    }).then((res)=>{\n        this.log(\"info\", \"The validateIdToken () response is :\", JSON.stringify(res, null, 2));\n        if (res) return true;\n        return false;\n    }).catch((e)=>{\n        this.log(\"error\", \"The validateIdToken () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Get Key from JWKURI\n * *\n * @param {string} id_token\n * @param {string} kid\n * @param {Object} request\n * @returns {Promise}\n */ OAuthClient.prototype.getKeyFromJWKsURI = function getKeyFromJWKsURI(id_token, kid, request) {\n    return new Promise((resolve)=>{\n        resolve(this.loadResponse(request));\n    }).then((response)=>{\n        if (Number(response.status) !== 200) throw new Error(\"Could not reach JWK endpoint\");\n        // Find the key by KID\n        const key = response.data.keys.find((el)=>el.kid === kid);\n        const cert = this.getPublicKey(key.n, key.e);\n        return jwt.verify(id_token, cert);\n    }).catch((e)=>{\n        e = this.createError(e);\n        this.log(\"error\", \"The getKeyFromJWKsURI () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Get Public Key\n * *\n * @param modulus\n * @param exponent\n */ OAuthClient.prototype.getPublicKey = function getPublicKey(modulus, exponent) {\n    // eslint-disable-next-line global-require\n    const getPem = __webpack_require__(/*! rsa-pem-from-mod-exp */ \"(ssr)/./node_modules/rsa-pem-from-mod-exp/index.js\");\n    const pem = getPem(modulus, exponent);\n    return pem;\n};\n/**\n * Get Token Request\n * *\n * @param {Object} request\n * @returns {Promise}\n */ OAuthClient.prototype.getTokenRequest = function getTokenRequest(request) {\n    const authResponse = new AuthResponse({\n        token: this.token\n    });\n    return new Promise((resolve)=>{\n        resolve(this.loadResponse(request));\n    }).then((response)=>{\n        authResponse.processResponse(response);\n        if (!authResponse.valid()) throw new Error(\"Response has an Error\");\n        return authResponse;\n    }).catch((e)=>{\n        if (!e.authResponse) e = this.createError(e, authResponse);\n        throw e;\n    });\n};\n/**\n * Validate Token\n * *\n * @returns {boolean}\n */ OAuthClient.prototype.validateToken = function validateToken() {\n    if (!this.token.refreshToken()) throw new Error(\"The Refresh token is missing\");\n    if (!this.token.isRefreshTokenValid()) throw new Error(\"The Refresh token is invalid, please Authorize again.\");\n};\n/**\n * Make HTTP Request using Axios Client\n * @param request\n * @returns response\n */ OAuthClient.prototype.loadResponse = function loadResponse(request) {\n    return axios(request).then((response)=>response);\n};\n/**\n * Load response from JWK URI\n * @param request\n * @returns response\n */ OAuthClient.prototype.loadResponseFromJWKsURI = function loadResponseFromJWKsURI(request) {\n    return axios.get(request).then((response)=>response);\n};\n/**\n * Wrap the exception with more information\n * @param {Error|IApiError} e\n * @param {AuthResponse} authResponse\n * @return {Error|IApiError}\n */ OAuthClient.prototype.createError = function createError(e, authResponse) {\n    if (!authResponse || authResponse.body === \"\") {\n        e.error = authResponse && authResponse.response.statusText || e.message || \"\";\n        e.authResponse = authResponse || \"\";\n        e.intuit_tid = authResponse && authResponse.headers() && authResponse.headers().intuit_tid || \"\";\n        e.originalMessage = e.message || \"\";\n        e.error_description = authResponse && authResponse.response.statusText || \"\";\n        return e;\n    }\n    e.authResponse = authResponse;\n    e.originalMessage = e.message;\n    e.error = \"\";\n    if (\"error\" in authResponse.getJson()) {\n        e.error = authResponse.getJson().error;\n    } else if (authResponse.response.statusText) {\n        e.error = authResponse.response.statusText;\n    } else if (e.message) {\n        e.error = e.message;\n    }\n    e.error_description = \"\";\n    if (\"error_description\" in authResponse.getJson()) {\n        e.error_description = authResponse.getJson().error_description;\n    } else if (authResponse.response.statusText) {\n        e.error_description = authResponse.response.statusText;\n    }\n    e.intuit_tid = authResponse.headers().intuit_tid;\n    return e;\n};\n/**\n * isAccessToken Valid () { TTL of access_token }\n * @returns {boolean}\n * @private\n */ OAuthClient.prototype.isAccessTokenValid = function isAccessTokenValid() {\n    return this.token.isAccessTokenValid();\n};\n/**\n * GetToken\n * @returns {Token}\n */ OAuthClient.prototype.getToken = function getToken() {\n    return this.token;\n};\n/**\n * Set Token\n * @param {Object}\n * @returns {Token}\n */ OAuthClient.prototype.setToken = function setToken(params) {\n    this.token = new Token(params);\n    return this.token;\n};\n/**\n * Get AuthHeader\n * @returns {string} authHeader\n */ OAuthClient.prototype.authHeader = function authHeader() {\n    const apiKey = `${this.clientId}:${this.clientSecret}`;\n    return typeof btoa === \"function\" ? btoa(apiKey) : Buffer.from(apiKey).toString(\"base64\");\n};\nOAuthClient.prototype.log = function log(level, message, messageData) {\n    if (this.logging) {\n        this.logger.log(level, message + messageData);\n    }\n};\nmodule.exports = OAuthClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intuit-oauth/src/OAuthClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/intuit-oauth/src/access-token/Token.js":
/*!*************************************************************!*\
  !*** ./node_modules/intuit-oauth/src/access-token/Token.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("/**\n\n Copyright (c) 2018 Intuit\n #\n # Licensed under the Apache License, Version 2.0 (the \"License\");\n # you may not use this file except in compliance with the License.\n # You may obtain a copy of the License at\n #\n #  http://www.apache.org/licenses/LICENSE-2.0\n #\n # Unless required by applicable law or agreed to in writing, software\n # distributed under the License is distributed on an \"AS IS\" BASIS,\n # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n # See the License for the specific language governing permissions and\n # limitations under the License.\n\n */ /**\n * @namespace Token\n */ \n/**\n * @param {Cache} options.cache\n * @param {string} options.cacheId\n * @constructor\n * @property {Cache} _cache\n * @property {string} _cacheId\n */ function Token(params) {\n    params = params || {};\n    this.realmId = params.realmId || \"\";\n    this.token_type = params.token_type || \"\";\n    this.access_token = params.access_token || \"\";\n    this.refresh_token = params.refresh_token || \"\";\n    this.expires_in = params.expires_in || 0;\n    this.x_refresh_token_expires_in = params.x_refresh_token_expires_in || 0;\n    this.id_token = params.id_token || \"\";\n    this.latency = params.latency || 60 * 1000;\n    this.createdAt = params.createdAt || Date.now();\n}\n/**\n * get accessToken()\n * @returns {string} access_token\n */ Token.prototype.accessToken = function accessToken() {\n    return this.getToken().access_token;\n};\n/**\n * get refreshToken()\n * @returns {string} refresh_token\n */ Token.prototype.refreshToken = function refreshToken() {\n    return this.getToken().refresh_token;\n};\n/**\n * get tokenType()\n * @returns {string} token_type\n */ Token.prototype.tokenType = function tokenType() {\n    return this.getToken().token_type;\n};\n/**\n * Helper Method to get accessToken { get Token Object }\n * @returns {{\n *  token_type: *,\n *  access_token: *,\n *  expires_in: *,\n *  refresh_token: *,\n *  x_refresh_token_expires_in: *\n * }}\n */ Token.prototype.getToken = function getToken() {\n    return {\n        token_type: this.token_type,\n        access_token: this.access_token,\n        expires_in: this.expires_in,\n        refresh_token: this.refresh_token,\n        x_refresh_token_expires_in: this.x_refresh_token_expires_in,\n        realmId: this.realmId,\n        id_token: this.id_token,\n        createdAt: this.createdAt\n    };\n};\n/**\n * Helper Method to set accessToken { set Token Object }\n * @param tokenData\n * @returns {Token}\n */ Token.prototype.setToken = function setToken(tokenData) {\n    this.access_token = tokenData.access_token;\n    this.refresh_token = tokenData.refresh_token;\n    this.token_type = tokenData.token_type;\n    this.expires_in = tokenData.expires_in;\n    this.x_refresh_token_expires_in = tokenData.x_refresh_token_expires_in;\n    this.id_token = tokenData.id_token || \"\";\n    this.createdAt = tokenData.createdAt || Date.now();\n    return this;\n};\n/**\n * Helper Method to clear accessToken { clear Token Object }\n * @param\n * @returns {Token}\n */ Token.prototype.clearToken = function clearToken() {\n    this.access_token = \"\";\n    this.refresh_token = \"\";\n    this.token_type = \"\";\n    this.expires_in = 0;\n    this.x_refresh_token_expires_in = 0;\n    this.id_token = \"\";\n    this.createdAt = 0;\n    return this;\n};\n/**\n * Helper Method to check token expiry { set Token Object }\n * @param seconds\n * @returns {boolean}\n */ Token.prototype._checkExpiry = function _checkExpiry(seconds) {\n    const expiry = this.createdAt + seconds * 1000;\n    return expiry - this.latency > Date.now();\n};\n/**\n * Check if access_token is valid\n * @returns {boolean}\n */ Token.prototype.isAccessTokenValid = function isAccessTokenValid() {\n    return this._checkExpiry(this.expires_in);\n};\n/**\n * Check if there is a valid (not expired) access token\n * @return {boolean}\n */ Token.prototype.isRefreshTokenValid = function isRefreshTokenValid() {\n    return this._checkExpiry(this.x_refresh_token_expires_in);\n};\nmodule.exports = Token;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intuit-oauth/src/access-token/Token.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/intuit-oauth/src/response/AuthResponse.js":
/*!****************************************************************!*\
  !*** ./node_modules/intuit-oauth/src/response/AuthResponse.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("/**\n\n Copyright (c) 2018 Intuit\n #\n # Licensed under the Apache License, Version 2.0 (the \"License\");\n # you may not use this file except in compliance with the License.\n # You may obtain a copy of the License at\n #\n #  http://www.apache.org/licenses/LICENSE-2.0\n #\n # Unless required by applicable law or agreed to in writing, software\n # distributed under the License is distributed on an \"AS IS\" BASIS,\n # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n # See the License for the specific language governing permissions and\n # limitations under the License.\n\n */ /**\n * @namespace AuthResponse\n */ \n/**\n * AuthResponse\n * @property {Token} token\n * @property {Response} response\n * @property {string} body\n * @property {object} json\n * @property {string} intuit_tid\n */ function AuthResponse(params) {\n    this.token = params.token || \"\";\n    this.response = params.response || \"\";\n    this.body = params.responseText || \"\";\n    this.json = null;\n    this.intuit_tid = params.intuit_tid || \"\";\n}\n/**\n * Process Response\n * @param response\n */ AuthResponse.prototype.processResponse = function processResponse(response) {\n    this.response = response || \"\";\n    this.body = response && response.body || response && response.data || \"\";\n    this.json = this.body && this.isJson() ? this.body : null;\n    this.intuit_tid = response && response.headers && response.headers.intuit_tid || \"\";\n};\n/**\n * Get Token\n * *\n * @returns {object} token\n */ AuthResponse.prototype.getToken = function getToken() {\n    return this.token.getToken();\n};\n/**\n * Get Token\n * *\n * @returns {string} text\n */ AuthResponse.prototype.text = function text() {\n    return this.body;\n};\n/**\n * Get Token\n * *\n * @returns {Number} statusCode\n */ AuthResponse.prototype.status = function status() {\n    return this.response.status;\n};\n/**\n * Get response headers\n * *\n * @returns {Object} headers\n */ AuthResponse.prototype.headers = function headers() {\n    return this.response.headers;\n};\n/**\n * Is Response valid { response is valid ? }\n * *\n * @returns {*|boolean}\n */ AuthResponse.prototype.valid = function valid() {\n    return this.response && Number(this.response.status) >= 200 && Number(this.response.status) < 300;\n};\n/**\n * Get Json () { returns token as JSON }\n * *\n * @return {object} json\n */ AuthResponse.prototype.getJson = function getJson() {\n    if (!this.isJson()) throw new Error(\"AuthResponse is not JSON\");\n    if (!this.json) {\n        this.json = this.body ? JSON.parse(this.body) : null;\n    }\n    return this.json;\n};\n/**\n * Get Intuit tid\n * *\n * @returns {string} intuit_tid\n */ AuthResponse.prototype.get_intuit_tid = function get_intuit_tid() {\n    return this.intuit_tid;\n};\n/**\n * isContentType\n * *\n * @returns {boolean} isContentType\n */ AuthResponse.prototype.isContentType = function isContentType(contentType) {\n    return this.getContentType().indexOf(contentType) > -1;\n};\n/**\n * getContentType\n * *\n * @returns {string} getContentType\n */ AuthResponse.prototype.getContentType = function getContentType() {\n    return this.response.headers[AuthResponse._contentType] || \"\";\n};\n/**\n * isJson\n * *\n * @returns {boolean} isJson\n */ AuthResponse.prototype.isJson = function isJson() {\n    return this.isContentType(\"application/json\");\n};\nAuthResponse._contentType = \"content-type\";\nAuthResponse._jsonContentType = \"application/json\";\nAuthResponse._urlencodedContentType = \"application/x-www-form-urlencoded\";\nmodule.exports = AuthResponse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intuit-oauth/src/response/AuthResponse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intuit-oauth/src/OAuthClient.js":
/*!******************************************************!*\
  !*** ./node_modules/intuit-oauth/src/OAuthClient.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable no-undef */ /* eslint-disable camelcase */ /**\n\n Copyright (c) 2018 Intuit\n #\n # Licensed under the Apache License, Version 2.0 (the \"License\");\n # you may not use this file except in compliance with the License.\n # You may obtain a copy of the License at\n #\n #  http://www.apache.org/licenses/LICENSE-2.0\n #\n # Unless required by applicable law or agreed to in writing, software\n # distributed under the License is distributed on an \"AS IS\" BASIS,\n # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n # See the License for the specific language governing permissions and\n # limitations under the License.\n\n */ /**\n * @namespace OAuthClient\n */ \nconst atob = __webpack_require__(/*! atob */ \"(rsc)/./node_modules/atob/node-atob.js\");\nconst Csrf = __webpack_require__(/*! csrf */ \"(rsc)/./node_modules/csrf/index.js\");\nconst queryString = __webpack_require__(/*! query-string */ \"(rsc)/./node_modules/query-string/index.js\");\nconst axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst winston = __webpack_require__(/*! winston */ \"(rsc)/./node_modules/winston/lib/winston.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst jwt = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\nconst AuthResponse = __webpack_require__(/*! ./response/AuthResponse */ \"(rsc)/./node_modules/intuit-oauth/src/response/AuthResponse.js\");\nconst version = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/intuit-oauth/package.json\");\nconst Token = __webpack_require__(/*! ./access-token/Token */ \"(rsc)/./node_modules/intuit-oauth/src/access-token/Token.js\");\n/**\n * @constructor\n * @param {string} config.environment\n * @param {string} config.appSecret\n * @param {string} config.appKey\n * @param {string} [config.cachePrefix]\n */ function OAuthClient(config) {\n    this.environment = config.environment;\n    this.clientId = config.clientId;\n    this.clientSecret = config.clientSecret;\n    this.redirectUri = config.redirectUri;\n    this.token = new Token(config.token);\n    this.logging = !!(Object.prototype.hasOwnProperty.call(config, \"logging\") && config.logging === true);\n    this.logger = null;\n    this.state = new Csrf();\n    if (this.logging) {\n        const dir = \"./logs\";\n        if (!fs.existsSync(dir)) {\n            fs.mkdirSync(dir);\n        }\n        this.logger = winston.createLogger({\n            level: \"info\",\n            format: winston.format.combine(winston.format.timestamp(), winston.format.printf((info)=>`${info.timestamp} ${info.level}: ${info.message}`)),\n            transports: [\n                new winston.transports.File({\n                    filename: path.join(dir, \"oAuthClient-log.log\")\n                })\n            ]\n        });\n    }\n}\nOAuthClient.cacheId = \"cacheID\";\nOAuthClient.authorizeEndpoint = \"https://appcenter.intuit.com/connect/oauth2\";\nOAuthClient.tokenEndpoint = \"https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer\";\nOAuthClient.revokeEndpoint = \"https://developer.api.intuit.com/v2/oauth2/tokens/revoke\";\nOAuthClient.userinfo_endpoint_production = \"https://accounts.platform.intuit.com/v1/openid_connect/userinfo\";\nOAuthClient.userinfo_endpoint_sandbox = \"https://sandbox-accounts.platform.intuit.com/v1/openid_connect/userinfo\";\nOAuthClient.migrate_sandbox = \"https://developer-sandbox.api.intuit.com/v2/oauth2/tokens/migrate\";\nOAuthClient.migrate_production = \"https://developer.api.intuit.com/v2/oauth2/tokens/migrate\";\nOAuthClient.environment = {\n    sandbox: \"https://sandbox-quickbooks.api.intuit.com/\",\n    production: \"https://quickbooks.api.intuit.com/\"\n};\nOAuthClient.jwks_uri = \"https://oauth.platform.intuit.com/op/v1/jwks\";\nOAuthClient.scopes = {\n    Accounting: \"com.intuit.quickbooks.accounting\",\n    Payment: \"com.intuit.quickbooks.payment\",\n    Payroll: \"com.intuit.quickbooks.payroll\",\n    TimeTracking: \"com.intuit.quickbooks.payroll.timetracking\",\n    Benefits: \"com.intuit.quickbooks.payroll.benefits\",\n    Profile: \"profile\",\n    Email: \"email\",\n    Phone: \"phone\",\n    Address: \"address\",\n    OpenId: \"openid\",\n    Intuit_name: \"intuit_name\"\n};\nOAuthClient.user_agent = `Intuit-OAuthClient-JS_${version.version}_${os.type()}_${os.release()}_${os.platform()}`;\nOAuthClient.prototype.setAuthorizeURLs = function setAuthorizeURLs(params) {\n    // check if the customURL's are passed correctly\n    if (!params) {\n        throw new Error(\"Provide the custom authorize URL's\");\n    }\n    OAuthClient.authorizeEndpoint = params.authorizeEndpoint;\n    OAuthClient.tokenEndpoint = params.tokenEndpoint;\n    OAuthClient.revokeEndpoint = params.revokeEndpoint;\n    this.environment === \"sandbox\" ? OAuthClient.userinfo_endpoint_sandbox = params.userInfoEndpoint : OAuthClient.userinfo_endpoint_production = params.userInfoEndpoint;\n    return this;\n};\n/**\n * Redirect  User to Authorization Page\n * *\n * @param params\n * @returns {string} authorize Uri\n */ OAuthClient.prototype.authorizeUri = function authorizeUri(params) {\n    params = params || {};\n    // check if the scopes is provided\n    if (!params.scope) throw new Error(\"Provide the scopes\");\n    const authUri = `${OAuthClient.authorizeEndpoint}?${queryString.stringify({\n        response_type: \"code\",\n        redirect_uri: this.redirectUri,\n        client_id: this.clientId,\n        scope: Array.isArray(params.scope) ? params.scope.join(\" \") : params.scope,\n        state: params.state || this.state.create(this.state.secretSync())\n    })}`;\n    this.log(\"info\", \"The Authorize Uri is :\", authUri);\n    return authUri;\n};\n/**\n * Create Token { exchange authorization code for bearer_token }\n * *\n * @param {string|Object} uri\n * @returns {Promise}\n */ OAuthClient.prototype.createToken = function createToken(uri) {\n    return new Promise((resolve)=>{\n        if (!uri) throw new Error(\"Provide the Uri\");\n        const params = queryString.parse(uri.split(\"?\").reverse()[0]);\n        this.getToken().realmId = params.realmId ? params.realmId : \"\";\n        if (\"state\" in params) this.getToken().state = params.state;\n        const body = {};\n        if (params.code) {\n            body.grant_type = \"authorization_code\";\n            body.code = params.code;\n            body.redirect_uri = params.redirectUri || this.redirectUri;\n        }\n        const request = {\n            url: OAuthClient.tokenEndpoint,\n            data: body,\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${this.authHeader()}`,\n                \"Content-Type\": AuthResponse._urlencodedContentType,\n                Accept: AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const authResponse = res.hasOwnProperty(\"json\") ? res : null;\n        const json = authResponse && authResponse.json || res;\n        this.token.setToken(json);\n        this.log(\"info\", \"Create Token response is : \", JSON.stringify(authResponse && authResponse.json, null, 2));\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Create Token () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Refresh the access_token\n * *\n * @returns {Promise}\n */ OAuthClient.prototype.refresh = function refresh() {\n    return new Promise((resolve)=>{\n        this.validateToken();\n        const body = {};\n        body.grant_type = \"refresh_token\";\n        body.refresh_token = this.getToken().refresh_token;\n        const request = {\n            url: OAuthClient.tokenEndpoint,\n            data: body,\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${this.authHeader()}`,\n                \"Content-Type\": AuthResponse._urlencodedContentType,\n                Accept: AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const authResponse = res.hasOwnProperty(\"json\") ? res : null;\n        const json = authResponse && authResponse.json || res;\n        this.token.setToken(json);\n        this.log(\"info\", \"Refresh Token () response is : \", JSON.stringify(authResponse && authResponse.json, null, 2));\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Refresh Token () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Refresh Tokens by passing refresh_token parameter explicitly\n * *\n * @param {string} refresh_token\n * @returns {Promise}\n */ OAuthClient.prototype.refreshUsingToken = function refreshUsingToken(refresh_token) {\n    return new Promise((resolve)=>{\n        if (!refresh_token) throw new Error(\"The Refresh token is missing\");\n        const body = {};\n        body.grant_type = \"refresh_token\";\n        body.refresh_token = refresh_token;\n        const request = {\n            url: OAuthClient.tokenEndpoint,\n            data: body,\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${this.authHeader()}`,\n                \"Content-Type\": AuthResponse._urlencodedContentType,\n                Accept: AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const authResponse = res.hasOwnProperty(\"json\") ? res : null;\n        const json = authResponse && authResponse.json || res;\n        this.token.setToken(json);\n        this.log(\"info\", \"Refresh usingToken () response is : \", JSON.stringify(authResponse && authResponse.json, null, 2));\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Refresh Token () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Revoke access_token/refresh_token\n * *\n * @param {Object} params.access_token (optional)\n * @param {Object} params.refresh_token (optional)\n * @returns {Promise}\n */ OAuthClient.prototype.revoke = function revoke(params) {\n    return new Promise((resolve)=>{\n        params = params || {};\n        const body = {};\n        body.token = params.access_token || params.refresh_token || (this.getToken().isAccessTokenValid() ? this.getToken().access_token : this.getToken().refresh_token);\n        const request = {\n            url: OAuthClient.revokeEndpoint,\n            data: body,\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${this.authHeader()}`,\n                Accept: AuthResponse._jsonContentType,\n                \"Content-Type\": AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const authResponse = res.hasOwnProperty(\"json\") ? res : null;\n        this.token.clearToken();\n        this.log(\"info\", \"Revoke Token () response is : \", JSON.stringify(authResponse && authResponse.json, null, 2));\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Revoke Token () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Get User Info  { Get User Info }\n * *\n * @returns {Promise}\n */ OAuthClient.prototype.getUserInfo = function getUserInfo() {\n    return new Promise((resolve)=>{\n        const request = {\n            url: this.environment === \"sandbox\" ? OAuthClient.userinfo_endpoint_sandbox : OAuthClient.userinfo_endpoint_production,\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${this.token.access_token}`,\n                Accept: AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const authResponse = res.hasOwnProperty(\"json\") ? res : null;\n        this.log(\"info\", \"The Get User Info () response is : \", JSON.stringify(authResponse && authResponse.json, null, 2));\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Get User Info ()  threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Make API call. Pass the url,method,headers using `params` object\n *\n * @param {params} params\n * @param {string} params.url\n * @param {string} params.method (optional) default is GET\n * @param {Object} params.headers (optional)\n * @param {Object} params.body (optional)\n * @param {string} params.responseType (optional) default is json - options are json, text, stream, arraybuffer\n * @returns {Promise}\n */ OAuthClient.prototype.makeApiCall = function makeApiCall(params) {\n    return new Promise((resolve)=>{\n        params = params || {};\n        const responseType = params.responseType ? params.responseType : \"json\";\n        const baseHeaders = {\n            Authorization: `Bearer ${this.getToken().access_token}`,\n            Accept: AuthResponse._jsonContentType,\n            \"User-Agent\": OAuthClient.user_agent\n        };\n        const headers = params.headers && typeof params.headers === \"object\" ? Object.assign({}, baseHeaders, params.headers) : Object.assign({}, baseHeaders);\n        const request = {\n            url: params.url,\n            method: params.method || \"GET\",\n            headers,\n            responseType\n        };\n        params.body && (request.data = params.body);\n        resolve(this.getTokenRequest(request));\n    }).then((res)=>{\n        const { body, ...authResponse } = res;\n        this.log(\"info\", \"The makeAPICall () response is : \", JSON.stringify(authResponse.json, null, 2));\n        if (authResponse.json === null && body) {\n            return {\n                ...authResponse,\n                body: body\n            };\n        }\n        return authResponse;\n    }).catch((e)=>{\n        this.log(\"error\", \"Get makeAPICall ()  threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Validate id_token\n * *\n * @param {Object} params(optional)\n * @returns {Promise<AuthResponse>}\n */ OAuthClient.prototype.validateIdToken = function validateIdToken(params = {}) {\n    return new Promise((resolve)=>{\n        if (!this.getToken().id_token) throw new Error(\"The bearer token does not have id_token\");\n        const id_token = this.getToken().id_token || params.id_token;\n        // Decode ID Token\n        const token_parts = id_token.split(\".\");\n        const id_token_header = JSON.parse(atob(token_parts[0]));\n        const id_token_payload = JSON.parse(atob(token_parts[1]));\n        // Step 1 : First check if the issuer is as mentioned in \"issuer\"\n        if (id_token_payload.iss !== \"https://oauth.platform.intuit.com/op/v1\") return false;\n        // Step 2 : check if the aud field in idToken contains application's clientId\n        if (!id_token_payload.aud.find((audience)=>audience === this.clientId)) return false;\n        // Step 3 : ensure the timestamp has not elapsed\n        if (id_token_payload.exp < Date.now() / 1000) return false;\n        const request = {\n            url: OAuthClient.jwks_uri,\n            method: \"GET\",\n            headers: {\n                Accept: AuthResponse._jsonContentType,\n                \"User-Agent\": OAuthClient.user_agent\n            }\n        };\n        return resolve(this.getKeyFromJWKsURI(id_token, id_token_header.kid, request));\n    }).then((res)=>{\n        this.log(\"info\", \"The validateIdToken () response is :\", JSON.stringify(res, null, 2));\n        if (res) return true;\n        return false;\n    }).catch((e)=>{\n        this.log(\"error\", \"The validateIdToken () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Get Key from JWKURI\n * *\n * @param {string} id_token\n * @param {string} kid\n * @param {Object} request\n * @returns {Promise}\n */ OAuthClient.prototype.getKeyFromJWKsURI = function getKeyFromJWKsURI(id_token, kid, request) {\n    return new Promise((resolve)=>{\n        resolve(this.loadResponse(request));\n    }).then((response)=>{\n        if (Number(response.status) !== 200) throw new Error(\"Could not reach JWK endpoint\");\n        // Find the key by KID\n        const key = response.data.keys.find((el)=>el.kid === kid);\n        const cert = this.getPublicKey(key.n, key.e);\n        return jwt.verify(id_token, cert);\n    }).catch((e)=>{\n        e = this.createError(e);\n        this.log(\"error\", \"The getKeyFromJWKsURI () threw an exception : \", JSON.stringify(e, null, 2));\n        throw e;\n    });\n};\n/**\n * Get Public Key\n * *\n * @param modulus\n * @param exponent\n */ OAuthClient.prototype.getPublicKey = function getPublicKey(modulus, exponent) {\n    // eslint-disable-next-line global-require\n    const getPem = __webpack_require__(/*! rsa-pem-from-mod-exp */ \"(rsc)/./node_modules/rsa-pem-from-mod-exp/index.js\");\n    const pem = getPem(modulus, exponent);\n    return pem;\n};\n/**\n * Get Token Request\n * *\n * @param {Object} request\n * @returns {Promise}\n */ OAuthClient.prototype.getTokenRequest = function getTokenRequest(request) {\n    const authResponse = new AuthResponse({\n        token: this.token\n    });\n    return new Promise((resolve)=>{\n        resolve(this.loadResponse(request));\n    }).then((response)=>{\n        authResponse.processResponse(response);\n        if (!authResponse.valid()) throw new Error(\"Response has an Error\");\n        return authResponse;\n    }).catch((e)=>{\n        if (!e.authResponse) e = this.createError(e, authResponse);\n        throw e;\n    });\n};\n/**\n * Validate Token\n * *\n * @returns {boolean}\n */ OAuthClient.prototype.validateToken = function validateToken() {\n    if (!this.token.refreshToken()) throw new Error(\"The Refresh token is missing\");\n    if (!this.token.isRefreshTokenValid()) throw new Error(\"The Refresh token is invalid, please Authorize again.\");\n};\n/**\n * Make HTTP Request using Axios Client\n * @param request\n * @returns response\n */ OAuthClient.prototype.loadResponse = function loadResponse(request) {\n    return axios(request).then((response)=>response);\n};\n/**\n * Load response from JWK URI\n * @param request\n * @returns response\n */ OAuthClient.prototype.loadResponseFromJWKsURI = function loadResponseFromJWKsURI(request) {\n    return axios.get(request).then((response)=>response);\n};\n/**\n * Wrap the exception with more information\n * @param {Error|IApiError} e\n * @param {AuthResponse} authResponse\n * @return {Error|IApiError}\n */ OAuthClient.prototype.createError = function createError(e, authResponse) {\n    if (!authResponse || authResponse.body === \"\") {\n        e.error = authResponse && authResponse.response.statusText || e.message || \"\";\n        e.authResponse = authResponse || \"\";\n        e.intuit_tid = authResponse && authResponse.headers() && authResponse.headers().intuit_tid || \"\";\n        e.originalMessage = e.message || \"\";\n        e.error_description = authResponse && authResponse.response.statusText || \"\";\n        return e;\n    }\n    e.authResponse = authResponse;\n    e.originalMessage = e.message;\n    e.error = \"\";\n    if (\"error\" in authResponse.getJson()) {\n        e.error = authResponse.getJson().error;\n    } else if (authResponse.response.statusText) {\n        e.error = authResponse.response.statusText;\n    } else if (e.message) {\n        e.error = e.message;\n    }\n    e.error_description = \"\";\n    if (\"error_description\" in authResponse.getJson()) {\n        e.error_description = authResponse.getJson().error_description;\n    } else if (authResponse.response.statusText) {\n        e.error_description = authResponse.response.statusText;\n    }\n    e.intuit_tid = authResponse.headers().intuit_tid;\n    return e;\n};\n/**\n * isAccessToken Valid () { TTL of access_token }\n * @returns {boolean}\n * @private\n */ OAuthClient.prototype.isAccessTokenValid = function isAccessTokenValid() {\n    return this.token.isAccessTokenValid();\n};\n/**\n * GetToken\n * @returns {Token}\n */ OAuthClient.prototype.getToken = function getToken() {\n    return this.token;\n};\n/**\n * Set Token\n * @param {Object}\n * @returns {Token}\n */ OAuthClient.prototype.setToken = function setToken(params) {\n    this.token = new Token(params);\n    return this.token;\n};\n/**\n * Get AuthHeader\n * @returns {string} authHeader\n */ OAuthClient.prototype.authHeader = function authHeader() {\n    const apiKey = `${this.clientId}:${this.clientSecret}`;\n    return typeof btoa === \"function\" ? btoa(apiKey) : Buffer.from(apiKey).toString(\"base64\");\n};\nOAuthClient.prototype.log = function log(level, message, messageData) {\n    if (this.logging) {\n        this.logger.log(level, message + messageData);\n    }\n};\nmodule.exports = OAuthClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/intuit-oauth/src/OAuthClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intuit-oauth/src/access-token/Token.js":
/*!*************************************************************!*\
  !*** ./node_modules/intuit-oauth/src/access-token/Token.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("/**\n\n Copyright (c) 2018 Intuit\n #\n # Licensed under the Apache License, Version 2.0 (the \"License\");\n # you may not use this file except in compliance with the License.\n # You may obtain a copy of the License at\n #\n #  http://www.apache.org/licenses/LICENSE-2.0\n #\n # Unless required by applicable law or agreed to in writing, software\n # distributed under the License is distributed on an \"AS IS\" BASIS,\n # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n # See the License for the specific language governing permissions and\n # limitations under the License.\n\n */ /**\n * @namespace Token\n */ \n/**\n * @param {Cache} options.cache\n * @param {string} options.cacheId\n * @constructor\n * @property {Cache} _cache\n * @property {string} _cacheId\n */ function Token(params) {\n    params = params || {};\n    this.realmId = params.realmId || \"\";\n    this.token_type = params.token_type || \"\";\n    this.access_token = params.access_token || \"\";\n    this.refresh_token = params.refresh_token || \"\";\n    this.expires_in = params.expires_in || 0;\n    this.x_refresh_token_expires_in = params.x_refresh_token_expires_in || 0;\n    this.id_token = params.id_token || \"\";\n    this.latency = params.latency || 60 * 1000;\n    this.createdAt = params.createdAt || Date.now();\n}\n/**\n * get accessToken()\n * @returns {string} access_token\n */ Token.prototype.accessToken = function accessToken() {\n    return this.getToken().access_token;\n};\n/**\n * get refreshToken()\n * @returns {string} refresh_token\n */ Token.prototype.refreshToken = function refreshToken() {\n    return this.getToken().refresh_token;\n};\n/**\n * get tokenType()\n * @returns {string} token_type\n */ Token.prototype.tokenType = function tokenType() {\n    return this.getToken().token_type;\n};\n/**\n * Helper Method to get accessToken { get Token Object }\n * @returns {{\n *  token_type: *,\n *  access_token: *,\n *  expires_in: *,\n *  refresh_token: *,\n *  x_refresh_token_expires_in: *\n * }}\n */ Token.prototype.getToken = function getToken() {\n    return {\n        token_type: this.token_type,\n        access_token: this.access_token,\n        expires_in: this.expires_in,\n        refresh_token: this.refresh_token,\n        x_refresh_token_expires_in: this.x_refresh_token_expires_in,\n        realmId: this.realmId,\n        id_token: this.id_token,\n        createdAt: this.createdAt\n    };\n};\n/**\n * Helper Method to set accessToken { set Token Object }\n * @param tokenData\n * @returns {Token}\n */ Token.prototype.setToken = function setToken(tokenData) {\n    this.access_token = tokenData.access_token;\n    this.refresh_token = tokenData.refresh_token;\n    this.token_type = tokenData.token_type;\n    this.expires_in = tokenData.expires_in;\n    this.x_refresh_token_expires_in = tokenData.x_refresh_token_expires_in;\n    this.id_token = tokenData.id_token || \"\";\n    this.createdAt = tokenData.createdAt || Date.now();\n    return this;\n};\n/**\n * Helper Method to clear accessToken { clear Token Object }\n * @param\n * @returns {Token}\n */ Token.prototype.clearToken = function clearToken() {\n    this.access_token = \"\";\n    this.refresh_token = \"\";\n    this.token_type = \"\";\n    this.expires_in = 0;\n    this.x_refresh_token_expires_in = 0;\n    this.id_token = \"\";\n    this.createdAt = 0;\n    return this;\n};\n/**\n * Helper Method to check token expiry { set Token Object }\n * @param seconds\n * @returns {boolean}\n */ Token.prototype._checkExpiry = function _checkExpiry(seconds) {\n    const expiry = this.createdAt + seconds * 1000;\n    return expiry - this.latency > Date.now();\n};\n/**\n * Check if access_token is valid\n * @returns {boolean}\n */ Token.prototype.isAccessTokenValid = function isAccessTokenValid() {\n    return this._checkExpiry(this.expires_in);\n};\n/**\n * Check if there is a valid (not expired) access token\n * @return {boolean}\n */ Token.prototype.isRefreshTokenValid = function isRefreshTokenValid() {\n    return this._checkExpiry(this.x_refresh_token_expires_in);\n};\nmodule.exports = Token;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/intuit-oauth/src/access-token/Token.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intuit-oauth/src/response/AuthResponse.js":
/*!****************************************************************!*\
  !*** ./node_modules/intuit-oauth/src/response/AuthResponse.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("/**\n\n Copyright (c) 2018 Intuit\n #\n # Licensed under the Apache License, Version 2.0 (the \"License\");\n # you may not use this file except in compliance with the License.\n # You may obtain a copy of the License at\n #\n #  http://www.apache.org/licenses/LICENSE-2.0\n #\n # Unless required by applicable law or agreed to in writing, software\n # distributed under the License is distributed on an \"AS IS\" BASIS,\n # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n # See the License for the specific language governing permissions and\n # limitations under the License.\n\n */ /**\n * @namespace AuthResponse\n */ \n/**\n * AuthResponse\n * @property {Token} token\n * @property {Response} response\n * @property {string} body\n * @property {object} json\n * @property {string} intuit_tid\n */ function AuthResponse(params) {\n    this.token = params.token || \"\";\n    this.response = params.response || \"\";\n    this.body = params.responseText || \"\";\n    this.json = null;\n    this.intuit_tid = params.intuit_tid || \"\";\n}\n/**\n * Process Response\n * @param response\n */ AuthResponse.prototype.processResponse = function processResponse(response) {\n    this.response = response || \"\";\n    this.body = response && response.body || response && response.data || \"\";\n    this.json = this.body && this.isJson() ? this.body : null;\n    this.intuit_tid = response && response.headers && response.headers.intuit_tid || \"\";\n};\n/**\n * Get Token\n * *\n * @returns {object} token\n */ AuthResponse.prototype.getToken = function getToken() {\n    return this.token.getToken();\n};\n/**\n * Get Token\n * *\n * @returns {string} text\n */ AuthResponse.prototype.text = function text() {\n    return this.body;\n};\n/**\n * Get Token\n * *\n * @returns {Number} statusCode\n */ AuthResponse.prototype.status = function status() {\n    return this.response.status;\n};\n/**\n * Get response headers\n * *\n * @returns {Object} headers\n */ AuthResponse.prototype.headers = function headers() {\n    return this.response.headers;\n};\n/**\n * Is Response valid { response is valid ? }\n * *\n * @returns {*|boolean}\n */ AuthResponse.prototype.valid = function valid() {\n    return this.response && Number(this.response.status) >= 200 && Number(this.response.status) < 300;\n};\n/**\n * Get Json () { returns token as JSON }\n * *\n * @return {object} json\n */ AuthResponse.prototype.getJson = function getJson() {\n    if (!this.isJson()) throw new Error(\"AuthResponse is not JSON\");\n    if (!this.json) {\n        this.json = this.body ? JSON.parse(this.body) : null;\n    }\n    return this.json;\n};\n/**\n * Get Intuit tid\n * *\n * @returns {string} intuit_tid\n */ AuthResponse.prototype.get_intuit_tid = function get_intuit_tid() {\n    return this.intuit_tid;\n};\n/**\n * isContentType\n * *\n * @returns {boolean} isContentType\n */ AuthResponse.prototype.isContentType = function isContentType(contentType) {\n    return this.getContentType().indexOf(contentType) > -1;\n};\n/**\n * getContentType\n * *\n * @returns {string} getContentType\n */ AuthResponse.prototype.getContentType = function getContentType() {\n    return this.response.headers[AuthResponse._contentType] || \"\";\n};\n/**\n * isJson\n * *\n * @returns {boolean} isJson\n */ AuthResponse.prototype.isJson = function isJson() {\n    return this.isContentType(\"application/json\");\n};\nAuthResponse._contentType = \"content-type\";\nAuthResponse._jsonContentType = \"application/json\";\nAuthResponse._urlencodedContentType = \"application/x-www-form-urlencoded\";\nmodule.exports = AuthResponse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/intuit-oauth/src/response/AuthResponse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/intuit-oauth/package.json":
/*!************************************************!*\
  !*** ./node_modules/intuit-oauth/package.json ***!
  \************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"intuit-oauth","version":"4.2.0","description":"Intuit Node.js client for OAuth2.0 and OpenIDConnect","main":"./src/OAuthClient.js","scripts":{"start":"node index.js","karma":"karma start karma.conf.js","test":"nyc mocha","snyk":"snyk test","lint":"eslint .","fix":"eslint . --fix","posttest":"nyc check-coverage","test-watch":"mocha --watch --reporter=spec","test-debug":"mocha --inspect-brk --watch test","show-coverage":"npm test; open -a \'Google Chrome\' coverage/index.html","clean-install":"rm -rf node_modules && npm install","snyk-protect":"snyk-protect","prepublish":"npm run snyk-protect"},"keywords":["intuit-oauth","intuit-oauth-nodejs","intuit-nodejs","oauth2.0","openid","openidConnect","quickbooks-accounting","quickbooks-payment"],"nyc":{"exclude":["node_modules","bin","coverage",".nyc_output","sample","sample/node_modules"],"check-coverage":true,"lines":95,"statements":95,"functions":90,"branches":85,"reporter":["lcov","text","text-summary","html","json"]},"engines":{"node":">=10"},"repository":{"type":"git","url":"https://github.com/intuit/oauth-jsclient.git"},"author":{"name":"Anil Kumar","email":"anil_kumar3@intuit.com"},"license":"Apache-2.0","bugs":{"url":"https://github.com/intuit/oauth-jsclient/issues"},"homepage":"https://github.com/intuit/oauth-jsclient","dependencies":{"atob":"2.1.2","axios":"^1.5.1","csrf":"^3.0.4","jsonwebtoken":"^9.0.2","query-string":"^6.12.1","rsa-pem-from-mod-exp":"^0.8.4","winston":"^3.1.0"},"devDependencies":{"btoa":"^1.2.1","chai":"^4.1.2","chai-as-promised":"^7.1.1","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.1.0","eslint-config-prettier":"^6.11.0","eslint-plugin-import":"^2.20.2","mocha":"^10.2.0","nock":"^9.2.3","nyc":"^15.0.1","prettier":"^2.0.5","sinon":"^9.0.2","@snyk/protect":"^1.657.0"},"snyk":true}');

/***/ }),

/***/ "(ssr)/./node_modules/intuit-oauth/package.json":
/*!************************************************!*\
  !*** ./node_modules/intuit-oauth/package.json ***!
  \************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"intuit-oauth","version":"4.2.0","description":"Intuit Node.js client for OAuth2.0 and OpenIDConnect","main":"./src/OAuthClient.js","scripts":{"start":"node index.js","karma":"karma start karma.conf.js","test":"nyc mocha","snyk":"snyk test","lint":"eslint .","fix":"eslint . --fix","posttest":"nyc check-coverage","test-watch":"mocha --watch --reporter=spec","test-debug":"mocha --inspect-brk --watch test","show-coverage":"npm test; open -a \'Google Chrome\' coverage/index.html","clean-install":"rm -rf node_modules && npm install","snyk-protect":"snyk-protect","prepublish":"npm run snyk-protect"},"keywords":["intuit-oauth","intuit-oauth-nodejs","intuit-nodejs","oauth2.0","openid","openidConnect","quickbooks-accounting","quickbooks-payment"],"nyc":{"exclude":["node_modules","bin","coverage",".nyc_output","sample","sample/node_modules"],"check-coverage":true,"lines":95,"statements":95,"functions":90,"branches":85,"reporter":["lcov","text","text-summary","html","json"]},"engines":{"node":">=10"},"repository":{"type":"git","url":"https://github.com/intuit/oauth-jsclient.git"},"author":{"name":"Anil Kumar","email":"anil_kumar3@intuit.com"},"license":"Apache-2.0","bugs":{"url":"https://github.com/intuit/oauth-jsclient/issues"},"homepage":"https://github.com/intuit/oauth-jsclient","dependencies":{"atob":"2.1.2","axios":"^1.5.1","csrf":"^3.0.4","jsonwebtoken":"^9.0.2","query-string":"^6.12.1","rsa-pem-from-mod-exp":"^0.8.4","winston":"^3.1.0"},"devDependencies":{"btoa":"^1.2.1","chai":"^4.1.2","chai-as-promised":"^7.1.1","eslint":"^6.8.0","eslint-config-airbnb-base":"^14.1.0","eslint-config-prettier":"^6.11.0","eslint-plugin-import":"^2.20.2","mocha":"^10.2.0","nock":"^9.2.3","nyc":"^15.0.1","prettier":"^2.0.5","sinon":"^9.0.2","@snyk/protect":"^1.657.0"},"snyk":true}');

/***/ })

};
;