/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ecc-jsbn";
exports.ids = ["vendor-chunks/ecc-jsbn"];
exports.modules = {

/***/ "(ssr)/./node_modules/ecc-jsbn/index.js":
/*!****************************************!*\
  !*** ./node_modules/ecc-jsbn/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(ssr)/./node_modules/jsbn/index.js\").BigInteger);\nvar ECPointFp = (__webpack_require__(/*! ./lib/ec.js */ \"(ssr)/./node_modules/ecc-jsbn/lib/ec.js\").ECPointFp);\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nexports.ECCurves = __webpack_require__(/*! ./lib/sec.js */ \"(ssr)/./node_modules/ecc-jsbn/lib/sec.js\");\n// zero prepad\nfunction unstupid(hex, len) {\n    return hex.length >= len ? hex : unstupid(\"0\" + hex, len);\n}\nexports.ECKey = function(curve, key, isPublic) {\n    var priv;\n    var c = curve();\n    var n = c.getN();\n    var bytes = Math.floor(n.bitLength() / 8);\n    if (key) {\n        if (isPublic) {\n            var curve = c.getCurve();\n            //      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format\n            //      var y = key.slice(bytes+1);\n            //      this.P = new ECPointFp(curve,\n            //        curve.fromBigInteger(new BigInteger(x.toString(\"hex\"), 16)),\n            //        curve.fromBigInteger(new BigInteger(y.toString(\"hex\"), 16)));      \n            this.P = curve.decodePointHex(key.toString(\"hex\"));\n        } else {\n            if (key.length != bytes) return false;\n            priv = new BigInteger(key.toString(\"hex\"), 16);\n        }\n    } else {\n        var n1 = n.subtract(BigInteger.ONE);\n        var r = new BigInteger(crypto.randomBytes(n.bitLength()));\n        priv = r.mod(n1).add(BigInteger.ONE);\n        this.P = c.getG().multiply(priv);\n    }\n    if (this.P) {\n        //  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);\n        //  this.PublicKey = Buffer.from(\"04\"+pubhex,\"hex\");\n        this.PublicKey = Buffer.from(c.getCurve().encodeCompressedPointHex(this.P), \"hex\");\n    }\n    if (priv) {\n        this.PrivateKey = Buffer.from(unstupid(priv.toString(16), bytes * 2), \"hex\");\n        this.deriveSharedSecret = function(key) {\n            if (!key || !key.P) return false;\n            var S = key.P.multiply(priv);\n            return Buffer.from(unstupid(S.getX().toBigInteger().toString(16), bytes * 2), \"hex\");\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWNjLWpzYm4vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDN0IsSUFBSUMsYUFBYUQsa0ZBQTBCO0FBQzNDLElBQUlFLFlBQVlGLDZGQUFnQztBQUNoRCxJQUFJRyxTQUFTSCw4RkFBOEI7QUFDM0NJLHNHQUEwQztBQUUxQyxjQUFjO0FBQ2QsU0FBU0UsU0FBU0MsR0FBRyxFQUFDQyxHQUFHO0lBRXhCLE9BQU8sSUFBS0MsTUFBTSxJQUFJRCxNQUFPRCxNQUFNRCxTQUFTLE1BQUlDLEtBQUlDO0FBQ3JEO0FBRUFKLGFBQWEsR0FBRyxTQUFTTyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsUUFBUTtJQUUzQyxJQUFJQztJQUNMLElBQUlDLElBQUlKO0lBQ1IsSUFBSUssSUFBSUQsRUFBRUUsSUFBSTtJQUNiLElBQUlDLFFBQVFDLEtBQUtDLEtBQUssQ0FBQ0osRUFBRUssU0FBUyxLQUFHO0lBRXJDLElBQUdULEtBQ0g7UUFDRSxJQUFHQyxVQUNIO1lBQ0UsSUFBSUYsUUFBUUksRUFBRU8sUUFBUTtZQUM1Qiw0RUFBNEU7WUFDNUUsbUNBQW1DO1lBQ25DLHFDQUFxQztZQUNyQyxzRUFBc0U7WUFDdEUsNkVBQTZFO1lBQ3ZFLElBQUksQ0FBQ0MsQ0FBQyxHQUFHWixNQUFNYSxjQUFjLENBQUNaLElBQUlhLFFBQVEsQ0FBQztRQUM3QyxPQUFLO1lBQ0gsSUFBR2IsSUFBSUgsTUFBTSxJQUFJUyxPQUFPLE9BQU87WUFDL0JKLE9BQU8sSUFBSWIsV0FBV1csSUFBSWEsUUFBUSxDQUFDLFFBQVE7UUFDN0M7SUFDRixPQUFLO1FBQ0gsSUFBSUMsS0FBS1YsRUFBRVcsUUFBUSxDQUFDMUIsV0FBVzJCLEdBQUc7UUFDbEMsSUFBSUMsSUFBSSxJQUFJNUIsV0FBV0YsT0FBTytCLFdBQVcsQ0FBQ2QsRUFBRUssU0FBUztRQUNyRFAsT0FBT2UsRUFBRUUsR0FBRyxDQUFDTCxJQUFJTSxHQUFHLENBQUMvQixXQUFXMkIsR0FBRztRQUNuQyxJQUFJLENBQUNMLENBQUMsR0FBR1IsRUFBRWtCLElBQUksR0FBR0MsUUFBUSxDQUFDcEI7SUFDN0I7SUFDQSxJQUFHLElBQUksQ0FBQ1MsQ0FBQyxFQUNUO1FBQ0YseUlBQXlJO1FBQ3pJLG9EQUFvRDtRQUNoRCxJQUFJLENBQUNZLFNBQVMsR0FBR2hDLE9BQU9pQyxJQUFJLENBQUNyQixFQUFFTyxRQUFRLEdBQUdlLHdCQUF3QixDQUFDLElBQUksQ0FBQ2QsQ0FBQyxHQUFFO0lBQzdFO0lBQ0EsSUFBR1QsTUFDSDtRQUNFLElBQUksQ0FBQ3dCLFVBQVUsR0FBR25DLE9BQU9pQyxJQUFJLENBQUM5QixTQUFTUSxLQUFLVyxRQUFRLENBQUMsS0FBSVAsUUFBTSxJQUFHO1FBQ2xFLElBQUksQ0FBQ3FCLGtCQUFrQixHQUFHLFNBQVMzQixHQUFHO1lBRXBDLElBQUcsQ0FBQ0EsT0FBTyxDQUFDQSxJQUFJVyxDQUFDLEVBQUUsT0FBTztZQUMxQixJQUFJaUIsSUFBSTVCLElBQUlXLENBQUMsQ0FBQ1csUUFBUSxDQUFDcEI7WUFDdkIsT0FBT1gsT0FBT2lDLElBQUksQ0FBQzlCLFNBQVNrQyxFQUFFQyxJQUFJLEdBQUdDLFlBQVksR0FBR2pCLFFBQVEsQ0FBQyxLQUFJUCxRQUFNLElBQUc7UUFDN0U7SUFDRDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvZWNjLWpzYm4vaW5kZXguanM/N2RiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZShcImpzYm5cIikuQmlnSW50ZWdlcjtcbnZhciBFQ1BvaW50RnAgPSByZXF1aXJlKFwiLi9saWIvZWMuanNcIikuRUNQb2ludEZwO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoXCJzYWZlci1idWZmZXJcIikuQnVmZmVyO1xuZXhwb3J0cy5FQ0N1cnZlcyA9IHJlcXVpcmUoXCIuL2xpYi9zZWMuanNcIik7XG5cbi8vIHplcm8gcHJlcGFkXG5mdW5jdGlvbiB1bnN0dXBpZChoZXgsbGVuKVxue1xuXHRyZXR1cm4gKGhleC5sZW5ndGggPj0gbGVuKSA/IGhleCA6IHVuc3R1cGlkKFwiMFwiK2hleCxsZW4pO1xufVxuXG5leHBvcnRzLkVDS2V5ID0gZnVuY3Rpb24oY3VydmUsIGtleSwgaXNQdWJsaWMpXG57XG4gIHZhciBwcml2O1xuXHR2YXIgYyA9IGN1cnZlKCk7XG5cdHZhciBuID0gYy5nZXROKCk7XG4gIHZhciBieXRlcyA9IE1hdGguZmxvb3Iobi5iaXRMZW5ndGgoKS84KTtcblxuICBpZihrZXkpXG4gIHtcbiAgICBpZihpc1B1YmxpYylcbiAgICB7XG4gICAgICB2YXIgY3VydmUgPSBjLmdldEN1cnZlKCk7XG4vLyAgICAgIHZhciB4ID0ga2V5LnNsaWNlKDEsYnl0ZXMrMSk7IC8vIHNraXAgdGhlIDA0IGZvciB1bmNvbXByZXNzZWQgZm9ybWF0XG4vLyAgICAgIHZhciB5ID0ga2V5LnNsaWNlKGJ5dGVzKzEpO1xuLy8gICAgICB0aGlzLlAgPSBuZXcgRUNQb2ludEZwKGN1cnZlLFxuLy8gICAgICAgIGN1cnZlLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHgudG9TdHJpbmcoXCJoZXhcIiksIDE2KSksXG4vLyAgICAgICAgY3VydmUuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoeS50b1N0cmluZyhcImhleFwiKSwgMTYpKSk7ICAgICAgXG4gICAgICB0aGlzLlAgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChrZXkudG9TdHJpbmcoXCJoZXhcIikpO1xuICAgIH1lbHNle1xuICAgICAgaWYoa2V5Lmxlbmd0aCAhPSBieXRlcykgcmV0dXJuIGZhbHNlO1xuICAgICAgcHJpdiA9IG5ldyBCaWdJbnRlZ2VyKGtleS50b1N0cmluZyhcImhleFwiKSwgMTYpOyAgICAgIFxuICAgIH1cbiAgfWVsc2V7XG4gICAgdmFyIG4xID0gbi5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7XG4gICAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcihjcnlwdG8ucmFuZG9tQnl0ZXMobi5iaXRMZW5ndGgoKSkpO1xuICAgIHByaXYgPSByLm1vZChuMSkuYWRkKEJpZ0ludGVnZXIuT05FKTtcbiAgICB0aGlzLlAgPSBjLmdldEcoKS5tdWx0aXBseShwcml2KTtcbiAgfVxuICBpZih0aGlzLlApXG4gIHtcbi8vICB2YXIgcHViaGV4ID0gdW5zdHVwaWQodGhpcy5QLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMikrdW5zdHVwaWQodGhpcy5QLmdldFkoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMik7XG4vLyAgdGhpcy5QdWJsaWNLZXkgPSBCdWZmZXIuZnJvbShcIjA0XCIrcHViaGV4LFwiaGV4XCIpO1xuICAgIHRoaXMuUHVibGljS2V5ID0gQnVmZmVyLmZyb20oYy5nZXRDdXJ2ZSgpLmVuY29kZUNvbXByZXNzZWRQb2ludEhleCh0aGlzLlApLFwiaGV4XCIpO1xuICB9XG4gIGlmKHByaXYpXG4gIHtcbiAgICB0aGlzLlByaXZhdGVLZXkgPSBCdWZmZXIuZnJvbSh1bnN0dXBpZChwcml2LnRvU3RyaW5nKDE2KSxieXRlcyoyKSxcImhleFwiKTtcbiAgICB0aGlzLmRlcml2ZVNoYXJlZFNlY3JldCA9IGZ1bmN0aW9uKGtleSlcbiAgICB7XG4gICAgICBpZigha2V5IHx8ICFrZXkuUCkgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIFMgPSBrZXkuUC5tdWx0aXBseShwcml2KTtcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh1bnN0dXBpZChTLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMiksXCJoZXhcIik7XG4gICB9ICAgICBcbiAgfVxufVxuXG4iXSwibmFtZXMiOlsiY3J5cHRvIiwicmVxdWlyZSIsIkJpZ0ludGVnZXIiLCJFQ1BvaW50RnAiLCJCdWZmZXIiLCJleHBvcnRzIiwiRUNDdXJ2ZXMiLCJ1bnN0dXBpZCIsImhleCIsImxlbiIsImxlbmd0aCIsIkVDS2V5IiwiY3VydmUiLCJrZXkiLCJpc1B1YmxpYyIsInByaXYiLCJjIiwibiIsImdldE4iLCJieXRlcyIsIk1hdGgiLCJmbG9vciIsImJpdExlbmd0aCIsImdldEN1cnZlIiwiUCIsImRlY29kZVBvaW50SGV4IiwidG9TdHJpbmciLCJuMSIsInN1YnRyYWN0IiwiT05FIiwiciIsInJhbmRvbUJ5dGVzIiwibW9kIiwiYWRkIiwiZ2V0RyIsIm11bHRpcGx5IiwiUHVibGljS2V5IiwiZnJvbSIsImVuY29kZUNvbXByZXNzZWRQb2ludEhleCIsIlByaXZhdGVLZXkiLCJkZXJpdmVTaGFyZWRTZWNyZXQiLCJTIiwiZ2V0WCIsInRvQmlnSW50ZWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ecc-jsbn/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ecc-jsbn/lib/ec.js":
/*!*****************************************!*\
  !*** ./node_modules/ecc-jsbn/lib/ec.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n// Requires jsbn.js and jsbn2.js\n\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(ssr)/./node_modules/jsbn/index.js\").BigInteger);\nvar Barrett = BigInteger.prototype.Barrett;\n// ----------------\n// ECFieldElementFp\n// constructor\nfunction ECFieldElementFp(q1, x) {\n    this.x = x;\n    // TODO if(x.compareTo(q) >= 0) error\n    this.q = q1;\n}\nfunction feFpEquals(other) {\n    if (other == this) return true;\n    return this.q.equals(other.q) && this.x.equals(other.x);\n}\nfunction feFpToBigInteger() {\n    return this.x;\n}\nfunction feFpNegate() {\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\nfunction feFpAdd(b) {\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSubtract(b) {\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\nfunction feFpMultiply(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSquare() {\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\nfunction feFpDivide(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n// ----------------\n// ECPointFp\n// constructor\nfunction ECPointFp(curve, x, y, z) {\n    this.curve = curve;\n    this.x = x;\n    this.y = y;\n    // Projective coordinates: either zinv == null or z * zinv == 1\n    // z and zinv are just BigIntegers, not fieldElements\n    if (z == null) {\n        this.z = BigInteger.ONE;\n    } else {\n        this.z = z;\n    }\n    this.zinv = null;\n//TODO: compression flag\n}\nfunction pointFpGetX() {\n    if (this.zinv == null) {\n        this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.x.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\nfunction pointFpGetY() {\n    if (this.zinv == null) {\n        this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.y.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\nfunction pointFpEquals(other) {\n    if (other == this) return true;\n    if (this.isInfinity()) return other.isInfinity();\n    if (other.isInfinity()) return this.isInfinity();\n    var u, v;\n    // u = Y2 * Z1 - Y1 * Z2\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    if (!u.equals(BigInteger.ZERO)) return false;\n    // v = X2 * Z1 - X1 * Z2\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    return v.equals(BigInteger.ZERO);\n}\nfunction pointFpIsInfinity() {\n    if (this.x == null && this.y == null) return true;\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\nfunction pointFpNegate() {\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\nfunction pointFpAdd(b) {\n    if (this.isInfinity()) return b;\n    if (b.isInfinity()) return this;\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    // v = X2 * Z1 - X1 * Z2\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    if (BigInteger.ZERO.equals(v)) {\n        if (BigInteger.ZERO.equals(u)) {\n            return this.twice(); // this == b, so double\n        }\n        return this.curve.getInfinity(); // this = -b, so infinity\n    }\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var x2 = b.x.toBigInteger();\n    var y2 = b.y.toBigInteger();\n    var v2 = v.square();\n    var v3 = v2.multiply(v);\n    var x1v2 = x1.multiply(v2);\n    var zu2 = u.square().multiply(this.z);\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n    // z3 = v^3 * z1 * z2\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\nfunction pointFpTwice() {\n    if (this.isInfinity()) return this;\n    if (this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n    // TODO: optimized handling of constants\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var y1z1 = y1.multiply(this.z);\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n    var a = this.curve.a.toBigInteger();\n    // w = 3 * x1^2 + a * z1^2\n    var w = x1.square().multiply(THREE);\n    if (!BigInteger.ZERO.equals(a)) {\n        w = w.add(this.z.square().multiply(a));\n    }\n    w = w.mod(this.curve.q);\n    //this.curve.reduce(w);\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n    // z3 = 8 * (y1 * z1)^3\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n    if (this.isInfinity()) return this;\n    if (k.signum() == 0) return this.curve.getInfinity();\n    var e = k;\n    var h = e.multiply(new BigInteger(\"3\"));\n    var neg = this.negate();\n    var R = this;\n    var i;\n    for(i = h.bitLength() - 2; i > 0; --i){\n        R = R.twice();\n        var hBit = h.testBit(i);\n        var eBit = e.testBit(i);\n        if (hBit != eBit) {\n            R = R.add(hBit ? this : neg);\n        }\n    }\n    return R;\n}\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j, x, k) {\n    var i;\n    if (j.bitLength() > k.bitLength()) i = j.bitLength() - 1;\n    else i = k.bitLength() - 1;\n    var R = this.curve.getInfinity();\n    var both = this.add(x);\n    while(i >= 0){\n        R = R.twice();\n        if (j.testBit(i)) {\n            if (k.testBit(i)) {\n                R = R.add(both);\n            } else {\n                R = R.add(this);\n            }\n        } else {\n            if (k.testBit(i)) {\n                R = R.add(x);\n            }\n        }\n        --i;\n    }\n    return R;\n}\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n// ----------------\n// ECCurveFp\n// constructor\nfunction ECCurveFp(q1, a, b) {\n    this.q = q1;\n    this.a = this.fromBigInteger(a);\n    this.b = this.fromBigInteger(b);\n    this.infinity = new ECPointFp(this, null, null);\n    this.reducer = new Barrett(this.q);\n}\nfunction curveFpGetQ() {\n    return this.q;\n}\nfunction curveFpGetA() {\n    return this.a;\n}\nfunction curveFpGetB() {\n    return this.b;\n}\nfunction curveFpEquals(other) {\n    if (other == this) return true;\n    return this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b);\n}\nfunction curveFpGetInfinity() {\n    return this.infinity;\n}\nfunction curveFpFromBigInteger(x) {\n    return new ECFieldElementFp(this.q, x);\n}\nfunction curveReduce(x) {\n    this.reducer.reduce(x);\n}\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n    switch(parseInt(s.substr(0, 2), 16)){\n        case 0:\n            return this.infinity;\n        case 2:\n        case 3:\n            // point compression not supported yet\n            return null;\n        case 4:\n        case 6:\n        case 7:\n            var len = (s.length - 2) / 2;\n            var xHex = s.substr(2, len);\n            var yHex = s.substr(len + 2, len);\n            return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n        default:\n            return null;\n    }\n}\nfunction curveFpEncodePointHex(p) {\n    if (p.isInfinity()) return \"00\";\n    var xHex = p.getX().toBigInteger().toString(16);\n    var yHex = p.getY().toBigInteger().toString(16);\n    var oLen = this.getQ().toString(16).length;\n    if (oLen % 2 != 0) oLen++;\n    while(xHex.length < oLen){\n        xHex = \"0\" + xHex;\n    }\n    while(yHex.length < oLen){\n        yHex = \"0\" + yHex;\n    }\n    return \"04\" + xHex + yHex;\n}\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function(s) {\n    var yIsEven;\n    switch(parseInt(s.substr(0, 2), 16)){\n        case 0:\n            return this.infinity;\n        case 2:\n            yIsEven = false;\n        case 3:\n            if (yIsEven == undefined) yIsEven = true;\n            var len = s.length - 2;\n            var xHex = s.substr(2, len);\n            var x = this.fromBigInteger(new BigInteger(xHex, 16));\n            var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n            var beta = alpha.sqrt();\n            if (beta == null) throw \"Invalid point compression\";\n            var betaValue = beta.toBigInteger();\n            if (betaValue.testBit(0) != yIsEven) {\n                // Use the other root\n                beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n            }\n            return new ECPointFp(this, x, beta);\n        case 4:\n        case 6:\n        case 7:\n            var len = (s.length - 2) / 2;\n            var xHex = s.substr(2, len);\n            var yHex = s.substr(len + 2, len);\n            return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n        default:\n            return null;\n    }\n};\nECCurveFp.prototype.encodeCompressedPointHex = function(p) {\n    if (p.isInfinity()) return \"00\";\n    var xHex = p.getX().toBigInteger().toString(16);\n    var oLen = this.getQ().toString(16).length;\n    if (oLen % 2 != 0) oLen++;\n    while(xHex.length < oLen)xHex = \"0\" + xHex;\n    var yPrefix;\n    if (p.getY().toBigInteger().isEven()) yPrefix = \"02\";\n    else yPrefix = \"03\";\n    return yPrefix + xHex;\n};\nECFieldElementFp.prototype.getR = function() {\n    if (this.r != undefined) return this.r;\n    this.r = null;\n    var bitLength = this.q.bitLength();\n    if (bitLength > 128) {\n        var firstWord = this.q.shiftRight(bitLength - 64);\n        if (firstWord.intValue() == -1) {\n            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n        }\n    }\n    return this.r;\n};\nECFieldElementFp.prototype.modMult = function(x1, x2) {\n    return this.modReduce(x1.multiply(x2));\n};\nECFieldElementFp.prototype.modReduce = function(x) {\n    if (this.getR() != null) {\n        var qLen = q.bitLength();\n        while(x.bitLength() > qLen + 1){\n            var u = x.shiftRight(qLen);\n            var v = x.subtract(u.shiftLeft(qLen));\n            if (!this.getR().equals(BigInteger.ONE)) {\n                u = u.multiply(this.getR());\n            }\n            x = u.add(v);\n        }\n        while(x.compareTo(q) >= 0){\n            x = x.subtract(q);\n        }\n    } else {\n        x = x.mod(q);\n    }\n    return x;\n};\nECFieldElementFp.prototype.sqrt = function() {\n    if (!this.q.testBit(0)) throw \"unsupported\";\n    // p mod 4 == 3\n    if (this.q.testBit(1)) {\n        var z = new ECFieldElementFp(this.q, this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE), this.q));\n        return z.square().equals(this) ? z : null;\n    }\n    // p mod 4 == 1\n    var qMinusOne = this.q.subtract(BigInteger.ONE);\n    var legendreExponent = qMinusOne.shiftRight(1);\n    if (!this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)) {\n        return null;\n    }\n    var u = qMinusOne.shiftRight(2);\n    var k = u.shiftLeft(1).add(BigInteger.ONE);\n    var Q = this.x;\n    var fourQ = modDouble(modDouble(Q));\n    var U, V;\n    do {\n        var P;\n        do {\n            P = new BigInteger(this.q.bitLength(), new SecureRandom());\n        }while (P.compareTo(this.q) >= 0 || !P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne));\n        var result = this.lucasSequence(P, Q, k);\n        U = result[0];\n        V = result[1];\n        if (this.modMult(V, V).equals(fourQ)) {\n            // Integer division by 2, mod q\n            if (V.testBit(0)) {\n                V = V.add(q);\n            }\n            V = V.shiftRight(1);\n            return new ECFieldElementFp(q, V);\n        }\n    }while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n    return null;\n};\nECFieldElementFp.prototype.lucasSequence = function(P, Q, k) {\n    var n = k.bitLength();\n    var s = k.getLowestSetBit();\n    var Uh = BigInteger.ONE;\n    var Vl = BigInteger.TWO;\n    var Vh = P;\n    var Ql = BigInteger.ONE;\n    var Qh = BigInteger.ONE;\n    for(var j = n - 1; j >= s + 1; --j){\n        Ql = this.modMult(Ql, Qh);\n        if (k.testBit(j)) {\n            Qh = this.modMult(Ql, Q);\n            Uh = this.modMult(Uh, Vh);\n            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n        } else {\n            Qh = Ql;\n            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        }\n    }\n    Ql = this.modMult(Ql, Qh);\n    Qh = this.modMult(Ql, Q);\n    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n    Ql = this.modMult(Ql, Qh);\n    for(var j = 1; j <= s; ++j){\n        Uh = this.modMult(Uh, Vl);\n        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        Ql = this.modMult(Ql, Ql);\n    }\n    return [\n        Uh,\n        Vl\n    ];\n};\nvar exports = {\n    ECCurveFp: ECCurveFp,\n    ECPointFp: ECPointFp,\n    ECFieldElementFp: ECFieldElementFp\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWNjLWpzYm4vbGliL2VjLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlEQUFpRDtBQUNqRCxrREFBa0Q7QUFDbEQscUNBQXFDO0FBRXJDLGdDQUFnQzs7QUFDaEMsSUFBSUEsYUFBYUMsa0ZBQTBCO0FBQzNDLElBQUlDLFVBQVVGLFdBQVdHLFNBQVMsQ0FBQ0QsT0FBTztBQUUxQyxtQkFBbUI7QUFDbkIsbUJBQW1CO0FBRW5CLGNBQWM7QUFDZCxTQUFTRSxpQkFBaUJDLEVBQUMsRUFBQ0MsQ0FBQztJQUN6QixJQUFJLENBQUNBLENBQUMsR0FBR0E7SUFDVCxxQ0FBcUM7SUFDckMsSUFBSSxDQUFDRCxDQUFDLEdBQUdBO0FBQ2I7QUFFQSxTQUFTRSxXQUFXQyxLQUFLO0lBQ3JCLElBQUdBLFNBQVMsSUFBSSxFQUFFLE9BQU87SUFDekIsT0FBUSxJQUFJLENBQUNILENBQUMsQ0FBQ0ksTUFBTSxDQUFDRCxNQUFNSCxDQUFDLEtBQUssSUFBSSxDQUFDQyxDQUFDLENBQUNHLE1BQU0sQ0FBQ0QsTUFBTUYsQ0FBQztBQUMzRDtBQUVBLFNBQVNJO0lBQ0wsT0FBTyxJQUFJLENBQUNKLENBQUM7QUFDakI7QUFFQSxTQUFTSztJQUNMLE9BQU8sSUFBSVAsaUJBQWlCLElBQUksQ0FBQ0MsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsQ0FBQyxDQUFDTSxNQUFNLEdBQUdDLEdBQUcsQ0FBQyxJQUFJLENBQUNSLENBQUM7QUFDbEU7QUFFQSxTQUFTUyxRQUFRQyxDQUFDO0lBQ2QsT0FBTyxJQUFJWCxpQkFBaUIsSUFBSSxDQUFDQyxDQUFDLEVBQUUsSUFBSSxDQUFDQyxDQUFDLENBQUNVLEdBQUcsQ0FBQ0QsRUFBRUUsWUFBWSxJQUFJSixHQUFHLENBQUMsSUFBSSxDQUFDUixDQUFDO0FBQy9FO0FBRUEsU0FBU2EsYUFBYUgsQ0FBQztJQUNuQixPQUFPLElBQUlYLGlCQUFpQixJQUFJLENBQUNDLENBQUMsRUFBRSxJQUFJLENBQUNDLENBQUMsQ0FBQ2Es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QUFJLENBQUNsQixTQUFTLENBQUNrQixHQUFHMUgsUUFBUSxDQUFDMEgsSUFBSTVILFFBQVEsQ0FBQytILEdBQUd4RixTQUFTLENBQUM7UUFDOUQ7SUFDSjtJQUVBd0YsS0FBSyxJQUFJLENBQUN0QixPQUFPLENBQUNzQixJQUFJQztJQUN0QkEsS0FBSyxJQUFJLENBQUN2QixPQUFPLENBQUNzQixJQUFJZjtJQUN0QlcsS0FBSyxJQUFJLENBQUNqQixTQUFTLENBQUNpQixHQUFHekgsUUFBUSxDQUFDMEgsSUFBSTVILFFBQVEsQ0FBQytIO0lBQzdDSCxLQUFLLElBQUksQ0FBQ2xCLFNBQVMsQ0FBQ29CLEdBQUc1SCxRQUFRLENBQUMwSCxJQUFJNUgsUUFBUSxDQUFDcUgsRUFBRW5ILFFBQVEsQ0FBQzZIO0lBQ3hEQSxLQUFLLElBQUksQ0FBQ3RCLE9BQU8sQ0FBQ3NCLElBQUlDO0lBRXRCLElBQUssSUFBSXBFLElBQUksR0FBR0EsS0FBS2dCLEdBQUcsRUFBRWhCLEVBQzFCO1FBQ0krRCxLQUFLLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQ2tCLElBQUlDO1FBQ3RCQSxLQUFLLElBQUksQ0FBQ2xCLFNBQVMsQ0FBQ2tCLEdBQUcxSCxRQUFRLENBQUMwSCxJQUFJNUgsUUFBUSxDQUFDK0gsR0FBR3hGLFNBQVMsQ0FBQztRQUMxRHdGLEtBQUssSUFBSSxDQUFDdEIsT0FBTyxDQUFDc0IsSUFBSUE7SUFDMUI7SUFFQSxPQUFPO1FBQUVKO1FBQUlDO0tBQUk7QUFDckI7QUFFQSxJQUFJSyxVQUFVO0lBQ1poRSxXQUFXQTtJQUNYekQsV0FBV0E7SUFDWHZCLGtCQUFrQkE7QUFDcEI7QUFFQWlKLE9BQU9ELE9BQU8sR0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9lY2MtanNibi9saWIvZWMuanM/N2QyZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCYXNpYyBKYXZhc2NyaXB0IEVsbGlwdGljIEN1cnZlIGltcGxlbWVudGF0aW9uXG4vLyBQb3J0ZWQgbG9vc2VseSBmcm9tIEJvdW5jeUNhc3RsZSdzIEphdmEgRUMgY29kZVxuLy8gT25seSBGcCBjdXJ2ZXMgaW1wbGVtZW50ZWQgZm9yIG5vd1xuXG4vLyBSZXF1aXJlcyBqc2JuLmpzIGFuZCBqc2JuMi5qc1xudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdqc2JuJykuQmlnSW50ZWdlclxudmFyIEJhcnJldHQgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5CYXJyZXR0XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS1cbi8vIEVDRmllbGRFbGVtZW50RnBcblxuLy8gY29uc3RydWN0b3JcbmZ1bmN0aW9uIEVDRmllbGRFbGVtZW50RnAocSx4KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICAvLyBUT0RPIGlmKHguY29tcGFyZVRvKHEpID49IDApIGVycm9yXG4gICAgdGhpcy5xID0gcTtcbn1cblxuZnVuY3Rpb24gZmVGcEVxdWFscyhvdGhlcikge1xuICAgIGlmKG90aGVyID09IHRoaXMpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiAodGhpcy5xLmVxdWFscyhvdGhlci5xKSAmJiB0aGlzLnguZXF1YWxzKG90aGVyLngpKTtcbn1cblxuZnVuY3Rpb24gZmVGcFRvQmlnSW50ZWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy54O1xufVxuXG5mdW5jdGlvbiBmZUZwTmVnYXRlKCkge1xuICAgIHJldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsIHRoaXMueC5uZWdhdGUoKS5tb2QodGhpcy5xKSk7XG59XG5cbmZ1bmN0aW9uIGZlRnBBZGQoYikge1xuICAgIHJldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsIHRoaXMueC5hZGQoYi50b0JpZ0ludGVnZXIoKSkubW9kKHRoaXMucSkpO1xufVxuXG5mdW5jdGlvbiBmZUZwU3VidHJhY3QoYikge1xuICAgIHJldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsIHRoaXMueC5zdWJ0cmFjdChiLnRvQmlnSW50ZWdlcigpKS5tb2QodGhpcy5xKSk7XG59XG5cbmZ1bmN0aW9uIGZlRnBNdWx0aXBseShiKSB7XG4gICAgcmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSwgdGhpcy54Lm11bHRpcGx5KGIudG9CaWdJbnRlZ2VyKCkpLm1vZCh0aGlzLnEpKTtcbn1cblxuZnVuY3Rpb24gZmVGcFNxdWFyZSgpIHtcbiAgICByZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLCB0aGlzLnguc3F1YXJlKCkubW9kKHRoaXMucSkpO1xufVxuXG5mdW5jdGlvbiBmZUZwRGl2aWRlKGIpIHtcbiAgICByZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLCB0aGlzLngubXVsdGlwbHkoYi50b0JpZ0ludGVnZXIoKS5tb2RJbnZlcnNlKHRoaXMucSkpLm1vZCh0aGlzLnEpKTtcbn1cblxuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuZXF1YWxzID0gZmVGcEVxdWFscztcbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnRvQmlnSW50ZWdlciA9IGZlRnBUb0JpZ0ludGVnZXI7XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5uZWdhdGUgPSBmZUZwTmVnYXRlO1xuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuYWRkID0gZmVGcEFkZDtcbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnN1YnRyYWN0ID0gZmVGcFN1YnRyYWN0O1xuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUubXVsdGlwbHkgPSBmZUZwTXVsdGlwbHk7XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5zcXVhcmUgPSBmZUZwU3F1YXJlO1xuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuZGl2aWRlID0gZmVGcERpdmlkZTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLVxuLy8gRUNQb2ludEZwXG5cbi8vIGNvbnN0cnVjdG9yXG5mdW5jdGlvbiBFQ1BvaW50RnAoY3VydmUseCx5LHopIHtcbiAgICB0aGlzLmN1cnZlID0gY3VydmU7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIC8vIFByb2plY3RpdmUgY29vcmRpbmF0ZXM6IGVpdGhlciB6aW52ID09IG51bGwgb3IgeiAqIHppbnYgPT0gMVxuICAgIC8vIHogYW5kIHppbnYgYXJlIGp1c3QgQmlnSW50ZWdlcnMsIG5vdCBmaWVsZEVsZW1lbnRzXG4gICAgaWYoeiA9PSBudWxsKSB7XG4gICAgICB0aGlzLnogPSBCaWdJbnRlZ2VyLk9ORTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnogPSB6O1xuICAgIH1cbiAgICB0aGlzLnppbnYgPSBudWxsO1xuICAgIC8vVE9ETzogY29tcHJlc3Npb24gZmxhZ1xufVxuXG5mdW5jdGlvbiBwb2ludEZwR2V0WCgpIHtcbiAgICBpZih0aGlzLnppbnYgPT0gbnVsbCkge1xuICAgICAgdGhpcy56aW52ID0gdGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5xKTtcbiAgICB9XG4gICAgdmFyIHIgPSB0aGlzLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56aW52KTtcbiAgICB0aGlzLmN1cnZlLnJlZHVjZShyKTtcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihyKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRGcEdldFkoKSB7XG4gICAgaWYodGhpcy56aW52ID09IG51bGwpIHtcbiAgICAgIHRoaXMuemludiA9IHRoaXMuei5tb2RJbnZlcnNlKHRoaXMuY3VydmUucSk7XG4gICAgfVxuICAgIHZhciByID0gdGhpcy55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMuemludik7XG4gICAgdGhpcy5jdXJ2ZS5yZWR1Y2Uocik7XG4gICAgcmV0dXJuIHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIocik7XG59XG5cbmZ1bmN0aW9uIHBvaW50RnBFcXVhbHMob3RoZXIpIHtcbiAgICBpZihvdGhlciA9PSB0aGlzKSByZXR1cm4gdHJ1ZTtcbiAgICBpZih0aGlzLmlzSW5maW5pdHkoKSkgcmV0dXJuIG90aGVyLmlzSW5maW5pdHkoKTtcbiAgICBpZihvdGhlci5pc0luZmluaXR5KCkpIHJldHVybiB0aGlzLmlzSW5maW5pdHkoKTtcbiAgICB2YXIgdSwgdjtcbiAgICAvLyB1ID0gWTIgKiBaMSAtIFkxICogWjJcbiAgICB1ID0gb3RoZXIueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShvdGhlci56KSkubW9kKHRoaXMuY3VydmUucSk7XG4gICAgaWYoIXUuZXF1YWxzKEJpZ0ludGVnZXIuWkVSTykpIHJldHVybiBmYWxzZTtcbiAgICAvLyB2ID0gWDIgKiBaMSAtIFgxICogWjJcbiAgICB2ID0gb3RoZXIueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShvdGhlci56KSkubW9kKHRoaXMuY3VydmUucSk7XG4gICAgcmV0dXJuIHYuZXF1YWxzKEJpZ0ludGVnZXIuWkVSTyk7XG59XG5cbmZ1bmN0aW9uIHBvaW50RnBJc0luZmluaXR5KCkge1xuICAgIGlmKCh0aGlzLnggPT0gbnVsbCkgJiYgKHRoaXMueSA9PSBudWxsKSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIHRoaXMuei5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKSAmJiAhdGhpcy55LnRvQmlnSW50ZWdlcigpLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pO1xufVxuXG5mdW5jdGlvbiBwb2ludEZwTmVnYXRlKCkge1xuICAgIHJldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsIHRoaXMueCwgdGhpcy55Lm5lZ2F0ZSgpLCB0aGlzLnopO1xufVxuXG5mdW5jdGlvbiBwb2ludEZwQWRkKGIpIHtcbiAgICBpZih0aGlzLmlzSW5maW5pdHkoKSkgcmV0dXJuIGI7XG4gICAgaWYoYi5pc0luZmluaXR5KCkpIHJldHVybiB0aGlzO1xuXG4gICAgLy8gdSA9IFkyICogWjEgLSBZMSAqIFoyXG4gICAgdmFyIHUgPSBiLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkoYi56KSkubW9kKHRoaXMuY3VydmUucSk7XG4gICAgLy8gdiA9IFgyICogWjEgLSBYMSAqIFoyXG4gICAgdmFyIHYgPSBiLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkoYi56KSkubW9kKHRoaXMuY3VydmUucSk7XG5cbiAgICBpZihCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKHYpKSB7XG4gICAgICAgIGlmKEJpZ0ludGVnZXIuWkVSTy5lcXVhbHModSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnR3aWNlKCk7IC8vIHRoaXMgPT0gYiwgc28gZG91YmxlXG4gICAgICAgIH1cblx0cmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKTsgLy8gdGhpcyA9IC1iLCBzbyBpbmZpbml0eVxuICAgIH1cblxuICAgIHZhciBUSFJFRSA9IG5ldyBCaWdJbnRlZ2VyKFwiM1wiKTtcbiAgICB2YXIgeDEgPSB0aGlzLngudG9CaWdJbnRlZ2VyKCk7XG4gICAgdmFyIHkxID0gdGhpcy55LnRvQmlnSW50ZWdlcigpO1xuICAgIHZhciB4MiA9IGIueC50b0JpZ0ludGVnZXIoKTtcbiAgICB2YXIgeTIgPSBiLnkudG9CaWdJbnRlZ2VyKCk7XG5cbiAgICB2YXIgdjIgPSB2LnNxdWFyZSgpO1xuICAgIHZhciB2MyA9IHYyLm11bHRpcGx5KHYpO1xuICAgIHZhciB4MXYyID0geDEubXVsdGlwbHkodjIpO1xuICAgIHZhciB6dTIgPSB1LnNxdWFyZSgpLm11bHRpcGx5KHRoaXMueik7XG5cbiAgICAvLyB4MyA9IHYgKiAoejIgKiAoejEgKiB1XjIgLSAyICogeDEgKiB2XjIpIC0gdl4zKVxuICAgIHZhciB4MyA9IHp1Mi5zdWJ0cmFjdCh4MXYyLnNoaWZ0TGVmdCgxKSkubXVsdGlwbHkoYi56KS5zdWJ0cmFjdCh2MykubXVsdGlwbHkodikubW9kKHRoaXMuY3VydmUucSk7XG4gICAgLy8geTMgPSB6MiAqICgzICogeDEgKiB1ICogdl4yIC0geTEgKiB2XjMgLSB6MSAqIHVeMykgKyB1ICogdl4zXG4gICAgdmFyIHkzID0geDF2Mi5tdWx0aXBseShUSFJFRSkubXVsdGlwbHkodSkuc3VidHJhY3QoeTEubXVsdGlwbHkodjMpKS5zdWJ0cmFjdCh6dTIubXVsdGlwbHkodSkpLm11bHRpcGx5KGIueikuYWRkKHUubXVsdGlwbHkodjMpKS5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICAvLyB6MyA9IHZeMyAqIHoxICogejJcbiAgICB2YXIgejMgPSB2My5tdWx0aXBseSh0aGlzLnopLm11bHRpcGx5KGIueikubW9kKHRoaXMuY3VydmUucSk7XG5cbiAgICByZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLCB0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKHgzKSwgdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih5MyksIHozKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRGcFR3aWNlKCkge1xuICAgIGlmKHRoaXMuaXNJbmZpbml0eSgpKSByZXR1cm4gdGhpcztcbiAgICBpZih0aGlzLnkudG9CaWdJbnRlZ2VyKCkuc2lnbnVtKCkgPT0gMCkgcmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKTtcblxuICAgIC8vIFRPRE86IG9wdGltaXplZCBoYW5kbGluZyBvZiBjb25zdGFudHNcbiAgICB2YXIgVEhSRUUgPSBuZXcgQmlnSW50ZWdlcihcIjNcIik7XG4gICAgdmFyIHgxID0gdGhpcy54LnRvQmlnSW50ZWdlcigpO1xuICAgIHZhciB5MSA9IHRoaXMueS50b0JpZ0ludGVnZXIoKTtcblxuICAgIHZhciB5MXoxID0geTEubXVsdGlwbHkodGhpcy56KTtcbiAgICB2YXIgeTFzcXoxID0geTF6MS5tdWx0aXBseSh5MSkubW9kKHRoaXMuY3VydmUucSk7XG4gICAgdmFyIGEgPSB0aGlzLmN1cnZlLmEudG9CaWdJbnRlZ2VyKCk7XG5cbiAgICAvLyB3ID0gMyAqIHgxXjIgKyBhICogejFeMlxuICAgIHZhciB3ID0geDEuc3F1YXJlKCkubXVsdGlwbHkoVEhSRUUpO1xuICAgIGlmKCFCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKGEpKSB7XG4gICAgICB3ID0gdy5hZGQodGhpcy56LnNxdWFyZSgpLm11bHRpcGx5KGEpKTtcbiAgICB9XG4gICAgdyA9IHcubW9kKHRoaXMuY3VydmUucSk7XG4gICAgLy90aGlzLmN1cnZlLnJlZHVjZSh3KTtcbiAgICAvLyB4MyA9IDIgKiB5MSAqIHoxICogKHdeMiAtIDggKiB4MSAqIHkxXjIgKiB6MSlcbiAgICB2YXIgeDMgPSB3LnNxdWFyZSgpLnN1YnRyYWN0KHgxLnNoaWZ0TGVmdCgzKS5tdWx0aXBseSh5MXNxejEpKS5zaGlmdExlZnQoMSkubXVsdGlwbHkoeTF6MSkubW9kKHRoaXMuY3VydmUucSk7XG4gICAgLy8geTMgPSA0ICogeTFeMiAqIHoxICogKDMgKiB3ICogeDEgLSAyICogeTFeMiAqIHoxKSAtIHdeM1xuICAgIHZhciB5MyA9IHcubXVsdGlwbHkoVEhSRUUpLm11bHRpcGx5KHgxKS5zdWJ0cmFjdCh5MXNxejEuc2hpZnRMZWZ0KDEpKS5zaGlmdExlZnQoMikubXVsdGlwbHkoeTFzcXoxKS5zdWJ0cmFjdCh3LnNxdWFyZSgpLm11bHRpcGx5KHcpKS5tb2QodGhpcy5jdXJ2ZS5xKTtcbiAgICAvLyB6MyA9IDggKiAoeTEgKiB6MSleM1xuICAgIHZhciB6MyA9IHkxejEuc3F1YXJlKCkubXVsdGlwbHkoeTF6MSkuc2hpZnRMZWZ0KDMpLm1vZCh0aGlzLmN1cnZlLnEpO1xuXG4gICAgcmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcy5jdXJ2ZSwgdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih4MyksIHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoeTMpLCB6Myk7XG59XG5cbi8vIFNpbXBsZSBOQUYgKE5vbi1BZGphY2VudCBGb3JtKSBtdWx0aXBsaWNhdGlvbiBhbGdvcml0aG1cbi8vIFRPRE86IG1vZHVsYXJpemUgdGhlIG11bHRpcGxpY2F0aW9uIGFsZ29yaXRobVxuZnVuY3Rpb24gcG9pbnRGcE11bHRpcGx5KGspIHtcbiAgICBpZih0aGlzLmlzSW5maW5pdHkoKSkgcmV0dXJuIHRoaXM7XG4gICAgaWYoay5zaWdudW0oKSA9PSAwKSByZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpO1xuXG4gICAgdmFyIGUgPSBrO1xuICAgIHZhciBoID0gZS5tdWx0aXBseShuZXcgQmlnSW50ZWdlcihcIjNcIikpO1xuXG4gICAgdmFyIG5lZyA9IHRoaXMubmVnYXRlKCk7XG4gICAgdmFyIFIgPSB0aGlzO1xuXG4gICAgdmFyIGk7XG4gICAgZm9yKGkgPSBoLmJpdExlbmd0aCgpIC0gMjsgaSA+IDA7IC0taSkge1xuXHRSID0gUi50d2ljZSgpO1xuXG5cdHZhciBoQml0ID0gaC50ZXN0Qml0KGkpO1xuXHR2YXIgZUJpdCA9IGUudGVzdEJpdChpKTtcblxuXHRpZiAoaEJpdCAhPSBlQml0KSB7XG5cdCAgICBSID0gUi5hZGQoaEJpdCA/IHRoaXMgOiBuZWcpO1xuXHR9XG4gICAgfVxuXG4gICAgcmV0dXJuIFI7XG59XG5cbi8vIENvbXB1dGUgdGhpcypqICsgeCprIChzaW11bHRhbmVvdXMgbXVsdGlwbGljYXRpb24pXG5mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHlUd28oaix4LGspIHtcbiAgdmFyIGk7XG4gIGlmKGouYml0TGVuZ3RoKCkgPiBrLmJpdExlbmd0aCgpKVxuICAgIGkgPSBqLmJpdExlbmd0aCgpIC0gMTtcbiAgZWxzZVxuICAgIGkgPSBrLmJpdExlbmd0aCgpIC0gMTtcblxuICB2YXIgUiA9IHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKTtcbiAgdmFyIGJvdGggPSB0aGlzLmFkZCh4KTtcbiAgd2hpbGUoaSA+PSAwKSB7XG4gICAgUiA9IFIudHdpY2UoKTtcbiAgICBpZihqLnRlc3RCaXQoaSkpIHtcbiAgICAgIGlmKGsudGVzdEJpdChpKSkge1xuICAgICAgICBSID0gUi5hZGQoYm90aCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgUiA9IFIuYWRkKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmKGsudGVzdEJpdChpKSkge1xuICAgICAgICBSID0gUi5hZGQoeCk7XG4gICAgICB9XG4gICAgfVxuICAgIC0taTtcbiAgfVxuXG4gIHJldHVybiBSO1xufVxuXG5FQ1BvaW50RnAucHJvdG90eXBlLmdldFggPSBwb2ludEZwR2V0WDtcbkVDUG9pbnRGcC5wcm90b3R5cGUuZ2V0WSA9IHBvaW50RnBHZXRZO1xuRUNQb2ludEZwLnByb3RvdHlwZS5lcXVhbHMgPSBwb2ludEZwRXF1YWxzO1xuRUNQb2ludEZwLnByb3RvdHlwZS5pc0luZmluaXR5ID0gcG9pbnRGcElzSW5maW5pdHk7XG5FQ1BvaW50RnAucHJvdG90eXBlLm5lZ2F0ZSA9IHBvaW50RnBOZWdhdGU7XG5FQ1BvaW50RnAucHJvdG90eXBlLmFkZCA9IHBvaW50RnBBZGQ7XG5FQ1BvaW50RnAucHJvdG90eXBlLnR3aWNlID0gcG9pbnRGcFR3aWNlO1xuRUNQb2ludEZwLnByb3RvdHlwZS5tdWx0aXBseSA9IHBvaW50RnBNdWx0aXBseTtcbkVDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHlUd28gPSBwb2ludEZwTXVsdGlwbHlUd287XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS1cbi8vIEVDQ3VydmVGcFxuXG4vLyBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gRUNDdXJ2ZUZwKHEsYSxiKSB7XG4gICAgdGhpcy5xID0gcTtcbiAgICB0aGlzLmEgPSB0aGlzLmZyb21CaWdJbnRlZ2VyKGEpO1xuICAgIHRoaXMuYiA9IHRoaXMuZnJvbUJpZ0ludGVnZXIoYik7XG4gICAgdGhpcy5pbmZpbml0eSA9IG5ldyBFQ1BvaW50RnAodGhpcywgbnVsbCwgbnVsbCk7XG4gICAgdGhpcy5yZWR1Y2VyID0gbmV3IEJhcnJldHQodGhpcy5xKTtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEdldFEoKSB7XG4gICAgcmV0dXJuIHRoaXMucTtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEdldEEoKSB7XG4gICAgcmV0dXJuIHRoaXMuYTtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEdldEIoKSB7XG4gICAgcmV0dXJuIHRoaXMuYjtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEVxdWFscyhvdGhlcikge1xuICAgIGlmKG90aGVyID09IHRoaXMpIHJldHVybiB0cnVlO1xuICAgIHJldHVybih0aGlzLnEuZXF1YWxzKG90aGVyLnEpICYmIHRoaXMuYS5lcXVhbHMob3RoZXIuYSkgJiYgdGhpcy5iLmVxdWFscyhvdGhlci5iKSk7XG59XG5cbmZ1bmN0aW9uIGN1cnZlRnBHZXRJbmZpbml0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5pbmZpbml0eTtcbn1cblxuZnVuY3Rpb24gY3VydmVGcEZyb21CaWdJbnRlZ2VyKHgpIHtcbiAgICByZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLCB4KTtcbn1cblxuZnVuY3Rpb24gY3VydmVSZWR1Y2UoeCkge1xuICAgIHRoaXMucmVkdWNlci5yZWR1Y2UoeCk7XG59XG5cbi8vIGZvciBub3csIHdvcmsgd2l0aCBoZXggc3RyaW5ncyBiZWNhdXNlIHRoZXkncmUgZWFzaWVyIGluIEpTXG5mdW5jdGlvbiBjdXJ2ZUZwRGVjb2RlUG9pbnRIZXgocykge1xuICAgIHN3aXRjaChwYXJzZUludChzLnN1YnN0cigwLDIpLCAxNikpIHsgLy8gZmlyc3QgYnl0ZVxuICAgIGNhc2UgMDpcblx0cmV0dXJuIHRoaXMuaW5maW5pdHk7XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcblx0Ly8gcG9pbnQgY29tcHJlc3Npb24gbm90IHN1cHBvcnRlZCB5ZXRcblx0cmV0dXJuIG51bGw7XG4gICAgY2FzZSA0OlxuICAgIGNhc2UgNjpcbiAgICBjYXNlIDc6XG5cdHZhciBsZW4gPSAocy5sZW5ndGggLSAyKSAvIDI7XG5cdHZhciB4SGV4ID0gcy5zdWJzdHIoMiwgbGVuKTtcblx0dmFyIHlIZXggPSBzLnN1YnN0cihsZW4rMiwgbGVuKTtcblxuXHRyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLFxuXHRcdFx0ICAgICB0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHhIZXgsIDE2KSksXG5cdFx0XHQgICAgIHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoeUhleCwgMTYpKSk7XG5cbiAgICBkZWZhdWx0OiAvLyB1bnN1cHBvcnRlZFxuXHRyZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGN1cnZlRnBFbmNvZGVQb2ludEhleChwKSB7XG5cdGlmIChwLmlzSW5maW5pdHkoKSkgcmV0dXJuIFwiMDBcIjtcblx0dmFyIHhIZXggPSBwLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNik7XG5cdHZhciB5SGV4ID0gcC5nZXRZKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoMTYpO1xuXHR2YXIgb0xlbiA9IHRoaXMuZ2V0USgpLnRvU3RyaW5nKDE2KS5sZW5ndGg7XG5cdGlmICgob0xlbiAlIDIpICE9IDApIG9MZW4rKztcblx0d2hpbGUgKHhIZXgubGVuZ3RoIDwgb0xlbikge1xuXHRcdHhIZXggPSBcIjBcIiArIHhIZXg7XG5cdH1cblx0d2hpbGUgKHlIZXgubGVuZ3RoIDwgb0xlbikge1xuXHRcdHlIZXggPSBcIjBcIiArIHlIZXg7XG5cdH1cblx0cmV0dXJuIFwiMDRcIiArIHhIZXggKyB5SGV4O1xufVxuXG5FQ0N1cnZlRnAucHJvdG90eXBlLmdldFEgPSBjdXJ2ZUZwR2V0UTtcbkVDQ3VydmVGcC5wcm90b3R5cGUuZ2V0QSA9IGN1cnZlRnBHZXRBO1xuRUNDdXJ2ZUZwLnByb3RvdHlwZS5nZXRCID0gY3VydmVGcEdldEI7XG5FQ0N1cnZlRnAucHJvdG90eXBlLmVxdWFscyA9IGN1cnZlRnBFcXVhbHM7XG5FQ0N1cnZlRnAucHJvdG90eXBlLmdldEluZmluaXR5ID0gY3VydmVGcEdldEluZmluaXR5O1xuRUNDdXJ2ZUZwLnByb3RvdHlwZS5mcm9tQmlnSW50ZWdlciA9IGN1cnZlRnBGcm9tQmlnSW50ZWdlcjtcbkVDQ3VydmVGcC5wcm90b3R5cGUucmVkdWNlID0gY3VydmVSZWR1Y2U7XG4vL0VDQ3VydmVGcC5wcm90b3R5cGUuZGVjb2RlUG9pbnRIZXggPSBjdXJ2ZUZwRGVjb2RlUG9pbnRIZXg7XG5FQ0N1cnZlRnAucHJvdG90eXBlLmVuY29kZVBvaW50SGV4ID0gY3VydmVGcEVuY29kZVBvaW50SGV4O1xuXG4vLyBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20va2FpZWx2aW4vanNibi1lYy1wb2ludC1jb21wcmVzc2lvblxuRUNDdXJ2ZUZwLnByb3RvdHlwZS5kZWNvZGVQb2ludEhleCA9IGZ1bmN0aW9uKHMpXG57XG5cdHZhciB5SXNFdmVuO1xuICAgIHN3aXRjaChwYXJzZUludChzLnN1YnN0cigwLDIpLCAxNikpIHsgLy8gZmlyc3QgYnl0ZVxuICAgIGNhc2UgMDpcblx0cmV0dXJuIHRoaXMuaW5maW5pdHk7XG4gICAgY2FzZSAyOlxuXHR5SXNFdmVuID0gZmFsc2U7XG4gICAgY2FzZSAzOlxuXHRpZih5SXNFdmVuID09IHVuZGVmaW5lZCkgeUlzRXZlbiA9IHRydWU7XG5cdHZhciBsZW4gPSBzLmxlbmd0aCAtIDI7XG5cdHZhciB4SGV4ID0gcy5zdWJzdHIoMiwgbGVuKTtcblx0dmFyIHggPSB0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHhIZXgsMTYpKTtcblx0dmFyIGFscGhhID0geC5tdWx0aXBseSh4LnNxdWFyZSgpLmFkZCh0aGlzLmdldEEoKSkpLmFkZCh0aGlzLmdldEIoKSk7XG5cdHZhciBiZXRhID0gYWxwaGEuc3FydCgpO1xuXG4gICAgaWYgKGJldGEgPT0gbnVsbCkgdGhyb3cgXCJJbnZhbGlkIHBvaW50IGNvbXByZXNzaW9uXCI7XG5cbiAgICB2YXIgYmV0YVZhbHVlID0gYmV0YS50b0JpZ0ludGVnZXIoKTtcbiAgICBpZiAoYmV0YVZhbHVlLnRlc3RCaXQoMCkgIT0geUlzRXZlbilcbiAgICB7XG4gICAgICAgIC8vIFVzZSB0aGUgb3RoZXIgcm9vdFxuICAgICAgICBiZXRhID0gdGhpcy5mcm9tQmlnSW50ZWdlcih0aGlzLmdldFEoKS5zdWJ0cmFjdChiZXRhVmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcyx4LGJldGEpO1xuICAgIGNhc2UgNDpcbiAgICBjYXNlIDY6XG4gICAgY2FzZSA3OlxuXHR2YXIgbGVuID0gKHMubGVuZ3RoIC0gMikgLyAyO1xuXHR2YXIgeEhleCA9IHMuc3Vic3RyKDIsIGxlbik7XG5cdHZhciB5SGV4ID0gcy5zdWJzdHIobGVuKzIsIGxlbik7XG5cblx0cmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcyxcblx0XHRcdCAgICAgdGhpcy5mcm9tQmlnSW50ZWdlcihuZXcgQmlnSW50ZWdlcih4SGV4LCAxNikpLFxuXHRcdFx0ICAgICB0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHlIZXgsIDE2KSkpO1xuXG4gICAgZGVmYXVsdDogLy8gdW5zdXBwb3J0ZWRcblx0cmV0dXJuIG51bGw7XG4gICAgfVxufVxuRUNDdXJ2ZUZwLnByb3RvdHlwZS5lbmNvZGVDb21wcmVzc2VkUG9pbnRIZXggPSBmdW5jdGlvbihwKVxue1xuXHRpZiAocC5pc0luZmluaXR5KCkpIHJldHVybiBcIjAwXCI7XG5cdHZhciB4SGV4ID0gcC5nZXRYKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoMTYpO1xuXHR2YXIgb0xlbiA9IHRoaXMuZ2V0USgpLnRvU3RyaW5nKDE2KS5sZW5ndGg7XG5cdGlmICgob0xlbiAlIDIpICE9IDApIG9MZW4rKztcblx0d2hpbGUgKHhIZXgubGVuZ3RoIDwgb0xlbilcblx0XHR4SGV4ID0gXCIwXCIgKyB4SGV4O1xuXHR2YXIgeVByZWZpeDtcblx0aWYocC5nZXRZKCkudG9CaWdJbnRlZ2VyKCkuaXNFdmVuKCkpIHlQcmVmaXggPSBcIjAyXCI7XG5cdGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5UHJlZml4ID0gXCIwM1wiO1xuXG5cdHJldHVybiB5UHJlZml4ICsgeEhleDtcbn1cblxuXG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5nZXRSID0gZnVuY3Rpb24oKVxue1xuXHRpZih0aGlzLnIgIT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5yO1xuXG4gICAgdGhpcy5yID0gbnVsbDtcbiAgICB2YXIgYml0TGVuZ3RoID0gdGhpcy5xLmJpdExlbmd0aCgpO1xuICAgIGlmIChiaXRMZW5ndGggPiAxMjgpXG4gICAge1xuICAgICAgICB2YXIgZmlyc3RXb3JkID0gdGhpcy5xLnNoaWZ0UmlnaHQoYml0TGVuZ3RoIC0gNjQpO1xuICAgICAgICBpZiAoZmlyc3RXb3JkLmludFZhbHVlKCkgPT0gLTEpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuciA9IEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChiaXRMZW5ndGgpLnN1YnRyYWN0KHRoaXMucSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucjtcbn1cbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLm1vZE11bHQgPSBmdW5jdGlvbih4MSx4MilcbntcbiAgICByZXR1cm4gdGhpcy5tb2RSZWR1Y2UoeDEubXVsdGlwbHkoeDIpKTtcbn1cbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLm1vZFJlZHVjZSA9IGZ1bmN0aW9uKHgpXG57XG4gICAgaWYgKHRoaXMuZ2V0UigpICE9IG51bGwpXG4gICAge1xuICAgICAgICB2YXIgcUxlbiA9IHEuYml0TGVuZ3RoKCk7XG4gICAgICAgIHdoaWxlICh4LmJpdExlbmd0aCgpID4gKHFMZW4gKyAxKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHUgPSB4LnNoaWZ0UmlnaHQocUxlbik7XG4gICAgICAgICAgICB2YXIgdiA9IHguc3VidHJhY3QodS5zaGlmdExlZnQocUxlbikpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmdldFIoKS5lcXVhbHMoQmlnSW50ZWdlci5PTkUpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHUgPSB1Lm11bHRpcGx5KHRoaXMuZ2V0UigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHggPSB1LmFkZCh2KTsgXG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHguY29tcGFyZVRvKHEpID49IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHggPSB4LnN1YnRyYWN0KHEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIHggPSB4Lm1vZChxKTtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24oKVxue1xuICAgIGlmICghdGhpcy5xLnRlc3RCaXQoMCkpIHRocm93IFwidW5zdXBwb3J0ZWRcIjtcblxuICAgIC8vIHAgbW9kIDQgPT0gM1xuICAgIGlmICh0aGlzLnEudGVzdEJpdCgxKSlcbiAgICB7XG4gICAgXHR2YXIgeiA9IG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLngubW9kUG93KHRoaXMucS5zaGlmdFJpZ2h0KDIpLmFkZChCaWdJbnRlZ2VyLk9ORSksdGhpcy5xKSk7XG4gICAgXHRyZXR1cm4gei5zcXVhcmUoKS5lcXVhbHModGhpcykgPyB6IDogbnVsbDtcbiAgICB9XG5cbiAgICAvLyBwIG1vZCA0ID09IDFcbiAgICB2YXIgcU1pbnVzT25lID0gdGhpcy5xLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKTtcblxuICAgIHZhciBsZWdlbmRyZUV4cG9uZW50ID0gcU1pbnVzT25lLnNoaWZ0UmlnaHQoMSk7XG4gICAgaWYgKCEodGhpcy54Lm1vZFBvdyhsZWdlbmRyZUV4cG9uZW50LCB0aGlzLnEpLmVxdWFscyhCaWdJbnRlZ2VyLk9ORSkpKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHUgPSBxTWludXNPbmUuc2hpZnRSaWdodCgyKTtcbiAgICB2YXIgayA9IHUuc2hpZnRMZWZ0KDEpLmFkZChCaWdJbnRlZ2VyLk9ORSk7XG5cbiAgICB2YXIgUSA9IHRoaXMueDtcbiAgICB2YXIgZm91clEgPSBtb2REb3VibGUobW9kRG91YmxlKFEpKTtcblxuICAgIHZhciBVLCBWO1xuICAgIGRvXG4gICAge1xuICAgICAgICB2YXIgUDtcbiAgICAgICAgZG9cbiAgICAgICAge1xuICAgICAgICAgICAgUCA9IG5ldyBCaWdJbnRlZ2VyKHRoaXMucS5iaXRMZW5ndGgoKSwgbmV3IFNlY3VyZVJhbmRvbSgpKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoUC5jb21wYXJlVG8odGhpcy5xKSA+PSAwXG4gICAgICAgICAgICB8fCAhKFAubXVsdGlwbHkoUCkuc3VidHJhY3QoZm91clEpLm1vZFBvdyhsZWdlbmRyZUV4cG9uZW50LCB0aGlzLnEpLmVxdWFscyhxTWludXNPbmUpKSk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMubHVjYXNTZXF1ZW5jZShQLCBRLCBrKTtcbiAgICAgICAgVSA9IHJlc3VsdFswXTtcbiAgICAgICAgViA9IHJlc3VsdFsxXTtcblxuICAgICAgICBpZiAodGhpcy5tb2RNdWx0KFYsIFYpLmVxdWFscyhmb3VyUSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIEludGVnZXIgZGl2aXNpb24gYnkgMiwgbW9kIHFcbiAgICAgICAgICAgIGlmIChWLnRlc3RCaXQoMCkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgViA9IFYuYWRkKHEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBWID0gVi5zaGlmdFJpZ2h0KDEpO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAocSxWKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoVS5lcXVhbHMoQmlnSW50ZWdlci5PTkUpIHx8IFUuZXF1YWxzKHFNaW51c09uZSkpO1xuXG4gICAgcmV0dXJuIG51bGw7XG59XG5FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5sdWNhc1NlcXVlbmNlID0gZnVuY3Rpb24oUCxRLGspXG57XG4gICAgdmFyIG4gPSBrLmJpdExlbmd0aCgpO1xuICAgIHZhciBzID0gay5nZXRMb3dlc3RTZXRCaXQoKTtcblxuICAgIHZhciBVaCA9IEJpZ0ludGVnZXIuT05FO1xuICAgIHZhciBWbCA9IEJpZ0ludGVnZXIuVFdPO1xuICAgIHZhciBWaCA9IFA7XG4gICAgdmFyIFFsID0gQmlnSW50ZWdlci5PTkU7XG4gICAgdmFyIFFoID0gQmlnSW50ZWdlci5PTkU7XG5cbiAgICBmb3IgKHZhciBqID0gbiAtIDE7IGogPj0gcyArIDE7IC0tailcbiAgICB7XG4gICAgICAgIFFsID0gdGhpcy5tb2RNdWx0KFFsLCBRaCk7XG5cbiAgICAgICAgaWYgKGsudGVzdEJpdChqKSlcbiAgICAgICAge1xuICAgICAgICAgICAgUWggPSB0aGlzLm1vZE11bHQoUWwsIFEpO1xuICAgICAgICAgICAgVWggPSB0aGlzLm1vZE11bHQoVWgsIFZoKTtcbiAgICAgICAgICAgIFZsID0gdGhpcy5tb2RSZWR1Y2UoVmgubXVsdGlwbHkoVmwpLnN1YnRyYWN0KFAubXVsdGlwbHkoUWwpKSk7XG4gICAgICAgICAgICBWaCA9IHRoaXMubW9kUmVkdWNlKFZoLm11bHRpcGx5KFZoKS5zdWJ0cmFjdChRaC5zaGlmdExlZnQoMSkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIFFoID0gUWw7XG4gICAgICAgICAgICBVaCA9IHRoaXMubW9kUmVkdWNlKFVoLm11bHRpcGx5KFZsKS5zdWJ0cmFjdChRbCkpO1xuICAgICAgICAgICAgVmggPSB0aGlzLm1vZFJlZHVjZShWaC5tdWx0aXBseShWbCkuc3VidHJhY3QoUC5tdWx0aXBseShRbCkpKTtcbiAgICAgICAgICAgIFZsID0gdGhpcy5tb2RSZWR1Y2UoVmwubXVsdGlwbHkoVmwpLnN1YnRyYWN0KFFsLnNoaWZ0TGVmdCgxKSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgUWwgPSB0aGlzLm1vZE11bHQoUWwsIFFoKTtcbiAgICBRaCA9IHRoaXMubW9kTXVsdChRbCwgUSk7XG4gICAgVWggPSB0aGlzLm1vZFJlZHVjZShVaC5tdWx0aXBseShWbCkuc3VidHJhY3QoUWwpKTtcbiAgICBWbCA9IHRoaXMubW9kUmVkdWNlKFZoLm11bHRpcGx5KFZsKS5zdWJ0cmFjdChQLm11bHRpcGx5KFFsKSkpO1xuICAgIFFsID0gdGhpcy5tb2RNdWx0KFFsLCBRaCk7XG5cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSBzOyArK2opXG4gICAge1xuICAgICAgICBVaCA9IHRoaXMubW9kTXVsdChVaCwgVmwpO1xuICAgICAgICBWbCA9IHRoaXMubW9kUmVkdWNlKFZsLm11bHRpcGx5KFZsKS5zdWJ0cmFjdChRbC5zaGlmdExlZnQoMSkpKTtcbiAgICAgICAgUWwgPSB0aGlzLm1vZE11bHQoUWwsIFFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gWyBVaCwgVmwgXTtcbn1cblxudmFyIGV4cG9ydHMgPSB7XG4gIEVDQ3VydmVGcDogRUNDdXJ2ZUZwLFxuICBFQ1BvaW50RnA6IEVDUG9pbnRGcCxcbiAgRUNGaWVsZEVsZW1lbnRGcDogRUNGaWVsZEVsZW1lbnRGcFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNcbiJdLCJuYW1lcyI6WyJCaWdJbnRlZ2VyIiwicmVxdWlyZSIsIkJhcnJldHQiLCJwcm90b3R5cGUiLCJFQ0ZpZWxkRWxlbWVudEZwIiwicSIsIngiLCJmZUZwRXF1YWxzIiwib3RoZXIiLCJlcXVhbHMiLCJmZUZwVG9CaWdJbnRlZ2VyIiwiZmVGcE5lZ2F0ZSIsIm5lZ2F0ZSIsIm1vZCIsImZlRnBBZGQiLCJiIiwiYWRkIiwidG9CaWdJbnRlZ2VyIiwiZmVGcFN1YnRyYWN0Iiwic3VidHJhY3QiLCJmZUZwTXVsdGlwbHkiLCJtdWx0aXBseSIsImZlRnBTcXVhcmUiLCJzcXVhcmUiLCJmZUZwRGl2aWRlIiwibW9kSW52ZXJzZSIsImRpdmlkZSIsIkVDUG9pbnRGcCIsImN1cnZlIiwieSIsInoiLCJPTkUiLCJ6aW52IiwicG9pbnRGcEdldFgiLCJyIiwicmVkdWNlIiwiZnJvbUJpZ0ludGVnZXIiLCJwb2ludEZwR2V0WSIsInBvaW50RnBFcXVhbHMiLCJpc0luZmluaXR5IiwidSIsInYiLCJaRVJPIiwicG9pbnRGcElzSW5maW5pdHkiLCJwb2ludEZwTmVnYXRlIiwicG9pbnRGcEFkZCIsInR3aWNlIiwiZ2V0SW5maW5pdHkiLCJUSFJFRSIsIngxIiwieTEiLCJ4MiIsInkyIiwidjIiLCJ2MyIsIngxdjIiLCJ6dTIiLCJ4MyIsInNoaWZ0TGVmdCIsInkzIiwiejMiLCJwb2ludEZwVHdpY2UiLCJzaWdudW0iLCJ5MXoxIiwieTFzcXoxIiwiYSIsInciLCJwb2ludEZwTXVsdGlwbHkiLCJrIiwiZSIsImgiLCJuZWciLCJSIiwiaSIsImJpdExlbmd0aCIsImhCaXQiLCJ0ZXN0Qml0IiwiZUJpdCIsInBvaW50RnBNdWx0aXBseVR3byIsImoiLCJib3RoIiwiZ2V0WCIsImdldFkiLCJtdWx0aXBseVR3byIsIkVDQ3VydmVGcCIsImluZmluaXR5IiwicmVkdWNlciIsImN1cnZlRnBHZXRRIiwiY3VydmVGcEdldEEiLCJjdXJ2ZUZwR2V0QiIsImN1cnZlRnBFcXVhbHMiLCJjdXJ2ZUZwR2V0SW5maW5pdHkiLCJjdXJ2ZUZwRnJvbUJpZ0ludGVnZXIiLCJjdXJ2ZVJlZHVjZSIsImN1cnZlRnBEZWNvZGVQb2ludEhleCIsInMiLCJwYXJzZUludCIsInN1YnN0ciIsImxlbiIsImxlbmd0aCIsInhIZXgiLCJ5SGV4IiwiY3VydmVGcEVuY29kZVBvaW50SGV4IiwicCIsInRvU3RyaW5nIiwib0xlbiIsImdldFEiLCJnZXRBIiwiZ2V0QiIsImVuY29kZVBvaW50SGV4IiwiZGVjb2RlUG9pbnRIZXgiLCJ5SXNFdmVuIiwidW5kZWZpbmVkIiwiYWxwaGEiLCJiZXRhIiwic3FydCIsImJldGFWYWx1ZSIsImVuY29kZUNvbXByZXNzZWRQb2ludEhleCIsInlQcmVmaXgiLCJpc0V2ZW4iLCJnZXRSIiwiZmlyc3RXb3JkIiwic2hpZnRSaWdodCIsImludFZhbHVlIiwibW9kTXVsdCIsIm1vZFJlZHVjZSIsInFMZW4iLCJjb21wYXJlVG8iLCJtb2RQb3ciLCJxTWludXNPbmUiLCJsZWdlbmRyZUV4cG9uZW50IiwiUSIsImZvdXJRIiwibW9kRG91YmxlIiwiVSIsIlYiLCJQIiwiU2VjdXJlUmFuZG9tIiwicmVzdWx0IiwibHVjYXNTZXF1ZW5jZSIsIm4iLCJnZXRMb3dlc3RTZXRCaXQiLCJVaCIsIlZsIiwiVFdPIiwiVmgiLCJRbCIsIlFoIiwiZXhwb3J0cyIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ecc-jsbn/lib/ec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ecc-jsbn/lib/sec.js":
/*!******************************************!*\
  !*** ./node_modules/ecc-jsbn/lib/sec.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Named EC curves\n// Requires ec.js, jsbn.js, and jsbn2.js\n\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(ssr)/./node_modules/jsbn/index.js\").BigInteger);\nvar ECCurveFp = (__webpack_require__(/*! ./ec.js */ \"(ssr)/./node_modules/ecc-jsbn/lib/ec.js\").ECCurveFp);\n// ----------------\n// X9ECParameters\n// constructor\nfunction X9ECParameters(curve, g, n, h) {\n    this.curve = curve;\n    this.g = g;\n    this.n = n;\n    this.h = h;\n}\nfunction x9getCurve() {\n    return this.curve;\n}\nfunction x9getG() {\n    return this.g;\n}\nfunction x9getN() {\n    return this.n;\n}\nfunction x9getH() {\n    return this.h;\n}\nX9ECParameters.prototype.getCurve = x9getCurve;\nX9ECParameters.prototype.getG = x9getG;\nX9ECParameters.prototype.getN = x9getN;\nX9ECParameters.prototype.getH = x9getH;\n// ----------------\n// SECNamedCurves\nfunction fromHex(s) {\n    return new BigInteger(s, 16);\n}\nfunction secp128r1() {\n    // p = 2^128 - 2^97 - 1\n    var p = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"E87579C11079F43DD824993C2CEE5ED3\");\n    //byte[] S = Hex.decode(\"000E0D4D696E6768756151750CC03A4473D03679\");\n    var n = fromHex(\"FFFFFFFE0000000075A30D1B9038A115\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"161FF7528B899B2D0C28607CA52C5B86\" + \"CF5AC8395BAFEB13C02DA292DDED7A83\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp160k1() {\n    // p = 2^160 - 2^32 - 2^14 - 2^12 - 2^9 - 2^8 - 2^7 - 2^3 - 2^2 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"7\");\n    //byte[] S = null;\n    var n = fromHex(\"0100000000000000000001B8FA16DFAB9ACA16B6B3\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\" + \"938CF935318FDCED6BC28286531733C3F03C4FEE\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp160r1() {\n    // p = 2^160 - 2^31 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\");\n    var b = fromHex(\"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\");\n    //byte[] S = Hex.decode(\"1053CDE42C14D696E67687561517533BF3F83345\");\n    var n = fromHex(\"0100000000000000000001F4C8F927AED3CA752257\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"4A96B5688EF573284664698968C38BB913CBFC82\" + \"23A628553168947D59DCC912042351377AC5FB32\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp192k1() {\n    // p = 2^192 - 2^32 - 2^12 - 2^8 - 2^7 - 2^6 - 2^3 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"3\");\n    //byte[] S = null;\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\" + \"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp192r1() {\n    // p = 2^192 - 2^64 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\");\n    //byte[] S = Hex.decode(\"3045AE6FC8422F64ED579528D38120EAE12196D5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\" + \"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp224r1() {\n    // p = 2^224 - 2^96 + 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\");\n    var b = fromHex(\"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\");\n    //byte[] S = Hex.decode(\"BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\" + \"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp256r1() {\n    // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1\n    var p = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\");\n    //byte[] S = Hex.decode(\"C49D360886E704936A6678E1139D26B7819F7E90\");\n    var n = fromHex(\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\" + \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\");\n    return new X9ECParameters(curve, G, n, h);\n}\n// TODO: make this into a proper hashtable\nfunction getSECCurveByName(name) {\n    if (name == \"secp128r1\") return secp128r1();\n    if (name == \"secp160k1\") return secp160k1();\n    if (name == \"secp160r1\") return secp160r1();\n    if (name == \"secp192k1\") return secp192k1();\n    if (name == \"secp192r1\") return secp192r1();\n    if (name == \"secp224r1\") return secp224r1();\n    if (name == \"secp256r1\") return secp256r1();\n    return null;\n}\nmodule.exports = {\n    \"secp128r1\": secp128r1,\n    \"secp160k1\": secp160k1,\n    \"secp160r1\": secp160r1,\n    \"secp192k1\": secp192k1,\n    \"secp192r1\": secp192r1,\n    \"secp224r1\": secp224r1,\n    \"secp256r1\": secp256r1\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWNjLWpzYm4vbGliL3NlYy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0I7QUFFbEIsd0NBQXdDOztBQUN4QyxJQUFJQSxhQUFhQyxrRkFBMEI7QUFDM0MsSUFBSUMsWUFBWUQseUZBQTRCO0FBRzVDLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFFakIsY0FBYztBQUNkLFNBQVNFLGVBQWVDLEtBQUssRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUM7SUFDL0IsSUFBSSxDQUFDSCxLQUFLLEdBQUdBO0lBQ2IsSUFBSSxDQUFDQyxDQUFDLEdBQUdBO0lBQ1QsSUFBSSxDQUFDQyxDQUFDLEdBQUdBO0lBQ1QsSUFBSSxDQUFDQyxDQUFDLEdBQUdBO0FBQ2I7QUFFQSxTQUFTQztJQUNMLE9BQU8sSUFBSSxDQUFDSixLQUFLO0FBQ3JCO0FBRUEsU0FBU0s7SUFDTCxPQUFPLElBQUksQ0FBQ0osQ0FBQztBQUNqQjtBQUVBLFNBQVNLO0lBQ0wsT0FBTyxJQUFJLENBQUNKLENBQUM7QUFDakI7QUFFQSxTQUFTSztJQUNMLE9BQU8sSUFBSSxDQUFDSixDQUFDO0FBQ2pCO0FBRUFKLGVBQWVTLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHTDtBQUNwQ0wsZUFBZVMsU0FBUyxDQUFDRSxJQUFJLEdBQUdMO0FBQ2hDTixlQUFlUyxTQUFTLENBQUNHLElBQUksR0FBR0w7QUFDaENQLGVBQWVTLFNBQVMsQ0FBQ0ksSUFBSSxHQUFHTDtBQUVoQyxtQkFBbUI7QUFDbkIsaUJBQWlCO0FBRWpCLFNBQVNNLFFBQVFDLENBQUM7SUFBSSxPQUFPLElBQUlsQixXQUFXa0IsR0FBRztBQUFLO0FBRXBELFNBQVNDO0lBQ0wsdUJBQXVCO0lBQ3ZCLElBQUlDLElBQUlILFFBQVE7SUFDaEIsSUFBSUksSUFBSUosUUFBUTtJQUNoQixJQUFJSyxJQUFJTCxRQUFRO0lBQ2hCLG9FQUFvRTtJQUNwRSxJQUFJWCxJQUFJVyxRQUFRO0lBQ2hCLElBQUlWLElBQUlQLFdB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SVAsV0FBV3VCLEdBQUc7SUFDdEIsSUFBSW5CLFFBQVEsSUFBSUYsVUFBVWtCLEdBQUdDLEdBQUdDO0lBQ2hDLElBQUlFLElBQUlwQixNQUFNcUIsY0FBYyxDQUFDLE9BQ2YscUVBQ2Q7SUFDQSxPQUFPLElBQUl0QixlQUFlQyxPQUFPb0IsR0FBR2xCLEdBQUdDO0FBQzNDO0FBRUEsMENBQTBDO0FBQzFDLFNBQVMwQixrQkFBa0JDLElBQUk7SUFDM0IsSUFBR0EsUUFBUSxhQUFhLE9BQU9mO0lBQy9CLElBQUdlLFFBQVEsYUFBYSxPQUFPUjtJQUMvQixJQUFHUSxRQUFRLGFBQWEsT0FBT047SUFDL0IsSUFBR00sUUFBUSxhQUFhLE9BQU9MO0lBQy9CLElBQUdLLFFBQVEsYUFBYSxPQUFPSjtJQUMvQixJQUFHSSxRQUFRLGFBQWEsT0FBT0g7SUFDL0IsSUFBR0csUUFBUSxhQUFhLE9BQU9GO0lBQy9CLE9BQU87QUFDWDtBQUVBRyxPQUFPQyxPQUFPLEdBQUc7SUFDZixhQUFZakI7SUFDWixhQUFZTztJQUNaLGFBQVlFO0lBQ1osYUFBWUM7SUFDWixhQUFZQztJQUNaLGFBQVlDO0lBQ1osYUFBWUM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL2VjYy1qc2JuL2xpYi9zZWMuanM/NWNkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOYW1lZCBFQyBjdXJ2ZXNcblxuLy8gUmVxdWlyZXMgZWMuanMsIGpzYm4uanMsIGFuZCBqc2JuMi5qc1xudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdqc2JuJykuQmlnSW50ZWdlclxudmFyIEVDQ3VydmVGcCA9IHJlcXVpcmUoJy4vZWMuanMnKS5FQ0N1cnZlRnBcblxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tXG4vLyBYOUVDUGFyYW1ldGVyc1xuXG4vLyBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gWDlFQ1BhcmFtZXRlcnMoY3VydmUsZyxuLGgpIHtcbiAgICB0aGlzLmN1cnZlID0gY3VydmU7XG4gICAgdGhpcy5nID0gZztcbiAgICB0aGlzLm4gPSBuO1xuICAgIHRoaXMuaCA9IGg7XG59XG5cbmZ1bmN0aW9uIHg5Z2V0Q3VydmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VydmU7XG59XG5cbmZ1bmN0aW9uIHg5Z2V0RygpIHtcbiAgICByZXR1cm4gdGhpcy5nO1xufVxuXG5mdW5jdGlvbiB4OWdldE4oKSB7XG4gICAgcmV0dXJuIHRoaXMubjtcbn1cblxuZnVuY3Rpb24geDlnZXRIKCkge1xuICAgIHJldHVybiB0aGlzLmg7XG59XG5cblg5RUNQYXJhbWV0ZXJzLnByb3RvdHlwZS5nZXRDdXJ2ZSA9IHg5Z2V0Q3VydmU7XG5YOUVDUGFyYW1ldGVycy5wcm90b3R5cGUuZ2V0RyA9IHg5Z2V0Rztcblg5RUNQYXJhbWV0ZXJzLnByb3RvdHlwZS5nZXROID0geDlnZXROO1xuWDlFQ1BhcmFtZXRlcnMucHJvdG90eXBlLmdldEggPSB4OWdldEg7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS1cbi8vIFNFQ05hbWVkQ3VydmVzXG5cbmZ1bmN0aW9uIGZyb21IZXgocykgeyByZXR1cm4gbmV3IEJpZ0ludGVnZXIocywgMTYpOyB9XG5cbmZ1bmN0aW9uIHNlY3AxMjhyMSgpIHtcbiAgICAvLyBwID0gMl4xMjggLSAyXjk3IC0gMVxuICAgIHZhciBwID0gZnJvbUhleChcIkZGRkZGRkZERkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGXCIpO1xuICAgIHZhciBhID0gZnJvbUhleChcIkZGRkZGRkZERkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIpO1xuICAgIHZhciBiID0gZnJvbUhleChcIkU4NzU3OUMxMTA3OUY0M0REODI0OTkzQzJDRUU1RUQzXCIpO1xuICAgIC8vYnl0ZVtdIFMgPSBIZXguZGVjb2RlKFwiMDAwRTBENEQ2OTZFNjc2ODc1NjE1MTc1MENDMDNBNDQ3M0QwMzY3OVwiKTtcbiAgICB2YXIgbiA9IGZyb21IZXgoXCJGRkZGRkZGRTAwMDAwMDAwNzVBMzBEMUI5MDM4QTExNVwiKTtcbiAgICB2YXIgaCA9IEJpZ0ludGVnZXIuT05FO1xuICAgIHZhciBjdXJ2ZSA9IG5ldyBFQ0N1cnZlRnAocCwgYSwgYik7XG4gICAgdmFyIEcgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChcIjA0XCJcbiAgICAgICAgICAgICAgICArIFwiMTYxRkY3NTI4Qjg5OUIyRDBDMjg2MDdDQTUyQzVCODZcIlxuXHRcdCsgXCJDRjVBQzgzOTVCQUZFQjEzQzAyREEyOTJEREVEN0E4M1wiKTtcbiAgICByZXR1cm4gbmV3IFg5RUNQYXJhbWV0ZXJzKGN1cnZlLCBHLCBuLCBoKTtcbn1cblxuZnVuY3Rpb24gc2VjcDE2MGsxKCkge1xuICAgIC8vIHAgPSAyXjE2MCAtIDJeMzIgLSAyXjE0IC0gMl4xMiAtIDJeOSAtIDJeOCAtIDJeNyAtIDJeMyAtIDJeMiAtIDFcbiAgICB2YXIgcCA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZBQzczXCIpO1xuICAgIHZhciBhID0gQmlnSW50ZWdlci5aRVJPO1xuICAgIHZhciBiID0gZnJvbUhleChcIjdcIik7XG4gICAgLy9ieXRlW10gUyA9IG51bGw7XG4gICAgdmFyIG4gPSBmcm9tSGV4KFwiMDEwMDAwMDAwMDAwMDAwMDAwMDAwMUI4RkExNkRGQUI5QUNBMTZCNkIzXCIpO1xuICAgIHZhciBoID0gQmlnSW50ZWdlci5PTkU7XG4gICAgdmFyIGN1cnZlID0gbmV3IEVDQ3VydmVGcChwLCBhLCBiKTtcbiAgICB2YXIgRyA9IGN1cnZlLmRlY29kZVBvaW50SGV4KFwiMDRcIlxuICAgICAgICAgICAgICAgICsgXCIzQjRDMzgyQ0UzN0FBMTkyQTQwMTlFNzYzMDM2RjRGNURENEQ3RUJCXCJcbiAgICAgICAgICAgICAgICArIFwiOTM4Q0Y5MzUzMThGRENFRDZCQzI4Mjg2NTMxNzMzQzNGMDNDNEZFRVwiKTtcbiAgICByZXR1cm4gbmV3IFg5RUNQYXJhbWV0ZXJzKGN1cnZlLCBHLCBuLCBoKTtcbn1cblxuZnVuY3Rpb24gc2VjcDE2MHIxKCkge1xuICAgIC8vIHAgPSAyXjE2MCAtIDJeMzEgLSAxXG4gICAgdmFyIHAgPSBmcm9tSGV4KFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY3RkZGRkZGRlwiKTtcbiAgICB2YXIgYSA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjdGRkZGRkZDXCIpO1xuICAgIHZhciBiID0gZnJvbUhleChcIjFDOTdCRUZDNTRCRDdBOEI2NUFDRjg5RjgxRDRENEFEQzU2NUZBNDVcIik7XG4gICAgLy9ieXRlW10gUyA9IEhleC5kZWNvZGUoXCIxMDUzQ0RFNDJDMTRENjk2RTY3Njg3NTYxNTE3NTMzQkYzRjgzMzQ1XCIpO1xuICAgIHZhciBuID0gZnJvbUhleChcIjAxMDAwMDAwMDAwMDAwMDAwMDAwMDFGNEM4RjkyN0FFRDNDQTc1MjI1N1wiKTtcbiAgICB2YXIgaCA9IEJpZ0ludGVnZXIuT05FO1xuICAgIHZhciBjdXJ2ZSA9IG5ldyBFQ0N1cnZlRnAocCwgYSwgYik7XG4gICAgdmFyIEcgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChcIjA0XCJcblx0XHQrIFwiNEE5NkI1Njg4RUY1NzMyODQ2NjQ2OTg5NjhDMzhCQjkxM0NCRkM4MlwiXG5cdFx0KyBcIjIzQTYyODU1MzE2ODk0N0Q1OURDQzkxMjA0MjM1MTM3N0FDNUZCMzJcIik7XG4gICAgcmV0dXJuIG5ldyBYOUVDUGFyYW1ldGVycyhjdXJ2ZSwgRywgbiwgaCk7XG59XG5cbmZ1bmN0aW9uIHNlY3AxOTJrMSgpIHtcbiAgICAvLyBwID0gMl4xOTIgLSAyXjMyIC0gMl4xMiAtIDJeOCAtIDJeNyAtIDJeNiAtIDJeMyAtIDFcbiAgICB2YXIgcCA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkVFMzdcIik7XG4gICAgdmFyIGEgPSBCaWdJbnRlZ2VyLlpFUk87XG4gICAgdmFyIGIgPSBmcm9tSGV4KFwiM1wiKTtcbiAgICAvL2J5dGVbXSBTID0gbnVsbDtcbiAgICB2YXIgbiA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkUyNkYyRkMxNzBGNjk0NjZBNzRERUZEOERcIik7XG4gICAgdmFyIGggPSBCaWdJbnRlZ2VyLk9ORTtcbiAgICB2YXIgY3VydmUgPSBuZXcgRUNDdXJ2ZUZwKHAsIGEsIGIpO1xuICAgIHZhciBHID0gY3VydmUuZGVjb2RlUG9pbnRIZXgoXCIwNFwiXG4gICAgICAgICAgICAgICAgKyBcIkRCNEZGMTBFQzA1N0U5QUUyNkIwN0QwMjgwQjdGNDM0MURBNUQxQjFFQUUwNkM3RFwiXG4gICAgICAgICAgICAgICAgKyBcIjlCMkYyRjZEOUM1NjI4QTc4NDQxNjNEMDE1QkU4NjM0NDA4MkFBODhEOTVFMkY5RFwiKTtcbiAgICByZXR1cm4gbmV3IFg5RUNQYXJhbWV0ZXJzKGN1cnZlLCBHLCBuLCBoKTtcbn1cblxuZnVuY3Rpb24gc2VjcDE5MnIxKCkge1xuICAgIC8vIHAgPSAyXjE5MiAtIDJeNjQgLSAxXG4gICAgdmFyIHAgPSBmcm9tSGV4KFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZGXCIpO1xuICAgIHZhciBhID0gZnJvbUhleChcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkZGRkZGRkZGQ1wiKTtcbiAgICB2YXIgYiA9IGZyb21IZXgoXCI2NDIxMDUxOUU1OUM4MEU3MEZBN0U5QUI3MjI0MzA0OUZFQjhERUVDQzE0NkI5QjFcIik7XG4gICAgLy9ieXRlW10gUyA9IEhleC5kZWNvZGUoXCIzMDQ1QUU2RkM4NDIyRjY0RUQ1Nzk1MjhEMzgxMjBFQUUxMjE5NkQ1XCIpO1xuICAgIHZhciBuID0gZnJvbUhleChcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjk5REVGODM2MTQ2QkM5QjFCNEQyMjgzMVwiKTtcbiAgICB2YXIgaCA9IEJpZ0ludGVnZXIuT05FO1xuICAgIHZhciBjdXJ2ZSA9IG5ldyBFQ0N1cnZlRnAocCwgYSwgYik7XG4gICAgdmFyIEcgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChcIjA0XCJcbiAgICAgICAgICAgICAgICArIFwiMTg4REE4MEVCMDMwOTBGNjdDQkYyMEVCNDNBMTg4MDBGNEZGMEFGRDgyRkYxMDEyXCJcbiAgICAgICAgICAgICAgICArIFwiMDcxOTJCOTVGRkM4REE3ODYzMTAxMUVENkIyNENERDU3M0Y5NzdBMTFFNzk0ODExXCIpO1xuICAgIHJldHVybiBuZXcgWDlFQ1BhcmFtZXRlcnMoY3VydmUsIEcsIG4sIGgpO1xufVxuXG5mdW5jdGlvbiBzZWNwMjI0cjEoKSB7XG4gICAgLy8gcCA9IDJeMjI0IC0gMl45NiArIDFcbiAgICB2YXIgcCA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMVwiKTtcbiAgICB2YXIgYSA9IGZyb21IZXgoXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRVwiKTtcbiAgICB2YXIgYiA9IGZyb21IZXgoXCJCNDA1MEE4NTBDMDRCM0FCRjU0MTMyNTY1MDQ0QjBCN0Q3QkZEOEJBMjcwQjM5NDMyMzU1RkZCNFwiKTtcbiAgICAvL2J5dGVbXSBTID0gSGV4LmRlY29kZShcIkJENzEzNDQ3OTlENUM3RkNEQzQ1QjU5RkEzQjlBQjhGNkE5NDhCQzVcIik7XG4gICAgdmFyIG4gPSBmcm9tSGV4KFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjE2QTJFMEI4RjAzRTEzREQyOTQ1NUM1QzJBM0RcIik7XG4gICAgdmFyIGggPSBCaWdJbnRlZ2VyLk9ORTtcbiAgICB2YXIgY3VydmUgPSBuZXcgRUNDdXJ2ZUZwKHAsIGEsIGIpO1xuICAgIHZhciBHID0gY3VydmUuZGVjb2RlUG9pbnRIZXgoXCIwNFwiXG4gICAgICAgICAgICAgICAgKyBcIkI3MEUwQ0JENkJCNEJGN0YzMjEzOTBCOTRBMDNDMUQzNTZDMjExMjIzNDMyODBENjExNUMxRDIxXCJcbiAgICAgICAgICAgICAgICArIFwiQkQzNzYzODhCNUY3MjNGQjRDMjJERkU2Q0Q0Mzc1QTA1QTA3NDc2NDQ0RDU4MTk5ODUwMDdFMzRcIik7XG4gICAgcmV0dXJuIG5ldyBYOUVDUGFyYW1ldGVycyhjdXJ2ZSwgRywgbiwgaCk7XG59XG5cbmZ1bmN0aW9uIHNlY3AyNTZyMSgpIHtcbiAgICAvLyBwID0gMl4yMjQgKDJeMzIgLSAxKSArIDJeMTkyICsgMl45NiAtIDFcbiAgICB2YXIgcCA9IGZyb21IZXgoXCJGRkZGRkZGRjAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGXCIpO1xuICAgIHZhciBhID0gZnJvbUhleChcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIik7XG4gICAgdmFyIGIgPSBmcm9tSGV4KFwiNUFDNjM1RDhBQTNBOTNFN0IzRUJCRDU1NzY5ODg2QkM2NTFEMDZCMENDNTNCMEY2M0JDRTNDM0UyN0QyNjA0QlwiKTtcbiAgICAvL2J5dGVbXSBTID0gSGV4LmRlY29kZShcIkM0OUQzNjA4ODZFNzA0OTM2QTY2NzhFMTEzOUQyNkI3ODE5RjdFOTBcIik7XG4gICAgdmFyIG4gPSBmcm9tSGV4KFwiRkZGRkZGRkYwMDAwMDAwMEZGRkZGRkZGRkZGRkZGRkZCQ0U2RkFBREE3MTc5RTg0RjNCOUNBQzJGQzYzMjU1MVwiKTtcbiAgICB2YXIgaCA9IEJpZ0ludGVnZXIuT05FO1xuICAgIHZhciBjdXJ2ZSA9IG5ldyBFQ0N1cnZlRnAocCwgYSwgYik7XG4gICAgdmFyIEcgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChcIjA0XCJcbiAgICAgICAgICAgICAgICArIFwiNkIxN0QxRjJFMTJDNDI0N0Y4QkNFNkU1NjNBNDQwRjI3NzAzN0Q4MTJERUIzM0EwRjRBMTM5NDVEODk4QzI5NlwiXG5cdFx0KyBcIjRGRTM0MkUyRkUxQTdGOUI4RUU3RUI0QTdDMEY5RTE2MkJDRTMzNTc2QjMxNUVDRUNCQjY0MDY4MzdCRjUxRjVcIik7XG4gICAgcmV0dXJuIG5ldyBYOUVDUGFyYW1ldGVycyhjdXJ2ZSwgRywgbiwgaCk7XG59XG5cbi8vIFRPRE86IG1ha2UgdGhpcyBpbnRvIGEgcHJvcGVyIGhhc2h0YWJsZVxuZnVuY3Rpb24gZ2V0U0VDQ3VydmVCeU5hbWUobmFtZSkge1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMTI4cjFcIikgcmV0dXJuIHNlY3AxMjhyMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMTYwazFcIikgcmV0dXJuIHNlY3AxNjBrMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMTYwcjFcIikgcmV0dXJuIHNlY3AxNjByMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMTkyazFcIikgcmV0dXJuIHNlY3AxOTJrMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMTkycjFcIikgcmV0dXJuIHNlY3AxOTJyMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMjI0cjFcIikgcmV0dXJuIHNlY3AyMjRyMSgpO1xuICAgIGlmKG5hbWUgPT0gXCJzZWNwMjU2cjFcIikgcmV0dXJuIHNlY3AyNTZyMSgpO1xuICAgIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJzZWNwMTI4cjFcIjpzZWNwMTI4cjEsXG4gIFwic2VjcDE2MGsxXCI6c2VjcDE2MGsxLFxuICBcInNlY3AxNjByMVwiOnNlY3AxNjByMSxcbiAgXCJzZWNwMTkyazFcIjpzZWNwMTkyazEsXG4gIFwic2VjcDE5MnIxXCI6c2VjcDE5MnIxLFxuICBcInNlY3AyMjRyMVwiOnNlY3AyMjRyMSxcbiAgXCJzZWNwMjU2cjFcIjpzZWNwMjU2cjFcbn1cbiJdLCJuYW1lcyI6WyJCaWdJbnRlZ2VyIiwicmVxdWlyZSIsIkVDQ3VydmVGcCIsIlg5RUNQYXJhbWV0ZXJzIiwiY3VydmUiLCJnIiwibiIsImgiLCJ4OWdldEN1cnZlIiwieDlnZXRHIiwieDlnZXROIiwieDlnZXRIIiwicHJvdG90eXBlIiwiZ2V0Q3VydmUiLCJnZXRHIiwiZ2V0TiIsImdldEgiLCJmcm9tSGV4IiwicyIsInNlY3AxMjhyMSIsInAiLCJhIiwiYiIsIk9ORSIsIkciLCJkZWNvZGVQb2ludEhleCIsInNlY3AxNjBrMSIsIlpFUk8iLCJzZWNwMTYwcjEiLCJzZWNwMTkyazEiLCJzZWNwMTkycjEiLCJzZWNwMjI0cjEiLCJzZWNwMjU2cjEiLCJnZXRTRUNDdXJ2ZUJ5TmFtZSIsIm5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ecc-jsbn/lib/sec.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ecc-jsbn/index.js":
/*!****************************************!*\
  !*** ./node_modules/ecc-jsbn/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nvar ECPointFp = (__webpack_require__(/*! ./lib/ec.js */ \"(rsc)/./node_modules/ecc-jsbn/lib/ec.js\").ECPointFp);\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nexports.ECCurves = __webpack_require__(/*! ./lib/sec.js */ \"(rsc)/./node_modules/ecc-jsbn/lib/sec.js\");\n// zero prepad\nfunction unstupid(hex, len) {\n    return hex.length >= len ? hex : unstupid(\"0\" + hex, len);\n}\nexports.ECKey = function(curve, key, isPublic) {\n    var priv;\n    var c = curve();\n    var n = c.getN();\n    var bytes = Math.floor(n.bitLength() / 8);\n    if (key) {\n        if (isPublic) {\n            var curve = c.getCurve();\n            //      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format\n            //      var y = key.slice(bytes+1);\n            //      this.P = new ECPointFp(curve,\n            //        curve.fromBigInteger(new BigInteger(x.toString(\"hex\"), 16)),\n            //        curve.fromBigInteger(new BigInteger(y.toString(\"hex\"), 16)));      \n            this.P = curve.decodePointHex(key.toString(\"hex\"));\n        } else {\n            if (key.length != bytes) return false;\n            priv = new BigInteger(key.toString(\"hex\"), 16);\n        }\n    } else {\n        var n1 = n.subtract(BigInteger.ONE);\n        var r = new BigInteger(crypto.randomBytes(n.bitLength()));\n        priv = r.mod(n1).add(BigInteger.ONE);\n        this.P = c.getG().multiply(priv);\n    }\n    if (this.P) {\n        //  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);\n        //  this.PublicKey = Buffer.from(\"04\"+pubhex,\"hex\");\n        this.PublicKey = Buffer.from(c.getCurve().encodeCompressedPointHex(this.P), \"hex\");\n    }\n    if (priv) {\n        this.PrivateKey = Buffer.from(unstupid(priv.toString(16), bytes * 2), \"hex\");\n        this.deriveSharedSecret = function(key) {\n            if (!key || !key.P) return false;\n            var S = key.P.multiply(priv);\n            return Buffer.from(unstupid(S.getX().toBigInteger().toString(16), bytes * 2), \"hex\");\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZWNjLWpzYm4vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDN0IsSUFBSUMsYUFBYUQsa0ZBQTBCO0FBQzNDLElBQUlFLFlBQVlGLDZGQUFnQztBQUNoRCxJQUFJRyxTQUFTSCw4RkFBOEI7QUFDM0NJLHNHQUEwQztBQUUxQyxjQUFjO0FBQ2QsU0FBU0UsU0FBU0MsR0FBRyxFQUFDQyxHQUFHO0lBRXhCLE9BQU8sSUFBS0MsTUFBTSxJQUFJRCxNQUFPRCxNQUFNRCxTQUFTLE1BQUlDLEtBQUlDO0FBQ3JEO0FBRUFKLGFBQWEsR0FBRyxTQUFTTyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsUUFBUTtJQUUzQyxJQUFJQztJQUNMLElBQUlDLElBQUlKO0lBQ1IsSUFBSUssSUFBSUQsRUFBRUUsSUFBSTtJQUNiLElBQUlDLFFBQVFDLEtBQUtDLEtBQUssQ0FBQ0osRUFBRUssU0FBUyxLQUFHO0lBRXJDLElBQUdULEtBQ0g7UUFDRSxJQUFHQyxVQUNIO1lBQ0UsSUFBSUYsUUFBUUksRUFBRU8sUUFBUTtZQUM1Qiw0RUFBNEU7WUFDNUUsbUNBQW1DO1lBQ25DLHFDQUFxQztZQUNyQyxzRUFBc0U7WUFDdEUsNkVBQTZFO1lBQ3ZFLElBQUksQ0FBQ0MsQ0FBQyxHQUFHWixNQUFNYSxjQUFjLENBQUNaLElBQUlhLFFBQVEsQ0FBQztRQUM3QyxPQUFLO1lBQ0gsSUFBR2IsSUFBSUgsTUFBTSxJQUFJUyxPQUFPLE9BQU87WUFDL0JKLE9BQU8sSUFBSWIsV0FBV1csSUFBSWEsUUFBUSxDQUFDLFFBQVE7UUFDN0M7SUFDRixPQUFLO1FBQ0gsSUFBSUMsS0FBS1YsRUFBRVcsUUFBUSxDQUFDMUIsV0FBVzJCLEdBQUc7UUFDbEMsSUFBSUMsSUFBSSxJQUFJNUIsV0FBV0YsT0FBTytCLFdBQVcsQ0FBQ2QsRUFBRUssU0FBUztRQUNyRFAsT0FBT2UsRUFBRUUsR0FBRyxDQUFDTCxJQUFJTSxHQUFHLENBQUMvQixXQUFXMkIsR0FBRztRQUNuQyxJQUFJLENBQUNMLENBQUMsR0FBR1IsRUFBRWtCLElBQUksR0FBR0MsUUFBUSxDQUFDcEI7SUFDN0I7SUFDQSxJQUFHLElBQUksQ0FBQ1MsQ0FBQyxFQUNUO1FBQ0YseUlBQXlJO1FBQ3pJLG9EQUFvRDtRQUNoRCxJQUFJLENBQUNZLFNBQVMsR0FBR2hDLE9BQU9pQyxJQUFJLENBQUNyQixFQUFFTyxRQUFRLEdBQUdlLHdCQUF3QixDQUFDLElBQUksQ0FBQ2QsQ0FBQyxHQUFFO0lBQzdFO0lBQ0EsSUFBR1QsTUFDSDtRQUNFLElBQUksQ0FBQ3dCLFVBQVUsR0FBR25DLE9BQU9pQyxJQUFJLENBQUM5QixTQUFTUSxLQUFLVyxRQUFRLENBQUMsS0FBSVAsUUFBTSxJQUFHO1FBQ2xFLElBQUksQ0FBQ3FCLGtCQUFrQixHQUFHLFNBQVMzQixHQUFHO1lBRXBDLElBQUcsQ0FBQ0EsT0FBTyxDQUFDQSxJQUFJVyxDQUFDLEVBQUUsT0FBTztZQUMxQixJQUFJaUIsSUFBSTVCLElBQUlXLENBQUMsQ0FBQ1csUUFBUSxDQUFDcEI7WUFDdkIsT0FBT1gsT0FBT2lDLElBQUksQ0FBQzlCLFNBQVNrQyxFQUFFQyxJQUFJLEdBQUdDLFlBQVksR0FBR2pCLFFBQVEsQ0FBQyxLQUFJUCxRQUFNLElBQUc7UUFDN0U7SUFDRDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvZWNjLWpzYm4vaW5kZXguanM/N2RiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZShcImpzYm5cIikuQmlnSW50ZWdlcjtcbnZhciBFQ1BvaW50RnAgPSByZXF1aXJlKFwiLi9saWIvZWMuanNcIikuRUNQb2ludEZwO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoXCJzYWZlci1idWZmZXJcIikuQnVmZmVyO1xuZXhwb3J0cy5FQ0N1cnZlcyA9IHJlcXVpcmUoXCIuL2xpYi9zZWMuanNcIik7XG5cbi8vIHplcm8gcHJlcGFkXG5mdW5jdGlvbiB1bnN0dXBpZChoZXgsbGVuKVxue1xuXHRyZXR1cm4gKGhleC5sZW5ndGggPj0gbGVuKSA/IGhleCA6IHVuc3R1cGlkKFwiMFwiK2hleCxsZW4pO1xufVxuXG5leHBvcnRzLkVDS2V5ID0gZnVuY3Rpb24oY3VydmUsIGtleSwgaXNQdWJsaWMpXG57XG4gIHZhciBwcml2O1xuXHR2YXIgYyA9IGN1cnZlKCk7XG5cdHZhciBuID0gYy5nZXROKCk7XG4gIHZhciBieXRlcyA9IE1hdGguZmxvb3Iobi5iaXRMZW5ndGgoKS84KTtcblxuICBpZihrZXkpXG4gIHtcbiAgICBpZihpc1B1YmxpYylcbiAgICB7XG4gICAgICB2YXIgY3VydmUgPSBjLmdldEN1cnZlKCk7XG4vLyAgICAgIHZhciB4ID0ga2V5LnNsaWNlKDEsYnl0ZXMrMSk7IC8vIHNraXAgdGhlIDA0IGZvciB1bmNvbXByZXNzZWQgZm9ybWF0XG4vLyAgICAgIHZhciB5ID0ga2V5LnNsaWNlKGJ5dGVzKzEpO1xuLy8gICAgICB0aGlzLlAgPSBuZXcgRUNQb2ludEZwKGN1cnZlLFxuLy8gICAgICAgIGN1cnZlLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHgudG9TdHJpbmcoXCJoZXhcIiksIDE2KSksXG4vLyAgICAgICAgY3VydmUuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoeS50b1N0cmluZyhcImhleFwiKSwgMTYpKSk7ICAgICAgXG4gICAgICB0aGlzLlAgPSBjdXJ2ZS5kZWNvZGVQb2ludEhleChrZXkudG9TdHJpbmcoXCJoZXhcIikpO1xuICAgIH1lbHNle1xuICAgICAgaWYoa2V5Lmxlbmd0aCAhPSBieXRlcykgcmV0dXJuIGZhbHNlO1xuICAgICAgcHJpdiA9IG5ldyBCaWdJbnRlZ2VyKGtleS50b1N0cmluZyhcImhleFwiKSwgMTYpOyAgICAgIFxuICAgIH1cbiAgfWVsc2V7XG4gICAgdmFyIG4xID0gbi5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7XG4gICAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcihjcnlwdG8ucmFuZG9tQnl0ZXMobi5iaXRMZW5ndGgoKSkpO1xuICAgIHByaXYgPSByLm1vZChuMSkuYWRkKEJpZ0ludGVnZXIuT05FKTtcbiAgICB0aGlzLlAgPSBjLmdldEcoKS5tdWx0aXBseShwcml2KTtcbiAgfVxuICBpZih0aGlzLlApXG4gIHtcbi8vICB2YXIgcHViaGV4ID0gdW5zdHVwaWQodGhpcy5QLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMikrdW5zdHVwaWQodGhpcy5QLmdldFkoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMik7XG4vLyAgdGhpcy5QdWJsaWNLZXkgPSBCdWZmZXIuZnJvbShcIjA0XCIrcHViaGV4LFwiaGV4XCIpO1xuICAgIHRoaXMuUHVibGljS2V5ID0gQnVmZmVyLmZyb20oYy5nZXRDdXJ2ZSgpLmVuY29kZUNvbXByZXNzZWRQb2ludEhleCh0aGlzLlApLFwiaGV4XCIpO1xuICB9XG4gIGlmKHByaXYpXG4gIHtcbiAgICB0aGlzLlByaXZhdGVLZXkgPSBCdWZmZXIuZnJvbSh1bnN0dXBpZChwcml2LnRvU3RyaW5nKDE2KSxieXRlcyoyKSxcImhleFwiKTtcbiAgICB0aGlzLmRlcml2ZVNoYXJlZFNlY3JldCA9IGZ1bmN0aW9uKGtleSlcbiAgICB7XG4gICAgICBpZigha2V5IHx8ICFrZXkuUCkgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIFMgPSBrZXkuUC5tdWx0aXBseShwcml2KTtcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh1bnN0dXBpZChTLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygxNiksYnl0ZXMqMiksXCJoZXhcIik7XG4gICB9ICAgICBcbiAgfVxufVxuXG4iXSwibmFtZXMiOlsiY3J5cHRvIiwicmVxdWlyZSIsIkJpZ0ludGVnZXIiLCJFQ1BvaW50RnAiLCJCdWZmZXIiLCJleHBvcnRzIiwiRUNDdXJ2ZXMiLCJ1bnN0dXBpZCIsImhleCIsImxlbiIsImxlbmd0aCIsIkVDS2V5IiwiY3VydmUiLCJrZXkiLCJpc1B1YmxpYyIsInByaXYiLCJjIiwibiIsImdldE4iLCJieXRlcyIsIk1hdGgiLCJmbG9vciIsImJpdExlbmd0aCIsImdldEN1cnZlIiwiUCIsImRlY29kZVBvaW50SGV4IiwidG9TdHJpbmciLCJuMSIsInN1YnRyYWN0IiwiT05FIiwiciIsInJhbmRvbUJ5dGVzIiwibW9kIiwiYWRkIiwiZ2V0RyIsIm11bHRpcGx5IiwiUHVibGljS2V5IiwiZnJvbSIsImVuY29kZUNvbXByZXNzZWRQb2ludEhleCIsIlByaXZhdGVLZXkiLCJkZXJpdmVTaGFyZWRTZWNyZXQiLCJTIiwiZ2V0WCIsInRvQmlnSW50ZWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ecc-jsbn/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ecc-jsbn/lib/ec.js":
/*!*****************************************!*\
  !*** ./node_modules/ecc-jsbn/lib/ec.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n// Requires jsbn.js and jsbn2.js\n\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nvar Barrett = BigInteger.prototype.Barrett;\n// ----------------\n// ECFieldElementFp\n// constructor\nfunction ECFieldElementFp(q1, x) {\n    this.x = x;\n    // TODO if(x.compareTo(q) >= 0) error\n    this.q = q1;\n}\nfunction feFpEquals(other) {\n    if (other == this) return true;\n    return this.q.equals(other.q) && this.x.equals(other.x);\n}\nfunction feFpToBigInteger() {\n    return this.x;\n}\nfunction feFpNegate() {\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\nfunction feFpAdd(b) {\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSubtract(b) {\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\nfunction feFpMultiply(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSquare() {\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\nfunction feFpDivide(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n// ----------------\n// ECPointFp\n// constructor\nfunction ECPointFp(curve, x, y, z) {\n    this.curve = curve;\n    this.x = x;\n    this.y = y;\n    // Projective coordinates: either zinv == null or z * zinv == 1\n    // z and zinv are just BigIntegers, not fieldElements\n    if (z == null) {\n        this.z = BigInteger.ONE;\n    } else {\n        this.z = z;\n    }\n    this.zinv = null;\n//TODO: compression flag\n}\nfunction pointFpGetX() {\n    if (this.zinv == null) {\n        this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.x.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\nfunction pointFpGetY() {\n    if (this.zinv == null) {\n        this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.y.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\nfunction pointFpEquals(other) {\n    if (other == this) return true;\n    if (this.isInfinity()) return other.isInfinity();\n    if (other.isInfinity()) return this.isInfinity();\n    var u, v;\n    // u = Y2 * Z1 - Y1 * Z2\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    if (!u.equals(BigInteger.ZERO)) return false;\n    // v = X2 * Z1 - X1 * Z2\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    return v.equals(BigInteger.ZERO);\n}\nfunction pointFpIsInfinity() {\n    if (this.x == null && this.y == null) return true;\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\nfunction pointFpNegate() {\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\nfunction pointFpAdd(b) {\n    if (this.isInfinity()) return b;\n    if (b.isInfinity()) return this;\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    // v = X2 * Z1 - X1 * Z2\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    if (BigInteger.ZERO.equals(v)) {\n        if (BigInteger.ZERO.equals(u)) {\n            return this.twice(); // this == b, so double\n        }\n        return this.curve.getInfinity(); // this = -b, so infinity\n    }\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var x2 = b.x.toBigInteger();\n    var y2 = b.y.toBigInteger();\n    var v2 = v.square();\n    var v3 = v2.multiply(v);\n    var x1v2 = x1.multiply(v2);\n    var zu2 = u.square().multiply(this.z);\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n    // z3 = v^3 * z1 * z2\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\nfunction pointFpTwice() {\n    if (this.isInfinity()) return this;\n    if (this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n    // TODO: optimized handling of constants\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var y1z1 = y1.multiply(this.z);\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n    var a = this.curve.a.toBigInteger();\n    // w = 3 * x1^2 + a * z1^2\n    var w = x1.square().multiply(THREE);\n    if (!BigInteger.ZERO.equals(a)) {\n        w = w.add(this.z.square().multiply(a));\n    }\n    w = w.mod(this.curve.q);\n    //this.curve.reduce(w);\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n    // z3 = 8 * (y1 * z1)^3\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n    if (this.isInfinity()) return this;\n    if (k.signum() == 0) return this.curve.getInfinity();\n    var e = k;\n    var h = e.multiply(new BigInteger(\"3\"));\n    var neg = this.negate();\n    var R = this;\n    var i;\n    for(i = h.bitLength() - 2; i > 0; --i){\n        R = R.twice();\n        var hBit = h.testBit(i);\n        var eBit = e.testBit(i);\n        if (hBit != eBit) {\n            R = R.add(hBit ? this : neg);\n        }\n    }\n    return R;\n}\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j, x, k) {\n    var i;\n    if (j.bitLength() > k.bitLength()) i = j.bitLength() - 1;\n    else i = k.bitLength() - 1;\n    var R = this.curve.getInfinity();\n    var both = this.add(x);\n    while(i >= 0){\n        R = R.twice();\n        if (j.testBit(i)) {\n            if (k.testBit(i)) {\n                R = R.add(both);\n            } else {\n                R = R.add(this);\n            }\n        } else {\n            if (k.testBit(i)) {\n                R = R.add(x);\n            }\n        }\n        --i;\n    }\n    return R;\n}\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n// ----------------\n// ECCurveFp\n// constructor\nfunction ECCurveFp(q1, a, b) {\n    this.q = q1;\n    this.a = this.fromBigInteger(a);\n    this.b = this.fromBigInteger(b);\n    this.infinity = new ECPointFp(this, null, null);\n    this.reducer = new Barrett(this.q);\n}\nfunction curveFpGetQ() {\n    return this.q;\n}\nfunction curveFpGetA() {\n    return this.a;\n}\nfunction curveFpGetB() {\n    return this.b;\n}\nfunction curveFpEquals(other) {\n    if (other == this) return true;\n    return this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b);\n}\nfunction curveFpGetInfinity() {\n    return this.infinity;\n}\nfunction curveFpFromBigInteger(x) {\n    return new ECFieldElementFp(this.q, x);\n}\nfunction curveReduce(x) {\n    this.reducer.reduce(x);\n}\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n    switch(parseInt(s.substr(0, 2), 16)){\n        case 0:\n            return this.infinity;\n        case 2:\n        case 3:\n            // point compression not supported yet\n            return null;\n        case 4:\n        case 6:\n        case 7:\n            var len = (s.length - 2) / 2;\n            var xHex = s.substr(2, len);\n            var yHex = s.substr(len + 2, len);\n            return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n        default:\n            return null;\n    }\n}\nfunction curveFpEncodePointHex(p) {\n    if (p.isInfinity()) return \"00\";\n    var xHex = p.getX().toBigInteger().toString(16);\n    var yHex = p.getY().toBigInteger().toString(16);\n    var oLen = this.getQ().toString(16).length;\n    if (oLen % 2 != 0) oLen++;\n    while(xHex.length < oLen){\n        xHex = \"0\" + xHex;\n    }\n    while(yHex.length < oLen){\n        yHex = \"0\" + yHex;\n    }\n    return \"04\" + xHex + yHex;\n}\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function(s) {\n    var yIsEven;\n    switch(parseInt(s.substr(0, 2), 16)){\n        case 0:\n            return this.infinity;\n        case 2:\n            yIsEven = false;\n        case 3:\n            if (yIsEven == undefined) yIsEven = true;\n            var len = s.length - 2;\n            var xHex = s.substr(2, len);\n            var x = this.fromBigInteger(new BigInteger(xHex, 16));\n            var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n            var beta = alpha.sqrt();\n            if (beta == null) throw \"Invalid point compression\";\n            var betaValue = beta.toBigInteger();\n            if (betaValue.testBit(0) != yIsEven) {\n                // Use the other root\n                beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n            }\n            return new ECPointFp(this, x, beta);\n        case 4:\n        case 6:\n        case 7:\n            var len = (s.length - 2) / 2;\n            var xHex = s.substr(2, len);\n            var yHex = s.substr(len + 2, len);\n            return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n        default:\n            return null;\n    }\n};\nECCurveFp.prototype.encodeCompressedPointHex = function(p) {\n    if (p.isInfinity()) return \"00\";\n    var xHex = p.getX().toBigInteger().toString(16);\n    var oLen = this.getQ().toString(16).length;\n    if (oLen % 2 != 0) oLen++;\n    while(xHex.length < oLen)xHex = \"0\" + xHex;\n    var yPrefix;\n    if (p.getY().toBigInteger().isEven()) yPrefix = \"02\";\n    else yPrefix = \"03\";\n    return yPrefix + xHex;\n};\nECFieldElementFp.prototype.getR = function() {\n    if (this.r != undefined) return this.r;\n    this.r = null;\n    var bitLength = this.q.bitLength();\n    if (bitLength > 128) {\n        var firstWord = this.q.shiftRight(bitLength - 64);\n        if (firstWord.intValue() == -1) {\n            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n        }\n    }\n    return this.r;\n};\nECFieldElementFp.prototype.modMult = function(x1, x2) {\n    return this.modReduce(x1.multiply(x2));\n};\nECFieldElementFp.prototype.modReduce = function(x) {\n    if (this.getR() != null) {\n        var qLen = q.bitLength();\n        while(x.bitLength() > qLen + 1){\n            var u = x.shiftRight(qLen);\n            var v = x.subtract(u.shiftLeft(qLen));\n            if (!this.getR().equals(BigInteger.ONE)) {\n                u = u.multiply(this.getR());\n            }\n            x = u.add(v);\n        }\n        while(x.compareTo(q) >= 0){\n            x = x.subtract(q);\n        }\n    } else {\n        x = x.mod(q);\n    }\n    return x;\n};\nECFieldElementFp.prototype.sqrt = function() {\n    if (!this.q.testBit(0)) throw \"unsupported\";\n    // p mod 4 == 3\n    if (this.q.testBit(1)) {\n        var z = new ECFieldElementFp(this.q, this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE), this.q));\n        return z.square().equals(this) ? z : null;\n    }\n    // p mod 4 == 1\n    var qMinusOne = this.q.subtract(BigInteger.ONE);\n    var legendreExponent = qMinusOne.shiftRight(1);\n    if (!this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)) {\n        return null;\n    }\n    var u = qMinusOne.shiftRight(2);\n    var k = u.shiftLeft(1).add(BigInteger.ONE);\n    var Q = this.x;\n    var fourQ = modDouble(modDouble(Q));\n    var U, V;\n    do {\n        var P;\n        do {\n            P = new BigInteger(this.q.bitLength(), new SecureRandom());\n        }while (P.compareTo(this.q) >= 0 || !P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne));\n        var result = this.lucasSequence(P, Q, k);\n        U = result[0];\n        V = result[1];\n        if (this.modMult(V, V).equals(fourQ)) {\n            // Integer division by 2, mod q\n            if (V.testBit(0)) {\n                V = V.add(q);\n            }\n            V = V.shiftRight(1);\n            return new ECFieldElementFp(q, V);\n        }\n    }while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n    return null;\n};\nECFieldElementFp.prototype.lucasSequence = function(P, Q, k) {\n    var n = k.bitLength();\n    var s = k.getLowestSetBit();\n    var Uh = BigInteger.ONE;\n    var Vl = BigInteger.TWO;\n    var Vh = P;\n    var Ql = BigInteger.ONE;\n    var Qh = BigInteger.ONE;\n    for(var j = n - 1; j >= s + 1; --j){\n        Ql = this.modMult(Ql, Qh);\n        if (k.testBit(j)) {\n            Qh = this.modMult(Ql, Q);\n            Uh = this.modMult(Uh, Vh);\n            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n        } else {\n            Qh = Ql;\n            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        }\n    }\n    Ql = this.modMult(Ql, Qh);\n    Qh = this.modMult(Ql, Q);\n    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n    Ql = this.modMult(Ql, Qh);\n    for(var j = 1; j <= s; ++j){\n        Uh = this.modMult(Uh, Vl);\n        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        Ql = this.modMult(Ql, Ql);\n    }\n    return [\n        Uh,\n        Vl\n    ];\n};\nvar exports = {\n    ECCurveFp: ECCurveFp,\n    ECPointFp: ECPointFp,\n    ECFieldElementFp: ECFieldElementFp\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ecc-jsbn/lib/ec.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ecc-jsbn/lib/sec.js":
/*!******************************************!*\
  !*** ./node_modules/ecc-jsbn/lib/sec.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Named EC curves\n// Requires ec.js, jsbn.js, and jsbn2.js\n\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nvar ECCurveFp = (__webpack_require__(/*! ./ec.js */ \"(rsc)/./node_modules/ecc-jsbn/lib/ec.js\").ECCurveFp);\n// ----------------\n// X9ECParameters\n// constructor\nfunction X9ECParameters(curve, g, n, h) {\n    this.curve = curve;\n    this.g = g;\n    this.n = n;\n    this.h = h;\n}\nfunction x9getCurve() {\n    return this.curve;\n}\nfunction x9getG() {\n    return this.g;\n}\nfunction x9getN() {\n    return this.n;\n}\nfunction x9getH() {\n    return this.h;\n}\nX9ECParameters.prototype.getCurve = x9getCurve;\nX9ECParameters.prototype.getG = x9getG;\nX9ECParameters.prototype.getN = x9getN;\nX9ECParameters.prototype.getH = x9getH;\n// ----------------\n// SECNamedCurves\nfunction fromHex(s) {\n    return new BigInteger(s, 16);\n}\nfunction secp128r1() {\n    // p = 2^128 - 2^97 - 1\n    var p = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"E87579C11079F43DD824993C2CEE5ED3\");\n    //byte[] S = Hex.decode(\"000E0D4D696E6768756151750CC03A4473D03679\");\n    var n = fromHex(\"FFFFFFFE0000000075A30D1B9038A115\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"161FF7528B899B2D0C28607CA52C5B86\" + \"CF5AC8395BAFEB13C02DA292DDED7A83\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp160k1() {\n    // p = 2^160 - 2^32 - 2^14 - 2^12 - 2^9 - 2^8 - 2^7 - 2^3 - 2^2 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"7\");\n    //byte[] S = null;\n    var n = fromHex(\"0100000000000000000001B8FA16DFAB9ACA16B6B3\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\" + \"938CF935318FDCED6BC28286531733C3F03C4FEE\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp160r1() {\n    // p = 2^160 - 2^31 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\");\n    var b = fromHex(\"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\");\n    //byte[] S = Hex.decode(\"1053CDE42C14D696E67687561517533BF3F83345\");\n    var n = fromHex(\"0100000000000000000001F4C8F927AED3CA752257\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"4A96B5688EF573284664698968C38BB913CBFC82\" + \"23A628553168947D59DCC912042351377AC5FB32\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp192k1() {\n    // p = 2^192 - 2^32 - 2^12 - 2^8 - 2^7 - 2^6 - 2^3 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"3\");\n    //byte[] S = null;\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\" + \"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp192r1() {\n    // p = 2^192 - 2^64 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\");\n    //byte[] S = Hex.decode(\"3045AE6FC8422F64ED579528D38120EAE12196D5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\" + \"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp224r1() {\n    // p = 2^224 - 2^96 + 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\");\n    var b = fromHex(\"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\");\n    //byte[] S = Hex.decode(\"BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\" + \"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp256r1() {\n    // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1\n    var p = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\");\n    //byte[] S = Hex.decode(\"C49D360886E704936A6678E1139D26B7819F7E90\");\n    var n = fromHex(\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\" + \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\");\n    return new X9ECParameters(curve, G, n, h);\n}\n// TODO: make this into a proper hashtable\nfunction getSECCurveByName(name) {\n    if (name == \"secp128r1\") return secp128r1();\n    if (name == \"secp160k1\") return secp160k1();\n    if (name == \"secp160r1\") return secp160r1();\n    if (name == \"secp192k1\") return secp192k1();\n    if (name == \"secp192r1\") return secp192r1();\n    if (name == \"secp224r1\") return secp224r1();\n    if (name == \"secp256r1\") return secp256r1();\n    return null;\n}\nmodule.exports = {\n    \"secp128r1\": secp128r1,\n    \"secp160k1\": secp160k1,\n    \"secp160r1\": secp160r1,\n    \"secp192k1\": secp192k1,\n    \"secp192r1\": secp192r1,\n    \"secp224r1\": secp224r1,\n    \"secp256r1\": secp256r1\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ecc-jsbn/lib/sec.js\n");

/***/ })

};
;