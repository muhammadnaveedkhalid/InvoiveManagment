/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsprim";
exports.ids = ["vendor-chunks/jsprim"];
exports.modules = {

/***/ "(ssr)/./node_modules/jsprim/lib/jsprim.js":
/*!*******************************************!*\
  !*** ./node_modules/jsprim/lib/jsprim.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*\n * lib/jsprim.js: utilities for primitive JavaScript types\n */ var mod_assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar mod_util = __webpack_require__(/*! util */ \"util\");\nvar mod_extsprintf = __webpack_require__(/*! extsprintf */ \"(ssr)/./node_modules/extsprintf/lib/extsprintf.js\");\nvar mod_verror = __webpack_require__(/*! verror */ \"(ssr)/./node_modules/verror/lib/verror.js\");\nvar mod_jsonschema = __webpack_require__(/*! json-schema */ \"(ssr)/./node_modules/json-schema/lib/validate.js\");\n/*\n * Public interface\n */ exports.deepCopy = deepCopy;\nexports.deepEqual = deepEqual;\nexports.isEmpty = isEmpty;\nexports.hasKey = hasKey;\nexports.forEachKey = forEachKey;\nexports.pluck = pluck;\nexports.flattenObject = flattenObject;\nexports.flattenIter = flattenIter;\nexports.validateJsonObject = validateJsonObjectJS;\nexports.validateJsonObjectJS = validateJsonObjectJS;\nexports.randElt = randElt;\nexports.extraProperties = extraProperties;\nexports.mergeObjects = mergeObjects;\nexports.startsWith = startsWith;\nexports.endsWith = endsWith;\nexports.parseInteger = parseInteger;\nexports.iso8601 = iso8601;\nexports.rfc1123 = rfc1123;\nexports.parseDateTime = parseDateTime;\nexports.hrtimediff = hrtimeDiff;\nexports.hrtimeDiff = hrtimeDiff;\nexports.hrtimeAccum = hrtimeAccum;\nexports.hrtimeAdd = hrtimeAdd;\nexports.hrtimeNanosec = hrtimeNanosec;\nexports.hrtimeMicrosec = hrtimeMicrosec;\nexports.hrtimeMillisec = hrtimeMillisec;\n/*\n * Deep copy an acyclic *basic* Javascript object.  This only handles basic\n * scalars (strings, numbers, booleans) and arbitrarily deep arrays and objects\n * containing these.  This does *not* handle instances of other classes.\n */ function deepCopy(obj) {\n    var ret, key;\n    var marker = \"__deepCopy\";\n    if (obj && obj[marker]) throw new Error(\"attempted deep copy of cyclic object\");\n    if (obj && obj.constructor == Object) {\n        ret = {};\n        obj[marker] = true;\n        for(key in obj){\n            if (key == marker) continue;\n            ret[key] = deepCopy(obj[key]);\n        }\n        delete obj[marker];\n        return ret;\n    }\n    if (obj && obj.constructor == Array) {\n        ret = [];\n        obj[marker] = true;\n        for(key = 0; key < obj.length; key++)ret.push(deepCopy(obj[key]));\n        delete obj[marker];\n        return ret;\n    }\n    /*\n\t * It must be a primitive type -- just return it.\n\t */ return obj;\n}\nfunction deepEqual(obj1, obj2) {\n    if (typeof obj1 != typeof obj2) return false;\n    if (obj1 === null || obj2 === null || typeof obj1 != \"object\") return obj1 === obj2;\n    if (obj1.constructor != obj2.constructor) return false;\n    var k;\n    for(k in obj1){\n        if (!obj2.hasOwnProperty(k)) return false;\n        if (!deepEqual(obj1[k], obj2[k])) return false;\n    }\n    for(k in obj2){\n        if (!obj1.hasOwnProperty(k)) return false;\n    }\n    return true;\n}\nfunction isEmpty(obj) {\n    var key;\n    for(key in obj)return false;\n    return true;\n}\nfunction hasKey(obj, key) {\n    mod_assert.equal(typeof key, \"string\");\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction forEachKey(obj, callback) {\n    for(var key in obj){\n        if (hasKey(obj, key)) {\n            callback(key, obj[key]);\n        }\n    }\n}\nfunction pluck(obj, key) {\n    mod_assert.equal(typeof key, \"string\");\n    return pluckv(obj, key);\n}\nfunction pluckv(obj, key) {\n    if (obj === null || typeof obj !== \"object\") return undefined;\n    if (obj.hasOwnProperty(key)) return obj[key];\n    var i = key.indexOf(\".\");\n    if (i == -1) return undefined;\n    var key1 = key.substr(0, i);\n    if (!obj.hasOwnProperty(key1)) return undefined;\n    return pluckv(obj[key1], key.substr(i + 1));\n}\n/*\n * Invoke callback(row) for each entry in the array that would be returned by\n * flattenObject(data, depth).  This is just like flattenObject(data,\n * depth).forEach(callback), except that the intermediate array is never\n * created.\n */ function flattenIter(data, depth, callback) {\n    doFlattenIter(data, depth, [], callback);\n}\nfunction doFlattenIter(data, depth, accum, callback) {\n    var each;\n    var key;\n    if (depth === 0) {\n        each = accum.slice(0);\n        each.push(data);\n        callback(each);\n        return;\n    }\n    mod_assert.ok(data !== null);\n    mod_assert.equal(typeof data, \"object\");\n    mod_assert.equal(typeof depth, \"number\");\n    mod_assert.ok(depth >= 0);\n    for(key in data){\n        each = accum.slice(0);\n        each.push(key);\n        doFlattenIter(data[key], depth - 1, each, callback);\n    }\n}\nfunction flattenObject(data, depth) {\n    if (depth === 0) return [\n        data\n    ];\n    mod_assert.ok(data !== null);\n    mod_assert.equal(typeof data, \"object\");\n    mod_assert.equal(typeof depth, \"number\");\n    mod_assert.ok(depth >= 0);\n    var rv = [];\n    var key;\n    for(key in data){\n        flattenObject(data[key], depth - 1).forEach(function(p) {\n            rv.push([\n                key\n            ].concat(p));\n        });\n    }\n    return rv;\n}\nfunction startsWith(str, prefix) {\n    return str.substr(0, prefix.length) == prefix;\n}\nfunction endsWith(str, suffix) {\n    return str.substr(str.length - suffix.length, suffix.length) == suffix;\n}\nfunction iso8601(d) {\n    if (typeof d == \"number\") d = new Date(d);\n    mod_assert.ok(d.constructor === Date);\n    return mod_extsprintf.sprintf(\"%4d-%02d-%02dT%02d:%02d:%02d.%03dZ\", d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n}\nvar RFC1123_MONTHS = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\nvar RFC1123_DAYS = [\n    \"Sun\",\n    \"Mon\",\n    \"Tue\",\n    \"Wed\",\n    \"Thu\",\n    \"Fri\",\n    \"Sat\"\n];\nfunction rfc1123(date) {\n    return mod_extsprintf.sprintf(\"%s, %02d %s %04d %02d:%02d:%02d GMT\", RFC1123_DAYS[date.getUTCDay()], date.getUTCDate(), RFC1123_MONTHS[date.getUTCMonth()], date.getUTCFullYear(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());\n}\n/*\n * Parses a date expressed as a string, as either a number of milliseconds since\n * the epoch or any string format that Date accepts, giving preference to the\n * former where these two sets overlap (e.g., small numbers).\n */ function parseDateTime(str) {\n    /*\n\t * This is irritatingly implicit, but significantly more concise than\n\t * alternatives.  The \"+str\" will convert a string containing only a\n\t * number directly to a Number, or NaN for other strings.  Thus, if the\n\t * conversion succeeds, we use it (this is the milliseconds-since-epoch\n\t * case).  Otherwise, we pass the string directly to the Date\n\t * constructor to parse.\n\t */ var numeric = +str;\n    if (!isNaN(numeric)) {\n        return new Date(numeric);\n    } else {\n        return new Date(str);\n    }\n}\n/*\n * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode\n * the ES6 definitions here, while allowing for them to someday be higher.\n */ var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\n/*\n * Default options for parseInteger().\n */ var PI_DEFAULTS = {\n    base: 10,\n    allowSign: true,\n    allowPrefix: false,\n    allowTrailing: false,\n    allowImprecise: false,\n    trimWhitespace: false,\n    leadingZeroIsOctal: false\n};\nvar CP_0 = 0x30;\nvar CP_9 = 0x39;\nvar CP_A = 0x41;\nvar CP_B = 0x42;\nvar CP_O = 0x4f;\nvar CP_T = 0x54;\nvar CP_X = 0x58;\nvar CP_Z = 0x5a;\nvar CP_a = 0x61;\nvar CP_b = 0x62;\nvar CP_o = 0x6f;\nvar CP_t = 0x74;\nvar CP_x = 0x78;\nvar CP_z = 0x7a;\nvar PI_CONV_DEC = 0x30;\nvar PI_CONV_UC = 0x37;\nvar PI_CONV_LC = 0x57;\n/*\n * A stricter version of parseInt() that provides options for changing what\n * is an acceptable string (for example, disallowing trailing characters).\n */ function parseInteger(str, uopts) {\n    mod_assert.string(str, \"str\");\n    mod_assert.optionalObject(uopts, \"options\");\n    var baseOverride = false;\n    var options = PI_DEFAULTS;\n    if (uopts) {\n        baseOverride = hasKey(uopts, \"base\");\n        options = mergeObjects(options, uopts);\n        mod_assert.number(options.base, \"options.base\");\n        mod_assert.ok(options.base >= 2, \"options.base >= 2\");\n        mod_assert.ok(options.base <= 36, \"options.base <= 36\");\n        mod_assert.bool(options.allowSign, \"options.allowSign\");\n        mod_assert.bool(options.allowPrefix, \"options.allowPrefix\");\n        mod_assert.bool(options.allowTrailing, \"options.allowTrailing\");\n        mod_assert.bool(options.allowImprecise, \"options.allowImprecise\");\n        mod_assert.bool(options.trimWhitespace, \"options.trimWhitespace\");\n        mod_assert.bool(options.leadingZeroIsOctal, \"options.leadingZeroIsOctal\");\n        if (options.leadingZeroIsOctal) {\n            mod_assert.ok(!baseOverride, '\"base\" and \"leadingZeroIsOctal\" are ' + \"mutually exclusive\");\n        }\n    }\n    var c;\n    var pbase = -1;\n    var base = options.base;\n    var start;\n    var mult = 1;\n    var value = 0;\n    var idx = 0;\n    var len = str.length;\n    /* Trim any whitespace on the left side. */ if (options.trimWhitespace) {\n        while(idx < len && isSpace(str.charCodeAt(idx))){\n            ++idx;\n        }\n    }\n    /* Check the number for a leading sign. */ if (options.allowSign) {\n        if (str[idx] === \"-\") {\n            idx += 1;\n            mult = -1;\n        } else if (str[idx] === \"+\") {\n            idx += 1;\n        }\n    }\n    /* Parse the base-indicating prefix if there is one. */ if (str[idx] === \"0\") {\n        if (options.allowPrefix) {\n            pbase = prefixToBase(str.charCodeAt(idx + 1));\n            if (pbase !== -1 && (!baseOverride || pbase === base)) {\n                base = pbase;\n                idx += 2;\n            }\n        }\n        if (pbase === -1 && options.leadingZeroIsOctal) {\n            base = 8;\n        }\n    }\n    /* Parse the actual digits. */ for(start = idx; idx < len; ++idx){\n        c = translateDigit(str.charCodeAt(idx));\n        if (c !== -1 && c < base) {\n            value *= base;\n            value += c;\n        } else {\n            break;\n        }\n    }\n    /* If we didn't parse any digits, we have an invalid number. */ if (start === idx) {\n        return new Error(\"invalid number: \" + JSON.stringify(str));\n    }\n    /* Trim any whitespace on the right side. */ if (options.trimWhitespace) {\n        while(idx < len && isSpace(str.charCodeAt(idx))){\n            ++idx;\n        }\n    }\n    /* Check for trailing characters. */ if (idx < len && !options.allowTrailing) {\n        return new Error(\"trailing characters after number: \" + JSON.stringify(str.slice(idx)));\n    }\n    /* If our value is 0, we return now, to avoid returning -0. */ if (value === 0) {\n        return 0;\n    }\n    /* Calculate our final value. */ var result = value * mult;\n    /*\n\t * If the string represents a value that cannot be precisely represented\n\t * by JavaScript, then we want to check that:\n\t *\n\t * - We never increased the value past MAX_SAFE_INTEGER\n\t * - We don't make the result negative and below MIN_SAFE_INTEGER\n\t *\n\t * Because we only ever increment the value during parsing, there's no\n\t * chance of moving past MAX_SAFE_INTEGER and then dropping below it\n\t * again, losing precision in the process. This means that we only need\n\t * to do our checks here, at the end.\n\t */ if (!options.allowImprecise && (value > MAX_SAFE_INTEGER || result < MIN_SAFE_INTEGER)) {\n        return new Error(\"number is outside of the supported range: \" + JSON.stringify(str.slice(start, idx)));\n    }\n    return result;\n}\n/*\n * Interpret a character code as a base-36 digit.\n */ function translateDigit(d) {\n    if (d >= CP_0 && d <= CP_9) {\n        /* '0' to '9' -> 0 to 9 */ return d - PI_CONV_DEC;\n    } else if (d >= CP_A && d <= CP_Z) {\n        /* 'A' - 'Z' -> 10 to 35 */ return d - PI_CONV_UC;\n    } else if (d >= CP_a && d <= CP_z) {\n        /* 'a' - 'z' -> 10 to 35 */ return d - PI_CONV_LC;\n    } else {\n        /* Invalid character code */ return -1;\n    }\n}\n/*\n * Test if a value matches the ECMAScript definition of trimmable whitespace.\n */ function isSpace(c) {\n    return c === 0x20 || c >= 0x0009 && c <= 0x000d || c === 0x00a0 || c === 0x1680 || c === 0x180e || c >= 0x2000 && c <= 0x200a || c === 0x2028 || c === 0x2029 || c === 0x202f || c === 0x205f || c === 0x3000 || c === 0xfeff;\n}\n/*\n * Determine which base a character indicates (e.g., 'x' indicates hex).\n */ function prefixToBase(c) {\n    if (c === CP_b || c === CP_B) {\n        /* 0b/0B (binary) */ return 2;\n    } else if (c === CP_o || c === CP_O) {\n        /* 0o/0O (octal) */ return 8;\n    } else if (c === CP_t || c === CP_T) {\n        /* 0t/0T (decimal) */ return 10;\n    } else if (c === CP_x || c === CP_X) {\n        /* 0x/0X (hexadecimal) */ return 16;\n    } else {\n        /* Not a meaningful character */ return -1;\n    }\n}\nfunction validateJsonObjectJS(schema, input) {\n    var report = mod_jsonschema.validate(input, schema);\n    if (report.errors.length === 0) return null;\n    /* Currently, we only do anything useful with the first error. */ var error = report.errors[0];\n    /* The failed property is given by a URI with an irrelevant prefix. */ var propname = error[\"property\"];\n    var reason = error[\"message\"].toLowerCase();\n    var i, j;\n    /*\n\t * There's at least one case where the property error message is\n\t * confusing at best.  We work around this here.\n\t */ if ((i = reason.indexOf(\"the property \")) != -1 && (j = reason.indexOf(\" is not defined in the schema and the \" + \"schema does not allow additional properties\")) != -1) {\n        i += \"the property \".length;\n        if (propname === \"\") propname = reason.substr(i, j - i);\n        else propname = propname + \".\" + reason.substr(i, j - i);\n        reason = \"unsupported property\";\n    }\n    var rv = new mod_verror.VError('property \"%s\": %s', propname, reason);\n    rv.jsv_details = error;\n    return rv;\n}\nfunction randElt(arr) {\n    mod_assert.ok(Array.isArray(arr) && arr.length > 0, \"randElt argument must be a non-empty array\");\n    return arr[Math.floor(Math.random() * arr.length)];\n}\nfunction assertHrtime(a) {\n    mod_assert.ok(a[0] >= 0 && a[1] >= 0, \"negative numbers not allowed in hrtimes\");\n    mod_assert.ok(a[1] < 1e9, \"nanoseconds column overflow\");\n}\n/*\n * Compute the time elapsed between hrtime readings A and B, where A is later\n * than B.  hrtime readings come from Node's process.hrtime().  There is no\n * defined way to represent negative deltas, so it's illegal to diff B from A\n * where the time denoted by B is later than the time denoted by A.  If this\n * becomes valuable, we can define a representation and extend the\n * implementation to support it.\n */ function hrtimeDiff(a, b) {\n    assertHrtime(a);\n    assertHrtime(b);\n    mod_assert.ok(a[0] > b[0] || a[0] == b[0] && a[1] >= b[1], \"negative differences not allowed\");\n    var rv = [\n        a[0] - b[0],\n        0\n    ];\n    if (a[1] >= b[1]) {\n        rv[1] = a[1] - b[1];\n    } else {\n        rv[0]--;\n        rv[1] = 1e9 - (b[1] - a[1]);\n    }\n    return rv;\n}\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of nanoseconds.\n */ function hrtimeNanosec(a) {\n    assertHrtime(a);\n    return Math.floor(a[0] * 1e9 + a[1]);\n}\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of microseconds.\n */ function hrtimeMicrosec(a) {\n    assertHrtime(a);\n    return Math.floor(a[0] * 1e6 + a[1] / 1e3);\n}\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of milliseconds.\n */ function hrtimeMillisec(a) {\n    assertHrtime(a);\n    return Math.floor(a[0] * 1e3 + a[1] / 1e6);\n}\n/*\n * Add two hrtime readings A and B, overwriting A with the result of the\n * addition.  This function is useful for accumulating several hrtime intervals\n * into a counter.  Returns A.\n */ function hrtimeAccum(a, b) {\n    assertHrtime(a);\n    assertHrtime(b);\n    /*\n\t * Accumulate the nanosecond component.\n\t */ a[1] += b[1];\n    if (a[1] >= 1e9) {\n        /*\n\t\t * The nanosecond component overflowed, so carry to the seconds\n\t\t * field.\n\t\t */ a[0]++;\n        a[1] -= 1e9;\n    }\n    /*\n\t * Accumulate the seconds component.\n\t */ a[0] += b[0];\n    return a;\n}\n/*\n * Add two hrtime readings A and B, returning the result as a new hrtime array.\n * Does not modify either input argument.\n */ function hrtimeAdd(a, b) {\n    assertHrtime(a);\n    var rv = [\n        a[0],\n        a[1]\n    ];\n    return hrtimeAccum(rv, b);\n}\n/*\n * Check an object for unexpected properties.  Accepts the object to check, and\n * an array of allowed property names (strings).  Returns an array of key names\n * that were found on the object, but did not appear in the list of allowed\n * properties.  If no properties were found, the returned array will be of\n * zero length.\n */ function extraProperties(obj, allowed) {\n    mod_assert.ok(typeof obj === \"object\" && obj !== null, \"obj argument must be a non-null object\");\n    mod_assert.ok(Array.isArray(allowed), \"allowed argument must be an array of strings\");\n    for(var i = 0; i < allowed.length; i++){\n        mod_assert.ok(typeof allowed[i] === \"string\", \"allowed argument must be an array of strings\");\n    }\n    return Object.keys(obj).filter(function(key) {\n        return allowed.indexOf(key) === -1;\n    });\n}\n/*\n * Given three sets of properties \"provided\" (may be undefined), \"overrides\"\n * (required), and \"defaults\" (may be undefined), construct an object containing\n * the union of these sets with \"overrides\" overriding \"provided\", and\n * \"provided\" overriding \"defaults\".  None of the input objects are modified.\n */ function mergeObjects(provided, overrides, defaults) {\n    var rv, k;\n    rv = {};\n    if (defaults) {\n        for(k in defaults)rv[k] = defaults[k];\n    }\n    if (provided) {\n        for(k in provided)rv[k] = provided[k];\n    }\n    if (overrides) {\n        for(k in overrides)rv[k] = overrides[k];\n    }\n    return rv;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsprim/lib/jsprim.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/jsprim/lib/jsprim.js":
/*!*******************************************!*\
  !*** ./node_modules/jsprim/lib/jsprim.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*\n * lib/jsprim.js: utilities for primitive JavaScript types\n */ var mod_assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar mod_util = __webpack_require__(/*! util */ \"util\");\nvar mod_extsprintf = __webpack_require__(/*! extsprintf */ \"(rsc)/./node_modules/extsprintf/lib/extsprintf.js\");\nvar mod_verror = __webpack_require__(/*! verror */ \"(rsc)/./node_modules/verror/lib/verror.js\");\nvar mod_jsonschema = __webpack_require__(/*! json-schema */ \"(rsc)/./node_modules/json-schema/lib/validate.js\");\n/*\n * Public interface\n */ exports.deepCopy = deepCopy;\nexports.deepEqual = deepEqual;\nexports.isEmpty = isEmpty;\nexports.hasKey = hasKey;\nexports.forEachKey = forEachKey;\nexports.pluck = pluck;\nexports.flattenObject = flattenObject;\nexports.flattenIter = flattenIter;\nexports.validateJsonObject = validateJsonObjectJS;\nexports.validateJsonObjectJS = validateJsonObjectJS;\nexports.randElt = randElt;\nexports.extraProperties = extraProperties;\nexports.mergeObjects = mergeObjects;\nexports.startsWith = startsWith;\nexports.endsWith = endsWith;\nexports.parseInteger = parseInteger;\nexports.iso8601 = iso8601;\nexports.rfc1123 = rfc1123;\nexports.parseDateTime = parseDateTime;\nexports.hrtimediff = hrtimeDiff;\nexports.hrtimeDiff = hrtimeDiff;\nexports.hrtimeAccum = hrtimeAccum;\nexports.hrtimeAdd = hrtimeAdd;\nexports.hrtimeNanosec = hrtimeNanosec;\nexports.hrtimeMicrosec = hrtimeMicrosec;\nexports.hrtimeMillisec = hrtimeMillisec;\n/*\n * Deep copy an acyclic *basic* Javascript object.  This only handles basic\n * scalars (strings, numbers, booleans) and arbitrarily deep arrays and objects\n * containing these.  This does *not* handle instances of other classes.\n */ function deepCopy(obj) {\n    var ret, key;\n    var marker = \"__deepCopy\";\n    if (obj && obj[marker]) throw new Error(\"attempted deep copy of cyclic object\");\n    if (obj && obj.constructor == Object) {\n        ret = {};\n        obj[marker] = true;\n        for(key in obj){\n            if (key == marker) continue;\n            ret[key] = deepCopy(obj[key]);\n        }\n        delete obj[marker];\n        return ret;\n    }\n    if (obj && obj.constructor == Array) {\n        ret = [];\n        obj[marker] = true;\n        for(key = 0; key < obj.length; key++)ret.push(deepCopy(obj[key]));\n        delete obj[marker];\n        return ret;\n    }\n    /*\n\t * It must be a primitive type -- just return it.\n\t */ return obj;\n}\nfunction deepEqual(obj1, obj2) {\n    if (typeof obj1 != typeof obj2) return false;\n    if (obj1 === null || obj2 === null || typeof obj1 != \"object\") return obj1 === obj2;\n    if (obj1.constructor != obj2.constructor) return false;\n    var k;\n    for(k in obj1){\n        if (!obj2.hasOwnProperty(k)) return false;\n        if (!deepEqual(obj1[k], obj2[k])) return false;\n    }\n    for(k in obj2){\n        if (!obj1.hasOwnProperty(k)) return false;\n    }\n    return true;\n}\nfunction isEmpty(obj) {\n    var key;\n    for(key in obj)return false;\n    return true;\n}\nfunction hasKey(obj, key) {\n    mod_assert.equal(typeof key, \"string\");\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction forEachKey(obj, callback) {\n    for(var key in obj){\n        if (hasKey(obj, key)) {\n            callback(key, obj[key]);\n        }\n    }\n}\nfunction pluck(obj, key) {\n    mod_assert.equal(typeof key, \"string\");\n    return pluckv(obj, key);\n}\nfunction pluckv(obj, key) {\n    if (obj === null || typeof obj !== \"object\") return undefined;\n    if (obj.hasOwnProperty(key)) return obj[key];\n    var i = key.indexOf(\".\");\n    if (i == -1) return undefined;\n    var key1 = key.substr(0, i);\n    if (!obj.hasOwnProperty(key1)) return undefined;\n    return pluckv(obj[key1], key.substr(i + 1));\n}\n/*\n * Invoke callback(row) for each entry in the array that would be returned by\n * flattenObject(data, depth).  This is just like flattenObject(data,\n * depth).forEach(callback), except that the intermediate array is never\n * created.\n */ function flattenIter(data, depth, callback) {\n    doFlattenIter(data, depth, [], callback);\n}\nfunction doFlattenIter(data, depth, accum, callback) {\n    var each;\n    var key;\n    if (depth === 0) {\n        each = accum.slice(0);\n        each.push(data);\n        callback(each);\n        return;\n    }\n    mod_assert.ok(data !== null);\n    mod_assert.equal(typeof data, \"object\");\n    mod_assert.equal(typeof depth, \"number\");\n    mod_assert.ok(depth >= 0);\n    for(key in data){\n        each = accum.slice(0);\n        each.push(key);\n        doFlattenIter(data[key], depth - 1, each, callback);\n    }\n}\nfunction flattenObject(data, depth) {\n    if (depth === 0) return [\n        data\n    ];\n    mod_assert.ok(data !== null);\n    mod_assert.equal(typeof data, \"object\");\n    mod_assert.equal(typeof depth, \"number\");\n    mod_assert.ok(depth >= 0);\n    var rv = [];\n    var key;\n    for(key in data){\n        flattenObject(data[key], depth - 1).forEach(function(p) {\n            rv.push([\n                key\n            ].concat(p));\n        });\n    }\n    return rv;\n}\nfunction startsWith(str, prefix) {\n    return str.substr(0, prefix.length) == prefix;\n}\nfunction endsWith(str, suffix) {\n    return str.substr(str.length - suffix.length, suffix.length) == suffix;\n}\nfunction iso8601(d) {\n    if (typeof d == \"number\") d = new Date(d);\n    mod_assert.ok(d.constructor === Date);\n    return mod_extsprintf.sprintf(\"%4d-%02d-%02dT%02d:%02d:%02d.%03dZ\", d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n}\nvar RFC1123_MONTHS = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\nvar RFC1123_DAYS = [\n    \"Sun\",\n    \"Mon\",\n    \"Tue\",\n    \"Wed\",\n    \"Thu\",\n    \"Fri\",\n    \"Sat\"\n];\nfunction rfc1123(date) {\n    return mod_extsprintf.sprintf(\"%s, %02d %s %04d %02d:%02d:%02d GMT\", RFC1123_DAYS[date.getUTCDay()], date.getUTCDate(), RFC1123_MONTHS[date.getUTCMonth()], date.getUTCFullYear(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());\n}\n/*\n * Parses a date expressed as a string, as either a number of milliseconds since\n * the epoch or any string format that Date accepts, giving preference to the\n * former where these two sets overlap (e.g., small numbers).\n */ function parseDateTime(str) {\n    /*\n\t * This is irritatingly implicit, but significantly more concise than\n\t * alternatives.  The \"+str\" will convert a string containing only a\n\t * number directly to a Number, or NaN for other strings.  Thus, if the\n\t * conversion succeeds, we use it (this is the milliseconds-since-epoch\n\t * case).  Otherwise, we pass the string directly to the Date\n\t * constructor to parse.\n\t */ var numeric = +str;\n    if (!isNaN(numeric)) {\n        return new Date(numeric);\n    } else {\n        return new Date(str);\n    }\n}\n/*\n * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode\n * the ES6 definitions here, while allowing for them to someday be higher.\n */ var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\n/*\n * Default options for parseInteger().\n */ var PI_DEFAULTS = {\n    base: 10,\n    allowSign: true,\n    allowPrefix: false,\n    allowTrailing: false,\n    allowImprecise: false,\n    trimWhitespace: false,\n    leadingZeroIsOctal: false\n};\nvar CP_0 = 0x30;\nvar CP_9 = 0x39;\nvar CP_A = 0x41;\nvar CP_B = 0x42;\nvar CP_O = 0x4f;\nvar CP_T = 0x54;\nvar CP_X = 0x58;\nvar CP_Z = 0x5a;\nvar CP_a = 0x61;\nvar CP_b = 0x62;\nvar CP_o = 0x6f;\nvar CP_t = 0x74;\nvar CP_x = 0x78;\nvar CP_z = 0x7a;\nvar PI_CONV_DEC = 0x30;\nvar PI_CONV_UC = 0x37;\nvar PI_CONV_LC = 0x57;\n/*\n * A stricter version of parseInt() that provides options for changing what\n * is an acceptable string (for example, disallowing trailing characters).\n */ function parseInteger(str, uopts) {\n    mod_assert.string(str, \"str\");\n    mod_assert.optionalObject(uopts, \"options\");\n    var baseOverride = false;\n    var options = PI_DEFAULTS;\n    if (uopts) {\n        baseOverride = hasKey(uopts, \"base\");\n        options = mergeObjects(options, uopts);\n        mod_assert.number(options.base, \"options.base\");\n        mod_assert.ok(options.base >= 2, \"options.base >= 2\");\n        mod_assert.ok(options.base <= 36, \"options.base <= 36\");\n        mod_assert.bool(options.allowSign, \"options.allowSign\");\n        mod_assert.bool(options.allowPrefix, \"options.allowPrefix\");\n        mod_assert.bool(options.allowTrailing, \"options.allowTrailing\");\n        mod_assert.bool(options.allowImprecise, \"options.allowImprecise\");\n        mod_assert.bool(options.trimWhitespace, \"options.trimWhitespace\");\n        mod_assert.bool(options.leadingZeroIsOctal, \"options.leadingZeroIsOctal\");\n        if (options.leadingZeroIsOctal) {\n            mod_assert.ok(!baseOverride, '\"base\" and \"leadingZeroIsOctal\" are ' + \"mutually exclusive\");\n        }\n    }\n    var c;\n    var pbase = -1;\n    var base = options.base;\n    var start;\n    var mult = 1;\n    var value = 0;\n    var idx = 0;\n    var len = str.length;\n    /* Trim any whitespace on the left side. */ if (options.trimWhitespace) {\n        while(idx < len && isSpace(str.charCodeAt(idx))){\n            ++idx;\n        }\n    }\n    /* Check the number for a leading sign. */ if (options.allowSign) {\n        if (str[idx] === \"-\") {\n            idx += 1;\n            mult = -1;\n        } else if (str[idx] === \"+\") {\n            idx += 1;\n        }\n    }\n    /* Parse the base-indicating prefix if there is one. */ if (str[idx] === \"0\") {\n        if (options.allowPrefix) {\n            pbase = prefixToBase(str.charCodeAt(idx + 1));\n            if (pbase !== -1 && (!baseOverride || pbase === base)) {\n                base = pbase;\n                idx += 2;\n            }\n        }\n        if (pbase === -1 && options.leadingZeroIsOctal) {\n            base = 8;\n        }\n    }\n    /* Parse the actual digits. */ for(start = idx; idx < len; ++idx){\n        c = translateDigit(str.charCodeAt(idx));\n        if (c !== -1 && c < base) {\n            value *= base;\n            value += c;\n        } else {\n            break;\n        }\n    }\n    /* If we didn't parse any digits, we have an invalid number. */ if (start === idx) {\n        return new Error(\"invalid number: \" + JSON.stringify(str));\n    }\n    /* Trim any whitespace on the right side. */ if (options.trimWhitespace) {\n        while(idx < len && isSpace(str.charCodeAt(idx))){\n            ++idx;\n        }\n    }\n    /* Check for trailing characters. */ if (idx < len && !options.allowTrailing) {\n        return new Error(\"trailing characters after number: \" + JSON.stringify(str.slice(idx)));\n    }\n    /* If our value is 0, we return now, to avoid returning -0. */ if (value === 0) {\n        return 0;\n    }\n    /* Calculate our final value. */ var result = value * mult;\n    /*\n\t * If the string represents a value that cannot be precisely represented\n\t * by JavaScript, then we want to check that:\n\t *\n\t * - We never increased the value past MAX_SAFE_INTEGER\n\t * - We don't make the result negative and below MIN_SAFE_INTEGER\n\t *\n\t * Because we only ever increment the value during parsing, there's no\n\t * chance of moving past MAX_SAFE_INTEGER and then dropping below it\n\t * again, losing precision in the process. This means that we only need\n\t * to do our checks here, at the end.\n\t */ if (!options.allowImprecise && (value > MAX_SAFE_INTEGER || result < MIN_SAFE_INTEGER)) {\n        return new Error(\"number is outside of the supported range: \" + JSON.stringify(str.slice(start, idx)));\n    }\n    return result;\n}\n/*\n * Interpret a character code as a base-36 digit.\n */ function translateDigit(d) {\n    if (d >= CP_0 && d <= CP_9) {\n        /* '0' to '9' -> 0 to 9 */ return d - PI_CONV_DEC;\n    } else if (d >= CP_A && d <= CP_Z) {\n        /* 'A' - 'Z' -> 10 to 35 */ return d - PI_CONV_UC;\n    } else if (d >= CP_a && d <= CP_z) {\n        /* 'a' - 'z' -> 10 to 35 */ return d - PI_CONV_LC;\n    } else {\n        /* Invalid character code */ return -1;\n    }\n}\n/*\n * Test if a value matches the ECMAScript definition of trimmable whitespace.\n */ function isSpace(c) {\n    return c === 0x20 || c >= 0x0009 && c <= 0x000d || c === 0x00a0 || c === 0x1680 || c === 0x180e || c >= 0x2000 && c <= 0x200a || c === 0x2028 || c === 0x2029 || c === 0x202f || c === 0x205f || c === 0x3000 || c === 0xfeff;\n}\n/*\n * Determine which base a character indicates (e.g., 'x' indicates hex).\n */ function prefixToBase(c) {\n    if (c === CP_b || c === CP_B) {\n        /* 0b/0B (binary) */ return 2;\n    } else if (c === CP_o || c === CP_O) {\n        /* 0o/0O (octal) */ return 8;\n    } else if (c === CP_t || c === CP_T) {\n        /* 0t/0T (decimal) */ return 10;\n    } else if (c === CP_x || c === CP_X) {\n        /* 0x/0X (hexadecimal) */ return 16;\n    } else {\n        /* Not a meaningful character */ return -1;\n    }\n}\nfunction validateJsonObjectJS(schema, input) {\n    var report = mod_jsonschema.validate(input, schema);\n    if (report.errors.length === 0) return null;\n    /* Currently, we only do anything useful with the first error. */ var error = report.errors[0];\n    /* The failed property is given by a URI with an irrelevant prefix. */ var propname = error[\"property\"];\n    var reason = error[\"message\"].toLowerCase();\n    var i, j;\n    /*\n\t * There's at least one case where the property error message is\n\t * confusing at best.  We work around this here.\n\t */ if ((i = reason.indexOf(\"the property \")) != -1 && (j = reason.indexOf(\" is not defined in the schema and the \" + \"schema does not allow additional properties\")) != -1) {\n        i += \"the property \".length;\n        if (propname === \"\") propname = reason.substr(i, j - i);\n        else propname = propname + \".\" + reason.substr(i, j - i);\n        reason = \"unsupported property\";\n    }\n    var rv = new mod_verror.VError('property \"%s\": %s', propname, reason);\n    rv.jsv_details = error;\n    return rv;\n}\nfunction randElt(arr) {\n    mod_assert.ok(Array.isArray(arr) && arr.length > 0, \"randElt argument must be a non-empty array\");\n    return arr[Math.floor(Math.random() * arr.length)];\n}\nfunction assertHrtime(a) {\n    mod_assert.ok(a[0] >= 0 && a[1] >= 0, \"negative numbers not allowed in hrtimes\");\n    mod_assert.ok(a[1] < 1e9, \"nanoseconds column overflow\");\n}\n/*\n * Compute the time elapsed between hrtime readings A and B, where A is later\n * than B.  hrtime readings come from Node's process.hrtime().  There is no\n * defined way to represent negative deltas, so it's illegal to diff B from A\n * where the time denoted by B is later than the time denoted by A.  If this\n * becomes valuable, we can define a representation and extend the\n * implementation to support it.\n */ function hrtimeDiff(a, b) {\n    assertHrtime(a);\n    assertHrtime(b);\n    mod_assert.ok(a[0] > b[0] || a[0] == b[0] && a[1] >= b[1], \"negative differences not allowed\");\n    var rv = [\n        a[0] - b[0],\n        0\n    ];\n    if (a[1] >= b[1]) {\n        rv[1] = a[1] - b[1];\n    } else {\n        rv[0]--;\n        rv[1] = 1e9 - (b[1] - a[1]);\n    }\n    return rv;\n}\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of nanoseconds.\n */ function hrtimeNanosec(a) {\n    assertHrtime(a);\n    return Math.floor(a[0] * 1e9 + a[1]);\n}\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of microseconds.\n */ function hrtimeMicrosec(a) {\n    assertHrtime(a);\n    return Math.floor(a[0] * 1e6 + a[1] / 1e3);\n}\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of milliseconds.\n */ function hrtimeMillisec(a) {\n    assertHrtime(a);\n    return Math.floor(a[0] * 1e3 + a[1] / 1e6);\n}\n/*\n * Add two hrtime readings A and B, overwriting A with the result of the\n * addition.  This function is useful for accumulating several hrtime intervals\n * into a counter.  Returns A.\n */ function hrtimeAccum(a, b) {\n    assertHrtime(a);\n    assertHrtime(b);\n    /*\n\t * Accumulate the nanosecond component.\n\t */ a[1] += b[1];\n    if (a[1] >= 1e9) {\n        /*\n\t\t * The nanosecond component overflowed, so carry to the seconds\n\t\t * field.\n\t\t */ a[0]++;\n        a[1] -= 1e9;\n    }\n    /*\n\t * Accumulate the seconds component.\n\t */ a[0] += b[0];\n    return a;\n}\n/*\n * Add two hrtime readings A and B, returning the result as a new hrtime array.\n * Does not modify either input argument.\n */ function hrtimeAdd(a, b) {\n    assertHrtime(a);\n    var rv = [\n        a[0],\n        a[1]\n    ];\n    return hrtimeAccum(rv, b);\n}\n/*\n * Check an object for unexpected properties.  Accepts the object to check, and\n * an array of allowed property names (strings).  Returns an array of key names\n * that were found on the object, but did not appear in the list of allowed\n * properties.  If no properties were found, the returned array will be of\n * zero length.\n */ function extraProperties(obj, allowed) {\n    mod_assert.ok(typeof obj === \"object\" && obj !== null, \"obj argument must be a non-null object\");\n    mod_assert.ok(Array.isArray(allowed), \"allowed argument must be an array of strings\");\n    for(var i = 0; i < allowed.length; i++){\n        mod_assert.ok(typeof allowed[i] === \"string\", \"allowed argument must be an array of strings\");\n    }\n    return Object.keys(obj).filter(function(key) {\n        return allowed.indexOf(key) === -1;\n    });\n}\n/*\n * Given three sets of properties \"provided\" (may be undefined), \"overrides\"\n * (required), and \"defaults\" (may be undefined), construct an object containing\n * the union of these sets with \"overrides\" overriding \"provided\", and\n * \"provided\" overriding \"defaults\".  None of the input objects are modified.\n */ function mergeObjects(provided, overrides, defaults) {\n    var rv, k;\n    rv = {};\n    if (defaults) {\n        for(k in defaults)rv[k] = defaults[k];\n    }\n    if (provided) {\n        for(k in provided)rv[k] = provided[k];\n    }\n    if (overrides) {\n        for(k in overrides)rv[k] = overrides[k];\n    }\n    return rv;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/jsprim/lib/jsprim.js\n");

/***/ })

};
;