"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/asn1";
exports.ids = ["vendor-chunks/asn1"];
exports.modules = {

/***/ "(ssr)/./node_modules/asn1/lib/ber/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/errors.js ***!
  \*********************************************/
/***/ ((module) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nmodule.exports = {\n    newInvalidAsn1Error: function(msg) {\n        var e = new Error();\n        e.name = \"InvalidAsn1Error\";\n        e.message = msg || \"\";\n        return e;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzRUFBc0U7O0FBR3RFQSxPQUFPQyxPQUFPLEdBQUc7SUFFZkMscUJBQXFCLFNBQVVDLEdBQUc7UUFDaEMsSUFBSUMsSUFBSSxJQUFJQztRQUNaRCxFQUFFRSxJQUFJLEdBQUc7UUFDVEYsRUFBRUcsT0FBTyxHQUFHSixPQUFPO1FBQ25CLE9BQU9DO0lBQ1Q7QUFFRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2Jlci9lcnJvcnMuanM/MzMzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgbmV3SW52YWxpZEFzbjFFcnJvcjogZnVuY3Rpb24gKG1zZykge1xuICAgIHZhciBlID0gbmV3IEVycm9yKCk7XG4gICAgZS5uYW1lID0gJ0ludmFsaWRBc24xRXJyb3InO1xuICAgIGUubWVzc2FnZSA9IG1zZyB8fCAnJztcbiAgICByZXR1cm4gZTtcbiAgfVxuXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJuZXdJbnZhbGlkQXNuMUVycm9yIiwibXNnIiwiZSIsIkVycm9yIiwibmFtZSIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/ber/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/asn1/lib/ber/index.js":
/*!********************************************!*\
  !*** ./node_modules/asn1/lib/ber/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/asn1/lib/ber/errors.js\");\nvar types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/asn1/lib/ber/types.js\");\nvar Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/asn1/lib/ber/reader.js\");\nvar Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/asn1/lib/ber/writer.js\");\n// --- Exports\nmodule.exports = {\n    Reader: Reader,\n    Writer: Writer\n};\nfor(var t in types){\n    if (types.hasOwnProperty(t)) module.exports[t] = types[t];\n}\nfor(var e in errors){\n    if (errors.hasOwnProperty(e)) module.exports[e] = errors[e];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHNFQUFzRTs7QUFFdEUsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUM7QUFFcEIsSUFBSUUsU0FBU0YsbUJBQU9BLENBQUM7QUFDckIsSUFBSUcsU0FBU0gsbUJBQU9BLENBQUM7QUFHckIsY0FBYztBQUVkSSxPQUFPQyxPQUFPLEdBQUc7SUFFZkgsUUFBUUE7SUFFUkMsUUFBUUE7QUFFVjtBQUVBLElBQUssSUFBSUcsS0FBS0wsTUFBTztJQUNuQixJQUFJQSxNQUFNTSxjQUFjLENBQUNELElBQ3ZCRixPQUFPQyxPQUFPLENBQUNDLEVBQUUsR0FBR0wsS0FBSyxDQUFDSyxFQUFFO0FBQ2hDO0FBQ0EsSUFBSyxJQUFJRSxLQUFLVCxPQUFRO0lBQ3BCLElBQUlBLE9BQU9RLGNBQWMsQ0FBQ0MsSUFDeEJKLE9BQU9DLE9BQU8sQ0FBQ0csRUFBRSxHQUFHVCxNQUFNLENBQUNTLEVBQUU7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvaW5kZXguanM/OTdjNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xudmFyIHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuXG52YXIgUmVhZGVyID0gcmVxdWlyZSgnLi9yZWFkZXInKTtcbnZhciBXcml0ZXIgPSByZXF1aXJlKCcuL3dyaXRlcicpO1xuXG5cbi8vIC0tLSBFeHBvcnRzXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIFJlYWRlcjogUmVhZGVyLFxuXG4gIFdyaXRlcjogV3JpdGVyXG5cbn07XG5cbmZvciAodmFyIHQgaW4gdHlwZXMpIHtcbiAgaWYgKHR5cGVzLmhhc093blByb3BlcnR5KHQpKVxuICAgIG1vZHVsZS5leHBvcnRzW3RdID0gdHlwZXNbdF07XG59XG5mb3IgKHZhciBlIGluIGVycm9ycykge1xuICBpZiAoZXJyb3JzLmhhc093blByb3BlcnR5KGUpKVxuICAgIG1vZHVsZS5leHBvcnRzW2VdID0gZXJyb3JzW2VdO1xufVxuIl0sIm5hbWVzIjpbImVycm9ycyIsInJlcXVpcmUiLCJ0eXBlcyIsIlJlYWRlciIsIldyaXRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0IiwiaGFzT3duUHJvcGVydHkiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/ber/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/asn1/lib/ber/reader.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/reader.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar ASN1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/asn1/lib/ber/types.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/asn1/lib/ber/errors.js\");\n// --- Globals\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n// --- API\nfunction Reader(data) {\n    if (!data || !Buffer.isBuffer(data)) throw new TypeError(\"data must be a node Buffer\");\n    this._buf = data;\n    this._size = data.length;\n    // These hold the \"current\" state\n    this._len = 0;\n    this._offset = 0;\n}\nObject.defineProperty(Reader.prototype, \"length\", {\n    enumerable: true,\n    get: function() {\n        return this._len;\n    }\n});\nObject.defineProperty(Reader.prototype, \"offset\", {\n    enumerable: true,\n    get: function() {\n        return this._offset;\n    }\n});\nObject.defineProperty(Reader.prototype, \"remain\", {\n    get: function() {\n        return this._size - this._offset;\n    }\n});\nObject.defineProperty(Reader.prototype, \"buffer\", {\n    get: function() {\n        return this._buf.slice(this._offset);\n    }\n});\n/**\n * Reads a single byte and advances offset; you can pass in `true` to make this\n * a \"peek\" operation (i.e., get the byte, but don't advance the offset).\n *\n * @param {Boolean} peek true means don't move offset.\n * @return {Number} the next byte, null if not enough data.\n */ Reader.prototype.readByte = function(peek) {\n    if (this._size - this._offset < 1) return null;\n    var b = this._buf[this._offset] & 0xff;\n    if (!peek) this._offset += 1;\n    return b;\n};\nReader.prototype.peek = function() {\n    return this.readByte(true);\n};\n/**\n * Reads a (potentially) variable length off the BER buffer.  This call is\n * not really meant to be called directly, as callers have to manipulate\n * the internal buffer afterwards.\n *\n * As a result of this call, you can call `Reader.length`, until the\n * next thing called that does a readLength.\n *\n * @return {Number} the amount of offset to advance the buffer.\n * @throws {InvalidAsn1Error} on bad ASN.1\n */ Reader.prototype.readLength = function(offset) {\n    if (offset === undefined) offset = this._offset;\n    if (offset >= this._size) return null;\n    var lenB = this._buf[offset++] & 0xff;\n    if (lenB === null) return null;\n    if ((lenB & 0x80) === 0x80) {\n        lenB &= 0x7f;\n        if (lenB === 0) throw newInvalidAsn1Error(\"Indefinite length not supported\");\n        if (lenB > 4) throw newInvalidAsn1Error(\"encoding too long\");\n        if (this._size - offset < lenB) return null;\n        this._len = 0;\n        for(var i = 0; i < lenB; i++)this._len = (this._len << 8) + (this._buf[offset++] & 0xff);\n    } else {\n        // Wasn't a variable length\n        this._len = lenB;\n    }\n    return offset;\n};\n/**\n * Parses the next sequence in this BER buffer.\n *\n * To get the length of the sequence, call `Reader.length`.\n *\n * @return {Number} the sequence's tag.\n */ Reader.prototype.readSequence = function(tag) {\n    var seq = this.peek();\n    if (seq === null) return null;\n    if (tag !== undefined && tag !== seq) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + seq.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    this._offset = o;\n    return seq;\n};\nReader.prototype.readInt = function() {\n    return this._readTag(ASN1.Integer);\n};\nReader.prototype.readBoolean = function() {\n    return this._readTag(ASN1.Boolean) === 0 ? false : true;\n};\nReader.prototype.readEnumeration = function() {\n    return this._readTag(ASN1.Enumeration);\n};\nReader.prototype.readString = function(tag, retbuf) {\n    if (!tag) tag = ASN1.OctetString;\n    var b = this.peek();\n    if (b === null) return null;\n    if (b !== tag) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + b.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    if (this.length > this._size - o) return null;\n    this._offset = o;\n    if (this.length === 0) return retbuf ? Buffer.alloc(0) : \"\";\n    var str = this._buf.slice(this._offset, this._offset + this.length);\n    this._offset += this.length;\n    return retbuf ? str : str.toString(\"utf8\");\n};\nReader.prototype.readOID = function(tag) {\n    if (!tag) tag = ASN1.OID;\n    var b = this.readString(tag, true);\n    if (b === null) return null;\n    var values = [];\n    var value = 0;\n    for(var i = 0; i < b.length; i++){\n        var byte = b[i] & 0xff;\n        value <<= 7;\n        value += byte & 0x7f;\n        if ((byte & 0x80) === 0) {\n            values.push(value);\n            value = 0;\n        }\n    }\n    value = values.shift();\n    values.unshift(value % 40);\n    values.unshift(value / 40 >> 0);\n    return values.join(\".\");\n};\nReader.prototype._readTag = function(tag) {\n    assert.ok(tag !== undefined);\n    var b = this.peek();\n    if (b === null) return null;\n    if (b !== tag) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + b.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    if (this.length > 4) throw newInvalidAsn1Error(\"Integer too long: \" + this.length);\n    if (this.length > this._size - o) return null;\n    this._offset = o;\n    var fb = this._buf[this._offset];\n    var value = 0;\n    for(var i = 0; i < this.length; i++){\n        value <<= 8;\n        value |= this._buf[this._offset++] & 0xff;\n    }\n    if ((fb & 0x80) === 0x80 && i !== 4) value -= 1 << i * 8;\n    return value >> 0;\n};\n// --- Exported API\nmodule.exports = Reader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/ber/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/asn1/lib/ber/types.js":
/*!********************************************!*\
  !*** ./node_modules/asn1/lib/ber/types.js ***!
  \********************************************/
/***/ ((module) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nmodule.exports = {\n    EOC: 0,\n    Boolean: 1,\n    Integer: 2,\n    BitString: 3,\n    OctetString: 4,\n    Null: 5,\n    OID: 6,\n    ObjectDescriptor: 7,\n    External: 8,\n    Real: 9,\n    Enumeration: 10,\n    PDV: 11,\n    Utf8String: 12,\n    RelativeOID: 13,\n    Sequence: 16,\n    Set: 17,\n    NumericString: 18,\n    PrintableString: 19,\n    T61String: 20,\n    VideotexString: 21,\n    IA5String: 22,\n    UTCTime: 23,\n    GeneralizedTime: 24,\n    GraphicString: 25,\n    VisibleString: 26,\n    GeneralString: 28,\n    UniversalString: 29,\n    CharacterString: 30,\n    BMPString: 31,\n    Constructor: 32,\n    Context: 128\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNFQUFzRTs7QUFHdEVBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxLQUFLO0lBQ0xDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxXQUFXO0lBQ1hDLGFBQWE7SUFDYkMsTUFBTTtJQUNOQyxLQUFLO0lBQ0xDLGtCQUFrQjtJQUNsQkMsVUFBVTtJQUNWQyxNQUFNO0lBQ05DLGFBQWE7SUFDYkMsS0FBSztJQUNMQyxZQUFZO0lBQ1pDLGFBQWE7SUFDYkMsVUFBVTtJQUNWQyxLQUFLO0lBQ0xDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxXQUFXO0lBQ1hDLGdCQUFnQjtJQUNoQkMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLGlCQUFpQjtJQUNqQkMsZUFBZTtJQUNmQyxlQUFlO0lBQ2ZDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxpQkFBaUI7SUFDakJDLFdBQVc7SUFDWEMsYUFBYTtJQUNiQyxTQUFTO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvdHlwZXMuanM/NTk1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEVPQzogMCxcbiAgQm9vbGVhbjogMSxcbiAgSW50ZWdlcjogMixcbiAgQml0U3RyaW5nOiAzLFxuICBPY3RldFN0cmluZzogNCxcbiAgTnVsbDogNSxcbiAgT0lEOiA2LFxuICBPYmplY3REZXNjcmlwdG9yOiA3LFxuICBFeHRlcm5hbDogOCxcbiAgUmVhbDogOSwgLy8gZmxvYXRcbiAgRW51bWVyYXRpb246IDEwLFxuICBQRFY6IDExLFxuICBVdGY4U3RyaW5nOiAxMixcbiAgUmVsYXRpdmVPSUQ6IDEzLFxuICBTZXF1ZW5jZTogMTYsXG4gIFNldDogMTcsXG4gIE51bWVyaWNTdHJpbmc6IDE4LFxuICBQcmludGFibGVTdHJpbmc6IDE5LFxuICBUNjFTdHJpbmc6IDIwLFxuICBWaWRlb3RleFN0cmluZzogMjEsXG4gIElBNVN0cmluZzogMjIsXG4gIFVUQ1RpbWU6IDIzLFxuICBHZW5lcmFsaXplZFRpbWU6IDI0LFxuICBHcmFwaGljU3RyaW5nOiAyNSxcbiAgVmlzaWJsZVN0cmluZzogMjYsXG4gIEdlbmVyYWxTdHJpbmc6IDI4LFxuICBVbml2ZXJzYWxTdHJpbmc6IDI5LFxuICBDaGFyYWN0ZXJTdHJpbmc6IDMwLFxuICBCTVBTdHJpbmc6IDMxLFxuICBDb25zdHJ1Y3RvcjogMzIsXG4gIENvbnRleHQ6IDEyOFxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRU9DIiwiQm9vbGVhbiIsIkludGVnZXIiLCJCaXRTdHJpbmciLCJPY3RldFN0cmluZyIsIk51bGwiLCJPSUQiLCJPYmplY3REZXNjcmlwdG9yIiwiRXh0ZXJuYWwiLCJSZWFsIiwiRW51bWVyYXRpb24iLCJQRFYiLCJVdGY4U3RyaW5nIiwiUmVsYXRpdmVPSUQiLCJTZXF1ZW5jZSIsIlNldCIsIk51bWVyaWNTdHJpbmciLCJQcmludGFibGVTdHJpbmciLCJUNjFTdHJpbmciLCJWaWRlb3RleFN0cmluZyIsIklBNVN0cmluZyIsIlVUQ1RpbWUiLCJHZW5lcmFsaXplZFRpbWUiLCJHcmFwaGljU3RyaW5nIiwiVmlzaWJsZVN0cmluZyIsIkdlbmVyYWxTdHJpbmciLCJVbml2ZXJzYWxTdHJpbmciLCJDaGFyYWN0ZXJTdHJpbmciLCJCTVBTdHJpbmciLCJDb25zdHJ1Y3RvciIsIkNvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/ber/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/asn1/lib/ber/writer.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/writer.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar ASN1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/asn1/lib/ber/types.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/asn1/lib/ber/errors.js\");\n// --- Globals\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\nvar DEFAULT_OPTS = {\n    size: 1024,\n    growthFactor: 8\n};\n// --- Helpers\nfunction merge(from, to) {\n    assert.ok(from);\n    assert.equal(typeof from, \"object\");\n    assert.ok(to);\n    assert.equal(typeof to, \"object\");\n    var keys = Object.getOwnPropertyNames(from);\n    keys.forEach(function(key) {\n        if (to[key]) return;\n        var value = Object.getOwnPropertyDescriptor(from, key);\n        Object.defineProperty(to, key, value);\n    });\n    return to;\n}\n// --- API\nfunction Writer(options) {\n    options = merge(DEFAULT_OPTS, options || {});\n    this._buf = Buffer.alloc(options.size || 1024);\n    this._size = this._buf.length;\n    this._offset = 0;\n    this._options = options;\n    // A list of offsets in the buffer where we need to insert\n    // sequence tag/len pairs.\n    this._seq = [];\n}\nObject.defineProperty(Writer.prototype, \"buffer\", {\n    get: function() {\n        if (this._seq.length) throw newInvalidAsn1Error(this._seq.length + \" unended sequence(s)\");\n        return this._buf.slice(0, this._offset);\n    }\n});\nWriter.prototype.writeByte = function(b) {\n    if (typeof b !== \"number\") throw new TypeError(\"argument must be a Number\");\n    this._ensure(1);\n    this._buf[this._offset++] = b;\n};\nWriter.prototype.writeInt = function(i, tag) {\n    if (typeof i !== \"number\") throw new TypeError(\"argument must be a Number\");\n    if (typeof tag !== \"number\") tag = ASN1.Integer;\n    var sz = 4;\n    while(((i & 0xff800000) === 0 || (i & 0xff800000) === 0xff800000 >> 0) && sz > 1){\n        sz--;\n        i <<= 8;\n    }\n    if (sz > 4) throw newInvalidAsn1Error(\"BER ints cannot be > 0xffffffff\");\n    this._ensure(2 + sz);\n    this._buf[this._offset++] = tag;\n    this._buf[this._offset++] = sz;\n    while(sz-- > 0){\n        this._buf[this._offset++] = (i & 0xff000000) >>> 24;\n        i <<= 8;\n    }\n};\nWriter.prototype.writeNull = function() {\n    this.writeByte(ASN1.Null);\n    this.writeByte(0x00);\n};\nWriter.prototype.writeEnumeration = function(i, tag) {\n    if (typeof i !== \"number\") throw new TypeError(\"argument must be a Number\");\n    if (typeof tag !== \"number\") tag = ASN1.Enumeration;\n    return this.writeInt(i, tag);\n};\nWriter.prototype.writeBoolean = function(b, tag) {\n    if (typeof b !== \"boolean\") throw new TypeError(\"argument must be a Boolean\");\n    if (typeof tag !== \"number\") tag = ASN1.Boolean;\n    this._ensure(3);\n    this._buf[this._offset++] = tag;\n    this._buf[this._offset++] = 0x01;\n    this._buf[this._offset++] = b ? 0xff : 0x00;\n};\nWriter.prototype.writeString = function(s, tag) {\n    if (typeof s !== \"string\") throw new TypeError(\"argument must be a string (was: \" + typeof s + \")\");\n    if (typeof tag !== \"number\") tag = ASN1.OctetString;\n    var len = Buffer.byteLength(s);\n    this.writeByte(tag);\n    this.writeLength(len);\n    if (len) {\n        this._ensure(len);\n        this._buf.write(s, this._offset);\n        this._offset += len;\n    }\n};\nWriter.prototype.writeBuffer = function(buf, tag) {\n    if (typeof tag !== \"number\") throw new TypeError(\"tag must be a number\");\n    if (!Buffer.isBuffer(buf)) throw new TypeError(\"argument must be a buffer\");\n    this.writeByte(tag);\n    this.writeLength(buf.length);\n    this._ensure(buf.length);\n    buf.copy(this._buf, this._offset, 0, buf.length);\n    this._offset += buf.length;\n};\nWriter.prototype.writeStringArray = function(strings) {\n    if (!strings instanceof Array) throw new TypeError(\"argument must be an Array[String]\");\n    var self = this;\n    strings.forEach(function(s) {\n        self.writeString(s);\n    });\n};\n// This is really to solve DER cases, but whatever for now\nWriter.prototype.writeOID = function(s, tag) {\n    if (typeof s !== \"string\") throw new TypeError(\"argument must be a string\");\n    if (typeof tag !== \"number\") tag = ASN1.OID;\n    if (!/^([0-9]+\\.){3,}[0-9]+$/.test(s)) throw new Error(\"argument is not a valid OID string\");\n    function encodeOctet(bytes, octet) {\n        if (octet < 128) {\n            bytes.push(octet);\n        } else if (octet < 16384) {\n            bytes.push(octet >>> 7 | 0x80);\n            bytes.push(octet & 0x7F);\n        } else if (octet < 2097152) {\n            bytes.push(octet >>> 14 | 0x80);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        } else if (octet < 268435456) {\n            bytes.push(octet >>> 21 | 0x80);\n            bytes.push((octet >>> 14 | 0x80) & 0xFF);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        } else {\n            bytes.push((octet >>> 28 | 0x80) & 0xFF);\n            bytes.push((octet >>> 21 | 0x80) & 0xFF);\n            bytes.push((octet >>> 14 | 0x80) & 0xFF);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        }\n    }\n    var tmp = s.split(\".\");\n    var bytes = [];\n    bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));\n    tmp.slice(2).forEach(function(b) {\n        encodeOctet(bytes, parseInt(b, 10));\n    });\n    var self = this;\n    this._ensure(2 + bytes.length);\n    this.writeByte(tag);\n    this.writeLength(bytes.length);\n    bytes.forEach(function(b) {\n        self.writeByte(b);\n    });\n};\nWriter.prototype.writeLength = function(len) {\n    if (typeof len !== \"number\") throw new TypeError(\"argument must be a Number\");\n    this._ensure(4);\n    if (len <= 0x7f) {\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xff) {\n        this._buf[this._offset++] = 0x81;\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xffff) {\n        this._buf[this._offset++] = 0x82;\n        this._buf[this._offset++] = len >> 8;\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xffffff) {\n        this._buf[this._offset++] = 0x83;\n        this._buf[this._offset++] = len >> 16;\n        this._buf[this._offset++] = len >> 8;\n        this._buf[this._offset++] = len;\n    } else {\n        throw newInvalidAsn1Error(\"Length too long (> 4 bytes)\");\n    }\n};\nWriter.prototype.startSequence = function(tag) {\n    if (typeof tag !== \"number\") tag = ASN1.Sequence | ASN1.Constructor;\n    this.writeByte(tag);\n    this._seq.push(this._offset);\n    this._ensure(3);\n    this._offset += 3;\n};\nWriter.prototype.endSequence = function() {\n    var seq = this._seq.pop();\n    var start = seq + 3;\n    var len = this._offset - start;\n    if (len <= 0x7f) {\n        this._shift(start, len, -2);\n        this._buf[seq] = len;\n    } else if (len <= 0xff) {\n        this._shift(start, len, -1);\n        this._buf[seq] = 0x81;\n        this._buf[seq + 1] = len;\n    } else if (len <= 0xffff) {\n        this._buf[seq] = 0x82;\n        this._buf[seq + 1] = len >> 8;\n        this._buf[seq + 2] = len;\n    } else if (len <= 0xffffff) {\n        this._shift(start, len, 1);\n        this._buf[seq] = 0x83;\n        this._buf[seq + 1] = len >> 16;\n        this._buf[seq + 2] = len >> 8;\n        this._buf[seq + 3] = len;\n    } else {\n        throw newInvalidAsn1Error(\"Sequence too long\");\n    }\n};\nWriter.prototype._shift = function(start, len, shift) {\n    assert.ok(start !== undefined);\n    assert.ok(len !== undefined);\n    assert.ok(shift);\n    this._buf.copy(this._buf, start + shift, start, start + len);\n    this._offset += shift;\n};\nWriter.prototype._ensure = function(len) {\n    assert.ok(len);\n    if (this._size - this._offset < len) {\n        var sz = this._size * this._options.growthFactor;\n        if (sz - this._offset < len) sz += len;\n        var buf = Buffer.alloc(sz);\n        this._buf.copy(buf, 0, 0, this._offset);\n        this._buf = buf;\n        this._size = sz;\n    }\n};\n// --- Exported API\nmodule.exports = Writer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3dyaXRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzRUFBc0U7O0FBRXRFLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLFNBQVNELDhGQUE4QjtBQUMzQyxJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUNuQixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUdyQixjQUFjO0FBRWQsSUFBSUksc0JBQXNCRCxPQUFPQyxtQkFBbUI7QUFFcEQsSUFBSUMsZUFBZTtJQUNqQkMsTUFBTTtJQUNOQyxjQUFjO0FBQ2hCO0FBR0EsY0FBYztBQUVkLFNBQVNDLE1BQU1DLElBQUksRUFBRUMsRUFBRTtJQUNyQlgsT0FBT1ksRUFBRSxDQUFDRjtJQUNWVixPQUFPYSxLQUFLLENBQUMsT0FBUUgsTUFBTztJQUM1QlYsT0FBT1ksRUFBRSxDQUFDRDtJQUNWWCxPQUFPYSxLQUFLLENBQUMsT0FBUUYsSUFBSztJQUUxQixJQUFJRyxPQUFPQyxPQUFPQyxtQkFBbUIsQ0FBQ047SUFDdENJLEtBQUtHLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1FBQ3hCLElBQUlQLEVBQUUsQ0FBQ08sSUFBSSxFQUNUO1FBRUYsSUFBSUMsUUFBUUosT0FBT0ssd0JBQXdCLENBQUNWLE1BQU1RO1FBQ2xESCxPQUFPTSxjQUFjLENBQUNWLElBQUlPLEtBQUtDO0lBQ2pDO0lBRUEsT0FBT1I7QUFDVDtBQUlBLFVBQVU7QUFFVixTQUFTVyxPQUFPQyxPQUFPO0lBQ3JCQSxVQUFVZCxNQUFNSCxjQUFjaUIsV0FBVyxDQUFDO0lBRTFDLElBQUksQ0FBQ0MsSUFBSSxHQUFHdEIsT0FBT3VCLEtBQUssQ0FBQ0YsUUFBUWhCLElBQUksSUFBSTtJQUN6QyxJQUFJLENBQUNtQixLQUFLLEdBQUcsSUFBSSxDQUFDRixJQUFJLENBQUNHLE1BQU07SUFDN0IsSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDZixJQUFJLENBQUNDLFFBQVEsR0FBR047SUFF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eEIsT0FBTyxJQUFJdUQ7QUFDbEI7QUFFQTdELE9BQU9TLFNBQVMsQ0FBQ00sT0FBTyxHQUFHLFNBQVVlLEdBQUc7SUFDdENwRCxPQUFPWSxFQUFFLENBQUN3QztJQUVWLElBQUksSUFBSSxDQUFDMUIsS0FBSyxHQUFHLElBQUksQ0FBQ0UsT0FBTyxHQUFHd0IsS0FBSztRQUNuQyxJQUFJVixLQUFLLElBQUksQ0FBQ2hCLEtBQUssR0FBRyxJQUFJLENBQUNHLFFBQVEsQ0FBQ3JCLFlBQVk7UUFDaEQsSUFBSWtDLEtBQUssSUFBSSxDQUFDZCxPQUFPLEdBQUd3QixLQUN0QlYsTUFBTVU7UUFFUixJQUFJSyxNQUFNdkQsT0FBT3VCLEtBQUssQ0FBQ2lCO1FBRXZCLElBQUksQ0FBQ2xCLElBQUksQ0FBQ21DLElBQUksQ0FBQ0YsS0FBSyxHQUFHLEdBQUcsSUFBSSxDQUFDN0IsT0FBTztRQUN0QyxJQUFJLENBQUNKLElBQUksR0FBR2lDO1FBQ1osSUFBSSxDQUFDL0IsS0FBSyxHQUFHZ0I7SUFDZjtBQUNGO0FBSUEsbUJBQW1CO0FBRW5CMkMsT0FBT0MsT0FBTyxHQUFHaEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvd3JpdGVyLmpzPzgyODIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIEFTTjEgPSByZXF1aXJlKCcuL3R5cGVzJyk7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcblxuXG4vLyAtLS0gR2xvYmFsc1xuXG52YXIgbmV3SW52YWxpZEFzbjFFcnJvciA9IGVycm9ycy5uZXdJbnZhbGlkQXNuMUVycm9yO1xuXG52YXIgREVGQVVMVF9PUFRTID0ge1xuICBzaXplOiAxMDI0LFxuICBncm93dGhGYWN0b3I6IDhcbn07XG5cblxuLy8gLS0tIEhlbHBlcnNcblxuZnVuY3Rpb24gbWVyZ2UoZnJvbSwgdG8pIHtcbiAgYXNzZXJ0Lm9rKGZyb20pO1xuICBhc3NlcnQuZXF1YWwodHlwZW9mIChmcm9tKSwgJ29iamVjdCcpO1xuICBhc3NlcnQub2sodG8pO1xuICBhc3NlcnQuZXF1YWwodHlwZW9mICh0byksICdvYmplY3QnKTtcblxuICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGZyb20pO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICh0b1trZXldKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIHZhbHVlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihmcm9tLCBrZXkpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0bywga2V5LCB2YWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiB0bztcbn1cblxuXG5cbi8vIC0tLSBBUElcblxuZnVuY3Rpb24gV3JpdGVyKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG1lcmdlKERFRkFVTFRfT1BUUywgb3B0aW9ucyB8fCB7fSk7XG5cbiAgdGhpcy5fYnVmID0gQnVmZmVyLmFsbG9jKG9wdGlvbnMuc2l6ZSB8fCAxMDI0KTtcbiAgdGhpcy5fc2l6ZSA9IHRoaXMuX2J1Zi5sZW5ndGg7XG4gIHRoaXMuX29mZnNldCA9IDA7XG4gIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuXG4gIC8vIEEgbGlzdCBvZiBvZmZzZXRzIGluIHRoZSBidWZmZXIgd2hlcmUgd2UgbmVlZCB0byBpbnNlcnRcbiAgLy8gc2VxdWVuY2UgdGFnL2xlbiBwYWlycy5cbiAgdGhpcy5fc2VxID0gW107XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0ZXIucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fc2VxLmxlbmd0aClcbiAgICAgIHRocm93IG5ld0ludmFsaWRBc24xRXJyb3IodGhpcy5fc2VxLmxlbmd0aCArICcgdW5lbmRlZCBzZXF1ZW5jZShzKScpO1xuXG4gICAgcmV0dXJuICh0aGlzLl9idWYuc2xpY2UoMCwgdGhpcy5fb2Zmc2V0KSk7XG4gIH1cbn0pO1xuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlQnl0ZSA9IGZ1bmN0aW9uIChiKSB7XG4gIGlmICh0eXBlb2YgKGIpICE9PSAnbnVtYmVyJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgTnVtYmVyJyk7XG5cbiAgdGhpcy5fZW5zdXJlKDEpO1xuICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gYjtcbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZUludCA9IGZ1bmN0aW9uIChpLCB0YWcpIHtcbiAgaWYgKHR5cGVvZiAoaSkgIT09ICdudW1iZXInKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBOdW1iZXInKTtcbiAgaWYgKHR5cGVvZiAodGFnKSAhPT0gJ251bWJlcicpXG4gICAgdGFnID0gQVNOMS5JbnRlZ2VyO1xuXG4gIHZhciBzeiA9IDQ7XG5cbiAgd2hpbGUgKCgoKGkgJiAweGZmODAwMDAwKSA9PT0gMCkgfHwgKChpICYgMHhmZjgwMDAwMCkgPT09IDB4ZmY4MDAwMDAgPj4gMCkpICYmXG4gICAgICAgIChzeiA+IDEpKSB7XG4gICAgc3otLTtcbiAgICBpIDw8PSA4O1xuICB9XG5cbiAgaWYgKHN6ID4gNClcbiAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdCRVIgaW50cyBjYW5ub3QgYmUgPiAweGZmZmZmZmZmJyk7XG5cbiAgdGhpcy5fZW5zdXJlKDIgKyBzeik7XG4gIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSB0YWc7XG4gIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBzejtcblxuICB3aGlsZSAoc3otLSA+IDApIHtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gKChpICYgMHhmZjAwMDAwMCkgPj4+IDI0KTtcbiAgICBpIDw8PSA4O1xuICB9XG5cbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZU51bGwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMud3JpdGVCeXRlKEFTTjEuTnVsbCk7XG4gIHRoaXMud3JpdGVCeXRlKDB4MDApO1xufTtcblxuXG5Xcml0ZXIucHJvdG90eXBlLndyaXRlRW51bWVyYXRpb24gPSBmdW5jdGlvbiAoaSwgdGFnKSB7XG4gIGlmICh0eXBlb2YgKGkpICE9PSAnbnVtYmVyJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gIGlmICh0eXBlb2YgKHRhZykgIT09ICdudW1iZXInKVxuICAgIHRhZyA9IEFTTjEuRW51bWVyYXRpb247XG5cbiAgcmV0dXJuIHRoaXMud3JpdGVJbnQoaSwgdGFnKTtcbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZUJvb2xlYW4gPSBmdW5jdGlvbiAoYiwgdGFnKSB7XG4gIGlmICh0eXBlb2YgKGIpICE9PSAnYm9vbGVhbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhIEJvb2xlYW4nKTtcbiAgaWYgKHR5cGVvZiAodGFnKSAhPT0gJ251bWJlcicpXG4gICAgdGFnID0gQVNOMS5Cb29sZWFuO1xuXG4gIHRoaXMuX2Vuc3VyZSgzKTtcbiAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IHRhZztcbiAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IDB4MDE7XG4gIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBiID8gMHhmZiA6IDB4MDA7XG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVTdHJpbmcgPSBmdW5jdGlvbiAocywgdGFnKSB7XG4gIGlmICh0eXBlb2YgKHMpICE9PSAnc3RyaW5nJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nICh3YXM6ICcgKyB0eXBlb2YgKHMpICsgJyknKTtcbiAgaWYgKHR5cGVvZiAodGFnKSAhPT0gJ251bWJlcicpXG4gICAgdGFnID0gQVNOMS5PY3RldFN0cmluZztcblxuICB2YXIgbGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgocyk7XG4gIHRoaXMud3JpdGVCeXRlKHRhZyk7XG4gIHRoaXMud3JpdGVMZW5ndGgobGVuKTtcbiAgaWYgKGxlbikge1xuICAgIHRoaXMuX2Vuc3VyZShsZW4pO1xuICAgIHRoaXMuX2J1Zi53cml0ZShzLCB0aGlzLl9vZmZzZXQpO1xuICAgIHRoaXMuX29mZnNldCArPSBsZW47XG4gIH1cbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS53cml0ZUJ1ZmZlciA9IGZ1bmN0aW9uIChidWYsIHRhZykge1xuICBpZiAodHlwZW9mICh0YWcpICE9PSAnbnVtYmVyJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YWcgbXVzdCBiZSBhIG51bWJlcicpO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBidWZmZXInKTtcblxuICB0aGlzLndyaXRlQnl0ZSh0YWcpO1xuICB0aGlzLndyaXRlTGVuZ3RoKGJ1Zi5sZW5ndGgpO1xuICB0aGlzLl9lbnN1cmUoYnVmLmxlbmd0aCk7XG4gIGJ1Zi5jb3B5KHRoaXMuX2J1ZiwgdGhpcy5fb2Zmc2V0LCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5fb2Zmc2V0ICs9IGJ1Zi5sZW5ndGg7XG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVTdHJpbmdBcnJheSA9IGZ1bmN0aW9uIChzdHJpbmdzKSB7XG4gIGlmICgoIXN0cmluZ3MgaW5zdGFuY2VvZiBBcnJheSkpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheVtTdHJpbmddJyk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzdHJpbmdzLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICBzZWxmLndyaXRlU3RyaW5nKHMpO1xuICB9KTtcbn07XG5cbi8vIFRoaXMgaXMgcmVhbGx5IHRvIHNvbHZlIERFUiBjYXNlcywgYnV0IHdoYXRldmVyIGZvciBub3dcbldyaXRlci5wcm90b3R5cGUud3JpdGVPSUQgPSBmdW5jdGlvbiAocywgdGFnKSB7XG4gIGlmICh0eXBlb2YgKHMpICE9PSAnc3RyaW5nJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIGlmICh0eXBlb2YgKHRhZykgIT09ICdudW1iZXInKVxuICAgIHRhZyA9IEFTTjEuT0lEO1xuXG4gIGlmICghL14oWzAtOV0rXFwuKXszLH1bMC05XSskLy50ZXN0KHMpKVxuICAgIHRocm93IG5ldyBFcnJvcignYXJndW1lbnQgaXMgbm90IGEgdmFsaWQgT0lEIHN0cmluZycpO1xuXG4gIGZ1bmN0aW9uIGVuY29kZU9jdGV0KGJ5dGVzLCBvY3RldCkge1xuICAgIGlmIChvY3RldCA8IDEyOCkge1xuICAgICAgICBieXRlcy5wdXNoKG9jdGV0KTtcbiAgICB9IGVsc2UgaWYgKG9jdGV0IDwgMTYzODQpIHtcbiAgICAgICAgYnl0ZXMucHVzaCgob2N0ZXQgPj4+IDcpIHwgMHg4MCk7XG4gICAgICAgIGJ5dGVzLnB1c2gob2N0ZXQgJiAweDdGKTtcbiAgICB9IGVsc2UgaWYgKG9jdGV0IDwgMjA5NzE1Mikge1xuICAgICAgYnl0ZXMucHVzaCgob2N0ZXQgPj4+IDE0KSB8IDB4ODApO1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiA3KSB8IDB4ODApICYgMHhGRik7XG4gICAgICBieXRlcy5wdXNoKG9jdGV0ICYgMHg3Rik7XG4gICAgfSBlbHNlIGlmIChvY3RldCA8IDI2ODQzNTQ1Nikge1xuICAgICAgYnl0ZXMucHVzaCgob2N0ZXQgPj4+IDIxKSB8IDB4ODApO1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiAxNCkgfCAweDgwKSAmIDB4RkYpO1xuICAgICAgYnl0ZXMucHVzaCgoKG9jdGV0ID4+PiA3KSB8IDB4ODApICYgMHhGRik7XG4gICAgICBieXRlcy5wdXNoKG9jdGV0ICYgMHg3Rik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ5dGVzLnB1c2goKChvY3RldCA+Pj4gMjgpIHwgMHg4MCkgJiAweEZGKTtcbiAgICAgIGJ5dGVzLnB1c2goKChvY3RldCA+Pj4gMjEpIHwgMHg4MCkgJiAweEZGKTtcbiAgICAgIGJ5dGVzLnB1c2goKChvY3RldCA+Pj4gMTQpIHwgMHg4MCkgJiAweEZGKTtcbiAgICAgIGJ5dGVzLnB1c2goKChvY3RldCA+Pj4gNykgfCAweDgwKSAmIDB4RkYpO1xuICAgICAgYnl0ZXMucHVzaChvY3RldCAmIDB4N0YpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0bXAgPSBzLnNwbGl0KCcuJyk7XG4gIHZhciBieXRlcyA9IFtdO1xuICBieXRlcy5wdXNoKHBhcnNlSW50KHRtcFswXSwgMTApICogNDAgKyBwYXJzZUludCh0bXBbMV0sIDEwKSk7XG4gIHRtcC5zbGljZSgyKS5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XG4gICAgZW5jb2RlT2N0ZXQoYnl0ZXMsIHBhcnNlSW50KGIsIDEwKSk7XG4gIH0pO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fZW5zdXJlKDIgKyBieXRlcy5sZW5ndGgpO1xuICB0aGlzLndyaXRlQnl0ZSh0YWcpO1xuICB0aGlzLndyaXRlTGVuZ3RoKGJ5dGVzLmxlbmd0aCk7XG4gIGJ5dGVzLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcbiAgICBzZWxmLndyaXRlQnl0ZShiKTtcbiAgfSk7XG59O1xuXG5cbldyaXRlci5wcm90b3R5cGUud3JpdGVMZW5ndGggPSBmdW5jdGlvbiAobGVuKSB7XG4gIGlmICh0eXBlb2YgKGxlbikgIT09ICdudW1iZXInKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgYSBOdW1iZXInKTtcblxuICB0aGlzLl9lbnN1cmUoNCk7XG5cbiAgaWYgKGxlbiA8PSAweDdmKSB7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbjtcbiAgfSBlbHNlIGlmIChsZW4gPD0gMHhmZikge1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSAweDgxO1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBsZW47XG4gIH0gZWxzZSBpZiAobGVuIDw9IDB4ZmZmZikge1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSAweDgyO1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBsZW4gPj4gODtcbiAgICB0aGlzLl9idWZbdGhpcy5fb2Zmc2V0KytdID0gbGVuO1xuICB9IGVsc2UgaWYgKGxlbiA8PSAweGZmZmZmZikge1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSAweDgzO1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBsZW4gPj4gMTY7XG4gICAgdGhpcy5fYnVmW3RoaXMuX29mZnNldCsrXSA9IGxlbiA+PiA4O1xuICAgIHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gPSBsZW47XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignTGVuZ3RoIHRvbyBsb25nICg+IDQgYnl0ZXMpJyk7XG4gIH1cbn07XG5cbldyaXRlci5wcm90b3R5cGUuc3RhcnRTZXF1ZW5jZSA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgaWYgKHR5cGVvZiAodGFnKSAhPT0gJ251bWJlcicpXG4gICAgdGFnID0gQVNOMS5TZXF1ZW5jZSB8IEFTTjEuQ29uc3RydWN0b3I7XG5cbiAgdGhpcy53cml0ZUJ5dGUodGFnKTtcbiAgdGhpcy5fc2VxLnB1c2godGhpcy5fb2Zmc2V0KTtcbiAgdGhpcy5fZW5zdXJlKDMpO1xuICB0aGlzLl9vZmZzZXQgKz0gMztcbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS5lbmRTZXF1ZW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlcSA9IHRoaXMuX3NlcS5wb3AoKTtcbiAgdmFyIHN0YXJ0ID0gc2VxICsgMztcbiAgdmFyIGxlbiA9IHRoaXMuX29mZnNldCAtIHN0YXJ0O1xuXG4gIGlmIChsZW4gPD0gMHg3Zikge1xuICAgIHRoaXMuX3NoaWZ0KHN0YXJ0LCBsZW4sIC0yKTtcbiAgICB0aGlzLl9idWZbc2VxXSA9IGxlbjtcbiAgfSBlbHNlIGlmIChsZW4gPD0gMHhmZikge1xuICAgIHRoaXMuX3NoaWZ0KHN0YXJ0LCBsZW4sIC0xKTtcbiAgICB0aGlzLl9idWZbc2VxXSA9IDB4ODE7XG4gICAgdGhpcy5fYnVmW3NlcSArIDFdID0gbGVuO1xuICB9IGVsc2UgaWYgKGxlbiA8PSAweGZmZmYpIHtcbiAgICB0aGlzLl9idWZbc2VxXSA9IDB4ODI7XG4gICAgdGhpcy5fYnVmW3NlcSArIDFdID0gbGVuID4+IDg7XG4gICAgdGhpcy5fYnVmW3NlcSArIDJdID0gbGVuO1xuICB9IGVsc2UgaWYgKGxlbiA8PSAweGZmZmZmZikge1xuICAgIHRoaXMuX3NoaWZ0KHN0YXJ0LCBsZW4sIDEpO1xuICAgIHRoaXMuX2J1ZltzZXFdID0gMHg4MztcbiAgICB0aGlzLl9idWZbc2VxICsgMV0gPSBsZW4gPj4gMTY7XG4gICAgdGhpcy5fYnVmW3NlcSArIDJdID0gbGVuID4+IDg7XG4gICAgdGhpcy5fYnVmW3NlcSArIDNdID0gbGVuO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ld0ludmFsaWRBc24xRXJyb3IoJ1NlcXVlbmNlIHRvbyBsb25nJyk7XG4gIH1cbn07XG5cblxuV3JpdGVyLnByb3RvdHlwZS5fc2hpZnQgPSBmdW5jdGlvbiAoc3RhcnQsIGxlbiwgc2hpZnQpIHtcbiAgYXNzZXJ0Lm9rKHN0YXJ0ICE9PSB1bmRlZmluZWQpO1xuICBhc3NlcnQub2sobGVuICE9PSB1bmRlZmluZWQpO1xuICBhc3NlcnQub2soc2hpZnQpO1xuXG4gIHRoaXMuX2J1Zi5jb3B5KHRoaXMuX2J1Ziwgc3RhcnQgKyBzaGlmdCwgc3RhcnQsIHN0YXJ0ICsgbGVuKTtcbiAgdGhpcy5fb2Zmc2V0ICs9IHNoaWZ0O1xufTtcblxuV3JpdGVyLnByb3RvdHlwZS5fZW5zdXJlID0gZnVuY3Rpb24gKGxlbikge1xuICBhc3NlcnQub2sobGVuKTtcblxuICBpZiAodGhpcy5fc2l6ZSAtIHRoaXMuX29mZnNldCA8IGxlbikge1xuICAgIHZhciBzeiA9IHRoaXMuX3NpemUgKiB0aGlzLl9vcHRpb25zLmdyb3d0aEZhY3RvcjtcbiAgICBpZiAoc3ogLSB0aGlzLl9vZmZzZXQgPCBsZW4pXG4gICAgICBzeiArPSBsZW47XG5cbiAgICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jKHN6KTtcblxuICAgIHRoaXMuX2J1Zi5jb3B5KGJ1ZiwgMCwgMCwgdGhpcy5fb2Zmc2V0KTtcbiAgICB0aGlzLl9idWYgPSBidWY7XG4gICAgdGhpcy5fc2l6ZSA9IHN6O1xuICB9XG59O1xuXG5cblxuLy8gLS0tIEV4cG9ydGVkIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRlcjtcbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiQnVmZmVyIiwiQVNOMSIsImVycm9ycyIsIm5ld0ludmFsaWRBc24xRXJyb3IiLCJERUZBVUxUX09QVFMiLCJzaXplIiwiZ3Jvd3RoRmFjdG9yIiwibWVyZ2UiLCJmcm9tIiwidG8iLCJvayIsImVxdWFsIiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsIldyaXRlciIsIm9wdGlvbnMiLCJfYnVmIiwiYWxsb2MiLCJfc2l6ZSIsImxlbmd0aCIsIl9vZmZzZXQiLCJfb3B0aW9ucyIsIl9zZXEiLCJwcm90b3R5cGUiLCJnZXQiLCJzbGljZSIsIndyaXRlQnl0ZSIsImIiLCJUeXBlRXJyb3IiLCJfZW5zdXJlIiwid3JpdGVJbnQiLCJpIiwidGFnIiwiSW50ZWdlciIsInN6Iiwid3JpdGVOdWxsIiwiTnVsbCIsIndyaXRlRW51bWVyYXRpb24iLCJFbnVtZXJhdGlvbiIsIndyaXRlQm9vbGVhbiIsIkJvb2xlYW4iLCJ3cml0ZVN0cmluZyIsInMiLCJPY3RldFN0cmluZyIsImxlbiIsImJ5dGVMZW5ndGgiLCJ3cml0ZUxlbmd0aCIsIndyaXRlIiwid3JpdGVCdWZmZXIiLCJidWYiLCJpc0J1ZmZlciIsImNvcHkiLCJ3cml0ZVN0cmluZ0FycmF5Iiwic3RyaW5ncyIsIkFycmF5Iiwic2VsZiIsIndyaXRlT0lEIiwiT0lEIiwidGVzdCIsIkVycm9yIiwiZW5jb2RlT2N0ZXQiLCJieXRlcyIsIm9jdGV0IiwicHVzaCIsInRtcCIsInNwbGl0IiwicGFyc2VJbnQiLCJzdGFydFNlcXVlbmNlIiwiU2VxdWVuY2UiLCJDb25zdHJ1Y3RvciIsImVuZFNlcXVlbmNlIiwic2VxIiwicG9wIiwic3RhcnQiLCJfc2hpZnQiLCJzaGlmdCIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/ber/writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/asn1/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/asn1/lib/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n// If you have no idea what ASN.1 or BER is, see this:\n// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc\n\nvar Ber = __webpack_require__(/*! ./ber/index */ \"(ssr)/./node_modules/asn1/lib/ber/index.js\");\n// --- Exported API\nmodule.exports = {\n    Ber: Ber,\n    BerReader: Ber.Reader,\n    BerWriter: Ber.Writer\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsc0VBQXNFO0FBRXRFLHNEQUFzRDtBQUN0RCw4Q0FBOEM7O0FBRTlDLElBQUlBLE1BQU1DLG1CQUFPQSxDQUFDO0FBSWxCLG1CQUFtQjtBQUVuQkMsT0FBT0MsT0FBTyxHQUFHO0lBRWZILEtBQUtBO0lBRUxJLFdBQVdKLElBQUlLLE1BQU07SUFFckJDLFdBQVdOLElBQUlPLE1BQU07QUFFdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9pbmRleC5qcz9lMTBkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDExIE1hcmsgQ2F2YWdlIDxtY2F2YWdlQGdtYWlsLmNvbT4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuLy8gSWYgeW91IGhhdmUgbm8gaWRlYSB3aGF0IEFTTi4xIG9yIEJFUiBpcywgc2VlIHRoaXM6XG4vLyBmdHA6Ly9mdHAucnNhLmNvbS9wdWIvcGtjcy9hc2NpaS9sYXltYW4uYXNjXG5cbnZhciBCZXIgPSByZXF1aXJlKCcuL2Jlci9pbmRleCcpO1xuXG5cblxuLy8gLS0tIEV4cG9ydGVkIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBCZXI6IEJlcixcblxuICBCZXJSZWFkZXI6IEJlci5SZWFkZXIsXG5cbiAgQmVyV3JpdGVyOiBCZXIuV3JpdGVyXG5cbn07XG4iXSwibmFtZXMiOlsiQmVyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJCZXJSZWFkZXIiLCJSZWFkZXIiLCJCZXJXcml0ZXIiLCJXcml0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/errors.js ***!
  \*********************************************/
/***/ ((module) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nmodule.exports = {\n    newInvalidAsn1Error: function(msg) {\n        var e = new Error();\n        e.name = \"InvalidAsn1Error\";\n        e.message = msg || \"\";\n        return e;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzRUFBc0U7O0FBR3RFQSxPQUFPQyxPQUFPLEdBQUc7SUFFZkMscUJBQXFCLFNBQVVDLEdBQUc7UUFDaEMsSUFBSUMsSUFBSSxJQUFJQztRQUNaRCxFQUFFRSxJQUFJLEdBQUc7UUFDVEYsRUFBRUcsT0FBTyxHQUFHSixPQUFPO1FBQ25CLE9BQU9DO0lBQ1Q7QUFFRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2Jlci9lcnJvcnMuanM/MzMzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgbmV3SW52YWxpZEFzbjFFcnJvcjogZnVuY3Rpb24gKG1zZykge1xuICAgIHZhciBlID0gbmV3IEVycm9yKCk7XG4gICAgZS5uYW1lID0gJ0ludmFsaWRBc24xRXJyb3InO1xuICAgIGUubWVzc2FnZSA9IG1zZyB8fCAnJztcbiAgICByZXR1cm4gZTtcbiAgfVxuXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJuZXdJbnZhbGlkQXNuMUVycm9yIiwibXNnIiwiZSIsIkVycm9yIiwibmFtZSIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/index.js":
/*!********************************************!*\
  !*** ./node_modules/asn1/lib/ber/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/asn1/lib/ber/errors.js\");\nvar types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/asn1/lib/ber/types.js\");\nvar Reader = __webpack_require__(/*! ./reader */ \"(rsc)/./node_modules/asn1/lib/ber/reader.js\");\nvar Writer = __webpack_require__(/*! ./writer */ \"(rsc)/./node_modules/asn1/lib/ber/writer.js\");\n// --- Exports\nmodule.exports = {\n    Reader: Reader,\n    Writer: Writer\n};\nfor(var t in types){\n    if (types.hasOwnProperty(t)) module.exports[t] = types[t];\n}\nfor(var e in errors){\n    if (errors.hasOwnProperty(e)) module.exports[e] = errors[e];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHNFQUFzRTs7QUFFdEUsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUM7QUFFcEIsSUFBSUUsU0FBU0YsbUJBQU9BLENBQUM7QUFDckIsSUFBSUcsU0FBU0gsbUJBQU9BLENBQUM7QUFHckIsY0FBYztBQUVkSSxPQUFPQyxPQUFPLEdBQUc7SUFFZkgsUUFBUUE7SUFFUkMsUUFBUUE7QUFFVjtBQUVBLElBQUssSUFBSUcsS0FBS0wsTUFBTztJQUNuQixJQUFJQSxNQUFNTSxjQUFjLENBQUNELElBQ3ZCRixPQUFPQyxPQUFPLENBQUNDLEVBQUUsR0FBR0wsS0FBSyxDQUFDSyxFQUFFO0FBQ2hDO0FBQ0EsSUFBSyxJQUFJRSxLQUFLVCxPQUFRO0lBQ3BCLElBQUlBLE9BQU9RLGNBQWMsQ0FBQ0MsSUFDeEJKLE9BQU9DLE9BQU8sQ0FBQ0csRUFBRSxHQUFHVCxNQUFNLENBQUNTLEVBQUU7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvaW5kZXguanM/OTdjNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xudmFyIHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuXG52YXIgUmVhZGVyID0gcmVxdWlyZSgnLi9yZWFkZXInKTtcbnZhciBXcml0ZXIgPSByZXF1aXJlKCcuL3dyaXRlcicpO1xuXG5cbi8vIC0tLSBFeHBvcnRzXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIFJlYWRlcjogUmVhZGVyLFxuXG4gIFdyaXRlcjogV3JpdGVyXG5cbn07XG5cbmZvciAodmFyIHQgaW4gdHlwZXMpIHtcbiAgaWYgKHR5cGVzLmhhc093blByb3BlcnR5KHQpKVxuICAgIG1vZHVsZS5leHBvcnRzW3RdID0gdHlwZXNbdF07XG59XG5mb3IgKHZhciBlIGluIGVycm9ycykge1xuICBpZiAoZXJyb3JzLmhhc093blByb3BlcnR5KGUpKVxuICAgIG1vZHVsZS5leHBvcnRzW2VdID0gZXJyb3JzW2VdO1xufVxuIl0sIm5hbWVzIjpbImVycm9ycyIsInJlcXVpcmUiLCJ0eXBlcyIsIlJlYWRlciIsIldyaXRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0IiwiaGFzT3duUHJvcGVydHkiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/reader.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/reader.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar ASN1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/asn1/lib/ber/types.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/asn1/lib/ber/errors.js\");\n// --- Globals\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n// --- API\nfunction Reader(data) {\n    if (!data || !Buffer.isBuffer(data)) throw new TypeError(\"data must be a node Buffer\");\n    this._buf = data;\n    this._size = data.length;\n    // These hold the \"current\" state\n    this._len = 0;\n    this._offset = 0;\n}\nObject.defineProperty(Reader.prototype, \"length\", {\n    enumerable: true,\n    get: function() {\n        return this._len;\n    }\n});\nObject.defineProperty(Reader.prototype, \"offset\", {\n    enumerable: true,\n    get: function() {\n        return this._offset;\n    }\n});\nObject.defineProperty(Reader.prototype, \"remain\", {\n    get: function() {\n        return this._size - this._offset;\n    }\n});\nObject.defineProperty(Reader.prototype, \"buffer\", {\n    get: function() {\n        return this._buf.slice(this._offset);\n    }\n});\n/**\n * Reads a single byte and advances offset; you can pass in `true` to make this\n * a \"peek\" operation (i.e., get the byte, but don't advance the offset).\n *\n * @param {Boolean} peek true means don't move offset.\n * @return {Number} the next byte, null if not enough data.\n */ Reader.prototype.readByte = function(peek) {\n    if (this._size - this._offset < 1) return null;\n    var b = this._buf[this._offset] & 0xff;\n    if (!peek) this._offset += 1;\n    return b;\n};\nReader.prototype.peek = function() {\n    return this.readByte(true);\n};\n/**\n * Reads a (potentially) variable length off the BER buffer.  This call is\n * not really meant to be called directly, as callers have to manipulate\n * the internal buffer afterwards.\n *\n * As a result of this call, you can call `Reader.length`, until the\n * next thing called that does a readLength.\n *\n * @return {Number} the amount of offset to advance the buffer.\n * @throws {InvalidAsn1Error} on bad ASN.1\n */ Reader.prototype.readLength = function(offset) {\n    if (offset === undefined) offset = this._offset;\n    if (offset >= this._size) return null;\n    var lenB = this._buf[offset++] & 0xff;\n    if (lenB === null) return null;\n    if ((lenB & 0x80) === 0x80) {\n        lenB &= 0x7f;\n        if (lenB === 0) throw newInvalidAsn1Error(\"Indefinite length not supported\");\n        if (lenB > 4) throw newInvalidAsn1Error(\"encoding too long\");\n        if (this._size - offset < lenB) return null;\n        this._len = 0;\n        for(var i = 0; i < lenB; i++)this._len = (this._len << 8) + (this._buf[offset++] & 0xff);\n    } else {\n        // Wasn't a variable length\n        this._len = lenB;\n    }\n    return offset;\n};\n/**\n * Parses the next sequence in this BER buffer.\n *\n * To get the length of the sequence, call `Reader.length`.\n *\n * @return {Number} the sequence's tag.\n */ Reader.prototype.readSequence = function(tag) {\n    var seq = this.peek();\n    if (seq === null) return null;\n    if (tag !== undefined && tag !== seq) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + seq.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    this._offset = o;\n    return seq;\n};\nReader.prototype.readInt = function() {\n    return this._readTag(ASN1.Integer);\n};\nReader.prototype.readBoolean = function() {\n    return this._readTag(ASN1.Boolean) === 0 ? false : true;\n};\nReader.prototype.readEnumeration = function() {\n    return this._readTag(ASN1.Enumeration);\n};\nReader.prototype.readString = function(tag, retbuf) {\n    if (!tag) tag = ASN1.OctetString;\n    var b = this.peek();\n    if (b === null) return null;\n    if (b !== tag) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + b.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    if (this.length > this._size - o) return null;\n    this._offset = o;\n    if (this.length === 0) return retbuf ? Buffer.alloc(0) : \"\";\n    var str = this._buf.slice(this._offset, this._offset + this.length);\n    this._offset += this.length;\n    return retbuf ? str : str.toString(\"utf8\");\n};\nReader.prototype.readOID = function(tag) {\n    if (!tag) tag = ASN1.OID;\n    var b = this.readString(tag, true);\n    if (b === null) return null;\n    var values = [];\n    var value = 0;\n    for(var i = 0; i < b.length; i++){\n        var byte = b[i] & 0xff;\n        value <<= 7;\n        value += byte & 0x7f;\n        if ((byte & 0x80) === 0) {\n            values.push(value);\n            value = 0;\n        }\n    }\n    value = values.shift();\n    values.unshift(value % 40);\n    values.unshift(value / 40 >> 0);\n    return values.join(\".\");\n};\nReader.prototype._readTag = function(tag) {\n    assert.ok(tag !== undefined);\n    var b = this.peek();\n    if (b === null) return null;\n    if (b !== tag) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + b.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    if (this.length > 4) throw newInvalidAsn1Error(\"Integer too long: \" + this.length);\n    if (this.length > this._size - o) return null;\n    this._offset = o;\n    var fb = this._buf[this._offset];\n    var value = 0;\n    for(var i = 0; i < this.length; i++){\n        value <<= 8;\n        value |= this._buf[this._offset++] & 0xff;\n    }\n    if ((fb & 0x80) === 0x80 && i !== 4) value -= 1 << i * 8;\n    return value >> 0;\n};\n// --- Exported API\nmodule.exports = Reader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/types.js":
/*!********************************************!*\
  !*** ./node_modules/asn1/lib/ber/types.js ***!
  \********************************************/
/***/ ((module) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nmodule.exports = {\n    EOC: 0,\n    Boolean: 1,\n    Integer: 2,\n    BitString: 3,\n    OctetString: 4,\n    Null: 5,\n    OID: 6,\n    ObjectDescriptor: 7,\n    External: 8,\n    Real: 9,\n    Enumeration: 10,\n    PDV: 11,\n    Utf8String: 12,\n    RelativeOID: 13,\n    Sequence: 16,\n    Set: 17,\n    NumericString: 18,\n    PrintableString: 19,\n    T61String: 20,\n    VideotexString: 21,\n    IA5String: 22,\n    UTCTime: 23,\n    GeneralizedTime: 24,\n    GraphicString: 25,\n    VisibleString: 26,\n    GeneralString: 28,\n    UniversalString: 29,\n    CharacterString: 30,\n    BMPString: 31,\n    Constructor: 32,\n    Context: 128\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNFQUFzRTs7QUFHdEVBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxLQUFLO0lBQ0xDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxXQUFXO0lBQ1hDLGFBQWE7SUFDYkMsTUFBTTtJQUNOQyxLQUFLO0lBQ0xDLGtCQUFrQjtJQUNsQkMsVUFBVTtJQUNWQyxNQUFNO0lBQ05DLGFBQWE7SUFDYkMsS0FBSztJQUNMQyxZQUFZO0lBQ1pDLGFBQWE7SUFDYkMsVUFBVTtJQUNWQyxLQUFLO0lBQ0xDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxXQUFXO0lBQ1hDLGdCQUFnQjtJQUNoQkMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLGlCQUFpQjtJQUNqQkMsZUFBZTtJQUNmQyxlQUFlO0lBQ2ZDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxpQkFBaUI7SUFDakJDLFdBQVc7SUFDWEMsYUFBYTtJQUNiQyxTQUFTO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvdHlwZXMuanM/NTk1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEVPQzogMCxcbiAgQm9vbGVhbjogMSxcbiAgSW50ZWdlcjogMixcbiAgQml0U3RyaW5nOiAzLFxuICBPY3RldFN0cmluZzogNCxcbiAgTnVsbDogNSxcbiAgT0lEOiA2LFxuICBPYmplY3REZXNjcmlwdG9yOiA3LFxuICBFeHRlcm5hbDogOCxcbiAgUmVhbDogOSwgLy8gZmxvYXRcbiAgRW51bWVyYXRpb246IDEwLFxuICBQRFY6IDExLFxuICBVdGY4U3RyaW5nOiAxMixcbiAgUmVsYXRpdmVPSUQ6IDEzLFxuICBTZXF1ZW5jZTogMTYsXG4gIFNldDogMTcsXG4gIE51bWVyaWNTdHJpbmc6IDE4LFxuICBQcmludGFibGVTdHJpbmc6IDE5LFxuICBUNjFTdHJpbmc6IDIwLFxuICBWaWRlb3RleFN0cmluZzogMjEsXG4gIElBNVN0cmluZzogMjIsXG4gIFVUQ1RpbWU6IDIzLFxuICBHZW5lcmFsaXplZFRpbWU6IDI0LFxuICBHcmFwaGljU3RyaW5nOiAyNSxcbiAgVmlzaWJsZVN0cmluZzogMjYsXG4gIEdlbmVyYWxTdHJpbmc6IDI4LFxuICBVbml2ZXJzYWxTdHJpbmc6IDI5LFxuICBDaGFyYWN0ZXJTdHJpbmc6IDMwLFxuICBCTVBTdHJpbmc6IDMxLFxuICBDb25zdHJ1Y3RvcjogMzIsXG4gIENvbnRleHQ6IDEyOFxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRU9DIiwiQm9vbGVhbiIsIkludGVnZXIiLCJCaXRTdHJpbmciLCJPY3RldFN0cmluZyIsIk51bGwiLCJPSUQiLCJPYmplY3REZXNjcmlwdG9yIiwiRXh0ZXJuYWwiLCJSZWFsIiwiRW51bWVyYXRpb24iLCJQRFYiLCJVdGY4U3RyaW5nIiwiUmVsYXRpdmVPSUQiLCJTZXF1ZW5jZSIsIlNldCIsIk51bWVyaWNTdHJpbmciLCJQcmludGFibGVTdHJpbmciLCJUNjFTdHJpbmciLCJWaWRlb3RleFN0cmluZyIsIklBNVN0cmluZyIsIlVUQ1RpbWUiLCJHZW5lcmFsaXplZFRpbWUiLCJHcmFwaGljU3RyaW5nIiwiVmlzaWJsZVN0cmluZyIsIkdlbmVyYWxTdHJpbmciLCJVbml2ZXJzYWxTdHJpbmciLCJDaGFyYWN0ZXJTdHJpbmciLCJCTVBTdHJpbmciLCJDb25zdHJ1Y3RvciIsIkNvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/writer.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/writer.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar ASN1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/asn1/lib/ber/types.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/asn1/lib/ber/errors.js\");\n// --- Globals\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\nvar DEFAULT_OPTS = {\n    size: 1024,\n    growthFactor: 8\n};\n// --- Helpers\nfunction merge(from, to) {\n    assert.ok(from);\n    assert.equal(typeof from, \"object\");\n    assert.ok(to);\n    assert.equal(typeof to, \"object\");\n    var keys = Object.getOwnPropertyNames(from);\n    keys.forEach(function(key) {\n        if (to[key]) return;\n        var value = Object.getOwnPropertyDescriptor(from, key);\n        Object.defineProperty(to, key, value);\n    });\n    return to;\n}\n// --- API\nfunction Writer(options) {\n    options = merge(DEFAULT_OPTS, options || {});\n    this._buf = Buffer.alloc(options.size || 1024);\n    this._size = this._buf.length;\n    this._offset = 0;\n    this._options = options;\n    // A list of offsets in the buffer where we need to insert\n    // sequence tag/len pairs.\n    this._seq = [];\n}\nObject.defineProperty(Writer.prototype, \"buffer\", {\n    get: function() {\n        if (this._seq.length) throw newInvalidAsn1Error(this._seq.length + \" unended sequence(s)\");\n        return this._buf.slice(0, this._offset);\n    }\n});\nWriter.prototype.writeByte = function(b) {\n    if (typeof b !== \"number\") throw new TypeError(\"argument must be a Number\");\n    this._ensure(1);\n    this._buf[this._offset++] = b;\n};\nWriter.prototype.writeInt = function(i, tag) {\n    if (typeof i !== \"number\") throw new TypeError(\"argument must be a Number\");\n    if (typeof tag !== \"number\") tag = ASN1.Integer;\n    var sz = 4;\n    while(((i & 0xff800000) === 0 || (i & 0xff800000) === 0xff800000 >> 0) && sz > 1){\n        sz--;\n        i <<= 8;\n    }\n    if (sz > 4) throw newInvalidAsn1Error(\"BER ints cannot be > 0xffffffff\");\n    this._ensure(2 + sz);\n    this._buf[this._offset++] = tag;\n    this._buf[this._offset++] = sz;\n    while(sz-- > 0){\n        this._buf[this._offset++] = (i & 0xff000000) >>> 24;\n        i <<= 8;\n    }\n};\nWriter.prototype.writeNull = function() {\n    this.writeByte(ASN1.Null);\n    this.writeByte(0x00);\n};\nWriter.prototype.writeEnumeration = function(i, tag) {\n    if (typeof i !== \"number\") throw new TypeError(\"argument must be a Number\");\n    if (typeof tag !== \"number\") tag = ASN1.Enumeration;\n    return this.writeInt(i, tag);\n};\nWriter.prototype.writeBoolean = function(b, tag) {\n    if (typeof b !== \"boolean\") throw new TypeError(\"argument must be a Boolean\");\n    if (typeof tag !== \"number\") tag = ASN1.Boolean;\n    this._ensure(3);\n    this._buf[this._offset++] = tag;\n    this._buf[this._offset++] = 0x01;\n    this._buf[this._offset++] = b ? 0xff : 0x00;\n};\nWriter.prototype.writeString = function(s, tag) {\n    if (typeof s !== \"string\") throw new TypeError(\"argument must be a string (was: \" + typeof s + \")\");\n    if (typeof tag !== \"number\") tag = ASN1.OctetString;\n    var len = Buffer.byteLength(s);\n    this.writeByte(tag);\n    this.writeLength(len);\n    if (len) {\n        this._ensure(len);\n        this._buf.write(s, this._offset);\n        this._offset += len;\n    }\n};\nWriter.prototype.writeBuffer = function(buf, tag) {\n    if (typeof tag !== \"number\") throw new TypeError(\"tag must be a number\");\n    if (!Buffer.isBuffer(buf)) throw new TypeError(\"argument must be a buffer\");\n    this.writeByte(tag);\n    this.writeLength(buf.length);\n    this._ensure(buf.length);\n    buf.copy(this._buf, this._offset, 0, buf.length);\n    this._offset += buf.length;\n};\nWriter.prototype.writeStringArray = function(strings) {\n    if (!strings instanceof Array) throw new TypeError(\"argument must be an Array[String]\");\n    var self = this;\n    strings.forEach(function(s) {\n        self.writeString(s);\n    });\n};\n// This is really to solve DER cases, but whatever for now\nWriter.prototype.writeOID = function(s, tag) {\n    if (typeof s !== \"string\") throw new TypeError(\"argument must be a string\");\n    if (typeof tag !== \"number\") tag = ASN1.OID;\n    if (!/^([0-9]+\\.){3,}[0-9]+$/.test(s)) throw new Error(\"argument is not a valid OID string\");\n    function encodeOctet(bytes, octet) {\n        if (octet < 128) {\n            bytes.push(octet);\n        } else if (octet < 16384) {\n            bytes.push(octet >>> 7 | 0x80);\n            bytes.push(octet & 0x7F);\n        } else if (octet < 2097152) {\n            bytes.push(octet >>> 14 | 0x80);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        } else if (octet < 268435456) {\n            bytes.push(octet >>> 21 | 0x80);\n            bytes.push((octet >>> 14 | 0x80) & 0xFF);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        } else {\n            bytes.push((octet >>> 28 | 0x80) & 0xFF);\n            bytes.push((octet >>> 21 | 0x80) & 0xFF);\n            bytes.push((octet >>> 14 | 0x80) & 0xFF);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        }\n    }\n    var tmp = s.split(\".\");\n    var bytes = [];\n    bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));\n    tmp.slice(2).forEach(function(b) {\n        encodeOctet(bytes, parseInt(b, 10));\n    });\n    var self = this;\n    this._ensure(2 + bytes.length);\n    this.writeByte(tag);\n    this.writeLength(bytes.length);\n    bytes.forEach(function(b) {\n        self.writeByte(b);\n    });\n};\nWriter.prototype.writeLength = function(len) {\n    if (typeof len !== \"number\") throw new TypeError(\"argument must be a Number\");\n    this._ensure(4);\n    if (len <= 0x7f) {\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xff) {\n        this._buf[this._offset++] = 0x81;\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xffff) {\n        this._buf[this._offset++] = 0x82;\n        this._buf[this._offset++] = len >> 8;\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xffffff) {\n        this._buf[this._offset++] = 0x83;\n        this._buf[this._offset++] = len >> 16;\n        this._buf[this._offset++] = len >> 8;\n        this._buf[this._offset++] = len;\n    } else {\n        throw newInvalidAsn1Error(\"Length too long (> 4 bytes)\");\n    }\n};\nWriter.prototype.startSequence = function(tag) {\n    if (typeof tag !== \"number\") tag = ASN1.Sequence | ASN1.Constructor;\n    this.writeByte(tag);\n    this._seq.push(this._offset);\n    this._ensure(3);\n    this._offset += 3;\n};\nWriter.prototype.endSequence = function() {\n    var seq = this._seq.pop();\n    var start = seq + 3;\n    var len = this._offset - start;\n    if (len <= 0x7f) {\n        this._shift(start, len, -2);\n        this._buf[seq] = len;\n    } else if (len <= 0xff) {\n        this._shift(start, len, -1);\n        this._buf[seq] = 0x81;\n        this._buf[seq + 1] = len;\n    } else if (len <= 0xffff) {\n        this._buf[seq] = 0x82;\n        this._buf[seq + 1] = len >> 8;\n        this._buf[seq + 2] = len;\n    } else if (len <= 0xffffff) {\n        this._shift(start, len, 1);\n        this._buf[seq] = 0x83;\n        this._buf[seq + 1] = len >> 16;\n        this._buf[seq + 2] = len >> 8;\n        this._buf[seq + 3] = len;\n    } else {\n        throw newInvalidAsn1Error(\"Sequence too long\");\n    }\n};\nWriter.prototype._shift = function(start, len, shift) {\n    assert.ok(start !== undefined);\n    assert.ok(len !== undefined);\n    assert.ok(shift);\n    this._buf.copy(this._buf, start + shift, start, start + len);\n    this._offset += shift;\n};\nWriter.prototype._ensure = function(len) {\n    assert.ok(len);\n    if (this._size - this._offset < len) {\n        var sz = this._size * this._options.growthFactor;\n        if (sz - this._offset < len) sz += len;\n        var buf = Buffer.alloc(sz);\n        this._buf.copy(buf, 0, 0, this._offset);\n        this._buf = buf;\n        this._size = sz;\n    }\n};\n// --- Exported API\nmodule.exports = Writer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/asn1/lib/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n// If you have no idea what ASN.1 or BER is, see this:\n// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc\n\nvar Ber = __webpack_require__(/*! ./ber/index */ \"(rsc)/./node_modules/asn1/lib/ber/index.js\");\n// --- Exported API\nmodule.exports = {\n    Ber: Ber,\n    BerReader: Ber.Reader,\n    BerWriter: Ber.Writer\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsc0VBQXNFO0FBRXRFLHNEQUFzRDtBQUN0RCw4Q0FBOEM7O0FBRTlDLElBQUlBLE1BQU1DLG1CQUFPQSxDQUFDO0FBSWxCLG1CQUFtQjtBQUVuQkMsT0FBT0MsT0FBTyxHQUFHO0lBRWZILEtBQUtBO0lBRUxJLFdBQVdKLElBQUlLLE1BQU07SUFFckJDLFdBQVdOLElBQUlPLE1BQU07QUFFdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9pbmRleC5qcz9lMTBkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDExIE1hcmsgQ2F2YWdlIDxtY2F2YWdlQGdtYWlsLmNvbT4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuLy8gSWYgeW91IGhhdmUgbm8gaWRlYSB3aGF0IEFTTi4xIG9yIEJFUiBpcywgc2VlIHRoaXM6XG4vLyBmdHA6Ly9mdHAucnNhLmNvbS9wdWIvcGtjcy9hc2NpaS9sYXltYW4uYXNjXG5cbnZhciBCZXIgPSByZXF1aXJlKCcuL2Jlci9pbmRleCcpO1xuXG5cblxuLy8gLS0tIEV4cG9ydGVkIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBCZXI6IEJlcixcblxuICBCZXJSZWFkZXI6IEJlci5SZWFkZXIsXG5cbiAgQmVyV3JpdGVyOiBCZXIuV3JpdGVyXG5cbn07XG4iXSwibmFtZXMiOlsiQmVyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJCZXJSZWFkZXIiLCJSZWFkZXIiLCJCZXJXcml0ZXIiLCJXcml0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/index.js\n");

/***/ })

};
;