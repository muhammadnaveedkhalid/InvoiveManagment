"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/strnum";
exports.ids = ["vendor-chunks/strnum"];
exports.modules = {

/***/ "(ssr)/./node_modules/strnum/strnum.js":
/*!***************************************!*\
  !*** ./node_modules/strnum/strnum.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nconst hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\nconst consider = {\n    hex: true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \".\",\n    eNotation: true\n};\nfunction toNumber(str, options = {}) {\n    options = Object.assign({}, consider, options);\n    if (!str || typeof str !== \"string\") return str;\n    let trimmedStr = str.trim();\n    if (options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (str === \"0\") return 0;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    } else if (trimmedStr.search(/[eE]/) !== -1) {\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)$/);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if (notation) {\n            // console.log(notation)\n            if (options.leadingZeros) {\n                trimmedStr = (notation[1] || \"\") + notation[3];\n            } else {\n                if (notation[2] === \"0\" && notation[3][0] === \".\") {} else {\n                    return str;\n                }\n            }\n            return options.eNotation ? Number(trimmedStr) : str;\n        } else {\n            return str;\n        }\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    } else {\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if (match) {\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else if (options.leadingZeros && leadingZeros === str) return 0; //00\n            else {\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if (numStr.search(/[eE]/) !== -1) {\n                    if (options.eNotation) return num;\n                    else return str;\n                } else if (trimmedStr.indexOf(\".\") !== -1) {\n                    if (numStr === \"0\" && numTrimmedByZeros === \"\") return num; //0.0\n                    else if (numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if (sign && numStr === \"-\" + numTrimmedByZeros) return num;\n                    else return str;\n                }\n                if (leadingZeros) {\n                    return numTrimmedByZeros === numStr || sign + numTrimmedByZeros === numStr ? num : str;\n                } else {\n                    return trimmedStr === numStr || trimmedStr === sign + numStr ? num : str;\n                }\n            }\n        } else {\n            return str;\n        }\n    }\n}\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */ function trimZeros(numStr) {\n    if (numStr && numStr.indexOf(\".\") !== -1) {\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if (numStr === \".\") numStr = \"0\";\n        else if (numStr[0] === \".\") numStr = \"0\" + numStr;\n        else if (numStr[numStr.length - 1] === \".\") numStr = numStr.substr(0, numStr.length - 1);\n        return numStr;\n    }\n    return numStr;\n}\nfunction parse_int(numStr, base) {\n    //polyfill\n    if (parseInt) return parseInt(numStr, base);\n    else if (Number.parseInt) return Number.parseInt(numStr, base);\n    else if (window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\");\n}\nmodule.exports = toNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/strnum/strnum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/strnum/strnum.js":
/*!***************************************!*\
  !*** ./node_modules/strnum/strnum.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nconst hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\nconst consider = {\n    hex: true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \".\",\n    eNotation: true\n};\nfunction toNumber(str, options = {}) {\n    options = Object.assign({}, consider, options);\n    if (!str || typeof str !== \"string\") return str;\n    let trimmedStr = str.trim();\n    if (options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (str === \"0\") return 0;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    } else if (trimmedStr.search(/[eE]/) !== -1) {\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)$/);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if (notation) {\n            // console.log(notation)\n            if (options.leadingZeros) {\n                trimmedStr = (notation[1] || \"\") + notation[3];\n            } else {\n                if (notation[2] === \"0\" && notation[3][0] === \".\") {} else {\n                    return str;\n                }\n            }\n            return options.eNotation ? Number(trimmedStr) : str;\n        } else {\n            return str;\n        }\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    } else {\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if (match) {\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else if (options.leadingZeros && leadingZeros === str) return 0; //00\n            else {\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if (numStr.search(/[eE]/) !== -1) {\n                    if (options.eNotation) return num;\n                    else return str;\n                } else if (trimmedStr.indexOf(\".\") !== -1) {\n                    if (numStr === \"0\" && numTrimmedByZeros === \"\") return num; //0.0\n                    else if (numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if (sign && numStr === \"-\" + numTrimmedByZeros) return num;\n                    else return str;\n                }\n                if (leadingZeros) {\n                    return numTrimmedByZeros === numStr || sign + numTrimmedByZeros === numStr ? num : str;\n                } else {\n                    return trimmedStr === numStr || trimmedStr === sign + numStr ? num : str;\n                }\n            }\n        } else {\n            return str;\n        }\n    }\n}\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */ function trimZeros(numStr) {\n    if (numStr && numStr.indexOf(\".\") !== -1) {\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if (numStr === \".\") numStr = \"0\";\n        else if (numStr[0] === \".\") numStr = \"0\" + numStr;\n        else if (numStr[numStr.length - 1] === \".\") numStr = numStr.substr(0, numStr.length - 1);\n        return numStr;\n    }\n    return numStr;\n}\nfunction parse_int(numStr, base) {\n    //polyfill\n    if (parseInt) return parseInt(numStr, base);\n    else if (Number.parseInt) return Number.parseInt(numStr, base);\n    else if (window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\");\n}\nmodule.exports = toNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/strnum/strnum.js\n");

/***/ })

};
;