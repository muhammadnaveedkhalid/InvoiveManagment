"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/csrf";
exports.ids = ["vendor-chunks/csrf"];
exports.modules = {

/***/ "(ssr)/./node_modules/csrf/index.js":
/*!************************************!*\
  !*** ./node_modules/csrf/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * csrf\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var rndm = __webpack_require__(/*! rndm */ \"(ssr)/./node_modules/rndm/index.js\");\nvar uid = __webpack_require__(/*! uid-safe */ \"(ssr)/./node_modules/uid-safe/index.js\");\nvar compare = __webpack_require__(/*! tsscmp */ \"(ssr)/./node_modules/tsscmp/lib/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Module variables.\n * @private\n */ var EQUAL_GLOBAL_REGEXP = /=/g;\nvar PLUS_GLOBAL_REGEXP = /\\+/g;\nvar SLASH_GLOBAL_REGEXP = /\\//g;\n/**\n * Module exports.\n * @public\n */ module.exports = Tokens;\n/**\n * Token generation/verification class.\n *\n * @param {object} [options]\n * @param {number} [options.saltLength=8] The string length of the salt\n * @param {number} [options.secretLength=18] The byte length of the secret key\n * @public\n */ function Tokens(options) {\n    if (!(this instanceof Tokens)) {\n        return new Tokens(options);\n    }\n    var opts = options || {};\n    var saltLength = opts.saltLength !== undefined ? opts.saltLength : 8;\n    if (typeof saltLength !== \"number\" || !isFinite(saltLength) || saltLength < 1) {\n        throw new TypeError(\"option saltLength must be finite number > 1\");\n    }\n    var secretLength = opts.secretLength !== undefined ? opts.secretLength : 18;\n    if (typeof secretLength !== \"number\" || !isFinite(secretLength) || secretLength < 1) {\n        throw new TypeError(\"option secretLength must be finite number > 1\");\n    }\n    this.saltLength = saltLength;\n    this.secretLength = secretLength;\n}\n/**\n * Create a new CSRF token.\n *\n * @param {string} secret The secret for the token.\n * @public\n */ Tokens.prototype.create = function create(secret) {\n    if (!secret || typeof secret !== \"string\") {\n        throw new TypeError(\"argument secret is required\");\n    }\n    return this._tokenize(secret, rndm(this.saltLength));\n};\n/**\n * Create a new secret key.\n *\n * @param {function} [callback]\n * @public\n */ Tokens.prototype.secret = function secret(callback) {\n    return uid(this.secretLength, callback);\n};\n/**\n * Create a new secret key synchronously.\n * @public\n */ Tokens.prototype.secretSync = function secretSync() {\n    return uid.sync(this.secretLength);\n};\n/**\n * Tokenize a secret and salt.\n * @private\n */ Tokens.prototype._tokenize = function tokenize(secret, salt) {\n    return salt + \"-\" + hash(salt + \"-\" + secret);\n};\n/**\n * Verify if a given token is valid for a given secret.\n *\n * @param {string} secret\n * @param {string} token\n * @public\n */ Tokens.prototype.verify = function verify(secret, token) {\n    if (!secret || typeof secret !== \"string\") {\n        return false;\n    }\n    if (!token || typeof token !== \"string\") {\n        return false;\n    }\n    var index = token.indexOf(\"-\");\n    if (index === -1) {\n        return false;\n    }\n    var salt = token.substr(0, index);\n    var expected = this._tokenize(secret, salt);\n    return compare(token, expected);\n};\n/**\n * Hash a string with SHA1, returning url-safe base64\n * @param {string} str\n * @private\n */ function hash(str) {\n    return crypto.createHash(\"sha1\").update(str, \"ascii\").digest(\"base64\").replace(PLUS_GLOBAL_REGEXP, \"-\").replace(SLASH_GLOBAL_REGEXP, \"_\").replace(EQUAL_GLOBAL_REGEXP, \"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TSxDQUFDLFVBQ1BDLE9BQU8sQ0FBQ2hDLG9CQUFvQixLQUM1QmdDLE9BQU8sQ0FBQy9CLHFCQUFxQixLQUM3QitCLE9BQU8sQ0FBQ2pDLHFCQUFxQjtBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL2NzcmYvaW5kZXguanM/NTQwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGNzcmZcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBybmRtID0gcmVxdWlyZSgncm5kbScpXG52YXIgdWlkID0gcmVxdWlyZSgndWlkLXNhZmUnKVxudmFyIGNvbXBhcmUgPSByZXF1aXJlKCd0c3NjbXAnKVxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpXG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEVRVUFMX0dMT0JBTF9SRUdFWFAgPSAvPS9nXG52YXIgUExVU19HTE9CQUxfUkVHRVhQID0gL1xcKy9nXG52YXIgU0xBU0hfR0xPQkFMX1JFR0VYUCA9IC9cXC8vZ1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVG9rZW5zXG5cbi8qKlxuICogVG9rZW4gZ2VuZXJhdGlvbi92ZXJpZmljYXRpb24gY2xhc3MuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNhbHRMZW5ndGg9OF0gVGhlIHN0cmluZyBsZW5ndGggb2YgdGhlIHNhbHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zZWNyZXRMZW5ndGg9MThdIFRoZSBieXRlIGxlbmd0aCBvZiB0aGUgc2VjcmV0IGtleVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFRva2VucyAob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVG9rZW5zKSkge1xuICAgIHJldHVybiBuZXcgVG9rZW5zKG9wdGlvbnMpXG4gIH1cblxuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc2FsdExlbmd0aCA9IG9wdHMuc2FsdExlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgPyBvcHRzLnNhbHRMZW5ndGhcbiAgICA6IDhcblxuICBpZiAodHlwZW9mIHNhbHRMZW5ndGggIT09ICdudW1iZXInIHx8ICFpc0Zpbml0ZShzYWx0TGVuZ3RoKSB8fCBzYWx0TGVuZ3RoIDwgMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBzYWx0TGVuZ3RoIG11c3QgYmUgZmluaXRlIG51bWJlciA+IDEnKVxuICB9XG5cbiAgdmFyIHNlY3JldExlbmd0aCA9IG9wdHMuc2VjcmV0TGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICA/IG9wdHMuc2VjcmV0TGVuZ3RoXG4gICAgOiAxOFxuXG4gIGlmICh0eXBlb2Ygc2VjcmV0TGVuZ3RoICE9PSAnbnVtYmVyJyB8fCAhaXNGaW5pdGUoc2VjcmV0TGVuZ3RoKSB8fCBzZWNyZXRMZW5ndGggPCAxKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIHNlY3JldExlbmd0aCBtdXN0IGJlIGZpbml0ZSBudW1iZXIgPiAxJylcbiAgfVxuXG4gIHRoaXMuc2FsdExlbmd0aCA9IHNhbHRMZW5ndGhcbiAgdGhpcy5zZWNyZXRMZW5ndGggPSBzZWNyZXRMZW5ndGhcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgQ1NSRiB0b2tlbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VjcmV0IFRoZSBzZWNyZXQgZm9yIHRoZSB0b2tlbi5cbiAqIEBwdWJsaWNcbiAqL1xuXG5Ub2tlbnMucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSAoc2VjcmV0KSB7XG4gIGlmICghc2VjcmV0IHx8IHR5cGVvZiBzZWNyZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc2VjcmV0IGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIHJldHVybiB0aGlzLl90b2tlbml6ZShzZWNyZXQsIHJuZG0odGhpcy5zYWx0TGVuZ3RoKSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc2VjcmV0IGtleS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdXG4gKiBAcHVibGljXG4gKi9cblxuVG9rZW5zLnByb3RvdHlwZS5zZWNyZXQgPSBmdW5jdGlvbiBzZWNyZXQgKGNhbGxiYWNrKSB7XG4gIHJldHVybiB1aWQodGhpcy5zZWNyZXRMZW5ndGgsIGNhbGxiYWNrKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBzZWNyZXQga2V5IHN5bmNocm9ub3VzbHkuXG4gKiBAcHVibGljXG4gKi9cblxuVG9rZW5zLnByb3RvdHlwZS5zZWNyZXRTeW5jID0gZnVuY3Rpb24gc2VjcmV0U3luYyAoKSB7XG4gIHJldHVybiB1aWQuc3luYyh0aGlzLnNlY3JldExlbmd0aClcbn1cblxuLyoqXG4gKiBUb2tlbml6ZSBhIHNlY3JldCBhbmQgc2FsdC5cbiAqIEBwcml2YXRlXG4gKi9cblxuVG9rZW5zLnByb3RvdHlwZS5fdG9rZW5pemUgPSBmdW5jdGlvbiB0b2tlbml6ZSAoc2VjcmV0LCBzYWx0KSB7XG4gIHJldHVybiBzYWx0ICsgJy0nICsgaGFzaChzYWx0ICsgJy0nICsgc2VjcmV0KVxufVxuXG4vKipcbiAqIFZlcmlmeSBpZiBhIGdpdmVuIHRva2VuIGlzIHZhbGlkIGZvciBhIGdpdmVuIHNlY3JldC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VjcmV0XG4gKiBAcGFyYW0ge3N0cmluZ30gdG9rZW5cbiAqIEBwdWJsaWNcbiAqL1xuXG5Ub2tlbnMucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeSAoc2VjcmV0LCB0b2tlbikge1xuICBpZiAoIXNlY3JldCB8fCB0eXBlb2Ygc2VjcmV0ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgaWYgKCF0b2tlbiB8fCB0eXBlb2YgdG9rZW4gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgaW5kZXggPSB0b2tlbi5pbmRleE9mKCctJylcblxuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgc2FsdCA9IHRva2VuLnN1YnN0cigwLCBpbmRleClcbiAgdmFyIGV4cGVjdGVkID0gdGhpcy5fdG9rZW5pemUoc2VjcmV0LCBzYWx0KVxuXG4gIHJldHVybiBjb21wYXJlKHRva2VuLCBleHBlY3RlZClcbn1cblxuLyoqXG4gKiBIYXNoIGEgc3RyaW5nIHdpdGggU0hBMSwgcmV0dXJuaW5nIHVybC1zYWZlIGJhc2U2NFxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBoYXNoIChzdHIpIHtcbiAgcmV0dXJuIGNyeXB0b1xuICAgIC5jcmVhdGVIYXNoKCdzaGExJylcbiAgICAudXBkYXRlKHN0ciwgJ2FzY2lpJylcbiAgICAuZGlnZXN0KCdiYXNlNjQnKVxuICAgIC5yZXBsYWNlKFBMVVNfR0xPQkFMX1JFR0VYUCwgJy0nKVxuICAgIC5yZXBsYWNlKFNMQVNIX0dMT0JBTF9SRUdFWFAsICdfJylcbiAgICAucmVwbGFjZShFUVVBTF9HTE9CQUxfUkVHRVhQLCAnJylcbn1cbiJdLCJuYW1lcyI6WyJybmRtIiwicmVxdWlyZSIsInVpZCIsImNvbXBhcmUiLCJjcnlwdG8iLCJFUVVBTF9HTE9CQUxfUkVHRVhQIiwiUExVU19HTE9CQUxfUkVHRVhQIiwiU0xBU0hfR0xPQkFMX1JFR0VYUCIsIm1vZHVsZSIsImV4cG9ydHMiLCJUb2tlbnMiLCJvcHRpb25zIiwib3B0cyIsInNhbHRMZW5ndGgiLCJ1bmRlZmluZWQiLCJpc0Zpbml0ZSIsIlR5cGVFcnJvciIsInNlY3JldExlbmd0aCIsInByb3RvdHlwZSIsImNyZWF0ZSIsInNlY3JldCIsIl90b2tlbml6ZSIsImNhbGxiYWNrIiwic2VjcmV0U3luYyIsInN5bmMiLCJ0b2tlbml6ZSIsInNhbHQiLCJoYXNoIiwidmVyaWZ5IiwidG9rZW4iLCJpbmRleCIsImluZGV4T2YiLCJzdWJzdHIiLCJleHBlY3RlZCIsInN0ciIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/csrf/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/csrf/index.js":
/*!************************************!*\
  !*** ./node_modules/csrf/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * csrf\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var rndm = __webpack_require__(/*! rndm */ \"(rsc)/./node_modules/rndm/index.js\");\nvar uid = __webpack_require__(/*! uid-safe */ \"(rsc)/./node_modules/uid-safe/index.js\");\nvar compare = __webpack_require__(/*! tsscmp */ \"(rsc)/./node_modules/tsscmp/lib/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Module variables.\n * @private\n */ var EQUAL_GLOBAL_REGEXP = /=/g;\nvar PLUS_GLOBAL_REGEXP = /\\+/g;\nvar SLASH_GLOBAL_REGEXP = /\\//g;\n/**\n * Module exports.\n * @public\n */ module.exports = Tokens;\n/**\n * Token generation/verification class.\n *\n * @param {object} [options]\n * @param {number} [options.saltLength=8] The string length of the salt\n * @param {number} [options.secretLength=18] The byte length of the secret key\n * @public\n */ function Tokens(options) {\n    if (!(this instanceof Tokens)) {\n        return new Tokens(options);\n    }\n    var opts = options || {};\n    var saltLength = opts.saltLength !== undefined ? opts.saltLength : 8;\n    if (typeof saltLength !== \"number\" || !isFinite(saltLength) || saltLength < 1) {\n        throw new TypeError(\"option saltLength must be finite number > 1\");\n    }\n    var secretLength = opts.secretLength !== undefined ? opts.secretLength : 18;\n    if (typeof secretLength !== \"number\" || !isFinite(secretLength) || secretLength < 1) {\n        throw new TypeError(\"option secretLength must be finite number > 1\");\n    }\n    this.saltLength = saltLength;\n    this.secretLength = secretLength;\n}\n/**\n * Create a new CSRF token.\n *\n * @param {string} secret The secret for the token.\n * @public\n */ Tokens.prototype.create = function create(secret) {\n    if (!secret || typeof secret !== \"string\") {\n        throw new TypeError(\"argument secret is required\");\n    }\n    return this._tokenize(secret, rndm(this.saltLength));\n};\n/**\n * Create a new secret key.\n *\n * @param {function} [callback]\n * @public\n */ Tokens.prototype.secret = function secret(callback) {\n    return uid(this.secretLength, callback);\n};\n/**\n * Create a new secret key synchronously.\n * @public\n */ Tokens.prototype.secretSync = function secretSync() {\n    return uid.sync(this.secretLength);\n};\n/**\n * Tokenize a secret and salt.\n * @private\n */ Tokens.prototype._tokenize = function tokenize(secret, salt) {\n    return salt + \"-\" + hash(salt + \"-\" + secret);\n};\n/**\n * Verify if a given token is valid for a given secret.\n *\n * @param {string} secret\n * @param {string} token\n * @public\n */ Tokens.prototype.verify = function verify(secret, token) {\n    if (!secret || typeof secret !== \"string\") {\n        return false;\n    }\n    if (!token || typeof token !== \"string\") {\n        return false;\n    }\n    var index = token.indexOf(\"-\");\n    if (index === -1) {\n        return false;\n    }\n    var salt = token.substr(0, index);\n    var expected = this._tokenize(secret, salt);\n    return compare(token, expected);\n};\n/**\n * Hash a string with SHA1, returning url-safe base64\n * @param {string} str\n * @private\n */ function hash(str) {\n    return crypto.createHash(\"sha1\").update(str, \"ascii\").digest(\"base64\").replace(PLUS_GLOBAL_REGEXP, \"-\").replace(SLASH_GLOBAL_REGEXP, \"_\").replace(EQUAL_GLOBAL_REGEXP, \"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TSxDQUFDLFVBQ1BDLE9BQU8sQ0FBQ2hDLG9CQUFvQixLQUM1QmdDLE9BQU8sQ0FBQy9CLHFCQUFxQixLQUM3QitCLE9BQU8sQ0FBQ2pDLHFCQUFxQjtBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL2NzcmYvaW5kZXguanM/NTQwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGNzcmZcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBybmRtID0gcmVxdWlyZSgncm5kbScpXG52YXIgdWlkID0gcmVxdWlyZSgndWlkLXNhZmUnKVxudmFyIGNvbXBhcmUgPSByZXF1aXJlKCd0c3NjbXAnKVxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpXG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEVRVUFMX0dMT0JBTF9SRUdFWFAgPSAvPS9nXG52YXIgUExVU19HTE9CQUxfUkVHRVhQID0gL1xcKy9nXG52YXIgU0xBU0hfR0xPQkFMX1JFR0VYUCA9IC9cXC8vZ1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVG9rZW5zXG5cbi8qKlxuICogVG9rZW4gZ2VuZXJhdGlvbi92ZXJpZmljYXRpb24gY2xhc3MuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNhbHRMZW5ndGg9OF0gVGhlIHN0cmluZyBsZW5ndGggb2YgdGhlIHNhbHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zZWNyZXRMZW5ndGg9MThdIFRoZSBieXRlIGxlbmd0aCBvZiB0aGUgc2VjcmV0IGtleVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFRva2VucyAob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVG9rZW5zKSkge1xuICAgIHJldHVybiBuZXcgVG9rZW5zKG9wdGlvbnMpXG4gIH1cblxuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc2FsdExlbmd0aCA9IG9wdHMuc2FsdExlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgPyBvcHRzLnNhbHRMZW5ndGhcbiAgICA6IDhcblxuICBpZiAodHlwZW9mIHNhbHRMZW5ndGggIT09ICdudW1iZXInIHx8ICFpc0Zpbml0ZShzYWx0TGVuZ3RoKSB8fCBzYWx0TGVuZ3RoIDwgMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBzYWx0TGVuZ3RoIG11c3QgYmUgZmluaXRlIG51bWJlciA+IDEnKVxuICB9XG5cbiAgdmFyIHNlY3JldExlbmd0aCA9IG9wdHMuc2VjcmV0TGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICA/IG9wdHMuc2VjcmV0TGVuZ3RoXG4gICAgOiAxOFxuXG4gIGlmICh0eXBlb2Ygc2VjcmV0TGVuZ3RoICE9PSAnbnVtYmVyJyB8fCAhaXNGaW5pdGUoc2VjcmV0TGVuZ3RoKSB8fCBzZWNyZXRMZW5ndGggPCAxKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIHNlY3JldExlbmd0aCBtdXN0IGJlIGZpbml0ZSBudW1iZXIgPiAxJylcbiAgfVxuXG4gIHRoaXMuc2FsdExlbmd0aCA9IHNhbHRMZW5ndGhcbiAgdGhpcy5zZWNyZXRMZW5ndGggPSBzZWNyZXRMZW5ndGhcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgQ1NSRiB0b2tlbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VjcmV0IFRoZSBzZWNyZXQgZm9yIHRoZSB0b2tlbi5cbiAqIEBwdWJsaWNcbiAqL1xuXG5Ub2tlbnMucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSAoc2VjcmV0KSB7XG4gIGlmICghc2VjcmV0IHx8IHR5cGVvZiBzZWNyZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc2VjcmV0IGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIHJldHVybiB0aGlzLl90b2tlbml6ZShzZWNyZXQsIHJuZG0odGhpcy5zYWx0TGVuZ3RoKSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc2VjcmV0IGtleS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdXG4gKiBAcHVibGljXG4gKi9cblxuVG9rZW5zLnByb3RvdHlwZS5zZWNyZXQgPSBmdW5jdGlvbiBzZWNyZXQgKGNhbGxiYWNrKSB7XG4gIHJldHVybiB1aWQodGhpcy5zZWNyZXRMZW5ndGgsIGNhbGxiYWNrKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBzZWNyZXQga2V5IHN5bmNocm9ub3VzbHkuXG4gKiBAcHVibGljXG4gKi9cblxuVG9rZW5zLnByb3RvdHlwZS5zZWNyZXRTeW5jID0gZnVuY3Rpb24gc2VjcmV0U3luYyAoKSB7XG4gIHJldHVybiB1aWQuc3luYyh0aGlzLnNlY3JldExlbmd0aClcbn1cblxuLyoqXG4gKiBUb2tlbml6ZSBhIHNlY3JldCBhbmQgc2FsdC5cbiAqIEBwcml2YXRlXG4gKi9cblxuVG9rZW5zLnByb3RvdHlwZS5fdG9rZW5pemUgPSBmdW5jdGlvbiB0b2tlbml6ZSAoc2VjcmV0LCBzYWx0KSB7XG4gIHJldHVybiBzYWx0ICsgJy0nICsgaGFzaChzYWx0ICsgJy0nICsgc2VjcmV0KVxufVxuXG4vKipcbiAqIFZlcmlmeSBpZiBhIGdpdmVuIHRva2VuIGlzIHZhbGlkIGZvciBhIGdpdmVuIHNlY3JldC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VjcmV0XG4gKiBAcGFyYW0ge3N0cmluZ30gdG9rZW5cbiAqIEBwdWJsaWNcbiAqL1xuXG5Ub2tlbnMucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeSAoc2VjcmV0LCB0b2tlbikge1xuICBpZiAoIXNlY3JldCB8fCB0eXBlb2Ygc2VjcmV0ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgaWYgKCF0b2tlbiB8fCB0eXBlb2YgdG9rZW4gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgaW5kZXggPSB0b2tlbi5pbmRleE9mKCctJylcblxuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgc2FsdCA9IHRva2VuLnN1YnN0cigwLCBpbmRleClcbiAgdmFyIGV4cGVjdGVkID0gdGhpcy5fdG9rZW5pemUoc2VjcmV0LCBzYWx0KVxuXG4gIHJldHVybiBjb21wYXJlKHRva2VuLCBleHBlY3RlZClcbn1cblxuLyoqXG4gKiBIYXNoIGEgc3RyaW5nIHdpdGggU0hBMSwgcmV0dXJuaW5nIHVybC1zYWZlIGJhc2U2NFxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBoYXNoIChzdHIpIHtcbiAgcmV0dXJuIGNyeXB0b1xuICAgIC5jcmVhdGVIYXNoKCdzaGExJylcbiAgICAudXBkYXRlKHN0ciwgJ2FzY2lpJylcbiAgICAuZGlnZXN0KCdiYXNlNjQnKVxuICAgIC5yZXBsYWNlKFBMVVNfR0xPQkFMX1JFR0VYUCwgJy0nKVxuICAgIC5yZXBsYWNlKFNMQVNIX0dMT0JBTF9SRUdFWFAsICdfJylcbiAgICAucmVwbGFjZShFUVVBTF9HTE9CQUxfUkVHRVhQLCAnJylcbn1cbiJdLCJuYW1lcyI6WyJybmRtIiwicmVxdWlyZSIsInVpZCIsImNvbXBhcmUiLCJjcnlwdG8iLCJFUVVBTF9HTE9CQUxfUkVHRVhQIiwiUExVU19HTE9CQUxfUkVHRVhQIiwiU0xBU0hfR0xPQkFMX1JFR0VYUCIsIm1vZHVsZSIsImV4cG9ydHMiLCJUb2tlbnMiLCJvcHRpb25zIiwib3B0cyIsInNhbHRMZW5ndGgiLCJ1bmRlZmluZWQiLCJpc0Zpbml0ZSIsIlR5cGVFcnJvciIsInNlY3JldExlbmd0aCIsInByb3RvdHlwZSIsImNyZWF0ZSIsInNlY3JldCIsIl90b2tlbml6ZSIsImNhbGxiYWNrIiwic2VjcmV0U3luYyIsInN5bmMiLCJ0b2tlbml6ZSIsInNhbHQiLCJoYXNoIiwidmVyaWZ5IiwidG9rZW4iLCJpbmRleCIsImluZGV4T2YiLCJzdWJzdHIiLCJleHBlY3RlZCIsInN0ciIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/csrf/index.js\n");

/***/ })

};
;