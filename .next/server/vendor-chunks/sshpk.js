"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sshpk";
exports.ids = ["vendor-chunks/sshpk"];
exports.modules = {

/***/ "(ssr)/./node_modules/sshpk/lib/algs.js":
/*!****************************************!*\
  !*** ./node_modules/sshpk/lib/algs.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algInfo = {\n    \"dsa\": {\n        parts: [\n            \"p\",\n            \"q\",\n            \"g\",\n            \"y\"\n        ],\n        sizePart: \"p\"\n    },\n    \"rsa\": {\n        parts: [\n            \"e\",\n            \"n\"\n        ],\n        sizePart: \"n\"\n    },\n    \"ecdsa\": {\n        parts: [\n            \"curve\",\n            \"Q\"\n        ],\n        sizePart: \"Q\"\n    },\n    \"ed25519\": {\n        parts: [\n            \"A\"\n        ],\n        sizePart: \"A\"\n    }\n};\nalgInfo[\"curve25519\"] = algInfo[\"ed25519\"];\nvar algPrivInfo = {\n    \"dsa\": {\n        parts: [\n            \"p\",\n            \"q\",\n            \"g\",\n            \"y\",\n            \"x\"\n        ]\n    },\n    \"rsa\": {\n        parts: [\n            \"n\",\n            \"e\",\n            \"d\",\n            \"iqmp\",\n            \"p\",\n            \"q\"\n        ]\n    },\n    \"ecdsa\": {\n        parts: [\n            \"curve\",\n            \"Q\",\n            \"d\"\n        ]\n    },\n    \"ed25519\": {\n        parts: [\n            \"A\",\n            \"k\"\n        ]\n    }\n};\nalgPrivInfo[\"curve25519\"] = algPrivInfo[\"ed25519\"];\nvar hashAlgs = {\n    \"md5\": true,\n    \"sha1\": true,\n    \"sha256\": true,\n    \"sha384\": true,\n    \"sha512\": true\n};\n/*\n * Taken from\n * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf\n */ var curves = {\n    \"nistp256\": {\n        size: 256,\n        pkcs8oid: \"1.2.840.10045.3.1.7\",\n        p: Buffer.from((\"00\" + \"ffffffff 00000001 00000000 00000000\" + \"00000000 ffffffff ffffffff ffffffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"00\" + \"FFFFFFFF 00000001 00000000 00000000\" + \"00000000 FFFFFFFF FFFFFFFF FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"5ac635d8 aa3a93e7 b3ebbd55 769886bc\" + \"651d06b0 cc53b0f6 3bce3c3e 27d2604b\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"c49d3608 86e70493 6a6678e1 139d26b7\" + \"819f7e90\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"00\" + \"ffffffff 00000000 ffffffff ffffffff\" + \"bce6faad a7179e84 f3b9cac2 fc632551\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"6b17d1f2 e12c4247 f8bce6e5 63a440f2\" + \"77037d81 2deb33a0 f4a13945 d898c296\" + \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16\" + \"2bce3357 6b315ece cbb64068 37bf51f5\").replace(/ /g, \"\"), \"hex\")\n    },\n    \"nistp384\": {\n        size: 384,\n        pkcs8oid: \"1.3.132.0.34\",\n        p: Buffer.from((\"00\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff fffffffe\" + \"ffffffff 00000000 00000000 ffffffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"00\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE\" + \"FFFFFFFF 00000000 00000000 FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"b3312fa7 e23ee7e4 988e056b e3f82d19\" + \"181d9c6e fe814112 0314088f 5013875a\" + \"c656398d 8a2ed19d 2a85c8ed d3ec2aef\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"a335926a a319a27a 1d00896a 6773a482\" + \"7acdac73\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"00\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff c7634d81 f4372ddf\" + \"581a0db2 48b0a77a ecec196a ccc52973\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"aa87ca22 be8b0537 8eb1c71e f320ad74\" + \"6e1d3b62 8ba79b98 59f741e0 82542a38\" + \"5502f25d bf55296c 3a545e38 72760ab7\" + \"3617de4a 96262c6f 5d9e98bf 9292dc29\" + \"f8f41dbd 289a147c e9da3113 b5f0b8c0\" + \"0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\").replace(/ /g, \"\"), \"hex\")\n    },\n    \"nistp521\": {\n        size: 521,\n        pkcs8oid: \"1.3.132.0.35\",\n        p: Buffer.from((\"01ffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"01FF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"51\" + \"953eb961 8e1c9a1f 929a21a0 b68540ee\" + \"a2da725b 99b315f3 b8b48991 8ef109e1\" + \"56193951 ec7e937b 1652c0bd 3bb1bf07\" + \"3573df88 3d2c34f1 ef451fd4 6b503f00\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"d09e8800 291cb853 96cc6717 393284aa\" + \"a0da64ba\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"01ff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff fffffffa\" + \"51868783 bf2f966b 7fcc0148 f709a5d0\" + \"3bb5c9b8 899c47ae bb6fb71e 91386409\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"00c6 858e06b7 0404e9cd 9e3ecb66 2395b442\" + \"9c648139 053fb521 f828af60 6b4d3dba\" + \"a14b5e77 efe75928 fe1dc127 a2ffa8de\" + \"3348b3c1 856a429b f97e7e31 c2e5bd66\" + \"0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9\" + \"98f54449 579b4468 17afbd17 273e662c\" + \"97ee7299 5ef42640 c550b901 3fad0761\" + \"353c7086 a272c240 88be9476 9fd16650\").replace(/ /g, \"\"), \"hex\")\n    }\n};\nmodule.exports = {\n    info: algInfo,\n    privInfo: algPrivInfo,\n    hashAlgs: hashAlgs,\n    curves: curves\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/algs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/certificate.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/certificate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2016 Joyent, Inc.\n\nmodule.exports = Certificate;\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(ssr)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar Identity = __webpack_require__(/*! ./identity */ \"(ssr)/./node_modules/sshpk/lib/identity.js\");\nvar formats = {};\nformats[\"openssh\"] = __webpack_require__(/*! ./formats/openssh-cert */ \"(ssr)/./node_modules/sshpk/lib/formats/openssh-cert.js\");\nformats[\"x509\"] = __webpack_require__(/*! ./formats/x509 */ \"(ssr)/./node_modules/sshpk/lib/formats/x509.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/x509-pem */ \"(ssr)/./node_modules/sshpk/lib/formats/x509-pem.js\");\nvar CertificateParseError = errs.CertificateParseError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nfunction Certificate(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.subjects, \"options.subjects\");\n    utils.assertCompatible(opts.subjects[0], Identity, [\n        1,\n        0\n    ], \"options.subjects\");\n    utils.assertCompatible(opts.subjectKey, Key, [\n        1,\n        0\n    ], \"options.subjectKey\");\n    utils.assertCompatible(opts.issuer, Identity, [\n        1,\n        0\n    ], \"options.issuer\");\n    if (opts.issuerKey !== undefined) {\n        utils.assertCompatible(opts.issuerKey, Key, [\n            1,\n            0\n        ], \"options.issuerKey\");\n    }\n    assert.object(opts.signatures, \"options.signatures\");\n    assert.buffer(opts.serial, \"options.serial\");\n    assert.date(opts.validFrom, \"options.validFrom\");\n    assert.date(opts.validUntil, \"optons.validUntil\");\n    assert.optionalArrayOfString(opts.purposes, \"options.purposes\");\n    this._hashCache = {};\n    this.subjects = opts.subjects;\n    this.issuer = opts.issuer;\n    this.subjectKey = opts.subjectKey;\n    this.issuerKey = opts.issuerKey;\n    this.signatures = opts.signatures;\n    this.serial = opts.serial;\n    this.validFrom = opts.validFrom;\n    this.validUntil = opts.validUntil;\n    this.purposes = opts.purposes;\n}\nCertificate.formats = formats;\nCertificate.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"x509\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    return formats[format].write(this, options);\n};\nCertificate.prototype.toString = function(format, options) {\n    if (format === undefined) format = \"pem\";\n    return this.toBuffer(format, options).toString();\n};\nCertificate.prototype.fingerprint = function(algo) {\n    if (algo === undefined) algo = \"sha256\";\n    assert.string(algo, \"algorithm\");\n    var opts = {\n        type: \"certificate\",\n        hash: this.hash(algo),\n        algorithm: algo\n    };\n    return new Fingerprint(opts);\n};\nCertificate.prototype.hash = function(algo) {\n    assert.string(algo, \"algorithm\");\n    algo = algo.toLowerCase();\n    if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);\n    if (this._hashCache[algo]) return this._hashCache[algo];\n    var hash = crypto.createHash(algo).update(this.toBuffer(\"x509\")).digest();\n    this._hashCache[algo] = hash;\n    return hash;\n};\nCertificate.prototype.isExpired = function(when) {\n    if (when === undefined) when = new Date();\n    return !(when.getTime() >= this.validFrom.getTime() && when.getTime() < this.validUntil.getTime());\n};\nCertificate.prototype.isSignedBy = function(issuerCert) {\n    utils.assertCompatible(issuerCert, Certificate, [\n        1,\n        0\n    ], \"issuer\");\n    if (!this.issuer.equals(issuerCert.subjects[0])) return false;\n    if (this.issuer.purposes && this.issuer.purposes.length > 0 && this.issuer.purposes.indexOf(\"ca\") === -1) {\n        return false;\n    }\n    return this.isSignedByKey(issuerCert.subjectKey);\n};\nCertificate.prototype.getExtension = function(keyOrOid) {\n    assert.string(keyOrOid, \"keyOrOid\");\n    var ext = this.getExtensions().filter(function(maybeExt) {\n        if (maybeExt.format === \"x509\") return maybeExt.oid === keyOrOid;\n        if (maybeExt.format === \"openssh\") return maybeExt.name === keyOrOid;\n        return false;\n    })[0];\n    return ext;\n};\nCertificate.prototype.getExtensions = function() {\n    var exts = [];\n    var x509 = this.signatures.x509;\n    if (x509 && x509.extras && x509.extras.exts) {\n        x509.extras.exts.forEach(function(ext) {\n            ext.format = \"x509\";\n            exts.push(ext);\n        });\n    }\n    var openssh = this.signatures.openssh;\n    if (openssh && openssh.exts) {\n        openssh.exts.forEach(function(ext) {\n            ext.format = \"openssh\";\n            exts.push(ext);\n        });\n    }\n    return exts;\n};\nCertificate.prototype.isSignedByKey = function(issuerKey) {\n    utils.assertCompatible(issuerKey, Key, [\n        1,\n        2\n    ], \"issuerKey\");\n    if (this.issuerKey !== undefined) {\n        return this.issuerKey.fingerprint(\"sha512\").matches(issuerKey);\n    }\n    var fmt = Object.keys(this.signatures)[0];\n    var valid = formats[fmt].verify(this, issuerKey);\n    if (valid) this.issuerKey = issuerKey;\n    return valid;\n};\nCertificate.prototype.signWith = function(key) {\n    utils.assertCompatible(key, PrivateKey, [\n        1,\n        2\n    ], \"key\");\n    var fmts = Object.keys(formats);\n    var didOne = false;\n    for(var i = 0; i < fmts.length; ++i){\n        if (fmts[i] !== \"pem\") {\n            var ret = formats[fmts[i]].sign(this, key);\n            if (ret === true) didOne = true;\n        }\n    }\n    if (!didOne) {\n        throw new Error(\"Failed to sign the certificate for any \" + \"available certificate formats\");\n    }\n};\nCertificate.createSelfSigned = function(subjectOrSubjects, key, options) {\n    var subjects;\n    if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;\n    else subjects = [\n        subjectOrSubjects\n    ];\n    assert.arrayOfObject(subjects);\n    subjects.forEach(function(subject) {\n        utils.assertCompatible(subject, Identity, [\n            1,\n            0\n        ], \"subject\");\n    });\n    utils.assertCompatible(key, PrivateKey, [\n        1,\n        2\n    ], \"private key\");\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalObject(options.validFrom, \"options.validFrom\");\n    assert.optionalObject(options.validUntil, \"options.validUntil\");\n    var validFrom = options.validFrom;\n    var validUntil = options.validUntil;\n    if (validFrom === undefined) validFrom = new Date();\n    if (validUntil === undefined) {\n        assert.optionalNumber(options.lifetime, \"options.lifetime\");\n        var lifetime = options.lifetime;\n        if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;\n        validUntil = new Date();\n        validUntil.setTime(validUntil.getTime() + lifetime * 1000);\n    }\n    assert.optionalBuffer(options.serial, \"options.serial\");\n    var serial = options.serial;\n    if (serial === undefined) serial = Buffer.from(\"0000000000000001\", \"hex\");\n    var purposes = options.purposes;\n    if (purposes === undefined) purposes = [];\n    if (purposes.indexOf(\"signature\") === -1) purposes.push(\"signature\");\n    /* Self-signed certs are always CAs. */ if (purposes.indexOf(\"ca\") === -1) purposes.push(\"ca\");\n    if (purposes.indexOf(\"crl\") === -1) purposes.push(\"crl\");\n    /*\n\t * If we weren't explicitly given any other purposes, do the sensible\n\t * thing and add some basic ones depending on the subject type.\n\t */ if (purposes.length <= 3) {\n        var hostSubjects = subjects.filter(function(subject) {\n            return subject.type === \"host\";\n        });\n        var userSubjects = subjects.filter(function(subject) {\n            return subject.type === \"user\";\n        });\n        if (hostSubjects.length > 0) {\n            if (purposes.indexOf(\"serverAuth\") === -1) purposes.push(\"serverAuth\");\n        }\n        if (userSubjects.length > 0) {\n            if (purposes.indexOf(\"clientAuth\") === -1) purposes.push(\"clientAuth\");\n        }\n        if (userSubjects.length > 0 || hostSubjects.length > 0) {\n            if (purposes.indexOf(\"keyAgreement\") === -1) purposes.push(\"keyAgreement\");\n            if (key.type === \"rsa\" && purposes.indexOf(\"encryption\") === -1) purposes.push(\"encryption\");\n        }\n    }\n    var cert = new Certificate({\n        subjects: subjects,\n        issuer: subjects[0],\n        subjectKey: key.toPublic(),\n        issuerKey: key.toPublic(),\n        signatures: {},\n        serial: serial,\n        validFrom: validFrom,\n        validUntil: validUntil,\n        purposes: purposes\n    });\n    cert.signWith(key);\n    return cert;\n};\nCertificate.create = function(subjectOrSubjects, key, issuer, issuerKey, options) {\n    var subjects;\n    if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;\n    else subjects = [\n        subjectOrSubjects\n    ];\n    assert.arrayOfObject(subjects);\n    subjects.forEach(function(subject) {\n        utils.assertCompatible(subject, Identity, [\n            1,\n            0\n        ], \"subject\");\n    });\n    utils.assertCompatible(key, Key, [\n        1,\n        0\n    ], \"key\");\n    if (PrivateKey.isPrivateKey(key)) key = key.toPublic();\n    utils.assertCompatible(issuer, Identity, [\n        1,\n        0\n    ], \"issuer\");\n    utils.assertCompatible(issuerKey, PrivateKey, [\n        1,\n        2\n    ], \"issuer key\");\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalObject(options.validFrom, \"options.validFrom\");\n    assert.optionalObject(options.validUntil, \"options.validUntil\");\n    var validFrom = options.validFrom;\n    var validUntil = options.validUntil;\n    if (validFrom === undefined) validFrom = new Date();\n    if (validUntil === undefined) {\n        assert.optionalNumber(options.lifetime, \"options.lifetime\");\n        var lifetime = options.lifetime;\n        if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;\n        validUntil = new Date();\n        validUntil.setTime(validUntil.getTime() + lifetime * 1000);\n    }\n    assert.optionalBuffer(options.serial, \"options.serial\");\n    var serial = options.serial;\n    if (serial === undefined) serial = Buffer.from(\"0000000000000001\", \"hex\");\n    var purposes = options.purposes;\n    if (purposes === undefined) purposes = [];\n    if (purposes.indexOf(\"signature\") === -1) purposes.push(\"signature\");\n    if (options.ca === true) {\n        if (purposes.indexOf(\"ca\") === -1) purposes.push(\"ca\");\n        if (purposes.indexOf(\"crl\") === -1) purposes.push(\"crl\");\n    }\n    var hostSubjects = subjects.filter(function(subject) {\n        return subject.type === \"host\";\n    });\n    var userSubjects = subjects.filter(function(subject) {\n        return subject.type === \"user\";\n    });\n    if (hostSubjects.length > 0) {\n        if (purposes.indexOf(\"serverAuth\") === -1) purposes.push(\"serverAuth\");\n    }\n    if (userSubjects.length > 0) {\n        if (purposes.indexOf(\"clientAuth\") === -1) purposes.push(\"clientAuth\");\n    }\n    if (userSubjects.length > 0 || hostSubjects.length > 0) {\n        if (purposes.indexOf(\"keyAgreement\") === -1) purposes.push(\"keyAgreement\");\n        if (key.type === \"rsa\" && purposes.indexOf(\"encryption\") === -1) purposes.push(\"encryption\");\n    }\n    var cert = new Certificate({\n        subjects: subjects,\n        issuer: issuer,\n        subjectKey: key,\n        issuerKey: issuerKey.toPublic(),\n        signatures: {},\n        serial: serial,\n        validFrom: validFrom,\n        validUntil: validUntil,\n        purposes: purposes\n    });\n    cert.signWith(issuerKey);\n    return cert;\n};\nCertificate.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        return k;\n    } catch (e) {\n        throw new CertificateParseError(options.filename, format, e);\n    }\n};\nCertificate.isCertificate = function(obj, ver) {\n    return utils.isCompatible(obj, Certificate, ver);\n};\n/*\n * API versions for Certificate:\n * [1,0] -- initial ver\n * [1,1] -- openssh format now unpacks extensions\n */ Certificate.prototype._sshpkApiVersion = [\n    1,\n    1\n];\nCertificate._oldVersionDetect = function(obj) {\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/certificate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/dhe.js":
/*!***************************************!*\
  !*** ./node_modules/sshpk/lib/dhe.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    DiffieHellman: DiffieHellman,\n    generateECDSA: generateECDSA,\n    generateED25519: generateED25519\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar CRYPTO_HAVE_ECDH = crypto.createECDH !== undefined;\nvar ecdh = __webpack_require__(/*! ecc-jsbn */ \"(ssr)/./node_modules/ecc-jsbn/index.js\");\nvar ec = __webpack_require__(/*! ecc-jsbn/lib/ec */ \"(ssr)/./node_modules/ecc-jsbn/lib/ec.js\");\nvar jsbn = (__webpack_require__(/*! jsbn */ \"(ssr)/./node_modules/jsbn/index.js\").BigInteger);\nfunction DiffieHellman(key) {\n    utils.assertCompatible(key, Key, [\n        1,\n        4\n    ], \"key\");\n    this._isPriv = PrivateKey.isPrivateKey(key, [\n        1,\n        3\n    ]);\n    this._algo = key.type;\n    this._curve = key.curve;\n    this._key = key;\n    if (key.type === \"dsa\") {\n        if (!CRYPTO_HAVE_ECDH) {\n            throw new Error(\"Due to bugs in the node 0.10 \" + \"crypto API, node 0.12.x or later is required \" + \"to use DH\");\n        }\n        this._dh = crypto.createDiffieHellman(key.part.p.data, undefined, key.part.g.data, undefined);\n        this._p = key.part.p;\n        this._g = key.part.g;\n        if (this._isPriv) this._dh.setPrivateKey(key.part.x.data);\n        this._dh.setPublicKey(key.part.y.data);\n    } else if (key.type === \"ecdsa\") {\n        if (!CRYPTO_HAVE_ECDH) {\n            this._ecParams = new X9ECParameters(this._curve);\n            if (this._isPriv) {\n                this._priv = new ECPrivate(this._ecParams, key.part.d.data);\n            }\n            return;\n        }\n        var curve = {\n            \"nistp256\": \"prime256v1\",\n            \"nistp384\": \"secp384r1\",\n            \"nistp521\": \"secp521r1\"\n        }[key.curve];\n        this._dh = crypto.createECDH(curve);\n        if (typeof this._dh !== \"object\" || typeof this._dh.setPrivateKey !== \"function\") {\n            CRYPTO_HAVE_ECDH = false;\n            DiffieHellman.call(this, key);\n            return;\n        }\n        if (this._isPriv) this._dh.setPrivateKey(key.part.d.data);\n        this._dh.setPublicKey(key.part.Q.data);\n    } else if (key.type === \"curve25519\") {\n        if (this._isPriv) {\n            utils.assertCompatible(key, PrivateKey, [\n                1,\n                5\n            ], \"key\");\n            this._priv = key.part.k.data;\n        }\n    } else {\n        throw new Error(\"DH not supported for \" + key.type + \" keys\");\n    }\n}\nDiffieHellman.prototype.getPublicKey = function() {\n    if (this._isPriv) return this._key.toPublic();\n    return this._key;\n};\nDiffieHellman.prototype.getPrivateKey = function() {\n    if (this._isPriv) return this._key;\n    else return undefined;\n};\nDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\nDiffieHellman.prototype._keyCheck = function(pk, isPub) {\n    assert.object(pk, \"key\");\n    if (!isPub) utils.assertCompatible(pk, PrivateKey, [\n        1,\n        3\n    ], \"key\");\n    utils.assertCompatible(pk, Key, [\n        1,\n        4\n    ], \"key\");\n    if (pk.type !== this._algo) {\n        throw new Error(\"A \" + pk.type + \" key cannot be used in \" + this._algo + \" Diffie-Hellman\");\n    }\n    if (pk.curve !== this._curve) {\n        throw new Error(\"A key from the \" + pk.curve + \" curve \" + \"cannot be used with a \" + this._curve + \" Diffie-Hellman\");\n    }\n    if (pk.type === \"dsa\") {\n        assert.deepEqual(pk.part.p, this._p, \"DSA key prime does not match\");\n        assert.deepEqual(pk.part.g, this._g, \"DSA key generator does not match\");\n    }\n};\nDiffieHellman.prototype.setKey = function(pk) {\n    this._keyCheck(pk);\n    if (pk.type === \"dsa\") {\n        this._dh.setPrivateKey(pk.part.x.data);\n        this._dh.setPublicKey(pk.part.y.data);\n    } else if (pk.type === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            this._dh.setPrivateKey(pk.part.d.data);\n            this._dh.setPublicKey(pk.part.Q.data);\n        } else {\n            this._priv = new ECPrivate(this._ecParams, pk.part.d.data);\n        }\n    } else if (pk.type === \"curve25519\") {\n        var k = pk.part.k;\n        if (!pk.part.k) k = pk.part.r;\n        this._priv = k.data;\n        if (this._priv[0] === 0x00) this._priv = this._priv.slice(1);\n        this._priv = this._priv.slice(0, 32);\n    }\n    this._key = pk;\n    this._isPriv = true;\n};\nDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\nDiffieHellman.prototype.computeSecret = function(otherpk) {\n    this._keyCheck(otherpk, true);\n    if (!this._isPriv) throw new Error(\"DH exchange has not been initialized with \" + \"a private key yet\");\n    var pub;\n    if (this._algo === \"dsa\") {\n        return this._dh.computeSecret(otherpk.part.y.data);\n    } else if (this._algo === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            return this._dh.computeSecret(otherpk.part.Q.data);\n        } else {\n            pub = new ECPublic(this._ecParams, otherpk.part.Q.data);\n            return this._priv.deriveSharedSecret(pub);\n        }\n    } else if (this._algo === \"curve25519\") {\n        pub = otherpk.part.A.data;\n        while(pub[0] === 0x00 && pub.length > 32)pub = pub.slice(1);\n        var priv = this._priv;\n        assert.strictEqual(pub.length, 32);\n        assert.strictEqual(priv.length, 32);\n        var secret = nacl.box.before(new Uint8Array(pub), new Uint8Array(priv));\n        return Buffer.from(secret);\n    }\n    throw new Error(\"Invalid algorithm: \" + this._algo);\n};\nDiffieHellman.prototype.generateKey = function() {\n    var parts = [];\n    var priv, pub;\n    if (this._algo === \"dsa\") {\n        this._dh.generateKeys();\n        parts.push({\n            name: \"p\",\n            data: this._p.data\n        });\n        parts.push({\n            name: \"q\",\n            data: this._key.part.q.data\n        });\n        parts.push({\n            name: \"g\",\n            data: this._g.data\n        });\n        parts.push({\n            name: \"y\",\n            data: this._dh.getPublicKey()\n        });\n        parts.push({\n            name: \"x\",\n            data: this._dh.getPrivateKey()\n        });\n        this._key = new PrivateKey({\n            type: \"dsa\",\n            parts: parts\n        });\n        this._isPriv = true;\n        return this._key;\n    } else if (this._algo === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            this._dh.generateKeys();\n            parts.push({\n                name: \"curve\",\n                data: Buffer.from(this._curve)\n            });\n            parts.push({\n                name: \"Q\",\n                data: this._dh.getPublicKey()\n            });\n            parts.push({\n                name: \"d\",\n                data: this._dh.getPrivateKey()\n            });\n            this._key = new PrivateKey({\n                type: \"ecdsa\",\n                curve: this._curve,\n                parts: parts\n            });\n            this._isPriv = true;\n            return this._key;\n        } else {\n            var n = this._ecParams.getN();\n            var r = new jsbn(crypto.randomBytes(n.bitLength()));\n            var n1 = n.subtract(jsbn.ONE);\n            priv = r.mod(n1).add(jsbn.ONE);\n            pub = this._ecParams.getG().multiply(priv);\n            priv = Buffer.from(priv.toByteArray());\n            pub = Buffer.from(this._ecParams.getCurve().encodePointHex(pub), \"hex\");\n            this._priv = new ECPrivate(this._ecParams, priv);\n            parts.push({\n                name: \"curve\",\n                data: Buffer.from(this._curve)\n            });\n            parts.push({\n                name: \"Q\",\n                data: pub\n            });\n            parts.push({\n                name: \"d\",\n                data: priv\n            });\n            this._key = new PrivateKey({\n                type: \"ecdsa\",\n                curve: this._curve,\n                parts: parts\n            });\n            this._isPriv = true;\n            return this._key;\n        }\n    } else if (this._algo === \"curve25519\") {\n        var pair = nacl.box.keyPair();\n        priv = Buffer.from(pair.secretKey);\n        pub = Buffer.from(pair.publicKey);\n        priv = Buffer.concat([\n            priv,\n            pub\n        ]);\n        assert.strictEqual(priv.length, 64);\n        assert.strictEqual(pub.length, 32);\n        parts.push({\n            name: \"A\",\n            data: pub\n        });\n        parts.push({\n            name: \"k\",\n            data: priv\n        });\n        this._key = new PrivateKey({\n            type: \"curve25519\",\n            parts: parts\n        });\n        this._isPriv = true;\n        return this._key;\n    }\n    throw new Error(\"Invalid algorithm: \" + this._algo);\n};\nDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */ function X9ECParameters(name) {\n    var params = algs.curves[name];\n    assert.object(params);\n    var p = new jsbn(params.p);\n    var a = new jsbn(params.a);\n    var b = new jsbn(params.b);\n    var n = new jsbn(params.n);\n    var h = jsbn.ONE;\n    var curve = new ec.ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(params.G.toString(\"hex\"));\n    this.curve = curve;\n    this.g = G;\n    this.n = n;\n    this.h = h;\n}\nX9ECParameters.prototype.getCurve = function() {\n    return this.curve;\n};\nX9ECParameters.prototype.getG = function() {\n    return this.g;\n};\nX9ECParameters.prototype.getN = function() {\n    return this.n;\n};\nX9ECParameters.prototype.getH = function() {\n    return this.h;\n};\nfunction ECPublic(params, buffer) {\n    this._params = params;\n    if (buffer[0] === 0x00) buffer = buffer.slice(1);\n    this._pub = params.getCurve().decodePointHex(buffer.toString(\"hex\"));\n}\nfunction ECPrivate(params, buffer) {\n    this._params = params;\n    this._priv = new jsbn(utils.mpNormalize(buffer));\n}\nECPrivate.prototype.deriveSharedSecret = function(pubKey) {\n    assert.ok(pubKey instanceof ECPublic);\n    var S = pubKey._pub.multiply(this._priv);\n    return Buffer.from(S.getX().toBigInteger().toByteArray());\n};\nfunction generateED25519() {\n    var pair = nacl.sign.keyPair();\n    var priv = Buffer.from(pair.secretKey);\n    var pub = Buffer.from(pair.publicKey);\n    assert.strictEqual(priv.length, 64);\n    assert.strictEqual(pub.length, 32);\n    var parts = [];\n    parts.push({\n        name: \"A\",\n        data: pub\n    });\n    parts.push({\n        name: \"k\",\n        data: priv.slice(0, 32)\n    });\n    var key = new PrivateKey({\n        type: \"ed25519\",\n        parts: parts\n    });\n    return key;\n}\n/* Generates a new ECDSA private key on a given curve. */ function generateECDSA(curve) {\n    var parts = [];\n    var key;\n    if (CRYPTO_HAVE_ECDH) {\n        /*\n\t\t * Node crypto doesn't expose key generation directly, but the\n\t\t * ECDH instances can generate keys. It turns out this just\n\t\t * calls into the OpenSSL generic key generator, and we can\n\t\t * read its output happily without doing an actual DH. So we\n\t\t * use that here.\n\t\t */ var osCurve = {\n            \"nistp256\": \"prime256v1\",\n            \"nistp384\": \"secp384r1\",\n            \"nistp521\": \"secp521r1\"\n        }[curve];\n        var dh = crypto.createECDH(osCurve);\n        dh.generateKeys();\n        parts.push({\n            name: \"curve\",\n            data: Buffer.from(curve)\n        });\n        parts.push({\n            name: \"Q\",\n            data: dh.getPublicKey()\n        });\n        parts.push({\n            name: \"d\",\n            data: dh.getPrivateKey()\n        });\n        key = new PrivateKey({\n            type: \"ecdsa\",\n            curve: curve,\n            parts: parts\n        });\n        return key;\n    } else {\n        var ecParams = new X9ECParameters(curve);\n        /* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */ var n = ecParams.getN();\n        /*\n\t\t * The crypto.randomBytes() function can only give us whole\n\t\t * bytes, so taking a nod from X9.62, we round up.\n\t\t */ var cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n        var c = new jsbn(crypto.randomBytes(cByteLen));\n        var n1 = n.subtract(jsbn.ONE);\n        var priv = c.mod(n1).add(jsbn.ONE);\n        var pub = ecParams.getG().multiply(priv);\n        priv = Buffer.from(priv.toByteArray());\n        pub = Buffer.from(ecParams.getCurve().encodePointHex(pub), \"hex\");\n        parts.push({\n            name: \"curve\",\n            data: Buffer.from(curve)\n        });\n        parts.push({\n            name: \"Q\",\n            data: pub\n        });\n        parts.push({\n            name: \"d\",\n            data: priv\n        });\n        key = new PrivateKey({\n            type: \"ecdsa\",\n            curve: curve,\n            parts: parts\n        });\n        return key;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/dhe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/ed-compat.js":
/*!*********************************************!*\
  !*** ./node_modules/sshpk/lib/ed-compat.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    Verifier: Verifier,\n    Signer: Signer\n};\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\");\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar Signature = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/sshpk/lib/signature.js\");\nfunction Verifier(key, hashAlgo) {\n    if (hashAlgo.toLowerCase() !== \"sha512\") throw new Error(\"ED25519 only supports the use of \" + \"SHA-512 hashes\");\n    this.key = key;\n    this.chunks = [];\n    stream.Writable.call(this, {});\n}\nutil.inherits(Verifier, stream.Writable);\nVerifier.prototype._write = function(chunk, enc, cb) {\n    this.chunks.push(chunk);\n    cb();\n};\nVerifier.prototype.update = function(chunk) {\n    if (typeof chunk === \"string\") chunk = Buffer.from(chunk, \"binary\");\n    this.chunks.push(chunk);\n};\nVerifier.prototype.verify = function(signature, fmt) {\n    var sig;\n    if (Signature.isSignature(signature, [\n        2,\n        0\n    ])) {\n        if (signature.type !== \"ed25519\") return false;\n        sig = signature.toBuffer(\"raw\");\n    } else if (typeof signature === \"string\") {\n        sig = Buffer.from(signature, \"base64\");\n    } else if (Signature.isSignature(signature, [\n        1,\n        0\n    ])) {\n        throw new Error(\"signature was created by too old \" + \"a version of sshpk and cannot be verified\");\n    }\n    assert.buffer(sig);\n    return nacl.sign.detached.verify(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(sig), new Uint8Array(this.key.part.A.data));\n};\nfunction Signer(key, hashAlgo) {\n    if (hashAlgo.toLowerCase() !== \"sha512\") throw new Error(\"ED25519 only supports the use of \" + \"SHA-512 hashes\");\n    this.key = key;\n    this.chunks = [];\n    stream.Writable.call(this, {});\n}\nutil.inherits(Signer, stream.Writable);\nSigner.prototype._write = function(chunk, enc, cb) {\n    this.chunks.push(chunk);\n    cb();\n};\nSigner.prototype.update = function(chunk) {\n    if (typeof chunk === \"string\") chunk = Buffer.from(chunk, \"binary\");\n    this.chunks.push(chunk);\n};\nSigner.prototype.sign = function() {\n    var sig = nacl.sign.detached(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(Buffer.concat([\n        this.key.part.k.data,\n        this.key.part.A.data\n    ])));\n    var sigBuf = Buffer.from(sig);\n    var sigObj = Signature.parse(sigBuf, \"ed25519\", \"raw\");\n    sigObj.hashAlgorithm = \"sha512\";\n    return sigObj;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2VkLWNvbXBhdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7O0FBRTlCQSxPQUFPQyxPQUFPLEdBQUc7SUFDaEJDLFVBQVVBO0lBQ1ZDLFFBQVFBO0FBQ1Q7QUFFQSxJQUFJQyxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUNuQixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJSSxTQUFTSiw4RkFBOEI7QUFDM0MsSUFBSUssWUFBWUwsbUJBQU9BLENBQUM7QUFFeEIsU0FBU0gsU0FBU1MsR0FBRyxFQUFFQyxRQUFRO0lBQzlCLElBQUlBLFNBQVNDLFdBQVcsT0FBTyxVQUM5QixNQUFPLElBQUlDLE1BQU0sc0NBQ2I7SUFFTCxJQUFJLENBQUNILEdBQUcsR0FBR0E7SUFDWCxJQUFJLENBQUNJLE1BQU0sR0FBRyxFQUFFO0lBRWhCVCxPQUFPVSxRQUFRLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QjtBQUNBVixLQUFLVyxRQUFRLENBQUNoQixVQUFVSSxPQUFPVSxRQUFRO0FBRXZDZCxTQUFTaUIsU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBVUMsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEVBQUU7SUFDbkQsSUFBSSxDQUFDUixNQUFNLENBQUNTLElBQUksQ0FBQ0g7SUFDakJFO0FBQ0Q7QUFFQXJCLFNBQVNpQixTQUFTLENBQUNNLE1BQU0sR0FBRyxTQUFVSixLQUFLO0lBQzFDLElBQUksT0FBUUEsVUFBVyxVQUN0QkEsUUFBUVosT0FBT2lCLElBQUksQ0FBQ0wsT0FBTztJQUM1QixJQUFJLENBQUNOLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDSDtBQUNsQjtBQUVBbkIsU0FBU2lCLFNBQVMsQ0FBQ1EsTUFBTSxHQUFHLFNBQVVDLFNBQVMsRUFBRUMsR0FBRztJQUNuRCxJQUFJQztJQUNKLElBQUlwQixVQUFVcUIsV0FBVyxDQUFDSCxXQUFXO1FBQUM7UUFBRztLQUFFLEdBQUc7UUFDN0MsSUFBSUEsVUFBVUksSUFBSSxLQUFLLFdBQ3RCLE9BQVE7UUFDVEYsTUFBTUYsVUFBVUssUUFBUSxDQUFDO0lBRTFCLE9BQU8sSUFBSSxPQUFRTCxjQUFlLFVBQVU7UUFDM0NFLE1BQU1yQixPQUFPaUIsSUFBSSxDQUFDRSxXQUFXO0lBRTlCLE9BQU8sSUFBSWxCLFVBQVVxQixXQUFXLENBQUNILFdBQVc7UUFBQztRQUFHO0tBQUUsR0FBRztRQUNwRCxNQUFPLElBQUlkLE1BQU0sc0NBQ2I7SUFDTDtJQUVBTixPQUFPMEIsTUFBTSxDQUFDSjtJQUNkLE9BQVExQixLQUFLK0IsSUFBSSxDQUFDQyxRQUFRLENBQUNULE1BQU0sQ0FDN0IsSUFBSVUsV0FBVzVCLE9BQU82QixNQUFNLENBQUMsSUFBSSxDQUFDdkIsTUFBTSxJQUN4QyxJQUFJc0IsV0FBV1AsTUFDZixJQUFJTyxXQUFXLElBQUksQ0FBQzFCLEdBQUcsQ0FBQzRCLElBQUksQ0FBQ0MsQ0FBQyxDQUFDQyxJQUFJO0FBQ3hDO0FBRUEsU0FBU3RDLE9BQU9RLEdBQUcsRUFBRUMsUUFBUTtJQUM1QixJQUFJQSxTQUFTQyxXQUFXLE9BQU8sVUFDOUIsTUFBTyxJQUFJQyxNQUFNLHNDQUNiO0lBRUwsSUFBSSxDQUFDSCxHQUFHLEdBQUdBO0lBQ1gsSUFBSSxDQUFDSSxNQUFNLEdBQUcsRUFBRTtJQUVoQlQsT0FBT1UsUUFBUSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDN0I7QUFDQVYsS0FBS1csUUFBUSxDQUFDZixRQUFRRyxPQUFPVSxRQUFRO0FBRXJDYixPQUFPZ0IsU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBVUMsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEVBQUU7SUFDakQsSUFBSSxDQUFDUixNQUFNLENBQUNTLElBQUksQ0FBQ0g7SUFDakJFO0FBQ0Q7QUFFQXBCLE9BQU9nQixTQUFTLENBQUNNLE1BQU0sR0FBRyxTQUFVSixLQUFLO0lBQ3hDLElBQUksT0FBUUEsVUFBVyxVQUN0QkEsUUFBUVosT0FBT2lCLElBQUksQ0FBQ0wsT0FBTztJQUM1QixJQUFJLENBQUNOLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDSDtBQUNsQjtBQUVBbEIsT0FBT2dCLFNBQVMsQ0FBQ2dCLElBQUksR0FBRztJQUN2QixJQUFJTCxNQUFNMUIsS0FBSytCLElBQUksQ0FBQ0MsUUFBUSxDQUN4QixJQUFJQyxXQUFXNUIsT0FBTzZCLE1BQU0sQ0FBQyxJQUFJLENBQUN2QixNQUFNLElBQ3hDLElBQUlzQixXQUFXNUIsT0FBTzZCLE1BQU0sQ0FBQztRQUNoQyxJQUFJLENBQUMzQixHQUFHLENBQUM0QixJQUFJLENBQUNHLENBQUMsQ0FBQ0QsSUFBSTtRQUFFLElBQUksQ0FBQzlCLEdBQUcsQ0FBQzRCLElBQUksQ0FBQ0MsQ0FBQyxDQUFDQyxJQUFJO0tBQUM7SUFDNUMsSUFBSUUsU0FBU2xDLE9BQU9pQixJQUFJLENBQUNJO0lBQ3pCLElBQUljLFNBQVNsQyxVQUFVbUMsS0FBSyxDQUFDRixRQUFRLFdBQVc7SUFDaERDLE9BQU9FLGFBQWEsR0FBRztJQUN2QixPQUFRRjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2VkLWNvbXBhdC5qcz9mMDgwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0VmVyaWZpZXI6IFZlcmlmaWVyLFxuXHRTaWduZXI6IFNpZ25lclxufTtcblxudmFyIG5hY2wgPSByZXF1aXJlKCd0d2VldG5hY2wnKTtcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIFZlcmlmaWVyKGtleSwgaGFzaEFsZ28pIHtcblx0aWYgKGhhc2hBbGdvLnRvTG93ZXJDYXNlKCkgIT09ICdzaGE1MTInKVxuXHRcdHRocm93IChuZXcgRXJyb3IoJ0VEMjU1MTkgb25seSBzdXBwb3J0cyB0aGUgdXNlIG9mICcgK1xuXHRcdCAgICAnU0hBLTUxMiBoYXNoZXMnKSk7XG5cblx0dGhpcy5rZXkgPSBrZXk7XG5cdHRoaXMuY2h1bmtzID0gW107XG5cblx0c3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcywge30pO1xufVxudXRpbC5pbmhlcml0cyhWZXJpZmllciwgc3RyZWFtLldyaXRhYmxlKTtcblxuVmVyaWZpZXIucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jLCBjYikge1xuXHR0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcblx0Y2IoKTtcbn07XG5cblZlcmlmaWVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcblx0aWYgKHR5cGVvZiAoY2h1bmspID09PSAnc3RyaW5nJylcblx0XHRjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCAnYmluYXJ5Jyk7XG5cdHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xufTtcblxuVmVyaWZpZXIucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIChzaWduYXR1cmUsIGZtdCkge1xuXHR2YXIgc2lnO1xuXHRpZiAoU2lnbmF0dXJlLmlzU2lnbmF0dXJlKHNpZ25hdHVyZSwgWzIsIDBdKSkge1xuXHRcdGlmIChzaWduYXR1cmUudHlwZSAhPT0gJ2VkMjU1MTknKVxuXHRcdFx0cmV0dXJuIChmYWxzZSk7XG5cdFx0c2lnID0gc2lnbmF0dXJlLnRvQnVmZmVyKCdyYXcnKTtcblxuXHR9IGVsc2UgaWYgKHR5cGVvZiAoc2lnbmF0dXJlKSA9PT0gJ3N0cmluZycpIHtcblx0XHRzaWcgPSBCdWZmZXIuZnJvbShzaWduYXR1cmUsICdiYXNlNjQnKTtcblxuXHR9IGVsc2UgaWYgKFNpZ25hdHVyZS5pc1NpZ25hdHVyZShzaWduYXR1cmUsIFsxLCAwXSkpIHtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdzaWduYXR1cmUgd2FzIGNyZWF0ZWQgYnkgdG9vIG9sZCAnICtcblx0XHQgICAgJ2EgdmVyc2lvbiBvZiBzc2hwayBhbmQgY2Fubm90IGJlIHZlcmlmaWVkJykpO1xuXHR9XG5cblx0YXNzZXJ0LmJ1ZmZlcihzaWcpO1xuXHRyZXR1cm4gKG5hY2wuc2lnbi5kZXRhY2hlZC52ZXJpZnkoXG5cdCAgICBuZXcgVWludDhBcnJheShCdWZmZXIuY29uY2F0KHRoaXMuY2h1bmtzKSksXG5cdCAgICBuZXcgVWludDhBcnJheShzaWcpLFxuXHQgICAgbmV3IFVpbnQ4QXJyYXkodGhpcy5rZXkucGFydC5BLmRhdGEpKSk7XG59O1xuXG5mdW5jdGlvbiBTaWduZXIoa2V5LCBoYXNoQWxnbykge1xuXHRpZiAoaGFzaEFsZ28udG9Mb3dlckNhc2UoKSAhPT0gJ3NoYTUxMicpXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignRUQyNTUxOSBvbmx5IHN1cHBvcnRzIHRoZSB1c2Ugb2YgJyArXG5cdFx0ICAgICdTSEEtNTEyIGhhc2hlcycpKTtcblxuXHR0aGlzLmtleSA9IGtleTtcblx0dGhpcy5jaHVua3MgPSBbXTtcblxuXHRzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzLCB7fSk7XG59XG51dGlsLmluaGVyaXRzKFNpZ25lciwgc3RyZWFtLldyaXRhYmxlKTtcblxuU2lnbmVyLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuYywgY2IpIHtcblx0dGhpcy5jaHVua3MucHVzaChjaHVuayk7XG5cdGNiKCk7XG59O1xuXG5TaWduZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuXHRpZiAodHlwZW9mIChjaHVuaykgPT09ICdzdHJpbmcnKVxuXHRcdGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssICdiaW5hcnknKTtcblx0dGhpcy5jaHVua3MucHVzaChjaHVuayk7XG59O1xuXG5TaWduZXIucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzaWcgPSBuYWNsLnNpZ24uZGV0YWNoZWQoXG5cdCAgICBuZXcgVWludDhBcnJheShCdWZmZXIuY29uY2F0KHRoaXMuY2h1bmtzKSksXG5cdCAgICBuZXcgVWludDhBcnJheShCdWZmZXIuY29uY2F0KFtcblx0XHR0aGlzLmtleS5wYXJ0LmsuZGF0YSwgdGhpcy5rZXkucGFydC5BLmRhdGFdKSkpO1xuXHR2YXIgc2lnQnVmID0gQnVmZmVyLmZyb20oc2lnKTtcblx0dmFyIHNpZ09iaiA9IFNpZ25hdHVyZS5wYXJzZShzaWdCdWYsICdlZDI1NTE5JywgJ3JhdycpO1xuXHRzaWdPYmouaGFzaEFsZ29yaXRobSA9ICdzaGE1MTInO1xuXHRyZXR1cm4gKHNpZ09iaik7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJWZXJpZmllciIsIlNpZ25lciIsIm5hY2wiLCJyZXF1aXJlIiwic3RyZWFtIiwidXRpbCIsImFzc2VydCIsIkJ1ZmZlciIsIlNpZ25hdHVyZSIsImtleSIsImhhc2hBbGdvIiwidG9Mb3dlckNhc2UiLCJFcnJvciIsImNodW5rcyIsIldyaXRhYmxlIiwiY2FsbCIsImluaGVyaXRzIiwicHJvdG90eXBlIiwiX3dyaXRlIiwiY2h1bmsiLCJlbmMiLCJjYiIsInB1c2giLCJ1cGRhdGUiLCJmcm9tIiwidmVyaWZ5Iiwic2lnbmF0dXJlIiwiZm10Iiwic2lnIiwiaXNTaWduYXR1cmUiLCJ0eXBlIiwidG9CdWZmZXIiLCJidWZmZXIiLCJzaWduIiwiZGV0YWNoZWQiLCJVaW50OEFycmF5IiwiY29uY2F0IiwicGFydCIsIkEiLCJkYXRhIiwiayIsInNpZ0J1ZiIsInNpZ09iaiIsInBhcnNlIiwiaGFzaEFsZ29yaXRobSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/ed-compat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/errors.js":
/*!******************************************!*\
  !*** ./node_modules/sshpk/lib/errors.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nfunction FingerprintFormatError(fp, format) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, FingerprintFormatError);\n    this.name = \"FingerprintFormatError\";\n    this.fingerprint = fp;\n    this.format = format;\n    this.message = \"Fingerprint format is not supported, or is invalid: \";\n    if (fp !== undefined) this.message += \" fingerprint = \" + fp;\n    if (format !== undefined) this.message += \" format = \" + format;\n}\nutil.inherits(FingerprintFormatError, Error);\nfunction InvalidAlgorithmError(alg) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, InvalidAlgorithmError);\n    this.name = \"InvalidAlgorithmError\";\n    this.algorithm = alg;\n    this.message = 'Algorithm \"' + alg + '\" is not supported';\n}\nutil.inherits(InvalidAlgorithmError, Error);\nfunction KeyParseError(name, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, KeyParseError);\n    this.name = \"KeyParseError\";\n    this.format = format;\n    this.keyName = name;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse \" + name + \" as a valid \" + format + \" format key: \" + innerErr.message;\n}\nutil.inherits(KeyParseError, Error);\nfunction SignatureParseError(type, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, SignatureParseError);\n    this.name = \"SignatureParseError\";\n    this.type = type;\n    this.format = format;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse the given data as a \" + type + \" signature in \" + format + \" format: \" + innerErr.message;\n}\nutil.inherits(SignatureParseError, Error);\nfunction CertificateParseError(name, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, CertificateParseError);\n    this.name = \"CertificateParseError\";\n    this.format = format;\n    this.certName = name;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse \" + name + \" as a valid \" + format + \" format certificate: \" + innerErr.message;\n}\nutil.inherits(CertificateParseError, Error);\nfunction KeyEncryptedError(name, format) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, KeyEncryptedError);\n    this.name = \"KeyEncryptedError\";\n    this.format = format;\n    this.keyName = name;\n    this.message = \"The \" + format + \" format key \" + name + \" is \" + \"encrypted (password-protected), and no passphrase was \" + \"provided in `options`\";\n}\nutil.inherits(KeyEncryptedError, Error);\nmodule.exports = {\n    FingerprintFormatError: FingerprintFormatError,\n    InvalidAlgorithmError: InvalidAlgorithmError,\n    KeyParseError: KeyParseError,\n    SignatureParseError: SignatureParseError,\n    KeyEncryptedError: KeyEncryptedError,\n    CertificateParseError: CertificateParseError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7O0FBRTlCLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBRW5CLFNBQVNFLHVCQUF1QkMsRUFBRSxFQUFFQyxNQUFNO0lBQ3pDLElBQUlDLE1BQU1DLGlCQUFpQixFQUMxQkQsTUFBTUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFSjtJQUMvQixJQUFJLENBQUNLLElBQUksR0FBRztJQUNaLElBQUksQ0FBQ0MsV0FBVyxHQUFHTDtJQUNuQixJQUFJLENBQUNDLE1BQU0sR0FBR0E7SUFDZCxJQUFJLENBQUNLLE9BQU8sR0FBRztJQUNmLElBQUlOLE9BQU9PLFdBQ1YsSUFBSSxDQUFDRCxPQUFPLElBQUksb0JBQW9CTjtJQUNyQyxJQUFJQyxXQUFXTSxXQUNkLElBQUksQ0FBQ0QsT0FBTyxJQUFJLGVBQWVMO0FBQ2pDO0FBQ0FILEtBQUtVLFFBQVEsQ0FBQ1Qsd0JBQXdCRztBQUV0QyxTQUFTTyxzQkFBc0JDLEdBQUc7SUFDakMsSUFBSVIsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVNO0lBQy9CLElBQUksQ0FBQ0wsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDTyxTQUFTLEdBQUdEO0lBQ2pCLElBQUksQ0FBQ0osT0FBTyxHQUFHLGdCQUFnQkksTUFBTTtBQUN0QztBQUNBWixLQUFLVSxRQUFRLENBQUNDLHVCQUF1QlA7QUFFckMsU0FBU1UsY0FBY1IsSUFBSSxFQUFFSCxNQUFNLEVBQUVZLFFBQVE7SUFDNUMsSUFBSVgsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVTO0lBQy9CLElBQUksQ0FBQ1IsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDSCxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDYSxPQUFPLEdBQUdWO0lBQ2YsSUFBSSxDQUFDUyxRQUFRLEdBQUdBO0lBQ2hCLElBQUksQ0FBQ1AsT0FBTyxHQUFHLHFCQUFxQkYsT0FBTyxpQkFBaUJILFNBQ3hELGtCQUFrQlksU0FBU1AsT0FBTztBQUN2QztBQUNBUixLQUFLVSxRQUFRLENBQUNJLGVBQWVWO0FBRTdCLFNBQVNhLG9CQUFvQkMsSUFBSSxFQUFFZixNQUFNLEVBQUVZLFFBQVE7SUFDbEQsSUFBSVgsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVZO0lBQy9CLElBQUksQ0FBQ1gsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDWSxJQUFJLEdBQUdBO0lBQ1osSUFBSSxDQUFDZixNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDWSxRQUFRLEdBQUdBO0lBQ2hCLElBQUksQ0FBQ1AsT0FBTyxHQUFHLHlDQUF5Q1UsT0FDcEQsbUJBQW1CZixTQUFTLGNBQWNZLFNBQVNQLE9BQU87QUFDL0Q7QUFDQVIsS0FBS1UsUUFBUSxDQUFDTyxxQkFBcUJiO0FBRW5DLFNBQVNlLHNCQUFzQmIsSUFBSSxFQUFFSCxNQUFNLEVBQUVZLFFBQVE7SUFDcEQsSUFBSVgsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVjO0lBQy9CLElBQUksQ0FBQ2IsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDSCxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDaUIsUUFBUSxHQUFHZDtJQUNoQixJQUFJLENBQUNTLFFBQVEsR0FBR0E7SUFDaEIsSUFBSSxDQUFDUCxPQUFPLEdBQUcscUJBQXFCRixPQUFPLGlCQUFpQkgsU0FDeEQsMEJBQTBCWSxTQUFTUCxPQUFPO0FBQy9DO0FBQ0FSLEtBQUtVLFFBQVEsQ0FBQ1MsdUJBQXVCZjtBQUVyQyxTQUFTaUIsa0JBQWtCZixJQUFJLEVBQUVILE1BQU07SUFDdEMsSUFBSUMsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVnQjtJQUMvQixJQUFJLENBQUNmLElBQUksR0FBRztJQUNaLElBQUksQ0FBQ0gsTUFBTSxHQUFHQTtJQUNkLElBQUksQ0FBQ2EsT0FBTyxHQUFHVjtJQUNmLElBQUksQ0FBQ0UsT0FBTyxHQUFHLFNBQVNMLFNBQVMsaUJBQWlCRyxPQUFPLFNBQ3JELDJEQUNBO0FBQ0w7QUFDQU4sS0FBS1UsUUFBUSxDQUFDVyxtQkFBbUJqQjtBQUVqQ2tCLE9BQU9DLE9BQU8sR0FBRztJQUNoQnRCLHdCQUF3QkE7SUFDeEJVLHVCQUF1QkE7SUFDdkJHLGVBQWVBO0lBQ2ZHLHFCQUFxQkE7SUFDckJJLG1CQUFtQkE7SUFDbkJGLHVCQUF1QkE7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvZXJyb3JzLmpzPzJiYmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIEZpbmdlcnByaW50Rm9ybWF0RXJyb3IoZnAsIGZvcm1hdCkge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRmluZ2VycHJpbnRGb3JtYXRFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdGaW5nZXJwcmludEZvcm1hdEVycm9yJztcblx0dGhpcy5maW5nZXJwcmludCA9IGZwO1xuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcblx0dGhpcy5tZXNzYWdlID0gJ0ZpbmdlcnByaW50IGZvcm1hdCBpcyBub3Qgc3VwcG9ydGVkLCBvciBpcyBpbnZhbGlkOiAnO1xuXHRpZiAoZnAgIT09IHVuZGVmaW5lZClcblx0XHR0aGlzLm1lc3NhZ2UgKz0gJyBmaW5nZXJwcmludCA9ICcgKyBmcDtcblx0aWYgKGZvcm1hdCAhPT0gdW5kZWZpbmVkKVxuXHRcdHRoaXMubWVzc2FnZSArPSAnIGZvcm1hdCA9ICcgKyBmb3JtYXQ7XG59XG51dGlsLmluaGVyaXRzKEZpbmdlcnByaW50Rm9ybWF0RXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gSW52YWxpZEFsZ29yaXRobUVycm9yKGFsZykge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgSW52YWxpZEFsZ29yaXRobUVycm9yKTtcblx0dGhpcy5uYW1lID0gJ0ludmFsaWRBbGdvcml0aG1FcnJvcic7XG5cdHRoaXMuYWxnb3JpdGhtID0gYWxnO1xuXHR0aGlzLm1lc3NhZ2UgPSAnQWxnb3JpdGhtIFwiJyArIGFsZyArICdcIiBpcyBub3Qgc3VwcG9ydGVkJztcbn1cbnV0aWwuaW5oZXJpdHMoSW52YWxpZEFsZ29yaXRobUVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIEtleVBhcnNlRXJyb3IobmFtZSwgZm9ybWF0LCBpbm5lckVycikge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgS2V5UGFyc2VFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdLZXlQYXJzZUVycm9yJztcblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdHRoaXMua2V5TmFtZSA9IG5hbWU7XG5cdHRoaXMuaW5uZXJFcnIgPSBpbm5lckVycjtcblx0dGhpcy5tZXNzYWdlID0gJ0ZhaWxlZCB0byBwYXJzZSAnICsgbmFtZSArICcgYXMgYSB2YWxpZCAnICsgZm9ybWF0ICtcblx0ICAgICcgZm9ybWF0IGtleTogJyArIGlubmVyRXJyLm1lc3NhZ2U7XG59XG51dGlsLmluaGVyaXRzKEtleVBhcnNlRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gU2lnbmF0dXJlUGFyc2VFcnJvcih0eXBlLCBmb3JtYXQsIGlubmVyRXJyKSB7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBTaWduYXR1cmVQYXJzZUVycm9yKTtcblx0dGhpcy5uYW1lID0gJ1NpZ25hdHVyZVBhcnNlRXJyb3InO1xuXHR0aGlzLnR5cGUgPSB0eXBlO1xuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcblx0dGhpcy5pbm5lckVyciA9IGlubmVyRXJyO1xuXHR0aGlzLm1lc3NhZ2UgPSAnRmFpbGVkIHRvIHBhcnNlIHRoZSBnaXZlbiBkYXRhIGFzIGEgJyArIHR5cGUgK1xuXHQgICAgJyBzaWduYXR1cmUgaW4gJyArIGZvcm1hdCArICcgZm9ybWF0OiAnICsgaW5uZXJFcnIubWVzc2FnZTtcbn1cbnV0aWwuaW5oZXJpdHMoU2lnbmF0dXJlUGFyc2VFcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiBDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IobmFtZSwgZm9ybWF0LCBpbm5lckVycikge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ2VydGlmaWNhdGVQYXJzZUVycm9yKTtcblx0dGhpcy5uYW1lID0gJ0NlcnRpZmljYXRlUGFyc2VFcnJvcic7XG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuXHR0aGlzLmNlcnROYW1lID0gbmFtZTtcblx0dGhpcy5pbm5lckVyciA9IGlubmVyRXJyO1xuXHR0aGlzLm1lc3NhZ2UgPSAnRmFpbGVkIHRvIHBhcnNlICcgKyBuYW1lICsgJyBhcyBhIHZhbGlkICcgKyBmb3JtYXQgK1xuXHQgICAgJyBmb3JtYXQgY2VydGlmaWNhdGU6ICcgKyBpbm5lckVyci5tZXNzYWdlO1xufVxudXRpbC5pbmhlcml0cyhDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gS2V5RW5jcnlwdGVkRXJyb3IobmFtZSwgZm9ybWF0KSB7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBLZXlFbmNyeXB0ZWRFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdLZXlFbmNyeXB0ZWRFcnJvcic7XG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuXHR0aGlzLmtleU5hbWUgPSBuYW1lO1xuXHR0aGlzLm1lc3NhZ2UgPSAnVGhlICcgKyBmb3JtYXQgKyAnIGZvcm1hdCBrZXkgJyArIG5hbWUgKyAnIGlzICcgK1xuXHQgICAgJ2VuY3J5cHRlZCAocGFzc3dvcmQtcHJvdGVjdGVkKSwgYW5kIG5vIHBhc3NwaHJhc2Ugd2FzICcgK1xuXHQgICAgJ3Byb3ZpZGVkIGluIGBvcHRpb25zYCc7XG59XG51dGlsLmluaGVyaXRzKEtleUVuY3J5cHRlZEVycm9yLCBFcnJvcik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRGaW5nZXJwcmludEZvcm1hdEVycm9yOiBGaW5nZXJwcmludEZvcm1hdEVycm9yLFxuXHRJbnZhbGlkQWxnb3JpdGhtRXJyb3I6IEludmFsaWRBbGdvcml0aG1FcnJvcixcblx0S2V5UGFyc2VFcnJvcjogS2V5UGFyc2VFcnJvcixcblx0U2lnbmF0dXJlUGFyc2VFcnJvcjogU2lnbmF0dXJlUGFyc2VFcnJvcixcblx0S2V5RW5jcnlwdGVkRXJyb3I6IEtleUVuY3J5cHRlZEVycm9yLFxuXHRDZXJ0aWZpY2F0ZVBhcnNlRXJyb3I6IENlcnRpZmljYXRlUGFyc2VFcnJvclxufTtcbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwidXRpbCIsIkZpbmdlcnByaW50Rm9ybWF0RXJyb3IiLCJmcCIsImZvcm1hdCIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJuYW1lIiwiZmluZ2VycHJpbnQiLCJtZXNzYWdlIiwidW5kZWZpbmVkIiwiaW5oZXJpdHMiLCJJbnZhbGlkQWxnb3JpdGhtRXJyb3IiLCJhbGciLCJhbGdvcml0aG0iLCJLZXlQYXJzZUVycm9yIiwiaW5uZXJFcnIiLCJrZXlOYW1lIiwiU2lnbmF0dXJlUGFyc2VFcnJvciIsInR5cGUiLCJDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IiLCJjZXJ0TmFtZSIsIktleUVuY3J5cHRlZEVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/fingerprint.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/fingerprint.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Fingerprint;\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar errs = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/sshpk/lib/errors.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar Certificate = __webpack_require__(/*! ./certificate */ \"(ssr)/./node_modules/sshpk/lib/certificate.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar FingerprintFormatError = errs.FingerprintFormatError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nfunction Fingerprint(opts) {\n    assert.object(opts, \"options\");\n    assert.string(opts.type, \"options.type\");\n    assert.buffer(opts.hash, \"options.hash\");\n    assert.string(opts.algorithm, \"options.algorithm\");\n    this.algorithm = opts.algorithm.toLowerCase();\n    if (algs.hashAlgs[this.algorithm] !== true) throw new InvalidAlgorithmError(this.algorithm);\n    this.hash = opts.hash;\n    this.type = opts.type;\n    this.hashType = opts.hashType;\n}\nFingerprint.prototype.toString = function(format) {\n    if (format === undefined) {\n        if (this.algorithm === \"md5\" || this.hashType === \"spki\") format = \"hex\";\n        else format = \"base64\";\n    }\n    assert.string(format);\n    switch(format){\n        case \"hex\":\n            if (this.hashType === \"spki\") return this.hash.toString(\"hex\");\n            return addColons(this.hash.toString(\"hex\"));\n        case \"base64\":\n            if (this.hashType === \"spki\") return this.hash.toString(\"base64\");\n            return sshBase64Format(this.algorithm, this.hash.toString(\"base64\"));\n        default:\n            throw new FingerprintFormatError(undefined, format);\n    }\n};\nFingerprint.prototype.matches = function(other) {\n    assert.object(other, \"key or certificate\");\n    if (this.type === \"key\" && this.hashType !== \"ssh\") {\n        utils.assertCompatible(other, Key, [\n            1,\n            7\n        ], \"key with spki\");\n        if (PrivateKey.isPrivateKey(other)) {\n            utils.assertCompatible(other, PrivateKey, [\n                1,\n                6\n            ], \"privatekey with spki support\");\n        }\n    } else if (this.type === \"key\") {\n        utils.assertCompatible(other, Key, [\n            1,\n            0\n        ], \"key\");\n    } else {\n        utils.assertCompatible(other, Certificate, [\n            1,\n            0\n        ], \"certificate\");\n    }\n    var theirHash = other.hash(this.algorithm, this.hashType);\n    var theirHash2 = crypto.createHash(this.algorithm).update(theirHash).digest(\"base64\");\n    if (this.hash2 === undefined) this.hash2 = crypto.createHash(this.algorithm).update(this.hash).digest(\"base64\");\n    return this.hash2 === theirHash2;\n};\n/*JSSTYLED*/ var base64RE = /^[A-Za-z0-9+\\/=]+$/;\n/*JSSTYLED*/ var hexRE = /^[a-fA-F0-9]+$/;\nFingerprint.parse = function(fp, options) {\n    assert.string(fp, \"fingerprint\");\n    var alg, hash, enAlgs;\n    if (Array.isArray(options)) {\n        enAlgs = options;\n        options = {};\n    }\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    if (options.enAlgs !== undefined) enAlgs = options.enAlgs;\n    if (options.algorithms !== undefined) enAlgs = options.algorithms;\n    assert.optionalArrayOfString(enAlgs, \"algorithms\");\n    var hashType = \"ssh\";\n    if (options.hashType !== undefined) hashType = options.hashType;\n    assert.string(hashType, \"options.hashType\");\n    var parts = fp.split(\":\");\n    if (parts.length == 2) {\n        alg = parts[0].toLowerCase();\n        if (!base64RE.test(parts[1])) throw new FingerprintFormatError(fp);\n        try {\n            hash = Buffer.from(parts[1], \"base64\");\n        } catch (e) {\n            throw new FingerprintFormatError(fp);\n        }\n    } else if (parts.length > 2) {\n        alg = \"md5\";\n        if (parts[0].toLowerCase() === \"md5\") parts = parts.slice(1);\n        parts = parts.map(function(p) {\n            while(p.length < 2)p = \"0\" + p;\n            if (p.length > 2) throw new FingerprintFormatError(fp);\n            return p;\n        });\n        parts = parts.join(\"\");\n        if (!hexRE.test(parts) || parts.length % 2 !== 0) throw new FingerprintFormatError(fp);\n        try {\n            hash = Buffer.from(parts, \"hex\");\n        } catch (e) {\n            throw new FingerprintFormatError(fp);\n        }\n    } else {\n        if (hexRE.test(fp)) {\n            hash = Buffer.from(fp, \"hex\");\n        } else if (base64RE.test(fp)) {\n            hash = Buffer.from(fp, \"base64\");\n        } else {\n            throw new FingerprintFormatError(fp);\n        }\n        switch(hash.length){\n            case 32:\n                alg = \"sha256\";\n                break;\n            case 16:\n                alg = \"md5\";\n                break;\n            case 20:\n                alg = \"sha1\";\n                break;\n            case 64:\n                alg = \"sha512\";\n                break;\n            default:\n                throw new FingerprintFormatError(fp);\n        }\n        /* Plain hex/base64: guess it's probably SPKI unless told. */ if (options.hashType === undefined) hashType = \"spki\";\n    }\n    if (alg === undefined) throw new FingerprintFormatError(fp);\n    if (algs.hashAlgs[alg] === undefined) throw new InvalidAlgorithmError(alg);\n    if (enAlgs !== undefined) {\n        enAlgs = enAlgs.map(function(a) {\n            return a.toLowerCase();\n        });\n        if (enAlgs.indexOf(alg) === -1) throw new InvalidAlgorithmError(alg);\n    }\n    return new Fingerprint({\n        algorithm: alg,\n        hash: hash,\n        type: options.type || \"key\",\n        hashType: hashType\n    });\n};\nfunction addColons(s) {\n    /*JSSTYLED*/ return s.replace(/(.{2})(?=.)/g, \"$1:\");\n}\nfunction base64Strip(s) {\n    /*JSSTYLED*/ return s.replace(/=*$/, \"\");\n}\nfunction sshBase64Format(alg, h) {\n    return alg.toUpperCase() + \":\" + base64Strip(h);\n}\nFingerprint.isFingerprint = function(obj, ver) {\n    return utils.isCompatible(obj, Fingerprint, ver);\n};\n/*\n * API versions for Fingerprint:\n * [1,0] -- initial ver\n * [1,1] -- first tagged ver\n * [1,2] -- hashType and spki support\n */ Fingerprint.prototype._sshpkApiVersion = [\n    1,\n    2\n];\nFingerprint._oldVersionDetect = function(obj) {\n    assert.func(obj.toString);\n    assert.func(obj.matches);\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/fingerprint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/auto.js":
/*!************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/auto.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(ssr)/./node_modules/sshpk/lib/formats/pem.js\");\nvar ssh = __webpack_require__(/*! ./ssh */ \"(ssr)/./node_modules/sshpk/lib/formats/ssh.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(ssr)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar dnssec = __webpack_require__(/*! ./dnssec */ \"(ssr)/./node_modules/sshpk/lib/formats/dnssec.js\");\nvar putty = __webpack_require__(/*! ./putty */ \"(ssr)/./node_modules/sshpk/lib/formats/putty.js\");\nvar DNSSEC_PRIVKEY_HEADER_PREFIX = \"Private-key-format: v1\";\nfunction read(buf, options) {\n    if (typeof buf === \"string\") {\n        if (buf.trim().match(/^[-]+[ ]*BEGIN/)) return pem.read(buf, options);\n        if (buf.match(/^\\s*ssh-[a-z]/)) return ssh.read(buf, options);\n        if (buf.match(/^\\s*ecdsa-/)) return ssh.read(buf, options);\n        if (buf.match(/^putty-user-key-file-2:/i)) return putty.read(buf, options);\n        if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n        buf = Buffer.from(buf, \"binary\");\n    } else {\n        assert.buffer(buf);\n        if (findPEMHeader(buf)) return pem.read(buf, options);\n        if (findSSHHeader(buf)) return ssh.read(buf, options);\n        if (findPuTTYHeader(buf)) return putty.read(buf, options);\n        if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n    }\n    if (buf.readUInt32BE(0) < buf.length) return rfc4253.read(buf, options);\n    throw new Error(\"Failed to auto-detect format of key\");\n}\nfunction findPuTTYHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))++offset;\n    if (offset + 22 <= buf.length && buf.slice(offset, offset + 22).toString(\"ascii\").toLowerCase() === \"putty-user-key-file-2:\") return true;\n    return false;\n}\nfunction findSSHHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))++offset;\n    if (offset + 4 <= buf.length && buf.slice(offset, offset + 4).toString(\"ascii\") === \"ssh-\") return true;\n    if (offset + 6 <= buf.length && buf.slice(offset, offset + 6).toString(\"ascii\") === \"ecdsa-\") return true;\n    return false;\n}\nfunction findPEMHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10))++offset;\n    if (buf[offset] !== 45) return false;\n    while(offset < buf.length && buf[offset] === 45)++offset;\n    while(offset < buf.length && buf[offset] === 32)++offset;\n    if (offset + 5 > buf.length || buf.slice(offset, offset + 5).toString(\"ascii\") !== \"BEGIN\") return false;\n    return true;\n}\nfunction findDNSSECHeader(buf) {\n    // private case first\n    if (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length) return false;\n    var headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n    if (headerCheck.toString(\"ascii\") === DNSSEC_PRIVKEY_HEADER_PREFIX) return true;\n    // public-key RFC3110 ?\n    // 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n    // skip any comment-lines\n    if (typeof buf !== \"string\") {\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.split(\"\\n\");\n    var line = 0;\n    /* JSSTYLED */ while(lines[line].match(/^\\;/))line++;\n    if (lines[line].toString(\"ascii\").match(/\\. IN KEY /)) return true;\n    if (lines[line].toString(\"ascii\").match(/\\. IN DNSKEY /)) return true;\n    return false;\n}\nfunction write(key, options) {\n    throw new Error('\"auto\" format cannot be used for writing');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/auto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/dnssec.js":
/*!**************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/dnssec.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(ssr)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar Dhe = __webpack_require__(/*! ../dhe */ \"(ssr)/./node_modules/sshpk/lib/dhe.js\");\nvar supportedAlgos = {\n    \"rsa-sha1\": 5,\n    \"rsa-sha256\": 8,\n    \"rsa-sha512\": 10,\n    \"ecdsa-p256-sha256\": 13,\n    \"ecdsa-p384-sha384\": 14\n};\nvar supportedAlgosById = {};\nObject.keys(supportedAlgos).forEach(function(k) {\n    supportedAlgosById[supportedAlgos[k]] = k.toUpperCase();\n});\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.split(\"\\n\");\n    if (lines[0].match(/^Private-key-format\\: v1/)) {\n        var algElems = lines[1].split(\" \");\n        var algoNum = parseInt(algElems[1], 10);\n        var algoName = algElems[2];\n        if (!supportedAlgosById[algoNum]) throw new Error(\"Unsupported algorithm: \" + algoName);\n        return readDNSSECPrivateKey(algoNum, lines.slice(2));\n    }\n    // skip any comment-lines\n    var line = 0;\n    /* JSSTYLED */ while(lines[line].match(/^\\;/))line++;\n    // we should now have *one single* line left with our KEY on it.\n    if ((lines[line].match(/\\. IN KEY /) || lines[line].match(/\\. IN DNSKEY /)) && lines[line + 1].length === 0) {\n        return readRFC3110(lines[line]);\n    }\n    throw new Error(\"Cannot parse dnssec key\");\n}\nfunction readRFC3110(keyString) {\n    var elems = keyString.split(\" \");\n    //unused var flags = parseInt(elems[3], 10);\n    //unused var protocol = parseInt(elems[4], 10);\n    var algorithm = parseInt(elems[5], 10);\n    if (!supportedAlgosById[algorithm]) throw new Error(\"Unsupported algorithm: \" + algorithm);\n    var base64key = elems.slice(6, elems.length).join();\n    var keyBuffer = Buffer.from(base64key, \"base64\");\n    if (supportedAlgosById[algorithm].match(/^RSA-/)) {\n        // join the rest of the body into a single base64-blob\n        var publicExponentLen = keyBuffer.readUInt8(0);\n        if (publicExponentLen != 3 && publicExponentLen != 1) throw new Error(\"Cannot parse dnssec key: \" + \"unsupported exponent length\");\n        var publicExponent = keyBuffer.slice(1, publicExponentLen + 1);\n        publicExponent = utils.mpNormalize(publicExponent);\n        var modulus = keyBuffer.slice(1 + publicExponentLen);\n        modulus = utils.mpNormalize(modulus);\n        // now, make the key\n        var rsaKey = {\n            type: \"rsa\",\n            parts: []\n        };\n        rsaKey.parts.push({\n            name: \"e\",\n            data: publicExponent\n        });\n        rsaKey.parts.push({\n            name: \"n\",\n            data: modulus\n        });\n        return new Key(rsaKey);\n    }\n    if (supportedAlgosById[algorithm] === \"ECDSA-P384-SHA384\" || supportedAlgosById[algorithm] === \"ECDSA-P256-SHA256\") {\n        var curve = \"nistp384\";\n        var size = 384;\n        if (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {\n            curve = \"nistp256\";\n            size = 256;\n        }\n        var ecdsaKey = {\n            type: \"ecdsa\",\n            curve: curve,\n            size: size,\n            parts: [\n                {\n                    name: \"curve\",\n                    data: Buffer.from(curve)\n                },\n                {\n                    name: \"Q\",\n                    data: utils.ecNormalize(keyBuffer)\n                }\n            ]\n        };\n        return new Key(ecdsaKey);\n    }\n    throw new Error(\"Unsupported algorithm: \" + supportedAlgosById[algorithm]);\n}\nfunction elementToBuf(e) {\n    return Buffer.from(e.split(\" \")[1], \"base64\");\n}\nfunction readDNSSECRSAPrivateKey(elements) {\n    var rsaParams = {};\n    elements.forEach(function(element) {\n        if (element.split(\" \")[0] === \"Modulus:\") rsaParams[\"n\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"PublicExponent:\") rsaParams[\"e\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"PrivateExponent:\") rsaParams[\"d\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Prime1:\") rsaParams[\"p\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Prime2:\") rsaParams[\"q\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Exponent1:\") rsaParams[\"dmodp\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Exponent2:\") rsaParams[\"dmodq\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Coefficient:\") rsaParams[\"iqmp\"] = elementToBuf(element);\n    });\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"e\",\n                data: utils.mpNormalize(rsaParams[\"e\"])\n            },\n            {\n                name: \"n\",\n                data: utils.mpNormalize(rsaParams[\"n\"])\n            },\n            {\n                name: \"d\",\n                data: utils.mpNormalize(rsaParams[\"d\"])\n            },\n            {\n                name: \"p\",\n                data: utils.mpNormalize(rsaParams[\"p\"])\n            },\n            {\n                name: \"q\",\n                data: utils.mpNormalize(rsaParams[\"q\"])\n            },\n            {\n                name: \"dmodp\",\n                data: utils.mpNormalize(rsaParams[\"dmodp\"])\n            },\n            {\n                name: \"dmodq\",\n                data: utils.mpNormalize(rsaParams[\"dmodq\"])\n            },\n            {\n                name: \"iqmp\",\n                data: utils.mpNormalize(rsaParams[\"iqmp\"])\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readDNSSECPrivateKey(alg, elements) {\n    if (supportedAlgosById[alg].match(/^RSA-/)) {\n        return readDNSSECRSAPrivateKey(elements);\n    }\n    if (supportedAlgosById[alg] === \"ECDSA-P384-SHA384\" || supportedAlgosById[alg] === \"ECDSA-P256-SHA256\") {\n        var d = Buffer.from(elements[0].split(\" \")[1], \"base64\");\n        var curve = \"nistp384\";\n        var size = 384;\n        if (supportedAlgosById[alg] === \"ECDSA-P256-SHA256\") {\n            curve = \"nistp256\";\n            size = 256;\n        }\n        // DNSSEC generates the public-key on the fly (go calculate it)\n        var publicKey = utils.publicFromPrivateECDSA(curve, d);\n        var Q = publicKey.part[\"Q\"].data;\n        var ecdsaKey = {\n            type: \"ecdsa\",\n            curve: curve,\n            size: size,\n            parts: [\n                {\n                    name: \"curve\",\n                    data: Buffer.from(curve)\n                },\n                {\n                    name: \"d\",\n                    data: d\n                },\n                {\n                    name: \"Q\",\n                    data: Q\n                }\n            ]\n        };\n        return new PrivateKey(ecdsaKey);\n    }\n    throw new Error(\"Unsupported algorithm: \" + supportedAlgosById[alg]);\n}\nfunction dnssecTimestamp(date) {\n    var year = date.getFullYear() + \"\"; //stringify\n    var month = date.getMonth() + 1;\n    var timestampStr = year + month + date.getUTCDate();\n    timestampStr += \"\" + date.getUTCHours() + date.getUTCMinutes();\n    timestampStr += date.getUTCSeconds();\n    return timestampStr;\n}\nfunction rsaAlgFromOptions(opts) {\n    if (!opts || !opts.hashAlgo || opts.hashAlgo === \"sha1\") return \"5 (RSASHA1)\";\n    else if (opts.hashAlgo === \"sha256\") return \"8 (RSASHA256)\";\n    else if (opts.hashAlgo === \"sha512\") return \"10 (RSASHA512)\";\n    else throw new Error(\"Unknown or unsupported hash: \" + opts.hashAlgo);\n}\nfunction writeRSA(key, options) {\n    // if we're missing parts, add them.\n    if (!key.part.dmodp || !key.part.dmodq) {\n        utils.addRSAMissing(key);\n    }\n    var out = \"\";\n    out += \"Private-key-format: v1.3\\n\";\n    out += \"Algorithm: \" + rsaAlgFromOptions(options) + \"\\n\";\n    var n = utils.mpDenormalize(key.part[\"n\"].data);\n    out += \"Modulus: \" + n.toString(\"base64\") + \"\\n\";\n    var e = utils.mpDenormalize(key.part[\"e\"].data);\n    out += \"PublicExponent: \" + e.toString(\"base64\") + \"\\n\";\n    var d = utils.mpDenormalize(key.part[\"d\"].data);\n    out += \"PrivateExponent: \" + d.toString(\"base64\") + \"\\n\";\n    var p = utils.mpDenormalize(key.part[\"p\"].data);\n    out += \"Prime1: \" + p.toString(\"base64\") + \"\\n\";\n    var q = utils.mpDenormalize(key.part[\"q\"].data);\n    out += \"Prime2: \" + q.toString(\"base64\") + \"\\n\";\n    var dmodp = utils.mpDenormalize(key.part[\"dmodp\"].data);\n    out += \"Exponent1: \" + dmodp.toString(\"base64\") + \"\\n\";\n    var dmodq = utils.mpDenormalize(key.part[\"dmodq\"].data);\n    out += \"Exponent2: \" + dmodq.toString(\"base64\") + \"\\n\";\n    var iqmp = utils.mpDenormalize(key.part[\"iqmp\"].data);\n    out += \"Coefficient: \" + iqmp.toString(\"base64\") + \"\\n\";\n    // Assume that we're valid as-of now\n    var timestamp = new Date();\n    out += \"Created: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Publish: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Activate: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    return Buffer.from(out, \"ascii\");\n}\nfunction writeECDSA(key, options) {\n    var out = \"\";\n    out += \"Private-key-format: v1.3\\n\";\n    if (key.curve === \"nistp256\") {\n        out += \"Algorithm: 13 (ECDSAP256SHA256)\\n\";\n    } else if (key.curve === \"nistp384\") {\n        out += \"Algorithm: 14 (ECDSAP384SHA384)\\n\";\n    } else {\n        throw new Error(\"Unsupported curve\");\n    }\n    var base64Key = key.part[\"d\"].data.toString(\"base64\");\n    out += \"PrivateKey: \" + base64Key + \"\\n\";\n    // Assume that we're valid as-of now\n    var timestamp = new Date();\n    out += \"Created: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Publish: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Activate: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    return Buffer.from(out, \"ascii\");\n}\nfunction write(key, options) {\n    if (PrivateKey.isPrivateKey(key)) {\n        if (key.type === \"rsa\") {\n            return writeRSA(key, options);\n        } else if (key.type === \"ecdsa\") {\n            return writeECDSA(key, options);\n        } else {\n            throw new Error(\"Unsupported algorithm: \" + key.type);\n        }\n    } else if (Key.isKey(key)) {\n        /*\n\t\t * RFC3110 requires a keyname, and a keytype, which we\n\t\t * don't really have a mechanism for specifying such\n\t\t * additional metadata.\n\t\t */ throw new Error('Format \"dnssec\" only supports ' + \"writing private keys\");\n    } else {\n        throw new Error(\"key is not a Key or PrivateKey\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/dnssec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/openssh-cert.js":
/*!********************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/openssh-cert.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    verify: verify,\n    sign: sign,\n    signAsync: signAsync,\n    write: write,\n    /* Internal private API */ fromBuffer: fromBuffer,\n    toBuffer: toBuffer\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(ssr)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(ssr)/./node_modules/sshpk/lib/identity.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(ssr)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(ssr)/./node_modules/sshpk/lib/signature.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(ssr)/./node_modules/sshpk/lib/certificate.js\");\nfunction verify(cert, key) {\n    /*\n\t * We always give an issuerKey, so if our verify() is being called then\n\t * there was no signature. Return false.\n\t */ return false;\n}\nvar TYPES = {\n    \"user\": 1,\n    \"host\": 2\n};\nObject.keys(TYPES).forEach(function(k) {\n    TYPES[TYPES[k]] = k;\n});\nvar ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;\nfunction read(buf, options) {\n    if (Buffer.isBuffer(buf)) buf = buf.toString(\"ascii\");\n    var parts = buf.trim().split(/[ \\t\\n]+/g);\n    if (parts.length < 2 || parts.length > 3) throw new Error(\"Not a valid SSH certificate line\");\n    var algo = parts[0];\n    var data = parts[1];\n    data = Buffer.from(data, \"base64\");\n    return fromBuffer(data, algo);\n}\nfunction fromBuffer(data, algo, partial) {\n    var sshbuf = new SSHBuffer({\n        buffer: data\n    });\n    var innerAlgo = sshbuf.readString();\n    if (algo !== undefined && innerAlgo !== algo) throw new Error(\"SSH certificate algorithm mismatch\");\n    if (algo === undefined) algo = innerAlgo;\n    var cert = {};\n    cert.signatures = {};\n    cert.signatures.openssh = {};\n    cert.signatures.openssh.nonce = sshbuf.readBuffer();\n    var key = {};\n    var parts = key.parts = [];\n    key.type = getAlg(algo);\n    var partCount = algs.info[key.type].parts.length;\n    while(parts.length < partCount)parts.push(sshbuf.readPart());\n    assert.ok(parts.length >= 1, \"key must have at least one part\");\n    var algInfo = algs.info[key.type];\n    if (key.type === \"ecdsa\") {\n        var res = ECDSA_ALGO.exec(algo);\n        assert.ok(res !== null);\n        assert.strictEqual(res[1], parts[0].data.toString());\n    }\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        parts[i].name = algInfo.parts[i];\n        if (parts[i].name !== \"curve\" && algInfo.normalize !== false) {\n            var p = parts[i];\n            p.data = utils.mpNormalize(p.data);\n        }\n    }\n    cert.subjectKey = new Key(key);\n    cert.serial = sshbuf.readInt64();\n    var type = TYPES[sshbuf.readInt()];\n    assert.string(type, \"valid cert type\");\n    cert.signatures.openssh.keyId = sshbuf.readString();\n    var principals = [];\n    var pbuf = sshbuf.readBuffer();\n    var psshbuf = new SSHBuffer({\n        buffer: pbuf\n    });\n    while(!psshbuf.atEnd())principals.push(psshbuf.readString());\n    if (principals.length === 0) principals = [\n        \"*\"\n    ];\n    cert.subjects = principals.map(function(pr) {\n        if (type === \"user\") return Identity.forUser(pr);\n        else if (type === \"host\") return Identity.forHost(pr);\n        throw new Error(\"Unknown identity type \" + type);\n    });\n    cert.validFrom = int64ToDate(sshbuf.readInt64());\n    cert.validUntil = int64ToDate(sshbuf.readInt64());\n    var exts = [];\n    var extbuf = new SSHBuffer({\n        buffer: sshbuf.readBuffer()\n    });\n    var ext;\n    while(!extbuf.atEnd()){\n        ext = {\n            critical: true\n        };\n        ext.name = extbuf.readString();\n        ext.data = extbuf.readBuffer();\n        exts.push(ext);\n    }\n    extbuf = new SSHBuffer({\n        buffer: sshbuf.readBuffer()\n    });\n    while(!extbuf.atEnd()){\n        ext = {\n            critical: false\n        };\n        ext.name = extbuf.readString();\n        ext.data = extbuf.readBuffer();\n        exts.push(ext);\n    }\n    cert.signatures.openssh.exts = exts;\n    /* reserved */ sshbuf.readBuffer();\n    var signingKeyBuf = sshbuf.readBuffer();\n    cert.issuerKey = rfc4253.read(signingKeyBuf);\n    /*\n\t * OpenSSH certs don't give the identity of the issuer, just their\n\t * public key. So, we use an Identity that matches anything. The\n\t * isSignedBy() function will later tell you if the key matches.\n\t */ cert.issuer = Identity.forHost(\"**\");\n    var sigBuf = sshbuf.readBuffer();\n    cert.signatures.openssh.signature = Signature.parse(sigBuf, cert.issuerKey.type, \"ssh\");\n    if (partial !== undefined) {\n        partial.remainder = sshbuf.remainder();\n        partial.consumed = sshbuf._offset;\n    }\n    return new Certificate(cert);\n}\nfunction int64ToDate(buf) {\n    var i = buf.readUInt32BE(0) * 4294967296;\n    i += buf.readUInt32BE(4);\n    var d = new Date();\n    d.setTime(i * 1000);\n    d.sourceInt64 = buf;\n    return d;\n}\nfunction dateToInt64(date) {\n    if (date.sourceInt64 !== undefined) return date.sourceInt64;\n    var i = Math.round(date.getTime() / 1000);\n    var upper = Math.floor(i / 4294967296);\n    var lower = Math.floor(i % 4294967296);\n    var buf = Buffer.alloc(8);\n    buf.writeUInt32BE(upper, 0);\n    buf.writeUInt32BE(lower, 4);\n    return buf;\n}\nfunction sign(cert, key) {\n    if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};\n    try {\n        var blob = toBuffer(cert, true);\n    } catch (e) {\n        delete cert.signatures.openssh;\n        return false;\n    }\n    var sig = cert.signatures.openssh;\n    var hashAlgo = undefined;\n    if (key.type === \"rsa\" || key.type === \"dsa\") hashAlgo = \"sha1\";\n    var signer = key.createSign(hashAlgo);\n    signer.write(blob);\n    sig.signature = signer.sign();\n    return true;\n}\nfunction signAsync(cert, signer, done) {\n    if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};\n    try {\n        var blob = toBuffer(cert, true);\n    } catch (e) {\n        delete cert.signatures.openssh;\n        done(e);\n        return;\n    }\n    var sig = cert.signatures.openssh;\n    signer(blob, function(err, signature) {\n        if (err) {\n            done(err);\n            return;\n        }\n        try {\n            /*\n\t\t\t * This will throw if the signature isn't of a\n\t\t\t * type/algo that can be used for SSH.\n\t\t\t */ signature.toBuffer(\"ssh\");\n        } catch (e) {\n            done(e);\n            return;\n        }\n        sig.signature = signature;\n        done();\n    });\n}\nfunction write(cert, options) {\n    if (options === undefined) options = {};\n    var blob = toBuffer(cert);\n    var out = getCertType(cert.subjectKey) + \" \" + blob.toString(\"base64\");\n    if (options.comment) out = out + \" \" + options.comment;\n    return out;\n}\nfunction toBuffer(cert, noSig) {\n    assert.object(cert.signatures.openssh, \"signature for openssh format\");\n    var sig = cert.signatures.openssh;\n    if (sig.nonce === undefined) sig.nonce = crypto.randomBytes(16);\n    var buf = new SSHBuffer({});\n    buf.writeString(getCertType(cert.subjectKey));\n    buf.writeBuffer(sig.nonce);\n    var key = cert.subjectKey;\n    var algInfo = algs.info[key.type];\n    algInfo.parts.forEach(function(part) {\n        buf.writePart(key.part[part]);\n    });\n    buf.writeInt64(cert.serial);\n    var type = cert.subjects[0].type;\n    assert.notStrictEqual(type, \"unknown\");\n    cert.subjects.forEach(function(id) {\n        assert.strictEqual(id.type, type);\n    });\n    type = TYPES[type];\n    buf.writeInt(type);\n    if (sig.keyId === undefined) {\n        sig.keyId = cert.subjects[0].type + \"_\" + (cert.subjects[0].uid || cert.subjects[0].hostname);\n    }\n    buf.writeString(sig.keyId);\n    var sub = new SSHBuffer({});\n    cert.subjects.forEach(function(id) {\n        if (type === TYPES.host) sub.writeString(id.hostname);\n        else if (type === TYPES.user) sub.writeString(id.uid);\n    });\n    buf.writeBuffer(sub.toBuffer());\n    buf.writeInt64(dateToInt64(cert.validFrom));\n    buf.writeInt64(dateToInt64(cert.validUntil));\n    var exts = sig.exts;\n    if (exts === undefined) exts = [];\n    var extbuf = new SSHBuffer({});\n    exts.forEach(function(ext) {\n        if (ext.critical !== true) return;\n        extbuf.writeString(ext.name);\n        extbuf.writeBuffer(ext.data);\n    });\n    buf.writeBuffer(extbuf.toBuffer());\n    extbuf = new SSHBuffer({});\n    exts.forEach(function(ext) {\n        if (ext.critical === true) return;\n        extbuf.writeString(ext.name);\n        extbuf.writeBuffer(ext.data);\n    });\n    buf.writeBuffer(extbuf.toBuffer());\n    /* reserved */ buf.writeBuffer(Buffer.alloc(0));\n    sub = rfc4253.write(cert.issuerKey);\n    buf.writeBuffer(sub);\n    if (!noSig) buf.writeBuffer(sig.signature.toBuffer(\"ssh\"));\n    return buf.toBuffer();\n}\nfunction getAlg(certType) {\n    if (certType === \"ssh-rsa-cert-v01@openssh.com\") return \"rsa\";\n    if (certType === \"ssh-dss-cert-v01@openssh.com\") return \"dsa\";\n    if (certType.match(ECDSA_ALGO)) return \"ecdsa\";\n    if (certType === \"ssh-ed25519-cert-v01@openssh.com\") return \"ed25519\";\n    throw new Error(\"Unsupported cert type \" + certType);\n}\nfunction getCertType(key) {\n    if (key.type === \"rsa\") return \"ssh-rsa-cert-v01@openssh.com\";\n    if (key.type === \"dsa\") return \"ssh-dss-cert-v01@openssh.com\";\n    if (key.type === \"ecdsa\") return \"ecdsa-sha2-\" + key.curve + \"-cert-v01@openssh.com\";\n    if (key.type === \"ed25519\") return \"ssh-ed25519-cert-v01@openssh.com\";\n    throw new Error(\"Unsupported key type \" + key.type);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvb3BlbnNzaC1jZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4Qjs7QUFFOUJBLE9BQU9DLE9BQU8sR0FBRztJQUNoQkMsTUFBTUE7SUFDTkMsUUFBUUE7SUFDUkMsTUFBTUE7SUFDTkMsV0FBV0E7SUFDWEMsT0FBT0E7SUFFUCx3QkFBd0IsR0FDeEJDLFlBQVlBO0lBQ1pDLFVBQVVBO0FBQ1g7QUFFQSxJQUFJQyxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUN4QixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUNyQixJQUFJRyxTQUFTSCw4RkFBOEI7QUFDM0MsSUFBSUksT0FBT0osbUJBQU9BLENBQUM7QUFDbkIsSUFBSUssTUFBTUwsbUJBQU9BLENBQUM7QUFDbEIsSUFBSU0sYUFBYU4sbUJBQU9BLENBQUM7QUFDekIsSUFBSU8sV0FBV1AsbUJBQU9BLENBQUM7QUFDdkIsSUFBSVEsVUFBVVIsbUJBQU9BLENBQUM7QUFDdEIsSUFBSVMsWUFBWVQsbUJBQU9BLENBQUM7QUFDeEIsSUFBSVUsUUFBUVYsbUJBQU9BLENBQUM7QUFDcEIsSUFBSVcsY0FBY1gsbUJBQU9BLENBQUM7QUFFMUIsU0FBU1AsT0FBT21CLElBQUksRUFBRUMsR0FBRztJQUN4Qjs7O0VBR0MsR0FDRCxPQUFRO0FBQ1Q7QUFFQSxJQUFJQyxRQUFRO0lBQ1gsUUFBUTtJQUNSLFFBQVE7QUFDVDtBQUNBQyxPQUFPQyxJQUFJLENBQUNGLE9BQU9HLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO0lBQUlKLEtBQUssQ0FBQ0EsS0FBSyxDQUFDSSxFQUFFLENBQUMsR0FBR0E7QUFBRztBQUUvRCxJQUFJQyxhQUFhO0FBRWpCLFNBQVMzQixLQUFLNEIsR0FBRyxFQUFFQyxPQUFPO0lBQ3pCLElBQUlsQixPQUFPbUIsUUFBUSxDQUFDRixNQUNuQkEsTUFBTUEsSUFBSUcsUUFBUSxDQUFDO0lBQ3BCLElBQUlDLFFBQVFKLElBQUlLLElBQUksR0FBR0MsS0FBSyxDQUFDO0lBQzdCLElBQUlGLE1BQU1HLE1BQU0sR0FBRyxLQUFLSCxNQUFNRyxNQUFNLEdBQUcsR0FDdEMsTUFBTyxJQUFJQyxNQUFNO0lBRWxCLElBQUlDLE9BQU9MLEtBQUssQ0FBQyxFQUFFO0lBQ25CLElBQUlNLE9BQU9OLEtBQUssQ0FBQyxFQUFFO0lBRW5CTSxPQUFPM0IsT0FBTzRCLElBQUksQ0FBQ0QsTUFBTTtJQUN6QixPQUFRakMsV0FBV2lDLE1BQU1EO0FBQzFCO0FBRUEsU0FBU2hDLFdBQVdpQyxJQUFJLEVBQUVELElBQUksRUFBRUcsT0FBTztJQUN0QyxJQUFJQyxTQUFTLElBQUloQyxVQUFVO1FBQUVpQyxRQUFRSjtJQUFLO0lBQzFDLElBQUlLLFlBQVlGLE9BQU9HLFVBQVU7SUFDakMsSUFBSVAsU0FBU1EsYUFBYUYsY0FBY04sTUFDdkMsTUFBTyxJQUFJRCxNQUFNO0lBQ2xCLElBQUlDLFNBQVNRLFdBQ1pSLE9BQU9NO0lBRVIsSUFBSXZCLE9BQU8sQ0FBQztJQUNaQSxLQUFLMEIsVUFBVSxHQUFHLENBQUM7SUFDbkIxQixLQUFLMEIsVUFBVSxDQUFDQyxPQUFPLEdBQUcsQ0FBQztJQUUzQjNCLEtBQUswQixVQUFVLENBQUNDLE9BQU8sQ0FBQ0MsS0FBSyxHQUFHUCxPQUFPUSxVQUFVO0lBRWpELElBQUk1QixNQUFNLENBQUM7SUFDWCxJQUFJVyxRQUFTWCxJQUFJVyxLQUFLLEdBQUcsRUFBRTtJQUMzQlgsSUFBSTZCLElBQUksR0FBR0MsT0FBT2Q7SUFFbEIsSUFBSWUsWUFBWXhDLEtBQUt5QyxJQUFJLENBQUNoQyxJQUFJNkIsSUFBSSxDQUFDLENBQUNsQixLQUFLLENBQUNHLE1BQU07SUFDaEQsTUFBT0gsTUFBTUcsTUFBTSxHQUFHaUIsVUFDckJwQixNQUFNc0IsSUFBSSxDQUFDYixPQUFPYyxRQUFRO0lBQzNCaEQsT0FBT2lELEVBQUUsQ0FBQ3hCLE1BQU1HLE1BQU0sSUFBSSxHQUFHO0lBRTdCLElBQUlzQixVQUFVN0MsS0FBS3lDLElBQUksQ0FBQ2hDLElBQUk2QixJQUFJLENBQUM7SUFDakMsSUFBSTdCLElBQUk2QixJQUFJLEtBQUssU0FBUztRQUN6QixJQUFJUSxNQUFNL0IsV0FBV2dDLElBQUksQ0FBQ3RCO1FBQzFCOUIsT0FBT2lELEVBQUUsQ0FBQ0UsUUFBUTtRQUNsQm5ELE9BQU9xRCxXQUFXLENBQUNGLEdBQUcsQ0FBQyxFQUFFLEVBQUUxQixLQUFLLENBQUMsRUFBRSxDQUFDTSxJQUFJLENBQUNQLFFBQVE7SUFDbEQ7SUFFQSxJQUFLLElBQUk4QixJQUFJLEdBQUdBLElBQUlKLFFBQVF6QixLQUFLLENBQUNHLE1BQU0sRUFBRSxFQUFFMEIsRUFBRztRQUM5QzdCLEtBQUssQ0FBQzZCLEVBQUUsQ0FBQ0MsSUFBSSxHQUFHTCxRQUFRekIsS0FBSyxDQUFDNkIsRUFBRTtRQUNoQyxJQUFJN0IsS0FBSyxDQUFDNkIsRUFBRSxDQUFDQyxJQUFJLEtBQUssV0FDbEJMLFFBQVFNLFNBQVMsS0FBSyxPQUFPO1lBQ2hDLElBQUlDLElBQUloQyxLQUFLLENBQUM2QixFQUFFO1lBQ2hCRyxFQUFFMUIsSUFBSSxHQUFHcEIsTUFBTStDLFdBQVcsQ0FBQ0QsRUFBRTFCLElBQUk7UUFDbEM7SUFDRDtJQUVBbEIsS0FBSzhDLFVBQVUsR0FBRyxJQUFJckQsSUFBSVE7SUFFMUJELEtBQUsrQyxNQUFNLEdBQUcxQixPQUFPMkIsU0FBUztJQUU5QixJQUFJbEIsT0FBTzVCLEtBQUssQ0FBQ21CLE9BQU80QixPQUFPLEdBQUc7SUFDbEM5RCxPQUFPK0QsTUFBTSxDQUFDcEIsTUFBTTtJQUVwQjlCLEtBQUswQixVQUFVLENBQUNDLE9BQU8sQ0FBQ3dCLEtBQUssR0FBRzlCLE9BQU9HLFVBQVU7SUFFakQsSUFBSTRCLGFBQWEsRUFBRTtJQUNuQixJQUFJQyxPQUFPaEMsT0FBT1EsVUFBVTtJQUM1QixJQUFJeUIsVUFBVSxJQUFJakUsVUFBVTtRQUFFaUMsUUFBUStCO0lBQUs7SUFDM0MsTUFBTyxDQUFDQyxRQUFRQyxLQUFLLEdBQ3BCSCxXQUFXbEIsSUFBSSxDQUFDb0IsUUFBUTlCLFVBQVU7SUFDbkMsSUFBSTRCLFdBQVdyQyxNQUFNLEtBQUssR0FDekJxQyxhQUFhO1FBQUM7S0FBSTtJQUVuQnBELEtBQUt3RCxRQUFRLEdBQUdKLFdBQVdLLEdBQUcsQ0FBQyxTQUFVQyxFQUFFO1FBQzFDLElBQUk1QixTQUFTLFFBQ1osT0FBUW5DLFNBQVNnRSxPQUFPLENBQUNEO2FBQ3JCLElBQUk1QixTQUFTLFFBQ2pCLE9BQVFuQyxTQUFTaUUsT0FBTyxDQUFDRjtRQUMxQixNQUFPLElBQUkxQyxNQUFNLDJCQUEyQmM7SUFDN0M7SUFFQTlCLEtBQUs2RCxTQUFTLEdBQUdDLFlBQVl6QyxPQUFPMkIsU0FBUztJQUM3Q2hELEtBQUsrRCxVQUFVLEdBQUdELFlBQVl6QyxPQUFPMkIsU0FBUztJQUU5QyxJQUFJZ0IsT0FBTyxFQUFFO0lBQ2IsSUFBSUMsU0FBUyxJQUFJNUUsVUFBVTtRQUFFaUMsUUFBUUQsT0FBT1EsVUFBVTtJQUFHO0lBQ3pELElBQUlxQztJQUNKLE1BQU8sQ0FBQ0QsT0FBT1YsS0FBSyxHQUFJO1FBQ3ZCVyxNQUFNO1lBQUVDLFVBQVU7UUFBSztRQUN2QkQsSUFBSXhCLElBQUksR0FBR3VCLE9BQU96QyxVQUFVO1FBQzVCMEMsSUFBSWhELElBQUksR0FBRytDLE9BQU9wQyxVQUFVO1FBQzVCbUMsS0FBSzlCLElBQUksQ0FBQ2dDO0lBQ1g7SUFDQUQsU0FBUyxJQUFJNUUsVUFBVTtRQUFFaUMsUUFBUUQsT0FBT1EsVUFBVTtJQUFHO0lBQ3JELE1BQU8sQ0FBQ29DLE9BQU9WLEtBQUssR0FBSTtRQUN2QlcsTUFBTTtZQUFFQyxVQUFVO1FBQU07UUFDeEJELElBQUl4QixJQUFJLEdBQUd1QixPQUFPekMsVUFBVTtRQUM1QjBDLElBQUloRCxJQUFJLEdBQUcrQyxPQUFPcEMsVUFBVTtRQUM1Qm1DLEtBQUs5QixJQUFJLENBQUNnQztJQUNYO0lBQ0FsRSxLQUFLMEIsVUFBVSxDQUFDQyxPQUFPLENBQUNxQyxJQUFJLEdBQUdBO0lBRS9CLFlBQVksR0FDWjNDLE9BQU9RLFVBQVU7SUFFakIsSUFBSXVDLGdCQUFnQi9DLE9BQU9RLFVBQVU7SUFDckM3QixLQUFLcUUsU0FBUyxHQUFHekUsUUFBUWhCLElBQUksQ0FBQ3dGO0lBRTlCOzs7O0VBSUMsR0FDRHBFLEtBQUtzRSxNQUFNLEdBQUczRSxTQUFTaUUsT0FBTyxDQUFDO0lBRS9CLElBQUlXLFNBQVNsRCxPQUFPUSxVQUFVO0lBQzlCN0IsS0FBSzBCLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDNkMsU0FBUyxHQUM3QjNFLFVBQVU0RSxLQUFLLENBQUNGLFFBQVF2RSxLQUFLcUUsU0FBUyxDQUFDdkMsSUFBSSxFQUFFO0lBRWpELElBQUlWLFlBQVlLLFdBQVc7UUFDMUJMLFFBQVFzRCxTQUFTLEdBQUdyRCxPQUFPcUQsU0FBUztRQUNwQ3RELFFBQVF1RCxRQUFRLEdBQUd0RCxPQUFPdUQsT0FBTztJQUNsQztJQUVBLE9BQVEsSUFBSTdFLFlBQVlDO0FBQ3pCO0FBRUEsU0FBUzhELFlBQVl0RCxHQUFHO0lBQ3ZCLElBQUlpQyxJQUFJakMsSUFBSXFFLFlBQVksQ0FBQyxLQUFLO0lBQzlCcEMsS0FBS2pDLElBQUlxRSxZQUFZLENBQUM7SUFDdEIsSUFBSUMsSUFBSSxJQUFJQztJQUNaRCxFQUFFRSxPQUFPLENBQUN2QyxJQUFJO0lBQ2RxQyxFQUFFRyxXQUFXLEdBQUd6RTtJQUNoQixPQUFRc0U7QUFDVDtBQUVBLFNBQVNJLFlBQVlDLElBQUk7SUFDeEIsSUFBSUEsS0FBS0YsV0FBVyxLQUFLeEQsV0FDeEIsT0FBUTBELEtBQUtGLFdBQVc7SUFDekIsSUFBSXhDLElBQUkyQyxLQUFLQyxLQUFLLENBQUNGLEtBQUtHLE9BQU8sS0FBSztJQUNwQyxJQUFJQyxRQUFRSCxLQUFLSSxLQUFLLENBQUMvQyxJQUFJO0lBQzNCLElBQUlnRCxRQUFRTCxLQUFLSSxLQUFLLENBQUMvQyxJQUFJO0lBQzNCLElBQUlqQyxNQUFNakIsT0FBT21HLEtBQUssQ0FBQztJQUN2QmxGLElBQUltRixhQUFhLENBQUNKLE9BQU87SUFDekIvRSxJQUFJbUYsYUFBYSxDQUFDRixPQUFPO0lBQ3pCLE9BQVFqRjtBQUNUO0FBRUEsU0FBUzFCLEtBQUtrQixJQUFJLEVBQUVDLEdBQUc7SUFDdEIsSUFBSUQsS0FBSzBCLFVBQVUsQ0FBQ0MsT0FBTyxLQUFLRixXQUMvQnpCLEtBQUswQixVQUFVLENBQUNDLE9BQU8sR0FBRyxDQUFDO0lBQzVCLElBQUk7UUFDSCxJQUFJaUUsT0FBTzFHLFNBQVNjLE1BQU07SUFDM0IsRUFBRSxPQUFPNkYsR0FBRztRQUNYLE9BQVE3RixLQUFLMEIsVUFBVSxDQUFDQyxPQUFPO1FBQy9CLE9BQVE7SUFDVDtJQUNBLElBQUltRSxNQUFNOUYsS0FBSzBCLFVBQVUsQ0FBQ0MsT0FBTztJQUNqQyxJQUFJb0UsV0FBV3RFO0lBQ2YsSUFBSXhCLElBQUk2QixJQUFJLEtBQUssU0FBUzdCLElBQUk2QixJQUFJLEtBQUssT0FDdENpRSxXQUFXO0lBQ1osSUFBSUMsU0FBUy9GLElBQUlnRyxVQUFVLENBQUNGO0lBQzVCQyxPQUFPaEgsS0FBSyxDQUFDNEc7SUFDYkUsSUFBSXRCLFNBQVMsR0FBR3dCLE9BQU9sSCxJQUFJO0lBQzNCLE9BQVE7QUFDVDtBQUVBLFNBQVNDLFVBQVVpQixJQUFJLEVBQUVnRyxNQUFNLEVBQUVFLElBQUk7SUFDcEMsSUFBSWxHLEtBQUswQixVQUFVLENBQUNDLE9BQU8sS0FBS0YsV0FDL0J6QixLQUFLMEIsVUFBVSxDQUFDQyxPQUFPLEdBQUcsQ0FBQztJQUM1QixJQUFJO1FBQ0gsSUFBSWlFLE9BQU8xRyxTQUFTYyxNQUFNO0lBQzNCLEVBQUUsT0FBTzZGLEdBQUc7UUFDWCxPQUFRN0YsS0FBSzBCLFVBQVUsQ0FBQ0MsT0FBTztRQUMvQnVFLEtBQUtMO1FBQ0w7SUFDRDtJQUNBLElBQUlDLE1BQU05RixLQUFLMEIsVUFBVSxDQUFDQyxPQUFPO0lBRWpDcUUsT0FBT0osTUFBTSxTQUFVTyxHQUFHLEVBQUUzQixTQUFTO1FBQ3BDLElBQUkyQixLQUFLO1lBQ1JELEtBQUtDO1lBQ0w7UUFDRDtRQUNBLElBQUk7WUFDSDs7O0lBR0MsR0FDRDNCLFVBQVV0RixRQUFRLENBQUM7UUFDcEIsRUFBRSxPQUFPMkcsR0FBRztZQUNYSyxLQUFLTDtZQUNMO1FBQ0Q7UUFDQUMsSUFBSXRCLFNBQVMsR0FBR0E7UUFDaEIwQjtJQUNEO0FBQ0Q7QUFFQSxTQUFTbEgsTUFBTWdCLElBQUksRUFBRVMsT0FBTztJQUMzQixJQUFJQSxZQUFZZ0IsV0FDZmhCLFVBQVUsQ0FBQztJQUVaLElBQUltRixPQUFPMUcsU0FBU2M7SUFDcEIsSUFBSW9HLE1BQU1DLFlBQVlyRyxLQUFLOEMsVUFBVSxJQUFJLE1BQU04QyxLQUFLakYsUUFBUSxDQUFDO0lBQzdELElBQUlGLFFBQVE2RixPQUFPLEVBQ2xCRixNQUFNQSxNQUFNLE1BQU0zRixRQUFRNkYsT0FBTztJQUNsQyxPQUFRRjtBQUNUO0FBR0EsU0FBU2xILFNBQVNjLElBQUksRUFBRXVHLEtBQUs7SUFDNUJwSCxPQUFPcUgsTUFBTSxDQUFDeEcsS0FBSzBCLFVBQVUsQ0FBQ0MsT0FBTyxFQUFFO0lBQ3ZDLElBQUltRSxNQUFNOUYsS0FBSzBCLFVBQVUsQ0FBQ0MsT0FBTztJQUVqQyxJQUFJbUUsSUFBSWxFLEtBQUssS0FBS0gsV0FDakJxRSxJQUFJbEUsS0FBSyxHQUFHdEMsT0FBT21ILFdBQVcsQ0FBQztJQUNoQyxJQUFJakcsTUFBTSxJQUFJbkIsVUFBVSxDQUFDO0lBQ3pCbUIsSUFBSWtHLFdBQVcsQ0FBQ0wsWUFBWXJHLEtBQUs4QyxVQUFVO0lBQzNDdEMsSUFBSW1HLFdBQVcsQ0FBQ2IsSUFBSWxFLEtBQUs7SUFFekIsSUFBSTNCLE1BQU1ELEtBQUs4QyxVQUFVO0lBQ3pCLElBQUlULFVBQVU3QyxLQUFLeUMsSUFBSSxDQUFDaEMsSUFBSTZCLElBQUksQ0FBQztJQUNqQ08sUUFBUXpCLEtBQUssQ0FBQ1AsT0FBTyxDQUFDLFNBQVV1RyxJQUFJO1FBQ25DcEcsSUFBSXFHLFNBQVMsQ0FBQzVHLElBQUkyRyxJQUFJLENBQUNBLEtBQUs7SUFDN0I7SUFFQXBHLElBQUlzRyxVQUFVLENBQUM5RyxLQUFLK0MsTUFBTTtJQUUxQixJQUFJakIsT0FBTzlCLEtBQUt3RCxRQUFRLENBQUMsRUFBRSxDQUFDMUIsSUFBSTtJQUNoQzNDLE9BQU80SCxjQUFjLENBQUNqRixNQUFNO0lBQzVCOUIsS0FBS3dELFFBQVEsQ0FBQ25ELE9BQU8sQ0FBQyxTQUFVMkcsRUFBRTtRQUNqQzdILE9BQU9xRCxXQUFXLENBQUN3RSxHQUFHbEYsSUFBSSxFQUFFQTtJQUM3QjtJQUNBQSxPQUFPNUIsS0FBSyxDQUFDNEIsS0FBSztJQUNsQnRCLElBQUl5RyxRQUFRLENBQUNuRjtJQUViLElBQUlnRSxJQUFJM0MsS0FBSyxLQUFLMUIsV0FBVztRQUM1QnFFLElBQUkzQyxLQUFLLEdBQUduRCxLQUFLd0QsUUFBUSxDQUFDLEVBQUUsQ0FBQzFCLElBQUksR0FBRyxNQUMvQjlCLENBQUFBLEtBQUt3RCxRQUFRLENBQUMsRUFBRSxDQUFDMEQsR0FBRyxJQUFJbEgsS0FBS3dELFFBQVEsQ0FBQyxFQUFFLENBQUMyRCxRQUFRO0lBQ3ZEO0lBQ0EzRyxJQUFJa0csV0FBVyxDQUFDWixJQUFJM0MsS0FBSztJQUV6QixJQUFJaUUsTUFBTSxJQUFJL0gsVUFBVSxDQUFDO0lBQ3pCVyxLQUFLd0QsUUFBUSxDQUFDbkQsT0FBTyxDQUFDLFNBQVUyRyxFQUFFO1FBQ2pDLElBQUlsRixTQUFTNUIsTUFBTW1ILElBQUksRUFDdEJELElBQUlWLFdBQVcsQ0FBQ00sR0FBR0csUUFBUTthQUN2QixJQUFJckYsU0FBUzVCLE1BQU1vSCxJQUFJLEVBQzNCRixJQUFJVixXQUFXLENBQUNNLEdBQUdFLEdBQUc7SUFDeEI7SUFDQTFHLElBQUltRyxXQUFXLENBQUNTLElBQUlsSSxRQUFRO0lBRTVCc0IsSUFBSXNHLFVBQVUsQ0FBQzVCLFlBQVlsRixLQUFLNkQsU0FBUztJQUN6Q3JELElBQUlzRyxVQUFVLENBQUM1QixZQUFZbEYsS0FBSytELFVBQVU7SUFFMUMsSUFBSUMsT0FBTzhCLElBQUk5QixJQUFJO0lBQ25CLElBQUlBLFNBQVN2QyxXQUNadUMsT0FBTyxFQUFFO0lBRVYsSUFBSUMsU0FBUyxJQUFJNUUsVUFBVSxDQUFDO0lBQzVCMkUsS0FBSzNELE9BQU8sQ0FBQyxTQUFVNkQsR0FBRztRQUN6QixJQUFJQSxJQUFJQyxRQUFRLEtBQUssTUFDcEI7UUFDREYsT0FBT3lDLFdBQVcsQ0FBQ3hDLElBQUl4QixJQUFJO1FBQzNCdUIsT0FBTzBDLFdBQVcsQ0FBQ3pDLElBQUloRCxJQUFJO0lBQzVCO0lBQ0FWLElBQUltRyxXQUFXLENBQUMxQyxPQUFPL0UsUUFBUTtJQUUvQitFLFNBQVMsSUFBSTVFLFVBQVUsQ0FBQztJQUN4QjJFLEtBQUszRCxPQUFPLENBQUMsU0FBVTZELEdBQUc7UUFDekIsSUFBSUEsSUFBSUMsUUFBUSxLQUFLLE1BQ3BCO1FBQ0RGLE9BQU95QyxXQUFXLENBQUN4QyxJQUFJeEIsSUFBSTtRQUMzQnVCLE9BQU8wQyxXQUFXLENBQUN6QyxJQUFJaEQsSUFBSTtJQUM1QjtJQUNBVixJQUFJbUcsV0FBVyxDQUFDMUMsT0FBTy9FLFFBQVE7SUFFL0IsWUFBWSxHQUNac0IsSUFBSW1HLFdBQVcsQ0FBQ3BILE9BQU9tRyxLQUFLLENBQUM7SUFFN0IwQixNQUFNeEgsUUFBUVosS0FBSyxDQUFDZ0IsS0FBS3FFLFNBQVM7SUFDbEM3RCxJQUFJbUcsV0FBVyxDQUFDUztJQUVoQixJQUFJLENBQUNiLE9BQ0ovRixJQUFJbUcsV0FBVyxDQUFDYixJQUFJdEIsU0FBUyxDQUFDdEYsUUFBUSxDQUFDO0lBRXhDLE9BQVFzQixJQUFJdEIsUUFBUTtBQUNyQjtBQUVBLFNBQVM2QyxPQUFPd0YsUUFBUTtJQUN2QixJQUFJQSxhQUFhLGdDQUNoQixPQUFRO0lBQ1QsSUFBSUEsYUFBYSxnQ0FDaEIsT0FBUTtJQUNULElBQUlBLFNBQVNDLEtBQUssQ0FBQ2pILGFBQ2xCLE9BQVE7SUFDVCxJQUFJZ0gsYUFBYSxvQ0FDaEIsT0FBUTtJQUNULE1BQU8sSUFBSXZHLE1BQU0sMkJBQTJCdUc7QUFDN0M7QUFFQSxTQUFTbEIsWUFBWXBHLEdBQUc7SUFDdkIsSUFBSUEsSUFBSTZCLElBQUksS0FBSyxPQUNoQixPQUFRO0lBQ1QsSUFBSTdCLElBQUk2QixJQUFJLEtBQUssT0FDaEIsT0FBUTtJQUNULElBQUk3QixJQUFJNkIsSUFBSSxLQUFLLFNBQ2hCLE9BQVEsZ0JBQWdCN0IsSUFBSXdILEtBQUssR0FBRztJQUNyQyxJQUFJeEgsSUFBSTZCLElBQUksS0FBSyxXQUNoQixPQUFRO0lBQ1QsTUFBTyxJQUFJZCxNQUFNLDBCQUEwQmYsSUFBSTZCLElBQUk7QUFDcEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvZm9ybWF0cy9vcGVuc3NoLWNlcnQuanM/NjIxYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNyBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHJlYWQ6IHJlYWQsXG5cdHZlcmlmeTogdmVyaWZ5LFxuXHRzaWduOiBzaWduLFxuXHRzaWduQXN5bmM6IHNpZ25Bc3luYyxcblx0d3JpdGU6IHdyaXRlLFxuXG5cdC8qIEludGVybmFsIHByaXZhdGUgQVBJICovXG5cdGZyb21CdWZmZXI6IGZyb21CdWZmZXIsXG5cdHRvQnVmZmVyOiB0b0J1ZmZlclxufTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgU1NIQnVmZmVyID0gcmVxdWlyZSgnLi4vc3NoLWJ1ZmZlcicpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBhbGdzID0gcmVxdWlyZSgnLi4vYWxncycpO1xudmFyIEtleSA9IHJlcXVpcmUoJy4uL2tleScpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuLi9wcml2YXRlLWtleScpO1xudmFyIElkZW50aXR5ID0gcmVxdWlyZSgnLi4vaWRlbnRpdHknKTtcbnZhciByZmM0MjUzID0gcmVxdWlyZSgnLi9yZmM0MjUzJyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi4vc2lnbmF0dXJlJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIENlcnRpZmljYXRlID0gcmVxdWlyZSgnLi4vY2VydGlmaWNhdGUnKTtcblxuZnVuY3Rpb24gdmVyaWZ5KGNlcnQsIGtleSkge1xuXHQvKlxuXHQgKiBXZSBhbHdheXMgZ2l2ZSBhbiBpc3N1ZXJLZXksIHNvIGlmIG91ciB2ZXJpZnkoKSBpcyBiZWluZyBjYWxsZWQgdGhlblxuXHQgKiB0aGVyZSB3YXMgbm8gc2lnbmF0dXJlLiBSZXR1cm4gZmFsc2UuXG5cdCAqL1xuXHRyZXR1cm4gKGZhbHNlKTtcbn1cblxudmFyIFRZUEVTID0ge1xuXHQndXNlcic6IDEsXG5cdCdob3N0JzogMlxufTtcbk9iamVjdC5rZXlzKFRZUEVTKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IFRZUEVTW1RZUEVTW2tdXSA9IGs7IH0pO1xuXG52YXIgRUNEU0FfQUxHTyA9IC9eZWNkc2Etc2hhMi0oW15ALV0rKS1jZXJ0LXYwMUBvcGVuc3NoLmNvbSQvO1xuXG5mdW5jdGlvbiByZWFkKGJ1Ziwgb3B0aW9ucykge1xuXHRpZiAoQnVmZmVyLmlzQnVmZmVyKGJ1ZikpXG5cdFx0YnVmID0gYnVmLnRvU3RyaW5nKCdhc2NpaScpO1xuXHR2YXIgcGFydHMgPSBidWYudHJpbSgpLnNwbGl0KC9bIFxcdFxcbl0rL2cpO1xuXHRpZiAocGFydHMubGVuZ3RoIDwgMiB8fCBwYXJ0cy5sZW5ndGggPiAzKVxuXHRcdHRocm93IChuZXcgRXJyb3IoJ05vdCBhIHZhbGlkIFNTSCBjZXJ0aWZpY2F0ZSBsaW5lJykpO1xuXG5cdHZhciBhbGdvID0gcGFydHNbMF07XG5cdHZhciBkYXRhID0gcGFydHNbMV07XG5cblx0ZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsICdiYXNlNjQnKTtcblx0cmV0dXJuIChmcm9tQnVmZmVyKGRhdGEsIGFsZ28pKTtcbn1cblxuZnVuY3Rpb24gZnJvbUJ1ZmZlcihkYXRhLCBhbGdvLCBwYXJ0aWFsKSB7XG5cdHZhciBzc2hidWYgPSBuZXcgU1NIQnVmZmVyKHsgYnVmZmVyOiBkYXRhIH0pO1xuXHR2YXIgaW5uZXJBbGdvID0gc3NoYnVmLnJlYWRTdHJpbmcoKTtcblx0aWYgKGFsZ28gIT09IHVuZGVmaW5lZCAmJiBpbm5lckFsZ28gIT09IGFsZ28pXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignU1NIIGNlcnRpZmljYXRlIGFsZ29yaXRobSBtaXNtYXRjaCcpKTtcblx0aWYgKGFsZ28gPT09IHVuZGVmaW5lZClcblx0XHRhbGdvID0gaW5uZXJBbGdvO1xuXG5cdHZhciBjZXJ0ID0ge307XG5cdGNlcnQuc2lnbmF0dXJlcyA9IHt9O1xuXHRjZXJ0LnNpZ25hdHVyZXMub3BlbnNzaCA9IHt9O1xuXG5cdGNlcnQuc2lnbmF0dXJlcy5vcGVuc3NoLm5vbmNlID0gc3NoYnVmLnJlYWRCdWZmZXIoKTtcblxuXHR2YXIga2V5ID0ge307XG5cdHZhciBwYXJ0cyA9IChrZXkucGFydHMgPSBbXSk7XG5cdGtleS50eXBlID0gZ2V0QWxnKGFsZ28pO1xuXG5cdHZhciBwYXJ0Q291bnQgPSBhbGdzLmluZm9ba2V5LnR5cGVdLnBhcnRzLmxlbmd0aDtcblx0d2hpbGUgKHBhcnRzLmxlbmd0aCA8IHBhcnRDb3VudClcblx0XHRwYXJ0cy5wdXNoKHNzaGJ1Zi5yZWFkUGFydCgpKTtcblx0YXNzZXJ0Lm9rKHBhcnRzLmxlbmd0aCA+PSAxLCAna2V5IG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgcGFydCcpO1xuXG5cdHZhciBhbGdJbmZvID0gYWxncy5pbmZvW2tleS50eXBlXTtcblx0aWYgKGtleS50eXBlID09PSAnZWNkc2EnKSB7XG5cdFx0dmFyIHJlcyA9IEVDRFNBX0FMR08uZXhlYyhhbGdvKTtcblx0XHRhc3NlcnQub2socmVzICE9PSBudWxsKTtcblx0XHRhc3NlcnQuc3RyaWN0RXF1YWwocmVzWzFdLCBwYXJ0c1swXS5kYXRhLnRvU3RyaW5nKCkpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhbGdJbmZvLnBhcnRzLmxlbmd0aDsgKytpKSB7XG5cdFx0cGFydHNbaV0ubmFtZSA9IGFsZ0luZm8ucGFydHNbaV07XG5cdFx0aWYgKHBhcnRzW2ldLm5hbWUgIT09ICdjdXJ2ZScgJiZcblx0XHQgICAgYWxnSW5mby5ub3JtYWxpemUgIT09IGZhbHNlKSB7XG5cdFx0XHR2YXIgcCA9IHBhcnRzW2ldO1xuXHRcdFx0cC5kYXRhID0gdXRpbHMubXBOb3JtYWxpemUocC5kYXRhKTtcblx0XHR9XG5cdH1cblxuXHRjZXJ0LnN1YmplY3RLZXkgPSBuZXcgS2V5KGtleSk7XG5cblx0Y2VydC5zZXJpYWwgPSBzc2hidWYucmVhZEludDY0KCk7XG5cblx0dmFyIHR5cGUgPSBUWVBFU1tzc2hidWYucmVhZEludCgpXTtcblx0YXNzZXJ0LnN0cmluZyh0eXBlLCAndmFsaWQgY2VydCB0eXBlJyk7XG5cblx0Y2VydC5zaWduYXR1cmVzLm9wZW5zc2gua2V5SWQgPSBzc2hidWYucmVhZFN0cmluZygpO1xuXG5cdHZhciBwcmluY2lwYWxzID0gW107XG5cdHZhciBwYnVmID0gc3NoYnVmLnJlYWRCdWZmZXIoKTtcblx0dmFyIHBzc2hidWYgPSBuZXcgU1NIQnVmZmVyKHsgYnVmZmVyOiBwYnVmIH0pO1xuXHR3aGlsZSAoIXBzc2hidWYuYXRFbmQoKSlcblx0XHRwcmluY2lwYWxzLnB1c2gocHNzaGJ1Zi5yZWFkU3RyaW5nKCkpO1xuXHRpZiAocHJpbmNpcGFscy5sZW5ndGggPT09IDApXG5cdFx0cHJpbmNpcGFscyA9IFsnKiddO1xuXG5cdGNlcnQuc3ViamVjdHMgPSBwcmluY2lwYWxzLm1hcChmdW5jdGlvbiAocHIpIHtcblx0XHRpZiAodHlwZSA9PT0gJ3VzZXInKVxuXHRcdFx0cmV0dXJuIChJZGVudGl0eS5mb3JVc2VyKHByKSk7XG5cdFx0ZWxzZSBpZiAodHlwZSA9PT0gJ2hvc3QnKVxuXHRcdFx0cmV0dXJuIChJZGVudGl0eS5mb3JIb3N0KHByKSk7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBpZGVudGl0eSB0eXBlICcgKyB0eXBlKSk7XG5cdH0pO1xuXG5cdGNlcnQudmFsaWRGcm9tID0gaW50NjRUb0RhdGUoc3NoYnVmLnJlYWRJbnQ2NCgpKTtcblx0Y2VydC52YWxpZFVudGlsID0gaW50NjRUb0RhdGUoc3NoYnVmLnJlYWRJbnQ2NCgpKTtcblxuXHR2YXIgZXh0cyA9IFtdO1xuXHR2YXIgZXh0YnVmID0gbmV3IFNTSEJ1ZmZlcih7IGJ1ZmZlcjogc3NoYnVmLnJlYWRCdWZmZXIoKSB9KTtcblx0dmFyIGV4dDtcblx0d2hpbGUgKCFleHRidWYuYXRFbmQoKSkge1xuXHRcdGV4dCA9IHsgY3JpdGljYWw6IHRydWUgfTtcblx0XHRleHQubmFtZSA9IGV4dGJ1Zi5yZWFkU3RyaW5nKCk7XG5cdFx0ZXh0LmRhdGEgPSBleHRidWYucmVhZEJ1ZmZlcigpO1xuXHRcdGV4dHMucHVzaChleHQpO1xuXHR9XG5cdGV4dGJ1ZiA9IG5ldyBTU0hCdWZmZXIoeyBidWZmZXI6IHNzaGJ1Zi5yZWFkQnVmZmVyKCkgfSk7XG5cdHdoaWxlICghZXh0YnVmLmF0RW5kKCkpIHtcblx0XHRleHQgPSB7IGNyaXRpY2FsOiBmYWxzZSB9O1xuXHRcdGV4dC5uYW1lID0gZXh0YnVmLnJlYWRTdHJpbmcoKTtcblx0XHRleHQuZGF0YSA9IGV4dGJ1Zi5yZWFkQnVmZmVyKCk7XG5cdFx0ZXh0cy5wdXNoKGV4dCk7XG5cdH1cblx0Y2VydC5zaWduYXR1cmVzLm9wZW5zc2guZXh0cyA9IGV4dHM7XG5cblx0LyogcmVzZXJ2ZWQgKi9cblx0c3NoYnVmLnJlYWRCdWZmZXIoKTtcblxuXHR2YXIgc2lnbmluZ0tleUJ1ZiA9IHNzaGJ1Zi5yZWFkQnVmZmVyKCk7XG5cdGNlcnQuaXNzdWVyS2V5ID0gcmZjNDI1My5yZWFkKHNpZ25pbmdLZXlCdWYpO1xuXG5cdC8qXG5cdCAqIE9wZW5TU0ggY2VydHMgZG9uJ3QgZ2l2ZSB0aGUgaWRlbnRpdHkgb2YgdGhlIGlzc3VlciwganVzdCB0aGVpclxuXHQgKiBwdWJsaWMga2V5LiBTbywgd2UgdXNlIGFuIElkZW50aXR5IHRoYXQgbWF0Y2hlcyBhbnl0aGluZy4gVGhlXG5cdCAqIGlzU2lnbmVkQnkoKSBmdW5jdGlvbiB3aWxsIGxhdGVyIHRlbGwgeW91IGlmIHRoZSBrZXkgbWF0Y2hlcy5cblx0ICovXG5cdGNlcnQuaXNzdWVyID0gSWRlbnRpdHkuZm9ySG9zdCgnKionKTtcblxuXHR2YXIgc2lnQnVmID0gc3NoYnVmLnJlYWRCdWZmZXIoKTtcblx0Y2VydC5zaWduYXR1cmVzLm9wZW5zc2guc2lnbmF0dXJlID1cblx0ICAgIFNpZ25hdHVyZS5wYXJzZShzaWdCdWYsIGNlcnQuaXNzdWVyS2V5LnR5cGUsICdzc2gnKTtcblxuXHRpZiAocGFydGlhbCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cGFydGlhbC5yZW1haW5kZXIgPSBzc2hidWYucmVtYWluZGVyKCk7XG5cdFx0cGFydGlhbC5jb25zdW1lZCA9IHNzaGJ1Zi5fb2Zmc2V0O1xuXHR9XG5cblx0cmV0dXJuIChuZXcgQ2VydGlmaWNhdGUoY2VydCkpO1xufVxuXG5mdW5jdGlvbiBpbnQ2NFRvRGF0ZShidWYpIHtcblx0dmFyIGkgPSBidWYucmVhZFVJbnQzMkJFKDApICogNDI5NDk2NzI5Njtcblx0aSArPSBidWYucmVhZFVJbnQzMkJFKDQpO1xuXHR2YXIgZCA9IG5ldyBEYXRlKCk7XG5cdGQuc2V0VGltZShpICogMTAwMCk7XG5cdGQuc291cmNlSW50NjQgPSBidWY7XG5cdHJldHVybiAoZCk7XG59XG5cbmZ1bmN0aW9uIGRhdGVUb0ludDY0KGRhdGUpIHtcblx0aWYgKGRhdGUuc291cmNlSW50NjQgIT09IHVuZGVmaW5lZClcblx0XHRyZXR1cm4gKGRhdGUuc291cmNlSW50NjQpO1xuXHR2YXIgaSA9IE1hdGgucm91bmQoZGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcblx0dmFyIHVwcGVyID0gTWF0aC5mbG9vcihpIC8gNDI5NDk2NzI5Nik7XG5cdHZhciBsb3dlciA9IE1hdGguZmxvb3IoaSAlIDQyOTQ5NjcyOTYpO1xuXHR2YXIgYnVmID0gQnVmZmVyLmFsbG9jKDgpO1xuXHRidWYud3JpdGVVSW50MzJCRSh1cHBlciwgMCk7XG5cdGJ1Zi53cml0ZVVJbnQzMkJFKGxvd2VyLCA0KTtcblx0cmV0dXJuIChidWYpO1xufVxuXG5mdW5jdGlvbiBzaWduKGNlcnQsIGtleSkge1xuXHRpZiAoY2VydC5zaWduYXR1cmVzLm9wZW5zc2ggPT09IHVuZGVmaW5lZClcblx0XHRjZXJ0LnNpZ25hdHVyZXMub3BlbnNzaCA9IHt9O1xuXHR0cnkge1xuXHRcdHZhciBibG9iID0gdG9CdWZmZXIoY2VydCwgdHJ1ZSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRkZWxldGUgKGNlcnQuc2lnbmF0dXJlcy5vcGVuc3NoKTtcblx0XHRyZXR1cm4gKGZhbHNlKTtcblx0fVxuXHR2YXIgc2lnID0gY2VydC5zaWduYXR1cmVzLm9wZW5zc2g7XG5cdHZhciBoYXNoQWxnbyA9IHVuZGVmaW5lZDtcblx0aWYgKGtleS50eXBlID09PSAncnNhJyB8fCBrZXkudHlwZSA9PT0gJ2RzYScpXG5cdFx0aGFzaEFsZ28gPSAnc2hhMSc7XG5cdHZhciBzaWduZXIgPSBrZXkuY3JlYXRlU2lnbihoYXNoQWxnbyk7XG5cdHNpZ25lci53cml0ZShibG9iKTtcblx0c2lnLnNpZ25hdHVyZSA9IHNpZ25lci5zaWduKCk7XG5cdHJldHVybiAodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIHNpZ25Bc3luYyhjZXJ0LCBzaWduZXIsIGRvbmUpIHtcblx0aWYgKGNlcnQuc2lnbmF0dXJlcy5vcGVuc3NoID09PSB1bmRlZmluZWQpXG5cdFx0Y2VydC5zaWduYXR1cmVzLm9wZW5zc2ggPSB7fTtcblx0dHJ5IHtcblx0XHR2YXIgYmxvYiA9IHRvQnVmZmVyKGNlcnQsIHRydWUpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0ZGVsZXRlIChjZXJ0LnNpZ25hdHVyZXMub3BlbnNzaCk7XG5cdFx0ZG9uZShlKTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIHNpZyA9IGNlcnQuc2lnbmF0dXJlcy5vcGVuc3NoO1xuXG5cdHNpZ25lcihibG9iLCBmdW5jdGlvbiAoZXJyLCBzaWduYXR1cmUpIHtcblx0XHRpZiAoZXJyKSB7XG5cdFx0XHRkb25lKGVycik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHQvKlxuXHRcdFx0ICogVGhpcyB3aWxsIHRocm93IGlmIHRoZSBzaWduYXR1cmUgaXNuJ3Qgb2YgYVxuXHRcdFx0ICogdHlwZS9hbGdvIHRoYXQgY2FuIGJlIHVzZWQgZm9yIFNTSC5cblx0XHRcdCAqL1xuXHRcdFx0c2lnbmF0dXJlLnRvQnVmZmVyKCdzc2gnKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRkb25lKGUpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRzaWcuc2lnbmF0dXJlID0gc2lnbmF0dXJlO1xuXHRcdGRvbmUoKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlKGNlcnQsIG9wdGlvbnMpIHtcblx0aWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZClcblx0XHRvcHRpb25zID0ge307XG5cblx0dmFyIGJsb2IgPSB0b0J1ZmZlcihjZXJ0KTtcblx0dmFyIG91dCA9IGdldENlcnRUeXBlKGNlcnQuc3ViamVjdEtleSkgKyAnICcgKyBibG9iLnRvU3RyaW5nKCdiYXNlNjQnKTtcblx0aWYgKG9wdGlvbnMuY29tbWVudClcblx0XHRvdXQgPSBvdXQgKyAnICcgKyBvcHRpb25zLmNvbW1lbnQ7XG5cdHJldHVybiAob3V0KTtcbn1cblxuXG5mdW5jdGlvbiB0b0J1ZmZlcihjZXJ0LCBub1NpZykge1xuXHRhc3NlcnQub2JqZWN0KGNlcnQuc2lnbmF0dXJlcy5vcGVuc3NoLCAnc2lnbmF0dXJlIGZvciBvcGVuc3NoIGZvcm1hdCcpO1xuXHR2YXIgc2lnID0gY2VydC5zaWduYXR1cmVzLm9wZW5zc2g7XG5cblx0aWYgKHNpZy5ub25jZSA9PT0gdW5kZWZpbmVkKVxuXHRcdHNpZy5ub25jZSA9IGNyeXB0by5yYW5kb21CeXRlcygxNik7XG5cdHZhciBidWYgPSBuZXcgU1NIQnVmZmVyKHt9KTtcblx0YnVmLndyaXRlU3RyaW5nKGdldENlcnRUeXBlKGNlcnQuc3ViamVjdEtleSkpO1xuXHRidWYud3JpdGVCdWZmZXIoc2lnLm5vbmNlKTtcblxuXHR2YXIga2V5ID0gY2VydC5zdWJqZWN0S2V5O1xuXHR2YXIgYWxnSW5mbyA9IGFsZ3MuaW5mb1trZXkudHlwZV07XG5cdGFsZ0luZm8ucGFydHMuZm9yRWFjaChmdW5jdGlvbiAocGFydCkge1xuXHRcdGJ1Zi53cml0ZVBhcnQoa2V5LnBhcnRbcGFydF0pO1xuXHR9KTtcblxuXHRidWYud3JpdGVJbnQ2NChjZXJ0LnNlcmlhbCk7XG5cblx0dmFyIHR5cGUgPSBjZXJ0LnN1YmplY3RzWzBdLnR5cGU7XG5cdGFzc2VydC5ub3RTdHJpY3RFcXVhbCh0eXBlLCAndW5rbm93bicpO1xuXHRjZXJ0LnN1YmplY3RzLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG5cdFx0YXNzZXJ0LnN0cmljdEVxdWFsKGlkLnR5cGUsIHR5cGUpO1xuXHR9KTtcblx0dHlwZSA9IFRZUEVTW3R5cGVdO1xuXHRidWYud3JpdGVJbnQodHlwZSk7XG5cblx0aWYgKHNpZy5rZXlJZCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0c2lnLmtleUlkID0gY2VydC5zdWJqZWN0c1swXS50eXBlICsgJ18nICtcblx0XHQgICAgKGNlcnQuc3ViamVjdHNbMF0udWlkIHx8IGNlcnQuc3ViamVjdHNbMF0uaG9zdG5hbWUpO1xuXHR9XG5cdGJ1Zi53cml0ZVN0cmluZyhzaWcua2V5SWQpO1xuXG5cdHZhciBzdWIgPSBuZXcgU1NIQnVmZmVyKHt9KTtcblx0Y2VydC5zdWJqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuXHRcdGlmICh0eXBlID09PSBUWVBFUy5ob3N0KVxuXHRcdFx0c3ViLndyaXRlU3RyaW5nKGlkLmhvc3RuYW1lKTtcblx0XHRlbHNlIGlmICh0eXBlID09PSBUWVBFUy51c2VyKVxuXHRcdFx0c3ViLndyaXRlU3RyaW5nKGlkLnVpZCk7XG5cdH0pO1xuXHRidWYud3JpdGVCdWZmZXIoc3ViLnRvQnVmZmVyKCkpO1xuXG5cdGJ1Zi53cml0ZUludDY0KGRhdGVUb0ludDY0KGNlcnQudmFsaWRGcm9tKSk7XG5cdGJ1Zi53cml0ZUludDY0KGRhdGVUb0ludDY0KGNlcnQudmFsaWRVbnRpbCkpO1xuXG5cdHZhciBleHRzID0gc2lnLmV4dHM7XG5cdGlmIChleHRzID09PSB1bmRlZmluZWQpXG5cdFx0ZXh0cyA9IFtdO1xuXG5cdHZhciBleHRidWYgPSBuZXcgU1NIQnVmZmVyKHt9KTtcblx0ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChleHQpIHtcblx0XHRpZiAoZXh0LmNyaXRpY2FsICE9PSB0cnVlKVxuXHRcdFx0cmV0dXJuO1xuXHRcdGV4dGJ1Zi53cml0ZVN0cmluZyhleHQubmFtZSk7XG5cdFx0ZXh0YnVmLndyaXRlQnVmZmVyKGV4dC5kYXRhKTtcblx0fSk7XG5cdGJ1Zi53cml0ZUJ1ZmZlcihleHRidWYudG9CdWZmZXIoKSk7XG5cblx0ZXh0YnVmID0gbmV3IFNTSEJ1ZmZlcih7fSk7XG5cdGV4dHMuZm9yRWFjaChmdW5jdGlvbiAoZXh0KSB7XG5cdFx0aWYgKGV4dC5jcml0aWNhbCA9PT0gdHJ1ZSlcblx0XHRcdHJldHVybjtcblx0XHRleHRidWYud3JpdGVTdHJpbmcoZXh0Lm5hbWUpO1xuXHRcdGV4dGJ1Zi53cml0ZUJ1ZmZlcihleHQuZGF0YSk7XG5cdH0pO1xuXHRidWYud3JpdGVCdWZmZXIoZXh0YnVmLnRvQnVmZmVyKCkpO1xuXG5cdC8qIHJlc2VydmVkICovXG5cdGJ1Zi53cml0ZUJ1ZmZlcihCdWZmZXIuYWxsb2MoMCkpO1xuXG5cdHN1YiA9IHJmYzQyNTMud3JpdGUoY2VydC5pc3N1ZXJLZXkpO1xuXHRidWYud3JpdGVCdWZmZXIoc3ViKTtcblxuXHRpZiAoIW5vU2lnKVxuXHRcdGJ1Zi53cml0ZUJ1ZmZlcihzaWcuc2lnbmF0dXJlLnRvQnVmZmVyKCdzc2gnKSk7XG5cblx0cmV0dXJuIChidWYudG9CdWZmZXIoKSk7XG59XG5cbmZ1bmN0aW9uIGdldEFsZyhjZXJ0VHlwZSkge1xuXHRpZiAoY2VydFR5cGUgPT09ICdzc2gtcnNhLWNlcnQtdjAxQG9wZW5zc2guY29tJylcblx0XHRyZXR1cm4gKCdyc2EnKTtcblx0aWYgKGNlcnRUeXBlID09PSAnc3NoLWRzcy1jZXJ0LXYwMUBvcGVuc3NoLmNvbScpXG5cdFx0cmV0dXJuICgnZHNhJyk7XG5cdGlmIChjZXJ0VHlwZS5tYXRjaChFQ0RTQV9BTEdPKSlcblx0XHRyZXR1cm4gKCdlY2RzYScpO1xuXHRpZiAoY2VydFR5cGUgPT09ICdzc2gtZWQyNTUxOS1jZXJ0LXYwMUBvcGVuc3NoLmNvbScpXG5cdFx0cmV0dXJuICgnZWQyNTUxOScpO1xuXHR0aHJvdyAobmV3IEVycm9yKCdVbnN1cHBvcnRlZCBjZXJ0IHR5cGUgJyArIGNlcnRUeXBlKSk7XG59XG5cbmZ1bmN0aW9uIGdldENlcnRUeXBlKGtleSkge1xuXHRpZiAoa2V5LnR5cGUgPT09ICdyc2EnKVxuXHRcdHJldHVybiAoJ3NzaC1yc2EtY2VydC12MDFAb3BlbnNzaC5jb20nKTtcblx0aWYgKGtleS50eXBlID09PSAnZHNhJylcblx0XHRyZXR1cm4gKCdzc2gtZHNzLWNlcnQtdjAxQG9wZW5zc2guY29tJyk7XG5cdGlmIChrZXkudHlwZSA9PT0gJ2VjZHNhJylcblx0XHRyZXR1cm4gKCdlY2RzYS1zaGEyLScgKyBrZXkuY3VydmUgKyAnLWNlcnQtdjAxQG9wZW5zc2guY29tJyk7XG5cdGlmIChrZXkudHlwZSA9PT0gJ2VkMjU1MTknKVxuXHRcdHJldHVybiAoJ3NzaC1lZDI1NTE5LWNlcnQtdjAxQG9wZW5zc2guY29tJyk7XG5cdHRocm93IChuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGtleSB0eXBlICcgKyBrZXkudHlwZSkpO1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFkIiwidmVyaWZ5Iiwic2lnbiIsInNpZ25Bc3luYyIsIndyaXRlIiwiZnJvbUJ1ZmZlciIsInRvQnVmZmVyIiwiYXNzZXJ0IiwicmVxdWlyZSIsIlNTSEJ1ZmZlciIsImNyeXB0byIsIkJ1ZmZlciIsImFsZ3MiLCJLZXkiLCJQcml2YXRlS2V5IiwiSWRlbnRpdHkiLCJyZmM0MjUzIiwiU2lnbmF0dXJlIiwidXRpbHMiLCJDZXJ0aWZpY2F0ZSIsImNlcnQiLCJrZXkiLCJUWVBFUyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiayIsIkVDRFNBX0FMR08iLCJidWYiLCJvcHRpb25zIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsInBhcnRzIiwidHJpbSIsInNwbGl0IiwibGVuZ3RoIiwiRXJyb3IiLCJhbGdvIiwiZGF0YSIsImZyb20iLCJwYXJ0aWFsIiwic3NoYnVmIiwiYnVmZmVyIiwiaW5uZXJBbGdvIiwicmVhZFN0cmluZyIsInVuZGVmaW5lZCIsInNpZ25hdHVyZXMiLCJvcGVuc3NoIiwibm9uY2UiLCJyZWFkQnVmZmVyIiwidHlwZSIsImdldEFsZyIsInBhcnRDb3VudCIsImluZm8iLCJwdXNoIiwicmVhZFBhcnQiLCJvayIsImFsZ0luZm8iLCJyZXMiLCJleGVjIiwic3RyaWN0RXF1YWwiLCJpIiwibmFtZSIsIm5vcm1hbGl6ZSIsInAiLCJtcE5vcm1hbGl6ZSIsInN1YmplY3RLZXkiLCJzZXJpYWwiLCJyZWFkSW50NjQiLCJyZWFkSW50Iiwic3RyaW5nIiwia2V5SWQiLCJwcmluY2lwYWxzIiwicGJ1ZiIsInBzc2hidWYiLCJhdEVuZCIsInN1YmplY3RzIiwibWFwIiwicHIiLCJmb3JVc2VyIiwiZm9ySG9zdCIsInZhbGlkRnJvbSIsImludDY0VG9EYXRlIiwidmFsaWRVbnRpbCIsImV4dHMiLCJleHRidWYiLCJleHQiLCJjcml0aWNhbCIsInNpZ25pbmdLZXlCdWYiLCJpc3N1ZXJLZXkiLCJpc3N1ZXIiLCJzaWdCdWYiLCJzaWduYXR1cmUiLCJwYXJzZSIsInJlbWFpbmRlciIsImNvbnN1bWVkIiwiX29mZnNldCIsInJlYWRVSW50MzJCRSIsImQiLCJEYXRlIiwic2V0VGltZSIsInNvdXJjZUludDY0IiwiZGF0ZVRvSW50NjQiLCJkYXRlIiwiTWF0aCIsInJvdW5kIiwiZ2V0VGltZSIsInVwcGVyIiwiZmxvb3IiLCJsb3dlciIsImFsbG9jIiwid3JpdGVVSW50MzJCRSIsImJsb2IiLCJlIiwic2lnIiwiaGFzaEFsZ28iLCJzaWduZXIiLCJjcmVhdGVTaWduIiwiZG9uZSIsImVyciIsIm91dCIsImdldENlcnRUeXBlIiwiY29tbWVudCIsIm5vU2lnIiwib2JqZWN0IiwicmFuZG9tQnl0ZXMiLCJ3cml0ZVN0cmluZyIsIndyaXRlQnVmZmVyIiwicGFydCIsIndyaXRlUGFydCIsIndyaXRlSW50NjQiLCJub3RTdHJpY3RFcXVhbCIsImlkIiwid3JpdGVJbnQiLCJ1aWQiLCJob3N0bmFtZSIsInN1YiIsImhvc3QiLCJ1c2VyIiwiY2VydFR5cGUiLCJtYXRjaCIsImN1cnZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/openssh-cert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/pem.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pem.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(ssr)/./node_modules/asn1/lib/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar pkcs1 = __webpack_require__(/*! ./pkcs1 */ \"(ssr)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(ssr)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nvar sshpriv = __webpack_require__(/*! ./ssh-private */ \"(ssr)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(ssr)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/sshpk/lib/errors.js\");\nvar OID_PBES2 = \"1.2.840.113549.1.5.13\";\nvar OID_PBKDF2 = \"1.2.840.113549.1.5.12\";\nvar OID_TO_CIPHER = {\n    \"1.2.840.113549.3.7\": \"3des-cbc\",\n    \"2.16.840.1.101.3.4.1.2\": \"aes128-cbc\",\n    \"2.16.840.1.101.3.4.1.42\": \"aes256-cbc\"\n};\nvar CIPHER_TO_OID = {};\nObject.keys(OID_TO_CIPHER).forEach(function(k) {\n    CIPHER_TO_OID[OID_TO_CIPHER[k]] = k;\n});\nvar OID_TO_HASH = {\n    \"1.2.840.113549.2.7\": \"sha1\",\n    \"1.2.840.113549.2.9\": \"sha256\",\n    \"1.2.840.113549.2.11\": \"sha512\"\n};\nvar HASH_TO_OID = {};\nObject.keys(OID_TO_HASH).forEach(function(k) {\n    HASH_TO_OID[OID_TO_HASH[k]] = k;\n});\n/*\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n * we just take the public component of it and use that.\n */ function read(buf, options, forceType) {\n    var input = buf;\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.trim().split(/[\\r\\n]+/g);\n    var m;\n    var si = -1;\n    while(!m && si < lines.length){\n        m = lines[++si].match(/*JSSTYLED*/ /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n    }\n    assert.ok(m, \"invalid PEM header\");\n    var m2;\n    var ei = lines.length;\n    while(!m2 && ei > 0){\n        m2 = lines[--ei].match(/*JSSTYLED*/ /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n    }\n    assert.ok(m2, \"invalid PEM footer\");\n    /* Begin and end banners must match key type */ assert.equal(m[2], m2[2]);\n    var type = m[2].toLowerCase();\n    var alg;\n    if (m[1]) {\n        /* They also must match algorithms, if given */ assert.equal(m[1], m2[1], \"PEM header and footer mismatch\");\n        alg = m[1].trim();\n    }\n    lines = lines.slice(si, ei + 1);\n    var headers = {};\n    while(true){\n        lines = lines.slice(1);\n        m = lines[0].match(/*JSSTYLED*/ /^([A-Za-z0-9-]+): (.+)$/);\n        if (!m) break;\n        headers[m[1].toLowerCase()] = m[2];\n    }\n    /* Chop off the first and last lines */ lines = lines.slice(0, -1).join(\"\");\n    buf = Buffer.from(lines, \"base64\");\n    var cipher, key, iv;\n    if (headers[\"proc-type\"]) {\n        var parts = headers[\"proc-type\"].split(\",\");\n        if (parts[0] === \"4\" && parts[1] === \"ENCRYPTED\") {\n            if (typeof options.passphrase === \"string\") {\n                options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n            }\n            if (!Buffer.isBuffer(options.passphrase)) {\n                throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n            } else {\n                parts = headers[\"dek-info\"].split(\",\");\n                assert.ok(parts.length === 2);\n                cipher = parts[0].toLowerCase();\n                iv = Buffer.from(parts[1], \"hex\");\n                key = utils.opensslKeyDeriv(cipher, iv, options.passphrase, 1).key;\n            }\n        }\n    }\n    if (alg && alg.toLowerCase() === \"encrypted\") {\n        var eder = new asn1.BerReader(buf);\n        var pbesEnd;\n        eder.readSequence();\n        eder.readSequence();\n        pbesEnd = eder.offset + eder.length;\n        var method = eder.readOID();\n        if (method !== OID_PBES2) {\n            throw new Error(\"Unsupported PEM/PKCS8 encryption \" + \"scheme: \" + method);\n        }\n        eder.readSequence(); /* PBES2-params */ \n        eder.readSequence(); /* keyDerivationFunc */ \n        var kdfEnd = eder.offset + eder.length;\n        var kdfOid = eder.readOID();\n        if (kdfOid !== OID_PBKDF2) throw new Error(\"Unsupported PBES2 KDF: \" + kdfOid);\n        eder.readSequence();\n        var salt = eder.readString(asn1.Ber.OctetString, true);\n        var iterations = eder.readInt();\n        var hashAlg = \"sha1\";\n        if (eder.offset < kdfEnd) {\n            eder.readSequence();\n            var hashAlgOid = eder.readOID();\n            hashAlg = OID_TO_HASH[hashAlgOid];\n            if (hashAlg === undefined) {\n                throw new Error(\"Unsupported PBKDF2 hash: \" + hashAlgOid);\n            }\n        }\n        eder._offset = kdfEnd;\n        eder.readSequence(); /* encryptionScheme */ \n        var cipherOid = eder.readOID();\n        cipher = OID_TO_CIPHER[cipherOid];\n        if (cipher === undefined) {\n            throw new Error(\"Unsupported PBES2 cipher: \" + cipherOid);\n        }\n        iv = eder.readString(asn1.Ber.OctetString, true);\n        eder._offset = pbesEnd;\n        buf = eder.readString(asn1.Ber.OctetString, true);\n        if (typeof options.passphrase === \"string\") {\n            options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n        }\n        if (!Buffer.isBuffer(options.passphrase)) {\n            throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n        }\n        var cinfo = utils.opensshCipherInfo(cipher);\n        cipher = cinfo.opensslName;\n        key = utils.pbkdf2(hashAlg, salt, iterations, cinfo.keySize, options.passphrase);\n        alg = undefined;\n    }\n    if (cipher && key && iv) {\n        var cipherStream = crypto.createDecipheriv(cipher, key, iv);\n        var chunk, chunks = [];\n        cipherStream.once(\"error\", function(e) {\n            if (e.toString().indexOf(\"bad decrypt\") !== -1) {\n                throw new Error(\"Incorrect passphrase \" + \"supplied, could not decrypt key\");\n            }\n            throw e;\n        });\n        cipherStream.write(buf);\n        cipherStream.end();\n        while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n        buf = Buffer.concat(chunks);\n    }\n    /* The new OpenSSH internal format abuses PEM headers */ if (alg && alg.toLowerCase() === \"openssh\") return sshpriv.readSSHPrivate(type, buf, options);\n    if (alg && alg.toLowerCase() === \"ssh2\") return rfc4253.readType(type, buf, options);\n    var der = new asn1.BerReader(buf);\n    der.originalInput = input;\n    /*\n\t * All of the PEM file types start with a sequence tag, so chop it\n\t * off here\n\t */ der.readSequence();\n    /* PKCS#1 type keys name an algorithm in the banner explicitly */ if (alg) {\n        if (forceType) assert.strictEqual(forceType, \"pkcs1\");\n        return pkcs1.readPkcs1(alg, type, der);\n    } else {\n        if (forceType) assert.strictEqual(forceType, \"pkcs8\");\n        return pkcs8.readPkcs8(alg, type, der);\n    }\n}\nfunction write(key, options, type) {\n    assert.object(key);\n    var alg = {\n        \"ecdsa\": \"EC\",\n        \"rsa\": \"RSA\",\n        \"dsa\": \"DSA\",\n        \"ed25519\": \"EdDSA\"\n    }[key.type];\n    var header;\n    var der = new asn1.BerWriter();\n    if (PrivateKey.isPrivateKey(key)) {\n        if (type && type === \"pkcs8\") {\n            header = \"PRIVATE KEY\";\n            pkcs8.writePkcs8(der, key);\n        } else {\n            if (type) assert.strictEqual(type, \"pkcs1\");\n            header = alg + \" PRIVATE KEY\";\n            pkcs1.writePkcs1(der, key);\n        }\n    } else if (Key.isKey(key)) {\n        if (type && type === \"pkcs1\") {\n            header = alg + \" PUBLIC KEY\";\n            pkcs1.writePkcs1(der, key);\n        } else {\n            if (type) assert.strictEqual(type, \"pkcs8\");\n            header = \"PUBLIC KEY\";\n            pkcs8.writePkcs8(der, key);\n        }\n    } else {\n        throw new Error(\"key is not a Key or PrivateKey\");\n    }\n    var tmp = der.buffer.toString(\"base64\");\n    var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;\n    var buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 64;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/pem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/pkcs1.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pkcs1.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    readPkcs1: readPkcs1,\n    write: write,\n    writePkcs1: writePkcs1\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(ssr)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(ssr)/./node_modules/sshpk/lib/formats/pem.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(ssr)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nvar readECDSACurve = pkcs8.readECDSACurve;\nfunction read(buf, options) {\n    return pem.read(buf, options, \"pkcs1\");\n}\nfunction write(key, options) {\n    return pem.write(key, options, \"pkcs1\");\n}\n/* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction readPkcs1(alg, type, der) {\n    switch(alg){\n        case \"RSA\":\n            if (type === \"public\") return readPkcs1RSAPublic(der);\n            else if (type === \"private\") return readPkcs1RSAPrivate(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"DSA\":\n            if (type === \"public\") return readPkcs1DSAPublic(der);\n            else if (type === \"private\") return readPkcs1DSAPrivate(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"EC\":\n        case \"ECDSA\":\n            if (type === \"private\") return readPkcs1ECDSAPrivate(der);\n            else if (type === \"public\") return readPkcs1ECDSAPublic(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"EDDSA\":\n        case \"EdDSA\":\n            if (type === \"private\") return readPkcs1EdDSAPrivate(der);\n            throw new Error(type + \" keys not supported with EdDSA\");\n        default:\n            throw new Error(\"Unknown key algo: \" + alg);\n    }\n}\nfunction readPkcs1RSAPublic(der) {\n    // modulus and exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"exponent\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"n\",\n                data: n\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1RSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version[0], 0);\n    // modulus then public exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"public exponent\");\n    var d = readMPInt(der, \"private exponent\");\n    var p = readMPInt(der, \"prime1\");\n    var q = readMPInt(der, \"prime2\");\n    var dmodp = readMPInt(der, \"exponent1\");\n    var dmodq = readMPInt(der, \"exponent2\");\n    var iqmp = readMPInt(der, \"iqmp\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"n\",\n                data: n\n            },\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"d\",\n                data: d\n            },\n            {\n                name: \"iqmp\",\n                data: iqmp\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"dmodp\",\n                data: dmodp\n            },\n            {\n                name: \"dmodq\",\n                data: dmodq\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1DSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 0);\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    var y = readMPInt(der, \"y\");\n    var x = readMPInt(der, \"x\");\n    // now, make the key\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"x\",\n                data: x\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1EdDSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 1);\n    // private key\n    var k = der.readString(asn1.Ber.OctetString, true);\n    der.readSequence(0xa0);\n    var oid = der.readOID();\n    assert.strictEqual(oid, \"1.3.101.112\", \"the ed25519 curve identifier\");\n    der.readSequence(0xa1);\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: k\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1DSAPublic(der) {\n    var y = readMPInt(der, \"y\");\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1ECDSAPublic(der) {\n    der.readSequence();\n    var oid = der.readOID();\n    assert.strictEqual(oid, \"1.2.840.10045.2.1\", \"must be ecPublicKey\");\n    var curveOid = der.readOID();\n    var curve;\n    var curves = Object.keys(algs.curves);\n    for(var j = 0; j < curves.length; ++j){\n        var c = curves[j];\n        var cd = algs.curves[c];\n        if (cd.pkcs8oid === curveOid) {\n            curve = c;\n            break;\n        }\n    }\n    assert.string(curve, \"a known ECDSA named curve\");\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curve)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1ECDSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 1);\n    // private key\n    var d = der.readString(asn1.Ber.OctetString, true);\n    der.readSequence(0xa0);\n    var curve = readECDSACurve(der);\n    assert.string(curve, \"a known elliptic curve\");\n    der.readSequence(0xa1);\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curve)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            },\n            {\n                name: \"d\",\n                data: d\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction writePkcs1(der, key) {\n    der.startSequence();\n    switch(key.type){\n        case \"rsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1RSAPrivate(der, key);\n            else writePkcs1RSAPublic(der, key);\n            break;\n        case \"dsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1DSAPrivate(der, key);\n            else writePkcs1DSAPublic(der, key);\n            break;\n        case \"ecdsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1ECDSAPrivate(der, key);\n            else writePkcs1ECDSAPublic(der, key);\n            break;\n        case \"ed25519\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1EdDSAPrivate(der, key);\n            else writePkcs1EdDSAPublic(der, key);\n            break;\n        default:\n            throw new Error(\"Unknown key algo: \" + key.type);\n    }\n    der.endSequence();\n}\nfunction writePkcs1RSAPublic(der, key) {\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\nfunction writePkcs1RSAPrivate(der, key) {\n    var ver = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n    der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\nfunction writePkcs1DSAPrivate(der, key) {\n    var ver = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\nfunction writePkcs1DSAPublic(der, key) {\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\nfunction writePkcs1ECDSAPublic(der, key) {\n    der.startSequence();\n    der.writeOID(\"1.2.840.10045.2.1\"); /* ecPublicKey */ \n    var curve = key.part.curve.data.toString();\n    var curveOid = algs.curves[curve].pkcs8oid;\n    assert.string(curveOid, \"a known ECDSA named curve\");\n    der.writeOID(curveOid);\n    der.endSequence();\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n}\nfunction writePkcs1ECDSAPrivate(der, key) {\n    var ver = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n    der.startSequence(0xa0);\n    var curve = key.part.curve.data.toString();\n    var curveOid = algs.curves[curve].pkcs8oid;\n    assert.string(curveOid, \"a known ECDSA named curve\");\n    der.writeOID(curveOid);\n    der.endSequence();\n    der.startSequence(0xa1);\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n    der.endSequence();\n}\nfunction writePkcs1EdDSAPrivate(der, key) {\n    var ver = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n    der.startSequence(0xa0);\n    der.writeOID(\"1.3.101.112\");\n    der.endSequence();\n    der.startSequence(0xa1);\n    utils.writeBitString(der, key.part.A.data);\n    der.endSequence();\n}\nfunction writePkcs1EdDSAPublic(der, key) {\n    throw new Error(\"Public keys are not supported for EdDSA PKCS#1\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/pkcs1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/pkcs8.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pkcs8.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    readPkcs8: readPkcs8,\n    write: write,\n    writePkcs8: writePkcs8,\n    pkcs8ToBuffer: pkcs8ToBuffer,\n    readECDSACurve: readECDSACurve,\n    writeECDSACurve: writeECDSACurve\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(ssr)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(ssr)/./node_modules/sshpk/lib/formats/pem.js\");\nfunction read(buf, options) {\n    return pem.read(buf, options, \"pkcs8\");\n}\nfunction write(key, options) {\n    return pem.write(key, options, \"pkcs8\");\n}\n/* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction readPkcs8(alg, type, der) {\n    /* Private keys in pkcs#8 format have a weird extra int */ if (der.peek() === asn1.Ber.Integer) {\n        assert.strictEqual(type, \"private\", \"unexpected Integer at start of public key\");\n        der.readString(asn1.Ber.Integer, true);\n    }\n    der.readSequence();\n    var next = der.offset + der.length;\n    var oid = der.readOID();\n    switch(oid){\n        case \"1.2.840.113549.1.1.1\":\n            der._offset = next;\n            if (type === \"public\") return readPkcs8RSAPublic(der);\n            else return readPkcs8RSAPrivate(der);\n        case \"1.2.840.10040.4.1\":\n            if (type === \"public\") return readPkcs8DSAPublic(der);\n            else return readPkcs8DSAPrivate(der);\n        case \"1.2.840.10045.2.1\":\n            if (type === \"public\") return readPkcs8ECDSAPublic(der);\n            else return readPkcs8ECDSAPrivate(der);\n        case \"1.3.101.112\":\n            if (type === \"public\") {\n                return readPkcs8EdDSAPublic(der);\n            } else {\n                return readPkcs8EdDSAPrivate(der);\n            }\n        case \"1.3.101.110\":\n            if (type === \"public\") {\n                return readPkcs8X25519Public(der);\n            } else {\n                return readPkcs8X25519Private(der);\n            }\n        default:\n            throw new Error(\"Unknown key type OID \" + oid);\n    }\n}\nfunction readPkcs8RSAPublic(der) {\n    // bit string sequence\n    der.readSequence(asn1.Ber.BitString);\n    der.readByte();\n    der.readSequence();\n    // modulus\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"exponent\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        source: der.originalInput,\n        parts: [\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"n\",\n                data: n\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8RSAPrivate(der) {\n    der.readSequence(asn1.Ber.OctetString);\n    der.readSequence();\n    var ver = readMPInt(der, \"version\");\n    assert.equal(ver[0], 0x0, \"unknown RSA private key version\");\n    // modulus then public exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"public exponent\");\n    var d = readMPInt(der, \"private exponent\");\n    var p = readMPInt(der, \"prime1\");\n    var q = readMPInt(der, \"prime2\");\n    var dmodp = readMPInt(der, \"exponent1\");\n    var dmodq = readMPInt(der, \"exponent2\");\n    var iqmp = readMPInt(der, \"iqmp\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"n\",\n                data: n\n            },\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"d\",\n                data: d\n            },\n            {\n                name: \"iqmp\",\n                data: iqmp\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"dmodp\",\n                data: dmodp\n            },\n            {\n                name: \"dmodq\",\n                data: dmodq\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8DSAPublic(der) {\n    der.readSequence();\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    // bit string sequence\n    der.readSequence(asn1.Ber.BitString);\n    der.readByte();\n    var y = readMPInt(der, \"y\");\n    // now, make the key\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8DSAPrivate(der) {\n    der.readSequence();\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    der.readSequence(asn1.Ber.OctetString);\n    var x = readMPInt(der, \"x\");\n    /* The pkcs#8 format does not include the public key */ var y = utils.calculateDSAPublic(g, p, x);\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"x\",\n                data: x\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readECDSACurve(der) {\n    var curveName, curveNames;\n    var j, c, cd;\n    if (der.peek() === asn1.Ber.OID) {\n        var oid = der.readOID();\n        curveNames = Object.keys(algs.curves);\n        for(j = 0; j < curveNames.length; ++j){\n            c = curveNames[j];\n            cd = algs.curves[c];\n            if (cd.pkcs8oid === oid) {\n                curveName = c;\n                break;\n            }\n        }\n    } else {\n        // ECParameters sequence\n        der.readSequence();\n        var version = der.readString(asn1.Ber.Integer, true);\n        assert.strictEqual(version[0], 1, \"ECDSA key not version 1\");\n        var curve = {};\n        // FieldID sequence\n        der.readSequence();\n        var fieldTypeOid = der.readOID();\n        assert.strictEqual(fieldTypeOid, \"1.2.840.10045.1.1\", \"ECDSA key is not from a prime-field\");\n        var p = curve.p = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        /*\n\t\t * p always starts with a 1 bit, so count the zeros to get its\n\t\t * real size.\n\t\t */ curve.size = p.length * 8 - utils.countZeros(p);\n        // Curve sequence\n        der.readSequence();\n        curve.a = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n        curve.b = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n        if (der.peek() === asn1.Ber.BitString) curve.s = der.readString(asn1.Ber.BitString, true);\n        // Combined Gx and Gy\n        curve.G = der.readString(asn1.Ber.OctetString, true);\n        assert.strictEqual(curve.G[0], 0x4, \"uncompressed G is required\");\n        curve.n = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        curve.h = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        assert.strictEqual(curve.h[0], 0x1, \"a cofactor=1 curve is \" + \"required\");\n        curveNames = Object.keys(algs.curves);\n        var ks = Object.keys(curve);\n        for(j = 0; j < curveNames.length; ++j){\n            c = curveNames[j];\n            cd = algs.curves[c];\n            var equal = true;\n            for(var i = 0; i < ks.length; ++i){\n                var k = ks[i];\n                if (cd[k] === undefined) continue;\n                if (typeof cd[k] === \"object\" && cd[k].equals !== undefined) {\n                    if (!cd[k].equals(curve[k])) {\n                        equal = false;\n                        break;\n                    }\n                } else if (Buffer.isBuffer(cd[k])) {\n                    if (cd[k].toString(\"binary\") !== curve[k].toString(\"binary\")) {\n                        equal = false;\n                        break;\n                    }\n                } else {\n                    if (cd[k] !== curve[k]) {\n                        equal = false;\n                        break;\n                    }\n                }\n            }\n            if (equal) {\n                curveName = c;\n                break;\n            }\n        }\n    }\n    return curveName;\n}\nfunction readPkcs8ECDSAPrivate(der) {\n    var curveName = readECDSACurve(der);\n    assert.string(curveName, \"a known elliptic curve\");\n    der.readSequence(asn1.Ber.OctetString);\n    der.readSequence();\n    var version = readMPInt(der, \"version\");\n    assert.equal(version[0], 1, \"unknown version of ECDSA key\");\n    var d = der.readString(asn1.Ber.OctetString, true);\n    var Q;\n    if (der.peek() == 0xa0) {\n        der.readSequence(0xa0);\n        der._offset += der.length;\n    }\n    if (der.peek() == 0xa1) {\n        der.readSequence(0xa1);\n        Q = der.readString(asn1.Ber.BitString, true);\n        Q = utils.ecNormalize(Q);\n    }\n    if (Q === undefined) {\n        var pub = utils.publicFromPrivateECDSA(curveName, d);\n        Q = pub.part.Q.data;\n    }\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curveName)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            },\n            {\n                name: \"d\",\n                data: d\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8ECDSAPublic(der) {\n    var curveName = readECDSACurve(der);\n    assert.string(curveName, \"a known elliptic curve\");\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curveName)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8EdDSAPublic(der) {\n    if (der.peek() === 0x00) der.readByte();\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8X25519Public(der) {\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"curve25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8EdDSAPrivate(der) {\n    if (der.peek() === 0x00) der.readByte();\n    der.readSequence(asn1.Ber.OctetString);\n    var k = der.readString(asn1.Ber.OctetString, true);\n    k = utils.zeroPadToLength(k, 32);\n    var A, tag;\n    while((tag = der.peek()) !== null){\n        if (tag === (asn1.Ber.Context | 1)) {\n            A = utils.readBitString(der, tag);\n        } else {\n            der.readSequence(tag);\n            der._offset += der.length;\n        }\n    }\n    if (A === undefined) A = utils.calculateED25519Public(k);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: utils.zeroPadToLength(k, 32)\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8X25519Private(der) {\n    if (der.peek() === 0x00) der.readByte();\n    der.readSequence(asn1.Ber.OctetString);\n    var k = der.readString(asn1.Ber.OctetString, true);\n    k = utils.zeroPadToLength(k, 32);\n    var A = utils.calculateX25519Public(k);\n    var key = {\n        type: \"curve25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: utils.zeroPadToLength(k, 32)\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction pkcs8ToBuffer(key) {\n    var der = new asn1.BerWriter();\n    writePkcs8(der, key);\n    return der.buffer;\n}\nfunction writePkcs8(der, key) {\n    der.startSequence();\n    if (PrivateKey.isPrivateKey(key)) {\n        var version = 0;\n        if (key.type === \"ed25519\") version = 1;\n        var vbuf = Buffer.from([\n            version\n        ]);\n        der.writeBuffer(vbuf, asn1.Ber.Integer);\n    }\n    der.startSequence();\n    switch(key.type){\n        case \"rsa\":\n            der.writeOID(\"1.2.840.113549.1.1.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8RSAPrivate(key, der);\n            else writePkcs8RSAPublic(key, der);\n            break;\n        case \"dsa\":\n            der.writeOID(\"1.2.840.10040.4.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8DSAPrivate(key, der);\n            else writePkcs8DSAPublic(key, der);\n            break;\n        case \"ecdsa\":\n            der.writeOID(\"1.2.840.10045.2.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8ECDSAPrivate(key, der);\n            else writePkcs8ECDSAPublic(key, der);\n            break;\n        case \"ed25519\":\n            der.writeOID(\"1.3.101.112\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8EdDSAPrivate(key, der);\n            else writePkcs8EdDSAPublic(key, der);\n            break;\n        default:\n            throw new Error(\"Unsupported key type: \" + key.type);\n    }\n    der.endSequence();\n}\nfunction writePkcs8RSAPrivate(key, der) {\n    der.writeNull();\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.startSequence();\n    var version = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(version, asn1.Ber.Integer);\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n    der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8RSAPublic(key, der) {\n    der.writeNull();\n    der.endSequence();\n    der.startSequence(asn1.Ber.BitString);\n    der.writeByte(0x00);\n    der.startSequence();\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8DSAPrivate(key, der) {\n    der.startSequence();\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n    der.endSequence();\n}\nfunction writePkcs8DSAPublic(key, der) {\n    der.startSequence();\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n    der.startSequence(asn1.Ber.BitString);\n    der.writeByte(0x00);\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.endSequence();\n}\nfunction writeECDSACurve(key, der) {\n    var curve = algs.curves[key.curve];\n    if (curve.pkcs8oid) {\n        /* This one has a name in pkcs#8, so just write the oid */ der.writeOID(curve.pkcs8oid);\n    } else {\n        // ECParameters sequence\n        der.startSequence();\n        var version = Buffer.from([\n            1\n        ]);\n        der.writeBuffer(version, asn1.Ber.Integer);\n        // FieldID sequence\n        der.startSequence();\n        der.writeOID(\"1.2.840.10045.1.1\"); // prime-field\n        der.writeBuffer(curve.p, asn1.Ber.Integer);\n        der.endSequence();\n        // Curve sequence\n        der.startSequence();\n        var a = curve.p;\n        if (a[0] === 0x0) a = a.slice(1);\n        der.writeBuffer(a, asn1.Ber.OctetString);\n        der.writeBuffer(curve.b, asn1.Ber.OctetString);\n        der.writeBuffer(curve.s, asn1.Ber.BitString);\n        der.endSequence();\n        der.writeBuffer(curve.G, asn1.Ber.OctetString);\n        der.writeBuffer(curve.n, asn1.Ber.Integer);\n        var h = curve.h;\n        if (!h) {\n            h = Buffer.from([\n                1\n            ]);\n        }\n        der.writeBuffer(h, asn1.Ber.Integer);\n        // ECParameters\n        der.endSequence();\n    }\n}\nfunction writePkcs8ECDSAPublic(key, der) {\n    writeECDSACurve(key, der);\n    der.endSequence();\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n}\nfunction writePkcs8ECDSAPrivate(key, der) {\n    writeECDSACurve(key, der);\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.startSequence();\n    var version = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(version, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n    der.startSequence(0xa1);\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n    der.endSequence();\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8EdDSAPublic(key, der) {\n    der.endSequence();\n    utils.writeBitString(der, key.part.A.data);\n}\nfunction writePkcs8EdDSAPrivate(key, der) {\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    var k = utils.mpNormalize(key.part.k.data);\n    /* RFCs call for storing exactly 32 bytes, so strip any leading zeros */ while(k.length > 32 && k[0] === 0x00)k = k.slice(1);\n    der.writeBuffer(k, asn1.Ber.OctetString);\n    der.endSequence();\n    utils.writeBitString(der, key.part.A.data, asn1.Ber.Context | 1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/pkcs8.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/putty.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/putty.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(ssr)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(ssr)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/sshpk/lib/errors.js\");\n// https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\nfunction read(buf, options) {\n    var lines = buf.toString(\"ascii\").split(/[\\r\\n]+/);\n    var found = false;\n    var parts;\n    var si = 0;\n    var formatVersion;\n    while(si < lines.length){\n        parts = splitHeader(lines[si++]);\n        if (parts) {\n            formatVersion = ({\n                \"putty-user-key-file-2\": 2,\n                \"putty-user-key-file-3\": 3\n            })[parts[0].toLowerCase()];\n            if (formatVersion) {\n                found = true;\n                break;\n            }\n        }\n    }\n    if (!found) {\n        throw new Error(\"No PuTTY format first line found\");\n    }\n    var alg = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"encryption\");\n    var encryption = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"comment\");\n    var comment = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"public-lines\");\n    var publicLines = parseInt(parts[1], 10);\n    if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {\n        throw new Error(\"Invalid public-lines count\");\n    }\n    var publicBuf = Buffer.from(lines.slice(si, si + publicLines).join(\"\"), \"base64\");\n    var keyType = rfc4253.algToKeyType(alg);\n    var key = rfc4253.read(publicBuf);\n    if (key.type !== keyType) {\n        throw new Error(\"Outer key algorithm mismatch\");\n    }\n    si += publicLines;\n    if (lines[si]) {\n        parts = splitHeader(lines[si++]);\n        assert.equal(parts[0].toLowerCase(), \"private-lines\");\n        var privateLines = parseInt(parts[1], 10);\n        if (!isFinite(privateLines) || privateLines < 0 || privateLines > lines.length) {\n            throw new Error(\"Invalid private-lines count\");\n        }\n        var privateBuf = Buffer.from(lines.slice(si, si + privateLines).join(\"\"), \"base64\");\n        if (encryption !== \"none\" && formatVersion === 3) {\n            throw new Error(\"Encrypted keys arenot supported for\" + \" PuTTY format version 3\");\n        }\n        if (encryption === \"aes256-cbc\") {\n            if (!options.passphrase) {\n                throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n            }\n            var iv = Buffer.alloc(16, 0);\n            var decipher = crypto.createDecipheriv(\"aes-256-cbc\", derivePPK2EncryptionKey(options.passphrase), iv);\n            decipher.setAutoPadding(false);\n            privateBuf = Buffer.concat([\n                decipher.update(privateBuf),\n                decipher.final()\n            ]);\n        }\n        key = new PrivateKey(key);\n        if (key.type !== keyType) {\n            throw new Error(\"Outer key algorithm mismatch\");\n        }\n        var sshbuf = new SSHBuffer({\n            buffer: privateBuf\n        });\n        var privateKeyParts;\n        if (alg === \"ssh-dss\") {\n            privateKeyParts = [\n                {\n                    name: \"x\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg === \"ssh-rsa\") {\n            privateKeyParts = [\n                {\n                    name: \"d\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"p\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"q\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"iqmp\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg.match(/^ecdsa-sha2-nistp/)) {\n            privateKeyParts = [\n                {\n                    name: \"d\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg === \"ssh-ed25519\") {\n            privateKeyParts = [\n                {\n                    name: \"k\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else {\n            throw new Error(\"Unsupported PPK key type: \" + alg);\n        }\n        key = new PrivateKey({\n            type: key.type,\n            parts: key.parts.concat(privateKeyParts)\n        });\n    }\n    key.comment = comment;\n    return key;\n}\nfunction derivePPK2EncryptionKey(passphrase) {\n    var hash1 = crypto.createHash(\"sha1\").update(Buffer.concat([\n        Buffer.from([\n            0,\n            0,\n            0,\n            0\n        ]),\n        Buffer.from(passphrase)\n    ])).digest();\n    var hash2 = crypto.createHash(\"sha1\").update(Buffer.concat([\n        Buffer.from([\n            0,\n            0,\n            0,\n            1\n        ]),\n        Buffer.from(passphrase)\n    ])).digest();\n    return Buffer.concat([\n        hash1,\n        hash2\n    ]).slice(0, 32);\n}\nfunction splitHeader(line) {\n    var idx = line.indexOf(\":\");\n    if (idx === -1) return null;\n    var header = line.slice(0, idx);\n    ++idx;\n    while(line[idx] === \" \")++idx;\n    var rest = line.slice(idx);\n    return [\n        header,\n        rest\n    ];\n}\nfunction write(key, options) {\n    assert.object(key);\n    if (!Key.isKey(key)) throw new Error(\"Must be a public key\");\n    var alg = rfc4253.keyTypeToAlg(key);\n    var buf = rfc4253.write(key);\n    var comment = key.comment || \"\";\n    var b64 = buf.toString(\"base64\");\n    var lines = wrap(b64, 64);\n    lines.unshift(\"Public-Lines: \" + lines.length);\n    lines.unshift(\"Comment: \" + comment);\n    lines.unshift(\"Encryption: none\");\n    lines.unshift(\"PuTTY-User-Key-File-2: \" + alg);\n    return Buffer.from(lines.join(\"\\n\") + \"\\n\");\n}\nfunction wrap(txt, len) {\n    var lines = [];\n    var pos = 0;\n    while(pos < txt.length){\n        lines.push(txt.slice(pos, pos + 64));\n        pos += 64;\n    }\n    return lines;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/putty.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/rfc4253.js":
/*!***************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/rfc4253.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read.bind(undefined, false, undefined),\n    readType: read.bind(undefined, false),\n    write: write,\n    /* semi-private api, used by sshpk-agent */ readPartial: read.bind(undefined, true),\n    /* shared with ssh format */ readInternal: read,\n    keyTypeToAlg: keyTypeToAlg,\n    algToKeyType: algToKeyType\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(ssr)/./node_modules/sshpk/lib/ssh-buffer.js\");\nfunction algToKeyType(alg) {\n    assert.string(alg);\n    if (alg === \"ssh-dss\") return \"dsa\";\n    else if (alg === \"ssh-rsa\") return \"rsa\";\n    else if (alg === \"ssh-ed25519\") return \"ed25519\";\n    else if (alg === \"ssh-curve25519\") return \"curve25519\";\n    else if (alg.match(/^ecdsa-sha2-/)) return \"ecdsa\";\n    else throw new Error(\"Unknown algorithm \" + alg);\n}\nfunction keyTypeToAlg(key) {\n    assert.object(key);\n    if (key.type === \"dsa\") return \"ssh-dss\";\n    else if (key.type === \"rsa\") return \"ssh-rsa\";\n    else if (key.type === \"ed25519\") return \"ssh-ed25519\";\n    else if (key.type === \"curve25519\") return \"ssh-curve25519\";\n    else if (key.type === \"ecdsa\") return \"ecdsa-sha2-\" + key.part.curve.data.toString();\n    else throw new Error(\"Unknown key type \" + key.type);\n}\nfunction read(partial, type, buf, options) {\n    if (typeof buf === \"string\") buf = Buffer.from(buf);\n    assert.buffer(buf, \"buf\");\n    var key = {};\n    var parts = key.parts = [];\n    var sshbuf = new SSHBuffer({\n        buffer: buf\n    });\n    var alg = sshbuf.readString();\n    assert.ok(!sshbuf.atEnd(), \"key must have at least one part\");\n    key.type = algToKeyType(alg);\n    var partCount = algs.info[key.type].parts.length;\n    if (type && type === \"private\") partCount = algs.privInfo[key.type].parts.length;\n    while(!sshbuf.atEnd() && parts.length < partCount)parts.push(sshbuf.readPart());\n    while(!partial && !sshbuf.atEnd())parts.push(sshbuf.readPart());\n    assert.ok(parts.length >= 1, \"key must have at least one part\");\n    assert.ok(partial || sshbuf.atEnd(), \"leftover bytes at end of key\");\n    var Constructor = Key;\n    var algInfo = algs.info[key.type];\n    if (type === \"private\" || algInfo.parts.length !== parts.length) {\n        algInfo = algs.privInfo[key.type];\n        Constructor = PrivateKey;\n    }\n    assert.strictEqual(algInfo.parts.length, parts.length);\n    if (key.type === \"ecdsa\") {\n        var res = /^ecdsa-sha2-(.+)$/.exec(alg);\n        assert.ok(res !== null);\n        assert.strictEqual(res[1], parts[0].data.toString());\n    }\n    var normalized = true;\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        var p = parts[i];\n        p.name = algInfo.parts[i];\n        /*\n\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t * concat'd together (k followed by A). We want to keep them\n\t\t * separate for other formats that don't do this.\n\t\t */ if (key.type === \"ed25519\" && p.name === \"k\") p.data = p.data.slice(0, 32);\n        if (p.name !== \"curve\" && algInfo.normalize !== false) {\n            var nd;\n            if (key.type === \"ed25519\") {\n                nd = utils.zeroPadToLength(p.data, 32);\n            } else {\n                nd = utils.mpNormalize(p.data);\n            }\n            if (nd.toString(\"binary\") !== p.data.toString(\"binary\")) {\n                p.data = nd;\n                normalized = false;\n            }\n        }\n    }\n    if (normalized) key._rfc4253Cache = sshbuf.toBuffer();\n    if (partial && typeof partial === \"object\") {\n        partial.remainder = sshbuf.remainder();\n        partial.consumed = sshbuf._offset;\n    }\n    return new Constructor(key);\n}\nfunction write(key, options) {\n    assert.object(key);\n    var alg = keyTypeToAlg(key);\n    var i;\n    var algInfo = algs.info[key.type];\n    if (PrivateKey.isPrivateKey(key)) algInfo = algs.privInfo[key.type];\n    var parts = algInfo.parts;\n    var buf = new SSHBuffer({});\n    buf.writeString(alg);\n    for(i = 0; i < parts.length; ++i){\n        var data = key.part[parts[i]].data;\n        if (algInfo.normalize !== false) {\n            if (key.type === \"ed25519\") data = utils.zeroPadToLength(data, 32);\n            else data = utils.mpNormalize(data);\n        }\n        if (key.type === \"ed25519\" && parts[i] === \"k\") data = Buffer.concat([\n            data,\n            key.part.A.data\n        ]);\n        buf.writeBuffer(data);\n    }\n    return buf.toBuffer();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/rfc4253.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/ssh-private.js":
/*!*******************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/ssh-private.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    readSSHPrivate: readSSHPrivate,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(ssr)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(ssr)/./node_modules/sshpk/lib/formats/pem.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(ssr)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(ssr)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/sshpk/lib/errors.js\");\nvar bcrypt;\nfunction read(buf, options) {\n    return pem.read(buf, options);\n}\nvar MAGIC = \"openssh-key-v1\";\nfunction readSSHPrivate(type, buf, options) {\n    buf = new SSHBuffer({\n        buffer: buf\n    });\n    var magic = buf.readCString();\n    assert.strictEqual(magic, MAGIC, \"bad magic string\");\n    var cipher = buf.readString();\n    var kdf = buf.readString();\n    var kdfOpts = buf.readBuffer();\n    var nkeys = buf.readInt();\n    if (nkeys !== 1) {\n        throw new Error(\"OpenSSH-format key file contains \" + \"multiple keys: this is unsupported.\");\n    }\n    var pubKey = buf.readBuffer();\n    if (type === \"public\") {\n        assert.ok(buf.atEnd(), \"excess bytes left after key\");\n        return rfc4253.read(pubKey);\n    }\n    var privKeyBlob = buf.readBuffer();\n    assert.ok(buf.atEnd(), \"excess bytes left after key\");\n    var kdfOptsBuf = new SSHBuffer({\n        buffer: kdfOpts\n    });\n    switch(kdf){\n        case \"none\":\n            if (cipher !== \"none\") {\n                throw new Error('OpenSSH-format key uses KDF \"none\" ' + 'but specifies a cipher other than \"none\"');\n            }\n            break;\n        case \"bcrypt\":\n            var salt = kdfOptsBuf.readBuffer();\n            var rounds = kdfOptsBuf.readInt();\n            var cinf = utils.opensshCipherInfo(cipher);\n            if (bcrypt === undefined) {\n                bcrypt = __webpack_require__(/*! bcrypt-pbkdf */ \"(ssr)/./node_modules/bcrypt-pbkdf/index.js\");\n            }\n            if (typeof options.passphrase === \"string\") {\n                options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n            }\n            if (!Buffer.isBuffer(options.passphrase)) {\n                throw new errors.KeyEncryptedError(options.filename, \"OpenSSH\");\n            }\n            var pass = new Uint8Array(options.passphrase);\n            var salti = new Uint8Array(salt);\n            /* Use the pbkdf to derive both the key and the IV. */ var out = new Uint8Array(cinf.keySize + cinf.blockSize);\n            var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);\n            if (res !== 0) {\n                throw new Error(\"bcrypt_pbkdf function returned \" + \"failure, parameters invalid\");\n            }\n            out = Buffer.from(out);\n            var ckey = out.slice(0, cinf.keySize);\n            var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n            var cipherStream = crypto.createDecipheriv(cinf.opensslName, ckey, iv);\n            cipherStream.setAutoPadding(false);\n            var chunk, chunks = [];\n            cipherStream.once(\"error\", function(e) {\n                if (e.toString().indexOf(\"bad decrypt\") !== -1) {\n                    throw new Error(\"Incorrect passphrase \" + \"supplied, could not decrypt key\");\n                }\n                throw e;\n            });\n            cipherStream.write(privKeyBlob);\n            cipherStream.end();\n            while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n            privKeyBlob = Buffer.concat(chunks);\n            break;\n        default:\n            throw new Error('OpenSSH-format key uses unknown KDF \"' + kdf + '\"');\n    }\n    buf = new SSHBuffer({\n        buffer: privKeyBlob\n    });\n    var checkInt1 = buf.readInt();\n    var checkInt2 = buf.readInt();\n    if (checkInt1 !== checkInt2) {\n        throw new Error(\"Incorrect passphrase supplied, could not \" + \"decrypt key\");\n    }\n    var ret = {};\n    var key = rfc4253.readInternal(ret, \"private\", buf.remainder());\n    buf.skip(ret.consumed);\n    var comment = buf.readString();\n    key.comment = comment;\n    return key;\n}\nfunction write(key, options) {\n    var pubKey;\n    if (PrivateKey.isPrivateKey(key)) pubKey = key.toPublic();\n    else pubKey = key;\n    var cipher = \"none\";\n    var kdf = \"none\";\n    var kdfopts = Buffer.alloc(0);\n    var cinf = {\n        blockSize: 8\n    };\n    var passphrase;\n    if (options !== undefined) {\n        passphrase = options.passphrase;\n        if (typeof passphrase === \"string\") passphrase = Buffer.from(passphrase, \"utf-8\");\n        if (passphrase !== undefined) {\n            assert.buffer(passphrase, \"options.passphrase\");\n            assert.optionalString(options.cipher, \"options.cipher\");\n            cipher = options.cipher;\n            if (cipher === undefined) cipher = \"aes128-ctr\";\n            cinf = utils.opensshCipherInfo(cipher);\n            kdf = \"bcrypt\";\n        }\n    }\n    var privBuf;\n    if (PrivateKey.isPrivateKey(key)) {\n        privBuf = new SSHBuffer({});\n        var checkInt = crypto.randomBytes(4).readUInt32BE(0);\n        privBuf.writeInt(checkInt);\n        privBuf.writeInt(checkInt);\n        privBuf.write(key.toBuffer(\"rfc4253\"));\n        privBuf.writeString(key.comment || \"\");\n        var n = 1;\n        while(privBuf._offset % cinf.blockSize !== 0)privBuf.writeChar(n++);\n        privBuf = privBuf.toBuffer();\n    }\n    switch(kdf){\n        case \"none\":\n            break;\n        case \"bcrypt\":\n            var salt = crypto.randomBytes(16);\n            var rounds = 16;\n            var kdfssh = new SSHBuffer({});\n            kdfssh.writeBuffer(salt);\n            kdfssh.writeInt(rounds);\n            kdfopts = kdfssh.toBuffer();\n            if (bcrypt === undefined) {\n                bcrypt = __webpack_require__(/*! bcrypt-pbkdf */ \"(ssr)/./node_modules/bcrypt-pbkdf/index.js\");\n            }\n            var pass = new Uint8Array(passphrase);\n            var salti = new Uint8Array(salt);\n            /* Use the pbkdf to derive both the key and the IV. */ var out = new Uint8Array(cinf.keySize + cinf.blockSize);\n            var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);\n            if (res !== 0) {\n                throw new Error(\"bcrypt_pbkdf function returned \" + \"failure, parameters invalid\");\n            }\n            out = Buffer.from(out);\n            var ckey = out.slice(0, cinf.keySize);\n            var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n            var cipherStream = crypto.createCipheriv(cinf.opensslName, ckey, iv);\n            cipherStream.setAutoPadding(false);\n            var chunk, chunks = [];\n            cipherStream.once(\"error\", function(e) {\n                throw e;\n            });\n            cipherStream.write(privBuf);\n            cipherStream.end();\n            while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n            privBuf = Buffer.concat(chunks);\n            break;\n        default:\n            throw new Error(\"Unsupported kdf \" + kdf);\n    }\n    var buf = new SSHBuffer({});\n    buf.writeCString(MAGIC);\n    buf.writeString(cipher); /* cipher */ \n    buf.writeString(kdf); /* kdf */ \n    buf.writeBuffer(kdfopts); /* kdfoptions */ \n    buf.writeInt(1); /* nkeys */ \n    buf.writeBuffer(pubKey.toBuffer(\"rfc4253\"));\n    if (privBuf) buf.writeBuffer(privBuf);\n    buf = buf.toBuffer();\n    var header;\n    if (PrivateKey.isPrivateKey(key)) header = \"OPENSSH PRIVATE KEY\";\n    else header = \"OPENSSH PUBLIC KEY\";\n    var tmp = buf.toString(\"base64\");\n    var len = tmp.length + tmp.length / 70 + 18 + 16 + header.length * 2 + 10;\n    buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 70;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/ssh-private.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/ssh.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/formats/ssh.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(ssr)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar sshpriv = __webpack_require__(/*! ./ssh-private */ \"(ssr)/./node_modules/sshpk/lib/formats/ssh-private.js\");\n/*JSSTYLED*/ var SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n/*JSSTYLED*/ var SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var trimmed = buf.trim().replace(/[\\\\\\r]/g, \"\");\n    var m = trimmed.match(SSHKEY_RE);\n    if (!m) m = trimmed.match(SSHKEY_RE2);\n    assert.ok(m, \"key must match regex\");\n    var type = rfc4253.algToKeyType(m[1]);\n    var kbuf = Buffer.from(m[2], \"base64\");\n    /*\n\t * This is a bit tricky. If we managed to parse the key and locate the\n\t * key comment with the regex, then do a non-partial read and assert\n\t * that we have consumed all bytes. If we couldn't locate the key\n\t * comment, though, there may be whitespace shenanigans going on that\n\t * have conjoined the comment to the rest of the key. We do a partial\n\t * read in this case to try to make the best out of a sorry situation.\n\t */ var key;\n    var ret = {};\n    if (m[4]) {\n        try {\n            key = rfc4253.read(kbuf);\n        } catch (e) {\n            m = trimmed.match(SSHKEY_RE2);\n            assert.ok(m, \"key must match regex\");\n            kbuf = Buffer.from(m[2], \"base64\");\n            key = rfc4253.readInternal(ret, \"public\", kbuf);\n        }\n    } else {\n        key = rfc4253.readInternal(ret, \"public\", kbuf);\n    }\n    assert.strictEqual(type, key.type);\n    if (m[4] && m[4].length > 0) {\n        key.comment = m[4];\n    } else if (ret.consumed) {\n        /*\n\t\t * Now the magic: trying to recover the key comment when it's\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\n\t\t *\n\t\t * Work out how much base64 we used, then drop all non-base64\n\t\t * chars from the beginning up to this point in the the string.\n\t\t * Then offset in this and try to make up for missing = chars.\n\t\t */ var data = m[2] + (m[3] ? m[3] : \"\");\n        var realOffset = Math.ceil(ret.consumed / 3) * 4;\n        data = data.slice(0, realOffset - 2)./*JSSTYLED*/ replace(/[^a-zA-Z0-9+\\/=]/g, \"\") + data.slice(realOffset - 2);\n        var padding = ret.consumed % 3;\n        if (padding > 0 && data.slice(realOffset - 1, realOffset) !== \"=\") realOffset--;\n        while(data.slice(realOffset, realOffset + 1) === \"=\")realOffset++;\n        /* Finally, grab what we think is the comment & clean it up. */ var trailer = data.slice(realOffset);\n        trailer = trailer.replace(/[\\r\\n]/g, \" \").replace(/^\\s+/, \"\");\n        if (trailer.match(/^[a-zA-Z0-9]/)) key.comment = trailer;\n    }\n    return key;\n}\nfunction write(key, options) {\n    assert.object(key);\n    if (!Key.isKey(key)) throw new Error(\"Must be a public key\");\n    var parts = [];\n    var alg = rfc4253.keyTypeToAlg(key);\n    parts.push(alg);\n    var buf = rfc4253.write(key);\n    parts.push(buf.toString(\"base64\"));\n    if (key.comment) parts.push(key.comment);\n    return Buffer.from(parts.join(\" \"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/ssh.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/x509-pem.js":
/*!****************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/x509-pem.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2016 Joyent, Inc.\n\nvar x509 = __webpack_require__(/*! ./x509 */ \"(ssr)/./node_modules/sshpk/lib/formats/x509.js\");\nmodule.exports = {\n    read: read,\n    verify: x509.verify,\n    sign: x509.sign,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(ssr)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(ssr)/./node_modules/sshpk/lib/formats/pem.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(ssr)/./node_modules/sshpk/lib/identity.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(ssr)/./node_modules/sshpk/lib/signature.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(ssr)/./node_modules/sshpk/lib/certificate.js\");\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.trim().split(/[\\r\\n]+/g);\n    var m;\n    var si = -1;\n    while(!m && si < lines.length){\n        m = lines[++si].match(/*JSSTYLED*/ /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);\n    }\n    assert.ok(m, \"invalid PEM header\");\n    var m2;\n    var ei = lines.length;\n    while(!m2 && ei > 0){\n        m2 = lines[--ei].match(/*JSSTYLED*/ /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);\n    }\n    assert.ok(m2, \"invalid PEM footer\");\n    lines = lines.slice(si, ei + 1);\n    var headers = {};\n    while(true){\n        lines = lines.slice(1);\n        m = lines[0].match(/*JSSTYLED*/ /^([A-Za-z0-9-]+): (.+)$/);\n        if (!m) break;\n        headers[m[1].toLowerCase()] = m[2];\n    }\n    /* Chop off the first and last lines */ lines = lines.slice(0, -1).join(\"\");\n    buf = Buffer.from(lines, \"base64\");\n    return x509.read(buf, options);\n}\nfunction write(cert, options) {\n    var dbuf = x509.write(cert, options);\n    var header = \"CERTIFICATE\";\n    var tmp = dbuf.toString(\"base64\");\n    var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;\n    var buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 64;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMveDUwOS1wZW0uanMiLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCOztBQUU5QixJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVuQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCQyxNQUFNQTtJQUNOQyxRQUFRTCxLQUFLSyxNQUFNO0lBQ25CQyxNQUFNTixLQUFLTSxJQUFJO0lBQ2ZDLE9BQU9BO0FBQ1I7QUFFQSxJQUFJQyxTQUFTUCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJUSxPQUFPUixtQkFBT0EsQ0FBQztBQUNuQixJQUFJUyxTQUFTVCw4RkFBOEI7QUFDM0MsSUFBSVUsT0FBT1YsbUJBQU9BLENBQUM7QUFDbkIsSUFBSVcsUUFBUVgsbUJBQU9BLENBQUM7QUFDcEIsSUFBSVksTUFBTVosbUJBQU9BLENBQUM7QUFDbEIsSUFBSWEsYUFBYWIsbUJBQU9BLENBQUM7QUFDekIsSUFBSWMsTUFBTWQsbUJBQU9BLENBQUM7QUFDbEIsSUFBSWUsV0FBV2YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSWdCLFlBQVloQixtQkFBT0EsQ0FBQztBQUN4QixJQUFJaUIsY0FBY2pCLG1CQUFPQSxDQUFDO0FBRTFCLFNBQVNHLEtBQUtlLEdBQUcsRUFBRUMsT0FBTztJQUN6QixJQUFJLE9BQVFELFFBQVMsVUFBVTtRQUM5QlgsT0FBT2EsTUFBTSxDQUFDRixLQUFLO1FBQ25CQSxNQUFNQSxJQUFJRyxRQUFRLENBQUM7SUFDcEI7SUFFQSxJQUFJQyxRQUFRSixJQUFJSyxJQUFJLEdBQUdDLEtBQUssQ0FBQztJQUU3QixJQUFJQztJQUNKLElBQUlDLEtBQUssQ0FBQztJQUNWLE1BQU8sQ0FBQ0QsS0FBS0MsS0FBS0osTUFBTUssTUFBTSxDQUFFO1FBQy9CRixJQUFJSCxLQUFLLENBQUMsRUFBRUksR0FBRyxDQUFDRSxLQUFLLENBQUMsVUFBVSxHQUM1QjtJQUNMO0lBQ0FyQixPQUFPc0IsRUFBRSxDQUFDSixHQUFHO0lBRWIsSUFBSUs7SUFDSixJQUFJQyxLQUFLVCxNQUFNSyxNQUFNO0lBQ3JCLE1BQU8sQ0FBQ0csTUFBTUMsS0FBSyxFQUFHO1FBQ3JCRCxLQUFLUixLQUFLLENBQUMsRUFBRVMsR0FBRyxDQUFDSCxLQUFLLENBQUMsVUFBVSxHQUM3QjtJQUNMO0lBQ0FyQixPQUFPc0IsRUFBRSxDQUFDQyxJQUFJO0lBRWRSLFFBQVFBLE1BQU1VLEtBQUssQ0FBQ04sSUFBSUssS0FBSztJQUU3QixJQUFJRSxVQUFVLENBQUM7SUFDZixNQUFPLEtBQU07UUFDWlgsUUFBUUEsTUFBTVUsS0FBSyxDQUFDO1FBQ3BCUCxJQUFJSCxLQUFLLENBQUMsRUFBRSxDQUFDTSxLQUFLLENBQUMsVUFBVSxHQUN6QjtRQUNKLElBQUksQ0FBQ0gsR0FDSjtRQUNEUSxPQUFPLENBQUNSLENBQUMsQ0FBQyxFQUFFLENBQUNTLFdBQVcsR0FBRyxHQUFHVCxDQUFDLENBQUMsRUFBRTtJQUNuQztJQUVBLHFDQUFxQyxHQUNyQ0gsUUFBUUEsTUFBTVUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHRyxJQUFJLENBQUM7SUFDaENqQixNQUFNVCxPQUFPMkIsSUFBSSxDQUFDZCxPQUFPO0lBRXpCLE9BQVF2QixLQUFLSSxJQUFJLENBQUNlLEtBQUtDO0FBQ3hCO0FBRUEsU0FBU2IsTUFBTStCLElBQUksRUFBRWxCLE9BQU87SUFDM0IsSUFBSW1CLE9BQU92QyxLQUFLTyxLQUFLLENBQUMrQixNQUFNbEI7SUFFNUIsSUFBSW9CLFNBQVM7SUFDYixJQUFJQyxNQUFNRixLQUFLakIsUUFBUSxDQUFDO0lBQ3hCLElBQUlvQixNQUFNRCxJQUFJYixNQUFNLEdBQUlhLElBQUliLE1BQU0sR0FBRyxLQUNqQyxLQUFLLEtBQUtZLE9BQU9aLE1BQU0sR0FBQyxJQUFJO0lBQ2hDLElBQUlULE1BQU1ULE9BQU9pQyxLQUFLLENBQUNEO0lBQ3ZCLElBQUlFLElBQUk7SUFDUkEsS0FBS3pCLElBQUlaLEtBQUssQ0FBQyxnQkFBZ0JpQyxTQUFTLFdBQVdJO0lBQ25ELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSixJQUFJYixNQUFNLEVBQUk7UUFDakMsSUFBSWtCLFFBQVFELElBQUk7UUFDaEIsSUFBSUMsUUFBUUwsSUFBSWIsTUFBTSxFQUNyQmtCLFFBQVFMLElBQUliLE1BQU07UUFDbkJnQixLQUFLekIsSUFBSVosS0FBSyxDQUFDa0MsSUFBSVIsS0FBSyxDQUFDWSxHQUFHQyxRQUFRRjtRQUNwQ3pCLEdBQUcsQ0FBQ3lCLElBQUksR0FBRztRQUNYQyxJQUFJQztJQUNMO0lBQ0FGLEtBQUt6QixJQUFJWixLQUFLLENBQUMsY0FBY2lDLFNBQVMsV0FBV0k7SUFFakQsT0FBUXpCLElBQUljLEtBQUssQ0FBQyxHQUFHVztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9mb3JtYXRzL3g1MDktcGVtLmpzPzBhNTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYgSm95ZW50LCBJbmMuXG5cbnZhciB4NTA5ID0gcmVxdWlyZSgnLi94NTA5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRyZWFkOiByZWFkLFxuXHR2ZXJpZnk6IHg1MDkudmVyaWZ5LFxuXHRzaWduOiB4NTA5LnNpZ24sXG5cdHdyaXRlOiB3cml0ZVxufTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjEnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4uL2FsZ3MnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgS2V5ID0gcmVxdWlyZSgnLi4va2V5Jyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4uL3ByaXZhdGUta2V5Jyk7XG52YXIgcGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbnZhciBJZGVudGl0eSA9IHJlcXVpcmUoJy4uL2lkZW50aXR5Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi4vc2lnbmF0dXJlJyk7XG52YXIgQ2VydGlmaWNhdGUgPSByZXF1aXJlKCcuLi9jZXJ0aWZpY2F0ZScpO1xuXG5mdW5jdGlvbiByZWFkKGJ1Ziwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIChidWYpICE9PSAnc3RyaW5nJykge1xuXHRcdGFzc2VydC5idWZmZXIoYnVmLCAnYnVmJyk7XG5cdFx0YnVmID0gYnVmLnRvU3RyaW5nKCdhc2NpaScpO1xuXHR9XG5cblx0dmFyIGxpbmVzID0gYnVmLnRyaW0oKS5zcGxpdCgvW1xcclxcbl0rL2cpO1xuXG5cdHZhciBtO1xuXHR2YXIgc2kgPSAtMTtcblx0d2hpbGUgKCFtICYmIHNpIDwgbGluZXMubGVuZ3RoKSB7XG5cdFx0bSA9IGxpbmVzWysrc2ldLm1hdGNoKC8qSlNTVFlMRUQqL1xuXHRcdCAgICAvWy1dK1sgXSpCRUdJTiBDRVJUSUZJQ0FURVsgXSpbLV0rLyk7XG5cdH1cblx0YXNzZXJ0Lm9rKG0sICdpbnZhbGlkIFBFTSBoZWFkZXInKTtcblxuXHR2YXIgbTI7XG5cdHZhciBlaSA9IGxpbmVzLmxlbmd0aDtcblx0d2hpbGUgKCFtMiAmJiBlaSA+IDApIHtcblx0XHRtMiA9IGxpbmVzWy0tZWldLm1hdGNoKC8qSlNTVFlMRUQqL1xuXHRcdCAgICAvWy1dK1sgXSpFTkQgQ0VSVElGSUNBVEVbIF0qWy1dKy8pO1xuXHR9XG5cdGFzc2VydC5vayhtMiwgJ2ludmFsaWQgUEVNIGZvb3RlcicpO1xuXG5cdGxpbmVzID0gbGluZXMuc2xpY2Uoc2ksIGVpICsgMSk7XG5cblx0dmFyIGhlYWRlcnMgPSB7fTtcblx0d2hpbGUgKHRydWUpIHtcblx0XHRsaW5lcyA9IGxpbmVzLnNsaWNlKDEpO1xuXHRcdG0gPSBsaW5lc1swXS5tYXRjaCgvKkpTU1RZTEVEKi9cblx0XHQgICAgL14oW0EtWmEtejAtOS1dKyk6ICguKykkLyk7XG5cdFx0aWYgKCFtKVxuXHRcdFx0YnJlYWs7XG5cdFx0aGVhZGVyc1ttWzFdLnRvTG93ZXJDYXNlKCldID0gbVsyXTtcblx0fVxuXG5cdC8qIENob3Agb2ZmIHRoZSBmaXJzdCBhbmQgbGFzdCBsaW5lcyAqL1xuXHRsaW5lcyA9IGxpbmVzLnNsaWNlKDAsIC0xKS5qb2luKCcnKTtcblx0YnVmID0gQnVmZmVyLmZyb20obGluZXMsICdiYXNlNjQnKTtcblxuXHRyZXR1cm4gKHg1MDkucmVhZChidWYsIG9wdGlvbnMpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGUoY2VydCwgb3B0aW9ucykge1xuXHR2YXIgZGJ1ZiA9IHg1MDkud3JpdGUoY2VydCwgb3B0aW9ucyk7XG5cblx0dmFyIGhlYWRlciA9ICdDRVJUSUZJQ0FURSc7XG5cdHZhciB0bXAgPSBkYnVmLnRvU3RyaW5nKCdiYXNlNjQnKTtcblx0dmFyIGxlbiA9IHRtcC5sZW5ndGggKyAodG1wLmxlbmd0aCAvIDY0KSArXG5cdCAgICAxOCArIDE2ICsgaGVhZGVyLmxlbmd0aCoyICsgMTA7XG5cdHZhciBidWYgPSBCdWZmZXIuYWxsb2MobGVuKTtcblx0dmFyIG8gPSAwO1xuXHRvICs9IGJ1Zi53cml0ZSgnLS0tLS1CRUdJTiAnICsgaGVhZGVyICsgJy0tLS0tXFxuJywgbyk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgdG1wLmxlbmd0aDsgKSB7XG5cdFx0dmFyIGxpbWl0ID0gaSArIDY0O1xuXHRcdGlmIChsaW1pdCA+IHRtcC5sZW5ndGgpXG5cdFx0XHRsaW1pdCA9IHRtcC5sZW5ndGg7XG5cdFx0byArPSBidWYud3JpdGUodG1wLnNsaWNlKGksIGxpbWl0KSwgbyk7XG5cdFx0YnVmW28rK10gPSAxMDtcblx0XHRpID0gbGltaXQ7XG5cdH1cblx0byArPSBidWYud3JpdGUoJy0tLS0tRU5EICcgKyBoZWFkZXIgKyAnLS0tLS1cXG4nLCBvKTtcblxuXHRyZXR1cm4gKGJ1Zi5zbGljZSgwLCBvKSk7XG59XG4iXSwibmFtZXMiOlsieDUwOSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVhZCIsInZlcmlmeSIsInNpZ24iLCJ3cml0ZSIsImFzc2VydCIsImFzbjEiLCJCdWZmZXIiLCJhbGdzIiwidXRpbHMiLCJLZXkiLCJQcml2YXRlS2V5IiwicGVtIiwiSWRlbnRpdHkiLCJTaWduYXR1cmUiLCJDZXJ0aWZpY2F0ZSIsImJ1ZiIsIm9wdGlvbnMiLCJidWZmZXIiLCJ0b1N0cmluZyIsImxpbmVzIiwidHJpbSIsInNwbGl0IiwibSIsInNpIiwibGVuZ3RoIiwibWF0Y2giLCJvayIsIm0yIiwiZWkiLCJzbGljZSIsImhlYWRlcnMiLCJ0b0xvd2VyQ2FzZSIsImpvaW4iLCJmcm9tIiwiY2VydCIsImRidWYiLCJoZWFkZXIiLCJ0bXAiLCJsZW4iLCJhbGxvYyIsIm8iLCJpIiwibGltaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/x509-pem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/formats/x509.js":
/*!************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/x509.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    verify: verify,\n    sign: sign,\n    signAsync: signAsync,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(ssr)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(ssr)/./node_modules/sshpk/lib/formats/pem.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(ssr)/./node_modules/sshpk/lib/identity.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(ssr)/./node_modules/sshpk/lib/signature.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(ssr)/./node_modules/sshpk/lib/certificate.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(ssr)/./node_modules/sshpk/lib/formats/pkcs8.js\");\n/*\n * This file is based on RFC5280 (X.509).\n */ /* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction verify(cert, key) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    var algParts = sig.algo.split(\"-\");\n    if (algParts[0] !== key.type) return false;\n    var blob = sig.cache;\n    if (blob === undefined) {\n        var der = new asn1.BerWriter();\n        writeTBSCert(cert, der);\n        blob = der.buffer;\n    }\n    var verifier = key.createVerify(algParts[1]);\n    verifier.write(blob);\n    return verifier.verify(sig.signature);\n}\nfunction Local(i) {\n    return asn1.Ber.Context | asn1.Ber.Constructor | i;\n}\nfunction Context(i) {\n    return asn1.Ber.Context | i;\n}\nvar SIGN_ALGS = {\n    \"rsa-md5\": \"1.2.840.113549.1.1.4\",\n    \"rsa-sha1\": \"1.2.840.113549.1.1.5\",\n    \"rsa-sha256\": \"1.2.840.113549.1.1.11\",\n    \"rsa-sha384\": \"1.2.840.113549.1.1.12\",\n    \"rsa-sha512\": \"1.2.840.113549.1.1.13\",\n    \"dsa-sha1\": \"1.2.840.10040.4.3\",\n    \"dsa-sha256\": \"2.16.840.1.101.3.4.3.2\",\n    \"ecdsa-sha1\": \"1.2.840.10045.4.1\",\n    \"ecdsa-sha256\": \"1.2.840.10045.4.3.2\",\n    \"ecdsa-sha384\": \"1.2.840.10045.4.3.3\",\n    \"ecdsa-sha512\": \"1.2.840.10045.4.3.4\",\n    \"ed25519-sha512\": \"1.3.101.112\"\n};\nObject.keys(SIGN_ALGS).forEach(function(k) {\n    SIGN_ALGS[SIGN_ALGS[k]] = k;\n});\nSIGN_ALGS[\"1.3.14.3.2.3\"] = \"rsa-md5\";\nSIGN_ALGS[\"1.3.14.3.2.29\"] = \"rsa-sha1\";\nvar EXTS = {\n    \"issuerKeyId\": \"2.5.29.35\",\n    \"altName\": \"2.5.29.17\",\n    \"basicConstraints\": \"2.5.29.19\",\n    \"keyUsage\": \"2.5.29.15\",\n    \"extKeyUsage\": \"2.5.29.37\"\n};\nfunction read(buf, options) {\n    if (typeof buf === \"string\") {\n        buf = Buffer.from(buf, \"binary\");\n    }\n    assert.buffer(buf, \"buf\");\n    var der = new asn1.BerReader(buf);\n    der.readSequence();\n    if (Math.abs(der.length - der.remain) > 1) {\n        throw new Error(\"DER sequence does not contain whole byte \" + \"stream\");\n    }\n    var tbsStart = der.offset;\n    der.readSequence();\n    var sigOffset = der.offset + der.length;\n    var tbsEnd = sigOffset;\n    if (der.peek() === Local(0)) {\n        der.readSequence(Local(0));\n        var version = der.readInt();\n        assert.ok(version <= 3, \"only x.509 versions up to v3 supported\");\n    }\n    var cert = {};\n    cert.signatures = {};\n    var sig = cert.signatures.x509 = {};\n    sig.extras = {};\n    cert.serial = readMPInt(der, \"serial\");\n    der.readSequence();\n    var after = der.offset + der.length;\n    var certAlgOid = der.readOID();\n    var certAlg = SIGN_ALGS[certAlgOid];\n    if (certAlg === undefined) throw new Error(\"unknown signature algorithm \" + certAlgOid);\n    der._offset = after;\n    cert.issuer = Identity.parseAsn1(der);\n    der.readSequence();\n    cert.validFrom = readDate(der);\n    cert.validUntil = readDate(der);\n    cert.subjects = [\n        Identity.parseAsn1(der)\n    ];\n    der.readSequence();\n    after = der.offset + der.length;\n    cert.subjectKey = pkcs8.readPkcs8(undefined, \"public\", der);\n    der._offset = after;\n    /* issuerUniqueID */ if (der.peek() === Local(1)) {\n        der.readSequence(Local(1));\n        sig.extras.issuerUniqueID = buf.slice(der.offset, der.offset + der.length);\n        der._offset += der.length;\n    }\n    /* subjectUniqueID */ if (der.peek() === Local(2)) {\n        der.readSequence(Local(2));\n        sig.extras.subjectUniqueID = buf.slice(der.offset, der.offset + der.length);\n        der._offset += der.length;\n    }\n    /* extensions */ if (der.peek() === Local(3)) {\n        der.readSequence(Local(3));\n        var extEnd = der.offset + der.length;\n        der.readSequence();\n        while(der.offset < extEnd)readExtension(cert, buf, der);\n        assert.strictEqual(der.offset, extEnd);\n    }\n    assert.strictEqual(der.offset, sigOffset);\n    der.readSequence();\n    after = der.offset + der.length;\n    var sigAlgOid = der.readOID();\n    var sigAlg = SIGN_ALGS[sigAlgOid];\n    if (sigAlg === undefined) throw new Error(\"unknown signature algorithm \" + sigAlgOid);\n    der._offset = after;\n    var sigData = der.readString(asn1.Ber.BitString, true);\n    if (sigData[0] === 0) sigData = sigData.slice(1);\n    var algParts = sigAlg.split(\"-\");\n    sig.signature = Signature.parse(sigData, algParts[0], \"asn1\");\n    sig.signature.hashAlgorithm = algParts[1];\n    sig.algo = sigAlg;\n    sig.cache = buf.slice(tbsStart, tbsEnd);\n    return new Certificate(cert);\n}\nfunction readDate(der) {\n    if (der.peek() === asn1.Ber.UTCTime) {\n        return utcTimeToDate(der.readString(asn1.Ber.UTCTime));\n    } else if (der.peek() === asn1.Ber.GeneralizedTime) {\n        return gTimeToDate(der.readString(asn1.Ber.GeneralizedTime));\n    } else {\n        throw new Error(\"Unsupported date format\");\n    }\n}\nfunction writeDate(der, date) {\n    if (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {\n        der.writeString(dateToGTime(date), asn1.Ber.GeneralizedTime);\n    } else {\n        der.writeString(dateToUTCTime(date), asn1.Ber.UTCTime);\n    }\n}\n/* RFC5280, section 4.2.1.6 (GeneralName type) */ var ALTNAME = {\n    OtherName: Local(0),\n    RFC822Name: Context(1),\n    DNSName: Context(2),\n    X400Address: Local(3),\n    DirectoryName: Local(4),\n    EDIPartyName: Local(5),\n    URI: Context(6),\n    IPAddress: Context(7),\n    OID: Context(8)\n};\n/* RFC5280, section 4.2.1.12 (KeyPurposeId) */ var EXTPURPOSE = {\n    \"serverAuth\": \"1.3.6.1.5.5.7.3.1\",\n    \"clientAuth\": \"1.3.6.1.5.5.7.3.2\",\n    \"codeSigning\": \"1.3.6.1.5.5.7.3.3\",\n    /* See https://github.com/joyent/oid-docs/blob/master/root.md */ \"joyentDocker\": \"1.3.6.1.4.1.38678.1.4.1\",\n    \"joyentCmon\": \"1.3.6.1.4.1.38678.1.4.2\"\n};\nvar EXTPURPOSE_REV = {};\nObject.keys(EXTPURPOSE).forEach(function(k) {\n    EXTPURPOSE_REV[EXTPURPOSE[k]] = k;\n});\nvar KEYUSEBITS = [\n    \"signature\",\n    \"identity\",\n    \"keyEncryption\",\n    \"encryption\",\n    \"keyAgreement\",\n    \"ca\",\n    \"crl\"\n];\nfunction readExtension(cert, buf, der) {\n    der.readSequence();\n    var after = der.offset + der.length;\n    var extId = der.readOID();\n    var id;\n    var sig = cert.signatures.x509;\n    if (!sig.extras.exts) sig.extras.exts = [];\n    var critical;\n    if (der.peek() === asn1.Ber.Boolean) critical = der.readBoolean();\n    switch(extId){\n        case EXTS.basicConstraints:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            var bcEnd = der.offset + der.length;\n            var ca = false;\n            if (der.peek() === asn1.Ber.Boolean) ca = der.readBoolean();\n            if (cert.purposes === undefined) cert.purposes = [];\n            if (ca === true) cert.purposes.push(\"ca\");\n            var bc = {\n                oid: extId,\n                critical: critical\n            };\n            if (der.offset < bcEnd && der.peek() === asn1.Ber.Integer) bc.pathLen = der.readInt();\n            sig.extras.exts.push(bc);\n            break;\n        case EXTS.extKeyUsage:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            if (cert.purposes === undefined) cert.purposes = [];\n            var ekEnd = der.offset + der.length;\n            while(der.offset < ekEnd){\n                var oid = der.readOID();\n                cert.purposes.push(EXTPURPOSE_REV[oid] || oid);\n            }\n            /*\n\t\t * This is a bit of a hack: in the case where we have a cert\n\t\t * that's only allowed to do serverAuth or clientAuth (and not\n\t\t * the other), we want to make sure all our Subjects are of\n\t\t * the right type. But we already parsed our Subjects and\n\t\t * decided if they were hosts or users earlier (since it appears\n\t\t * first in the cert).\n\t\t *\n\t\t * So we go through and mutate them into the right kind here if\n\t\t * it doesn't match. This might not be hugely beneficial, as it\n\t\t * seems that single-purpose certs are not often seen in the\n\t\t * wild.\n\t\t */ if (cert.purposes.indexOf(\"serverAuth\") !== -1 && cert.purposes.indexOf(\"clientAuth\") === -1) {\n                cert.subjects.forEach(function(ide) {\n                    if (ide.type !== \"host\") {\n                        ide.type = \"host\";\n                        ide.hostname = ide.uid || ide.email || ide.components[0].value;\n                    }\n                });\n            } else if (cert.purposes.indexOf(\"clientAuth\") !== -1 && cert.purposes.indexOf(\"serverAuth\") === -1) {\n                cert.subjects.forEach(function(ide) {\n                    if (ide.type !== \"user\") {\n                        ide.type = \"user\";\n                        ide.uid = ide.hostname || ide.email || ide.components[0].value;\n                    }\n                });\n            }\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical\n            });\n            break;\n        case EXTS.keyUsage:\n            der.readSequence(asn1.Ber.OctetString);\n            var bits = der.readString(asn1.Ber.BitString, true);\n            var setBits = readBitField(bits, KEYUSEBITS);\n            setBits.forEach(function(bit) {\n                if (cert.purposes === undefined) cert.purposes = [];\n                if (cert.purposes.indexOf(bit) === -1) cert.purposes.push(bit);\n            });\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical,\n                bits: bits\n            });\n            break;\n        case EXTS.altName:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            var aeEnd = der.offset + der.length;\n            while(der.offset < aeEnd){\n                switch(der.peek()){\n                    case ALTNAME.OtherName:\n                    case ALTNAME.EDIPartyName:\n                        der.readSequence();\n                        der._offset += der.length;\n                        break;\n                    case ALTNAME.OID:\n                        der.readOID(ALTNAME.OID);\n                        break;\n                    case ALTNAME.RFC822Name:\n                        /* RFC822 specifies email addresses */ var email = der.readString(ALTNAME.RFC822Name);\n                        id = Identity.forEmail(email);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    case ALTNAME.DirectoryName:\n                        der.readSequence(ALTNAME.DirectoryName);\n                        id = Identity.parseAsn1(der);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    case ALTNAME.DNSName:\n                        var host = der.readString(ALTNAME.DNSName);\n                        id = Identity.forHost(host);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    default:\n                        der.readString(der.peek());\n                        break;\n                }\n            }\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical\n            });\n            break;\n        default:\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical,\n                data: der.readString(asn1.Ber.OctetString, true)\n            });\n            break;\n    }\n    der._offset = after;\n}\nvar UTCTIME_RE = /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction utcTimeToDate(t) {\n    var m = t.match(UTCTIME_RE);\n    assert.ok(m, \"timestamps must be in UTC\");\n    var d = new Date();\n    var thisYear = d.getUTCFullYear();\n    var century = Math.floor(thisYear / 100) * 100;\n    var year = parseInt(m[1], 10);\n    if (thisYear % 100 < 50 && year >= 60) year += century - 1;\n    else year += century;\n    d.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n    d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n    if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));\n    return d;\n}\nvar GTIME_RE = /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction gTimeToDate(t) {\n    var m = t.match(GTIME_RE);\n    assert.ok(m);\n    var d = new Date();\n    d.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n    d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n    if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));\n    return d;\n}\nfunction zeroPad(n, m) {\n    if (m === undefined) m = 2;\n    var s = \"\" + n;\n    while(s.length < m)s = \"0\" + s;\n    return s;\n}\nfunction dateToUTCTime(d) {\n    var s = \"\";\n    s += zeroPad(d.getUTCFullYear() % 100);\n    s += zeroPad(d.getUTCMonth() + 1);\n    s += zeroPad(d.getUTCDate());\n    s += zeroPad(d.getUTCHours());\n    s += zeroPad(d.getUTCMinutes());\n    s += zeroPad(d.getUTCSeconds());\n    s += \"Z\";\n    return s;\n}\nfunction dateToGTime(d) {\n    var s = \"\";\n    s += zeroPad(d.getUTCFullYear(), 4);\n    s += zeroPad(d.getUTCMonth() + 1);\n    s += zeroPad(d.getUTCDate());\n    s += zeroPad(d.getUTCHours());\n    s += zeroPad(d.getUTCMinutes());\n    s += zeroPad(d.getUTCSeconds());\n    s += \"Z\";\n    return s;\n}\nfunction sign(cert, key) {\n    if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};\n    var sig = cert.signatures.x509;\n    sig.algo = key.type + \"-\" + key.defaultHashAlgorithm();\n    if (SIGN_ALGS[sig.algo] === undefined) return false;\n    var der = new asn1.BerWriter();\n    writeTBSCert(cert, der);\n    var blob = der.buffer;\n    sig.cache = blob;\n    var signer = key.createSign();\n    signer.write(blob);\n    cert.signatures.x509.signature = signer.sign();\n    return true;\n}\nfunction signAsync(cert, signer, done) {\n    if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};\n    var sig = cert.signatures.x509;\n    var der = new asn1.BerWriter();\n    writeTBSCert(cert, der);\n    var blob = der.buffer;\n    sig.cache = blob;\n    signer(blob, function(err, signature) {\n        if (err) {\n            done(err);\n            return;\n        }\n        sig.algo = signature.type + \"-\" + signature.hashAlgorithm;\n        if (SIGN_ALGS[sig.algo] === undefined) {\n            done(new Error('Invalid signing algorithm \"' + sig.algo + '\"'));\n            return;\n        }\n        sig.signature = signature;\n        done();\n    });\n}\nfunction write(cert, options) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    var der = new asn1.BerWriter();\n    der.startSequence();\n    if (sig.cache) {\n        der._ensure(sig.cache.length);\n        sig.cache.copy(der._buf, der._offset);\n        der._offset += sig.cache.length;\n    } else {\n        writeTBSCert(cert, der);\n    }\n    der.startSequence();\n    der.writeOID(SIGN_ALGS[sig.algo]);\n    if (sig.algo.match(/^rsa-/)) der.writeNull();\n    der.endSequence();\n    var sigData = sig.signature.toBuffer(\"asn1\");\n    var data = Buffer.alloc(sigData.length + 1);\n    data[0] = 0;\n    sigData.copy(data, 1);\n    der.writeBuffer(data, asn1.Ber.BitString);\n    der.endSequence();\n    return der.buffer;\n}\nfunction writeTBSCert(cert, der) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    der.startSequence();\n    der.startSequence(Local(0));\n    der.writeInt(2);\n    der.endSequence();\n    der.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);\n    der.startSequence();\n    der.writeOID(SIGN_ALGS[sig.algo]);\n    if (sig.algo.match(/^rsa-/)) der.writeNull();\n    der.endSequence();\n    cert.issuer.toAsn1(der);\n    der.startSequence();\n    writeDate(der, cert.validFrom);\n    writeDate(der, cert.validUntil);\n    der.endSequence();\n    var subject = cert.subjects[0];\n    var altNames = cert.subjects.slice(1);\n    subject.toAsn1(der);\n    pkcs8.writePkcs8(der, cert.subjectKey);\n    if (sig.extras && sig.extras.issuerUniqueID) {\n        der.writeBuffer(sig.extras.issuerUniqueID, Local(1));\n    }\n    if (sig.extras && sig.extras.subjectUniqueID) {\n        der.writeBuffer(sig.extras.subjectUniqueID, Local(2));\n    }\n    if (altNames.length > 0 || subject.type === \"host\" || cert.purposes !== undefined && cert.purposes.length > 0 || sig.extras && sig.extras.exts) {\n        der.startSequence(Local(3));\n        der.startSequence();\n        var exts = [];\n        if (cert.purposes !== undefined && cert.purposes.length > 0) {\n            exts.push({\n                oid: EXTS.basicConstraints,\n                critical: true\n            });\n            exts.push({\n                oid: EXTS.keyUsage,\n                critical: true\n            });\n            exts.push({\n                oid: EXTS.extKeyUsage,\n                critical: true\n            });\n        }\n        exts.push({\n            oid: EXTS.altName\n        });\n        if (sig.extras && sig.extras.exts) exts = sig.extras.exts;\n        for(var i = 0; i < exts.length; ++i){\n            der.startSequence();\n            der.writeOID(exts[i].oid);\n            if (exts[i].critical !== undefined) der.writeBoolean(exts[i].critical);\n            if (exts[i].oid === EXTS.altName) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                if (subject.type === \"host\") {\n                    der.writeString(subject.hostname, Context(2));\n                }\n                for(var j = 0; j < altNames.length; ++j){\n                    if (altNames[j].type === \"host\") {\n                        der.writeString(altNames[j].hostname, ALTNAME.DNSName);\n                    } else if (altNames[j].type === \"email\") {\n                        der.writeString(altNames[j].email, ALTNAME.RFC822Name);\n                    } else {\n                        /*\n\t\t\t\t\t\t * Encode anything else as a\n\t\t\t\t\t\t * DN style name for now.\n\t\t\t\t\t\t */ der.startSequence(ALTNAME.DirectoryName);\n                        altNames[j].toAsn1(der);\n                        der.endSequence();\n                    }\n                }\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.basicConstraints) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                var ca = cert.purposes.indexOf(\"ca\") !== -1;\n                var pathLen = exts[i].pathLen;\n                der.writeBoolean(ca);\n                if (pathLen !== undefined) der.writeInt(pathLen);\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.extKeyUsage) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                cert.purposes.forEach(function(purpose) {\n                    if (purpose === \"ca\") return;\n                    if (KEYUSEBITS.indexOf(purpose) !== -1) return;\n                    var oid = purpose;\n                    if (EXTPURPOSE[purpose] !== undefined) oid = EXTPURPOSE[purpose];\n                    der.writeOID(oid);\n                });\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.keyUsage) {\n                der.startSequence(asn1.Ber.OctetString);\n                /*\n\t\t\t\t * If we parsed this certificate from a byte\n\t\t\t\t * stream (i.e. we didn't generate it in sshpk)\n\t\t\t\t * then we'll have a \".bits\" property on the\n\t\t\t\t * ext with the original raw byte contents.\n\t\t\t\t *\n\t\t\t\t * If we have this, use it here instead of\n\t\t\t\t * regenerating it. This guarantees we output\n\t\t\t\t * the same data we parsed, so signatures still\n\t\t\t\t * validate.\n\t\t\t\t */ if (exts[i].bits !== undefined) {\n                    der.writeBuffer(exts[i].bits, asn1.Ber.BitString);\n                } else {\n                    var bits = writeBitField(cert.purposes, KEYUSEBITS);\n                    der.writeBuffer(bits, asn1.Ber.BitString);\n                }\n                der.endSequence();\n            } else {\n                der.writeBuffer(exts[i].data, asn1.Ber.OctetString);\n            }\n            der.endSequence();\n        }\n        der.endSequence();\n        der.endSequence();\n    }\n    der.endSequence();\n}\n/*\n * Reads an ASN.1 BER bitfield out of the Buffer produced by doing\n * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw\n * contents of the BitString tag, which is a count of unused bits followed by\n * the bits as a right-padded byte string.\n *\n * `bits` is the Buffer, `bitIndex` should contain an array of string names\n * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.\n *\n * Returns an array of Strings, the names of the bits that were set to 1.\n */ function readBitField(bits, bitIndex) {\n    var bitLen = 8 * (bits.length - 1) - bits[0];\n    var setBits = {};\n    for(var i = 0; i < bitLen; ++i){\n        var byteN = 1 + Math.floor(i / 8);\n        var bit = 7 - i % 8;\n        var mask = 1 << bit;\n        var bitVal = (bits[byteN] & mask) !== 0;\n        var name = bitIndex[i];\n        if (bitVal && typeof name === \"string\") {\n            setBits[name] = true;\n        }\n    }\n    return Object.keys(setBits);\n}\n/*\n * `setBits` is an array of strings, containing the names for each bit that\n * sould be set to 1. `bitIndex` is same as in `readBitField()`.\n *\n * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.\n */ function writeBitField(setBits, bitIndex) {\n    var bitLen = bitIndex.length;\n    var blen = Math.ceil(bitLen / 8);\n    var unused = blen * 8 - bitLen;\n    var bits = Buffer.alloc(1 + blen); // zero-filled\n    bits[0] = unused;\n    for(var i = 0; i < bitLen; ++i){\n        var byteN = 1 + Math.floor(i / 8);\n        var bit = 7 - i % 8;\n        var mask = 1 << bit;\n        var name = bitIndex[i];\n        if (name === undefined) continue;\n        var bitVal = setBits.indexOf(name) !== -1;\n        if (bitVal) {\n            bits[byteN] |= mask;\n        }\n    }\n    return bits;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/formats/x509.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/identity.js":
/*!********************************************!*\
  !*** ./node_modules/sshpk/lib/identity.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = Identity;\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar algs = __webpack_require__(/*! ./algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(ssr)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(ssr)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\n/*JSSTYLED*/ var DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\\-]{0,62})(?:\\.([*]|[a-z0-9][a-z0-9\\-]{0,62}))*$/i;\nvar oids = {};\noids.cn = \"2.5.4.3\";\noids.o = \"2.5.4.10\";\noids.ou = \"2.5.4.11\";\noids.l = \"2.5.4.7\";\noids.s = \"2.5.4.8\";\noids.c = \"2.5.4.6\";\noids.sn = \"2.5.4.4\";\noids.postalCode = \"2.5.4.17\";\noids.serialNumber = \"2.5.4.5\";\noids.street = \"2.5.4.9\";\noids.x500UniqueIdentifier = \"2.5.4.45\";\noids.role = \"2.5.4.72\";\noids.telephoneNumber = \"2.5.4.20\";\noids.description = \"2.5.4.13\";\noids.dc = \"0.9.2342.19200300.100.1.25\";\noids.uid = \"0.9.2342.19200300.100.1.1\";\noids.mail = \"0.9.2342.19200300.100.1.3\";\noids.title = \"2.5.4.12\";\noids.gn = \"2.5.4.42\";\noids.initials = \"2.5.4.43\";\noids.pseudonym = \"2.5.4.65\";\noids.emailAddress = \"1.2.840.113549.1.9.1\";\nvar unoids = {};\nObject.keys(oids).forEach(function(k) {\n    unoids[oids[k]] = k;\n});\nfunction Identity(opts) {\n    var self = this;\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.components, \"options.components\");\n    this.components = opts.components;\n    this.componentLookup = {};\n    this.components.forEach(function(c) {\n        if (c.name && !c.oid) c.oid = oids[c.name];\n        if (c.oid && !c.name) c.name = unoids[c.oid];\n        if (self.componentLookup[c.name] === undefined) self.componentLookup[c.name] = [];\n        self.componentLookup[c.name].push(c);\n    });\n    if (this.componentLookup.cn && this.componentLookup.cn.length > 0) {\n        this.cn = this.componentLookup.cn[0].value;\n    }\n    assert.optionalString(opts.type, \"options.type\");\n    if (opts.type === undefined) {\n        if (this.components.length === 1 && this.componentLookup.cn && this.componentLookup.cn.length === 1 && this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.cn[0].value;\n        } else if (this.componentLookup.dc && this.components.length === this.componentLookup.dc.length) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.dc.map(function(c) {\n                return c.value;\n            }).join(\".\");\n        } else if (this.componentLookup.uid && this.components.length === this.componentLookup.uid.length) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.uid[0].value;\n        } else if (this.componentLookup.cn && this.componentLookup.cn.length === 1 && this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.cn[0].value;\n        } else if (this.componentLookup.uid && this.componentLookup.uid.length === 1) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.uid[0].value;\n        } else if (this.componentLookup.mail && this.componentLookup.mail.length === 1) {\n            this.type = \"email\";\n            this.email = this.componentLookup.mail[0].value;\n        } else if (this.componentLookup.cn && this.componentLookup.cn.length === 1) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.cn[0].value;\n        } else {\n            this.type = \"unknown\";\n        }\n    } else {\n        this.type = opts.type;\n        if (this.type === \"host\") this.hostname = opts.hostname;\n        else if (this.type === \"user\") this.uid = opts.uid;\n        else if (this.type === \"email\") this.email = opts.email;\n        else throw new Error(\"Unknown type \" + this.type);\n    }\n}\nIdentity.prototype.toString = function() {\n    return this.components.map(function(c) {\n        var n = c.name.toUpperCase();\n        /*JSSTYLED*/ n = n.replace(/=/g, \"\\\\=\");\n        var v = c.value;\n        /*JSSTYLED*/ v = v.replace(/,/g, \"\\\\,\");\n        return n + \"=\" + v;\n    }).join(\", \");\n};\nIdentity.prototype.get = function(name, asArray) {\n    assert.string(name, \"name\");\n    var arr = this.componentLookup[name];\n    if (arr === undefined || arr.length === 0) return undefined;\n    if (!asArray && arr.length > 1) throw new Error(\"Multiple values for attribute \" + name);\n    if (!asArray) return arr[0].value;\n    return arr.map(function(c) {\n        return c.value;\n    });\n};\nIdentity.prototype.toArray = function(idx) {\n    return this.components.map(function(c) {\n        return {\n            name: c.name,\n            value: c.value\n        };\n    });\n};\n/*\n * These are from X.680 -- PrintableString allowed chars are in section 37.4\n * table 8. Spec for IA5Strings is \"1,6 + SPACE + DEL\" where 1 refers to\n * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006\n * (the basic ASCII character set).\n */ /* JSSTYLED */ var NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\\/:=?-]/;\n/* JSSTYLED */ var NOT_IA5 = /[^\\x00-\\x7f]/;\nIdentity.prototype.toAsn1 = function(der, tag) {\n    der.startSequence(tag);\n    this.components.forEach(function(c) {\n        der.startSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n        der.startSequence();\n        der.writeOID(c.oid);\n        /*\n\t\t * If we fit in a PrintableString, use that. Otherwise use an\n\t\t * IA5String or UTF8String.\n\t\t *\n\t\t * If this identity was parsed from a DN, use the ASN.1 types\n\t\t * from the original representation (otherwise this might not\n\t\t * be a full match for the original in some validators).\n\t\t */ if (c.asn1type === asn1.Ber.Utf8String || c.value.match(NOT_IA5)) {\n            var v = Buffer.from(c.value, \"utf8\");\n            der.writeBuffer(v, asn1.Ber.Utf8String);\n        } else if (c.asn1type === asn1.Ber.IA5String || c.value.match(NOT_PRINTABLE)) {\n            der.writeString(c.value, asn1.Ber.IA5String);\n        } else {\n            var type = asn1.Ber.PrintableString;\n            if (c.asn1type !== undefined) type = c.asn1type;\n            der.writeString(c.value, type);\n        }\n        der.endSequence();\n        der.endSequence();\n    });\n    der.endSequence();\n};\nfunction globMatch(a, b) {\n    if (a === \"**\" || b === \"**\") return true;\n    var aParts = a.split(\".\");\n    var bParts = b.split(\".\");\n    if (aParts.length !== bParts.length) return false;\n    for(var i = 0; i < aParts.length; ++i){\n        if (aParts[i] === \"*\" || bParts[i] === \"*\") continue;\n        if (aParts[i] !== bParts[i]) return false;\n    }\n    return true;\n}\nIdentity.prototype.equals = function(other) {\n    if (!Identity.isIdentity(other, [\n        1,\n        0\n    ])) return false;\n    if (other.components.length !== this.components.length) return false;\n    for(var i = 0; i < this.components.length; ++i){\n        if (this.components[i].oid !== other.components[i].oid) return false;\n        if (!globMatch(this.components[i].value, other.components[i].value)) {\n            return false;\n        }\n    }\n    return true;\n};\nIdentity.forHost = function(hostname) {\n    assert.string(hostname, \"hostname\");\n    return new Identity({\n        type: \"host\",\n        hostname: hostname,\n        components: [\n            {\n                name: \"cn\",\n                value: hostname\n            }\n        ]\n    });\n};\nIdentity.forUser = function(uid) {\n    assert.string(uid, \"uid\");\n    return new Identity({\n        type: \"user\",\n        uid: uid,\n        components: [\n            {\n                name: \"uid\",\n                value: uid\n            }\n        ]\n    });\n};\nIdentity.forEmail = function(email) {\n    assert.string(email, \"email\");\n    return new Identity({\n        type: \"email\",\n        email: email,\n        components: [\n            {\n                name: \"mail\",\n                value: email\n            }\n        ]\n    });\n};\nIdentity.parseDN = function(dn) {\n    assert.string(dn, \"dn\");\n    var parts = [\n        \"\"\n    ];\n    var idx = 0;\n    var rem = dn;\n    while(rem.length > 0){\n        var m;\n        /*JSSTYLED*/ if ((m = /^,/.exec(rem)) !== null) {\n            parts[++idx] = \"\";\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^\\\\,/.exec(rem)) !== null) {\n            parts[idx] += \",\";\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^\\\\./.exec(rem)) !== null) {\n            parts[idx] += m[0];\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^[^\\\\,]+/.exec(rem)) !== null) {\n            parts[idx] += m[0];\n            rem = rem.slice(m[0].length);\n        } else {\n            throw new Error(\"Failed to parse DN\");\n        }\n    }\n    var cmps = parts.map(function(c) {\n        c = c.trim();\n        var eqPos = c.indexOf(\"=\");\n        while(eqPos > 0 && c.charAt(eqPos - 1) === \"\\\\\")eqPos = c.indexOf(\"=\", eqPos + 1);\n        if (eqPos === -1) {\n            throw new Error(\"Failed to parse DN\");\n        }\n        /*JSSTYLED*/ var name = c.slice(0, eqPos).toLowerCase().replace(/\\\\=/g, \"=\");\n        var value = c.slice(eqPos + 1);\n        return {\n            name: name,\n            value: value\n        };\n    });\n    return new Identity({\n        components: cmps\n    });\n};\nIdentity.fromArray = function(components) {\n    assert.arrayOfObject(components, \"components\");\n    components.forEach(function(cmp) {\n        assert.object(cmp, \"component\");\n        assert.string(cmp.name, \"component.name\");\n        if (!Buffer.isBuffer(cmp.value) && !(typeof cmp.value === \"string\")) {\n            throw new Error(\"Invalid component value\");\n        }\n    });\n    return new Identity({\n        components: components\n    });\n};\nIdentity.parseAsn1 = function(der, top) {\n    var components = [];\n    der.readSequence(top);\n    var end = der.offset + der.length;\n    while(der.offset < end){\n        der.readSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n        var after = der.offset + der.length;\n        der.readSequence();\n        var oid = der.readOID();\n        var type = der.peek();\n        var value;\n        switch(type){\n            case asn1.Ber.PrintableString:\n            case asn1.Ber.IA5String:\n            case asn1.Ber.OctetString:\n            case asn1.Ber.T61String:\n                value = der.readString(type);\n                break;\n            case asn1.Ber.Utf8String:\n                value = der.readString(type, true);\n                value = value.toString(\"utf8\");\n                break;\n            case asn1.Ber.CharacterString:\n            case asn1.Ber.BMPString:\n                value = der.readString(type, true);\n                value = value.toString(\"utf16le\");\n                break;\n            default:\n                throw new Error(\"Unknown asn1 type \" + type);\n        }\n        components.push({\n            oid: oid,\n            asn1type: type,\n            value: value\n        });\n        der._offset = after;\n    }\n    der._offset = end;\n    return new Identity({\n        components: components\n    });\n};\nIdentity.isIdentity = function(obj, ver) {\n    return utils.isCompatible(obj, Identity, ver);\n};\n/*\n * API versions for Identity:\n * [1,0] -- initial ver\n */ Identity.prototype._sshpkApiVersion = [\n    1,\n    0\n];\nIdentity._oldVersionDetect = function(obj) {\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/identity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/index.js":
/*!*****************************************!*\
  !*** ./node_modules/sshpk/lib/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar Key = __webpack_require__(/*! ./key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(ssr)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/sshpk/lib/signature.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar Certificate = __webpack_require__(/*! ./certificate */ \"(ssr)/./node_modules/sshpk/lib/certificate.js\");\nvar Identity = __webpack_require__(/*! ./identity */ \"(ssr)/./node_modules/sshpk/lib/identity.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/sshpk/lib/errors.js\");\nmodule.exports = {\n    /* top-level classes */ Key: Key,\n    parseKey: Key.parse,\n    Fingerprint: Fingerprint,\n    parseFingerprint: Fingerprint.parse,\n    Signature: Signature,\n    parseSignature: Signature.parse,\n    PrivateKey: PrivateKey,\n    parsePrivateKey: PrivateKey.parse,\n    generatePrivateKey: PrivateKey.generate,\n    Certificate: Certificate,\n    parseCertificate: Certificate.parse,\n    createSelfSignedCertificate: Certificate.createSelfSigned,\n    createCertificate: Certificate.create,\n    Identity: Identity,\n    identityFromDN: Identity.parseDN,\n    identityForHost: Identity.forHost,\n    identityForUser: Identity.forUser,\n    identityForEmail: Identity.forEmail,\n    identityFromArray: Identity.fromArray,\n    /* errors */ FingerprintFormatError: errs.FingerprintFormatError,\n    InvalidAlgorithmError: errs.InvalidAlgorithmError,\n    KeyParseError: errs.KeyParseError,\n    SignatureParseError: errs.SignatureParseError,\n    KeyEncryptedError: errs.KeyEncryptedError,\n    CertificateParseError: errs.CertificateParseError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4Qjs7QUFFOUIsSUFBSUEsTUFBTUMsbUJBQU9BLENBQUM7QUFDbEIsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUM7QUFDMUIsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUcsYUFBYUgsbUJBQU9BLENBQUM7QUFDekIsSUFBSUksY0FBY0osbUJBQU9BLENBQUM7QUFDMUIsSUFBSUssV0FBV0wsbUJBQU9BLENBQUM7QUFDdkIsSUFBSU0sT0FBT04sbUJBQU9BLENBQUM7QUFFbkJPLE9BQU9DLE9BQU8sR0FBRztJQUNoQixxQkFBcUIsR0FDckJULEtBQUtBO0lBQ0xVLFVBQVVWLElBQUlXLEtBQUs7SUFDbkJULGFBQWFBO0lBQ2JVLGtCQUFrQlYsWUFBWVMsS0FBSztJQUNuQ1IsV0FBV0E7SUFDWFUsZ0JBQWdCVixVQUFVUSxLQUFLO0lBQy9CUCxZQUFZQTtJQUNaVSxpQkFBaUJWLFdBQVdPLEtBQUs7SUFDakNJLG9CQUFvQlgsV0FBV1ksUUFBUTtJQUN2Q1gsYUFBYUE7SUFDYlksa0JBQWtCWixZQUFZTSxLQUFLO0lBQ25DTyw2QkFBNkJiLFlBQVljLGdCQUFnQjtJQUN6REMsbUJBQW1CZixZQUFZZ0IsTUFBTTtJQUNyQ2YsVUFBVUE7SUFDVmdCLGdCQUFnQmhCLFNBQVNpQixPQUFPO0lBQ2hDQyxpQkFBaUJsQixTQUFTbUIsT0FBTztJQUNqQ0MsaUJBQWlCcEIsU0FBU3FCLE9BQU87SUFDakNDLGtCQUFrQnRCLFNBQVN1QixRQUFRO0lBQ25DQyxtQkFBbUJ4QixTQUFTeUIsU0FBUztJQUVyQyxVQUFVLEdBQ1ZDLHdCQUF3QnpCLEtBQUt5QixzQkFBc0I7SUFDbkRDLHVCQUF1QjFCLEtBQUswQixxQkFBcUI7SUFDakRDLGVBQWUzQixLQUFLMkIsYUFBYTtJQUNqQ0MscUJBQXFCNUIsS0FBSzRCLG1CQUFtQjtJQUM3Q0MsbUJBQW1CN0IsS0FBSzZCLGlCQUFpQjtJQUN6Q0MsdUJBQXVCOUIsS0FBSzhCLHFCQUFxQjtBQUNsRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9pbmRleC5qcz9iOGZmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG52YXIgS2V5ID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBGaW5nZXJwcmludCA9IHJlcXVpcmUoJy4vZmluZ2VycHJpbnQnKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuL3ByaXZhdGUta2V5Jyk7XG52YXIgQ2VydGlmaWNhdGUgPSByZXF1aXJlKCcuL2NlcnRpZmljYXRlJyk7XG52YXIgSWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG52YXIgZXJycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHQvKiB0b3AtbGV2ZWwgY2xhc3NlcyAqL1xuXHRLZXk6IEtleSxcblx0cGFyc2VLZXk6IEtleS5wYXJzZSxcblx0RmluZ2VycHJpbnQ6IEZpbmdlcnByaW50LFxuXHRwYXJzZUZpbmdlcnByaW50OiBGaW5nZXJwcmludC5wYXJzZSxcblx0U2lnbmF0dXJlOiBTaWduYXR1cmUsXG5cdHBhcnNlU2lnbmF0dXJlOiBTaWduYXR1cmUucGFyc2UsXG5cdFByaXZhdGVLZXk6IFByaXZhdGVLZXksXG5cdHBhcnNlUHJpdmF0ZUtleTogUHJpdmF0ZUtleS5wYXJzZSxcblx0Z2VuZXJhdGVQcml2YXRlS2V5OiBQcml2YXRlS2V5LmdlbmVyYXRlLFxuXHRDZXJ0aWZpY2F0ZTogQ2VydGlmaWNhdGUsXG5cdHBhcnNlQ2VydGlmaWNhdGU6IENlcnRpZmljYXRlLnBhcnNlLFxuXHRjcmVhdGVTZWxmU2lnbmVkQ2VydGlmaWNhdGU6IENlcnRpZmljYXRlLmNyZWF0ZVNlbGZTaWduZWQsXG5cdGNyZWF0ZUNlcnRpZmljYXRlOiBDZXJ0aWZpY2F0ZS5jcmVhdGUsXG5cdElkZW50aXR5OiBJZGVudGl0eSxcblx0aWRlbnRpdHlGcm9tRE46IElkZW50aXR5LnBhcnNlRE4sXG5cdGlkZW50aXR5Rm9ySG9zdDogSWRlbnRpdHkuZm9ySG9zdCxcblx0aWRlbnRpdHlGb3JVc2VyOiBJZGVudGl0eS5mb3JVc2VyLFxuXHRpZGVudGl0eUZvckVtYWlsOiBJZGVudGl0eS5mb3JFbWFpbCxcblx0aWRlbnRpdHlGcm9tQXJyYXk6IElkZW50aXR5LmZyb21BcnJheSxcblxuXHQvKiBlcnJvcnMgKi9cblx0RmluZ2VycHJpbnRGb3JtYXRFcnJvcjogZXJycy5GaW5nZXJwcmludEZvcm1hdEVycm9yLFxuXHRJbnZhbGlkQWxnb3JpdGhtRXJyb3I6IGVycnMuSW52YWxpZEFsZ29yaXRobUVycm9yLFxuXHRLZXlQYXJzZUVycm9yOiBlcnJzLktleVBhcnNlRXJyb3IsXG5cdFNpZ25hdHVyZVBhcnNlRXJyb3I6IGVycnMuU2lnbmF0dXJlUGFyc2VFcnJvcixcblx0S2V5RW5jcnlwdGVkRXJyb3I6IGVycnMuS2V5RW5jcnlwdGVkRXJyb3IsXG5cdENlcnRpZmljYXRlUGFyc2VFcnJvcjogZXJycy5DZXJ0aWZpY2F0ZVBhcnNlRXJyb3Jcbn07XG4iXSwibmFtZXMiOlsiS2V5IiwicmVxdWlyZSIsIkZpbmdlcnByaW50IiwiU2lnbmF0dXJlIiwiUHJpdmF0ZUtleSIsIkNlcnRpZmljYXRlIiwiSWRlbnRpdHkiLCJlcnJzIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlS2V5IiwicGFyc2UiLCJwYXJzZUZpbmdlcnByaW50IiwicGFyc2VTaWduYXR1cmUiLCJwYXJzZVByaXZhdGVLZXkiLCJnZW5lcmF0ZVByaXZhdGVLZXkiLCJnZW5lcmF0ZSIsInBhcnNlQ2VydGlmaWNhdGUiLCJjcmVhdGVTZWxmU2lnbmVkQ2VydGlmaWNhdGUiLCJjcmVhdGVTZWxmU2lnbmVkIiwiY3JlYXRlQ2VydGlmaWNhdGUiLCJjcmVhdGUiLCJpZGVudGl0eUZyb21ETiIsInBhcnNlRE4iLCJpZGVudGl0eUZvckhvc3QiLCJmb3JIb3N0IiwiaWRlbnRpdHlGb3JVc2VyIiwiZm9yVXNlciIsImlkZW50aXR5Rm9yRW1haWwiLCJmb3JFbWFpbCIsImlkZW50aXR5RnJvbUFycmF5IiwiZnJvbUFycmF5IiwiRmluZ2VycHJpbnRGb3JtYXRFcnJvciIsIkludmFsaWRBbGdvcml0aG1FcnJvciIsIktleVBhcnNlRXJyb3IiLCJTaWduYXR1cmVQYXJzZUVycm9yIiwiS2V5RW5jcnlwdGVkRXJyb3IiLCJDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/key.js":
/*!***************************************!*\
  !*** ./node_modules/sshpk/lib/key.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Key;\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar algs = __webpack_require__(/*! ./algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(ssr)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/sshpk/lib/signature.js\");\nvar DiffieHellman = (__webpack_require__(/*! ./dhe */ \"(ssr)/./node_modules/sshpk/lib/dhe.js\").DiffieHellman);\nvar errs = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/sshpk/lib/errors.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar edCompat;\ntry {\n    edCompat = __webpack_require__(/*! ./ed-compat */ \"(ssr)/./node_modules/sshpk/lib/ed-compat.js\");\n} catch (e) {\n/* Just continue through, and bail out if we try to use it. */ }\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar formats = {};\nformats[\"auto\"] = __webpack_require__(/*! ./formats/auto */ \"(ssr)/./node_modules/sshpk/lib/formats/auto.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/pem */ \"(ssr)/./node_modules/sshpk/lib/formats/pem.js\");\nformats[\"pkcs1\"] = __webpack_require__(/*! ./formats/pkcs1 */ \"(ssr)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nformats[\"pkcs8\"] = __webpack_require__(/*! ./formats/pkcs8 */ \"(ssr)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nformats[\"rfc4253\"] = __webpack_require__(/*! ./formats/rfc4253 */ \"(ssr)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nformats[\"ssh\"] = __webpack_require__(/*! ./formats/ssh */ \"(ssr)/./node_modules/sshpk/lib/formats/ssh.js\");\nformats[\"ssh-private\"] = __webpack_require__(/*! ./formats/ssh-private */ \"(ssr)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nformats[\"openssh\"] = formats[\"ssh-private\"];\nformats[\"dnssec\"] = __webpack_require__(/*! ./formats/dnssec */ \"(ssr)/./node_modules/sshpk/lib/formats/dnssec.js\");\nformats[\"putty\"] = __webpack_require__(/*! ./formats/putty */ \"(ssr)/./node_modules/sshpk/lib/formats/putty.js\");\nformats[\"ppk\"] = formats[\"putty\"];\nfunction Key(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.parts, \"options.parts\");\n    assert.string(opts.type, \"options.type\");\n    assert.optionalString(opts.comment, \"options.comment\");\n    var algInfo = algs.info[opts.type];\n    if (typeof algInfo !== \"object\") throw new InvalidAlgorithmError(opts.type);\n    var partLookup = {};\n    for(var i = 0; i < opts.parts.length; ++i){\n        var part = opts.parts[i];\n        partLookup[part.name] = part;\n    }\n    this.type = opts.type;\n    this.parts = opts.parts;\n    this.part = partLookup;\n    this.comment = undefined;\n    this.source = opts.source;\n    /* for speeding up hashing/fingerprint operations */ this._rfc4253Cache = opts._rfc4253Cache;\n    this._hashCache = {};\n    var sz;\n    this.curve = undefined;\n    if (this.type === \"ecdsa\") {\n        var curve = this.part.curve.data.toString();\n        this.curve = curve;\n        sz = algs.curves[curve].size;\n    } else if (this.type === \"ed25519\" || this.type === \"curve25519\") {\n        sz = 256;\n        this.curve = \"curve25519\";\n    } else {\n        var szPart = this.part[algInfo.sizePart];\n        sz = szPart.data.length;\n        sz = sz * 8 - utils.countZeros(szPart.data);\n    }\n    this.size = sz;\n}\nKey.formats = formats;\nKey.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"ssh\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    if (format === \"rfc4253\") {\n        if (this._rfc4253Cache === undefined) this._rfc4253Cache = formats[\"rfc4253\"].write(this);\n        return this._rfc4253Cache;\n    }\n    return formats[format].write(this, options);\n};\nKey.prototype.toString = function(format, options) {\n    return this.toBuffer(format, options).toString();\n};\nKey.prototype.hash = function(algo, type) {\n    assert.string(algo, \"algorithm\");\n    assert.optionalString(type, \"type\");\n    if (type === undefined) type = \"ssh\";\n    algo = algo.toLowerCase();\n    if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);\n    var cacheKey = algo + \"||\" + type;\n    if (this._hashCache[cacheKey]) return this._hashCache[cacheKey];\n    var buf;\n    if (type === \"ssh\") {\n        buf = this.toBuffer(\"rfc4253\");\n    } else if (type === \"spki\") {\n        buf = formats.pkcs8.pkcs8ToBuffer(this);\n    } else {\n        throw new Error(\"Hash type \" + type + \" not supported\");\n    }\n    var hash = crypto.createHash(algo).update(buf).digest();\n    this._hashCache[cacheKey] = hash;\n    return hash;\n};\nKey.prototype.fingerprint = function(algo, type) {\n    if (algo === undefined) algo = \"sha256\";\n    if (type === undefined) type = \"ssh\";\n    assert.string(algo, \"algorithm\");\n    assert.string(type, \"type\");\n    var opts = {\n        type: \"key\",\n        hash: this.hash(algo, type),\n        algorithm: algo,\n        hashType: type\n    };\n    return new Fingerprint(opts);\n};\nKey.prototype.defaultHashAlgorithm = function() {\n    var hashAlgo = \"sha1\";\n    if (this.type === \"rsa\") hashAlgo = \"sha256\";\n    if (this.type === \"dsa\" && this.size > 1024) hashAlgo = \"sha256\";\n    if (this.type === \"ed25519\") hashAlgo = \"sha512\";\n    if (this.type === \"ecdsa\") {\n        if (this.size <= 256) hashAlgo = \"sha256\";\n        else if (this.size <= 384) hashAlgo = \"sha384\";\n        else hashAlgo = \"sha512\";\n    }\n    return hashAlgo;\n};\nKey.prototype.createVerify = function(hashAlgo) {\n    if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n    assert.string(hashAlgo, \"hash algorithm\");\n    /* ED25519 is not supported by OpenSSL, use a javascript impl. */ if (this.type === \"ed25519\" && edCompat !== undefined) return new edCompat.Verifier(this, hashAlgo);\n    if (this.type === \"curve25519\") throw new Error(\"Curve25519 keys are not suitable for \" + \"signing or verification\");\n    var v, nm, err;\n    try {\n        nm = hashAlgo.toUpperCase();\n        v = crypto.createVerify(nm);\n    } catch (e) {\n        err = e;\n    }\n    if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n        nm = \"RSA-\";\n        nm += hashAlgo.toUpperCase();\n        v = crypto.createVerify(nm);\n    }\n    assert.ok(v, \"failed to create verifier\");\n    var oldVerify = v.verify.bind(v);\n    var key = this.toBuffer(\"pkcs8\");\n    var curve = this.curve;\n    var self = this;\n    v.verify = function(signature, fmt) {\n        if (Signature.isSignature(signature, [\n            2,\n            0\n        ])) {\n            if (signature.type !== self.type) return false;\n            if (signature.hashAlgorithm && signature.hashAlgorithm !== hashAlgo) return false;\n            if (signature.curve && self.type === \"ecdsa\" && signature.curve !== curve) return false;\n            return oldVerify(key, signature.toBuffer(\"asn1\"));\n        } else if (typeof signature === \"string\" || Buffer.isBuffer(signature)) {\n            return oldVerify(key, signature, fmt);\n        /*\n\t\t * Avoid doing this on valid arguments, walking the prototype\n\t\t * chain can be quite slow.\n\t\t */ } else if (Signature.isSignature(signature, [\n            1,\n            0\n        ])) {\n            throw new Error(\"signature was created by too old \" + \"a version of sshpk and cannot be verified\");\n        } else {\n            throw new TypeError(\"signature must be a string, \" + \"Buffer, or Signature object\");\n        }\n    };\n    return v;\n};\nKey.prototype.createDiffieHellman = function() {\n    if (this.type === \"rsa\") throw new Error(\"RSA keys do not support Diffie-Hellman\");\n    return new DiffieHellman(this);\n};\nKey.prototype.createDH = Key.prototype.createDiffieHellman;\nKey.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        if (k instanceof PrivateKey) k = k.toPublic();\n        if (!k.comment) k.comment = options.filename;\n        return k;\n    } catch (e) {\n        if (e.name === \"KeyEncryptedError\") throw e;\n        throw new KeyParseError(options.filename, format, e);\n    }\n};\nKey.isKey = function(obj, ver) {\n    return utils.isCompatible(obj, Key, ver);\n};\n/*\n * API versions for Key:\n * [1,0] -- initial ver, may take Signature for createVerify or may not\n * [1,1] -- added pkcs1, pkcs8 formats\n * [1,2] -- added auto, ssh-private, openssh formats\n * [1,3] -- added defaultHashAlgorithm\n * [1,4] -- added ed support, createDH\n * [1,5] -- first explicitly tagged version\n * [1,6] -- changed ed25519 part names\n * [1,7] -- spki hash types\n */ Key.prototype._sshpkApiVersion = [\n    1,\n    7\n];\nKey._oldVersionDetect = function(obj) {\n    assert.func(obj.toBuffer);\n    assert.func(obj.fingerprint);\n    if (obj.createDH) return [\n        1,\n        4\n    ];\n    if (obj.defaultHashAlgorithm) return [\n        1,\n        3\n    ];\n    if (obj.formats[\"auto\"]) return [\n        1,\n        2\n    ];\n    if (obj.formats[\"pkcs1\"]) return [\n        1,\n        1\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/key.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/private-key.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/private-key.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = PrivateKey;\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(ssr)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar dhe = __webpack_require__(/*! ./dhe */ \"(ssr)/./node_modules/sshpk/lib/dhe.js\");\nvar generateECDSA = dhe.generateECDSA;\nvar generateED25519 = dhe.generateED25519;\nvar edCompat = __webpack_require__(/*! ./ed-compat */ \"(ssr)/./node_modules/sshpk/lib/ed-compat.js\");\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\nvar formats = {};\nformats[\"auto\"] = __webpack_require__(/*! ./formats/auto */ \"(ssr)/./node_modules/sshpk/lib/formats/auto.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/pem */ \"(ssr)/./node_modules/sshpk/lib/formats/pem.js\");\nformats[\"pkcs1\"] = __webpack_require__(/*! ./formats/pkcs1 */ \"(ssr)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nformats[\"pkcs8\"] = __webpack_require__(/*! ./formats/pkcs8 */ \"(ssr)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nformats[\"rfc4253\"] = __webpack_require__(/*! ./formats/rfc4253 */ \"(ssr)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nformats[\"ssh-private\"] = __webpack_require__(/*! ./formats/ssh-private */ \"(ssr)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nformats[\"openssh\"] = formats[\"ssh-private\"];\nformats[\"ssh\"] = formats[\"ssh-private\"];\nformats[\"dnssec\"] = __webpack_require__(/*! ./formats/dnssec */ \"(ssr)/./node_modules/sshpk/lib/formats/dnssec.js\");\nformats[\"putty\"] = __webpack_require__(/*! ./formats/putty */ \"(ssr)/./node_modules/sshpk/lib/formats/putty.js\");\nfunction PrivateKey(opts) {\n    assert.object(opts, \"options\");\n    Key.call(this, opts);\n    this._pubCache = undefined;\n}\nutil.inherits(PrivateKey, Key);\nPrivateKey.formats = formats;\nPrivateKey.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"pkcs1\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    return formats[format].write(this, options);\n};\nPrivateKey.prototype.hash = function(algo, type) {\n    return this.toPublic().hash(algo, type);\n};\nPrivateKey.prototype.fingerprint = function(algo, type) {\n    return this.toPublic().fingerprint(algo, type);\n};\nPrivateKey.prototype.toPublic = function() {\n    if (this._pubCache) return this._pubCache;\n    var algInfo = algs.info[this.type];\n    var pubParts = [];\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        var p = algInfo.parts[i];\n        pubParts.push(this.part[p]);\n    }\n    this._pubCache = new Key({\n        type: this.type,\n        source: this,\n        parts: pubParts\n    });\n    if (this.comment) this._pubCache.comment = this.comment;\n    return this._pubCache;\n};\nPrivateKey.prototype.derive = function(newType) {\n    assert.string(newType, \"type\");\n    var priv, pub, pair;\n    if (this.type === \"ed25519\" && newType === \"curve25519\") {\n        priv = this.part.k.data;\n        if (priv[0] === 0x00) priv = priv.slice(1);\n        pair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));\n        pub = Buffer.from(pair.publicKey);\n        return new PrivateKey({\n            type: \"curve25519\",\n            parts: [\n                {\n                    name: \"A\",\n                    data: utils.mpNormalize(pub)\n                },\n                {\n                    name: \"k\",\n                    data: utils.mpNormalize(priv)\n                }\n            ]\n        });\n    } else if (this.type === \"curve25519\" && newType === \"ed25519\") {\n        priv = this.part.k.data;\n        if (priv[0] === 0x00) priv = priv.slice(1);\n        pair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));\n        pub = Buffer.from(pair.publicKey);\n        return new PrivateKey({\n            type: \"ed25519\",\n            parts: [\n                {\n                    name: \"A\",\n                    data: utils.mpNormalize(pub)\n                },\n                {\n                    name: \"k\",\n                    data: utils.mpNormalize(priv)\n                }\n            ]\n        });\n    }\n    throw new Error(\"Key derivation not supported from \" + this.type + \" to \" + newType);\n};\nPrivateKey.prototype.createVerify = function(hashAlgo) {\n    return this.toPublic().createVerify(hashAlgo);\n};\nPrivateKey.prototype.createSign = function(hashAlgo) {\n    if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n    assert.string(hashAlgo, \"hash algorithm\");\n    /* ED25519 is not supported by OpenSSL, use a javascript impl. */ if (this.type === \"ed25519\" && edCompat !== undefined) return new edCompat.Signer(this, hashAlgo);\n    if (this.type === \"curve25519\") throw new Error(\"Curve25519 keys are not suitable for \" + \"signing or verification\");\n    var v, nm, err;\n    try {\n        nm = hashAlgo.toUpperCase();\n        v = crypto.createSign(nm);\n    } catch (e) {\n        err = e;\n    }\n    if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n        nm = \"RSA-\";\n        nm += hashAlgo.toUpperCase();\n        v = crypto.createSign(nm);\n    }\n    assert.ok(v, \"failed to create verifier\");\n    var oldSign = v.sign.bind(v);\n    var key = this.toBuffer(\"pkcs1\");\n    var type = this.type;\n    var curve = this.curve;\n    v.sign = function() {\n        var sig = oldSign(key);\n        if (typeof sig === \"string\") sig = Buffer.from(sig, \"binary\");\n        sig = Signature.parse(sig, type, \"asn1\");\n        sig.hashAlgorithm = hashAlgo;\n        sig.curve = curve;\n        return sig;\n    };\n    return v;\n};\nPrivateKey.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        assert.ok(k instanceof PrivateKey, \"key is not a private key\");\n        if (!k.comment) k.comment = options.filename;\n        return k;\n    } catch (e) {\n        if (e.name === \"KeyEncryptedError\") throw e;\n        throw new KeyParseError(options.filename, format, e);\n    }\n};\nPrivateKey.isPrivateKey = function(obj, ver) {\n    return utils.isCompatible(obj, PrivateKey, ver);\n};\nPrivateKey.generate = function(type, options) {\n    if (options === undefined) options = {};\n    assert.object(options, \"options\");\n    switch(type){\n        case \"ecdsa\":\n            if (options.curve === undefined) options.curve = \"nistp256\";\n            assert.string(options.curve, \"options.curve\");\n            return generateECDSA(options.curve);\n        case \"ed25519\":\n            return generateED25519();\n        default:\n            throw new Error(\"Key generation not supported with key \" + 'type \"' + type + '\"');\n    }\n};\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n * [1,5] -- changed ed25519 part names and format\n * [1,6] -- type arguments for hash() and fingerprint()\n */ PrivateKey.prototype._sshpkApiVersion = [\n    1,\n    6\n];\nPrivateKey._oldVersionDetect = function(obj) {\n    assert.func(obj.toPublic);\n    assert.func(obj.createSign);\n    if (obj.derive) return [\n        1,\n        3\n    ];\n    if (obj.defaultHashAlgorithm) return [\n        1,\n        2\n    ];\n    if (obj.formats[\"auto\"]) return [\n        1,\n        1\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/private-key.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/signature.js":
/*!*********************************************!*\
  !*** ./node_modules/sshpk/lib/signature.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Signature;\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar errs = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/sshpk/lib/errors.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/sshpk/lib/utils.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(ssr)/./node_modules/asn1/lib/index.js\");\nvar SSHBuffer = __webpack_require__(/*! ./ssh-buffer */ \"(ssr)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar SignatureParseError = errs.SignatureParseError;\nfunction Signature(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.parts, \"options.parts\");\n    assert.string(opts.type, \"options.type\");\n    var partLookup = {};\n    for(var i = 0; i < opts.parts.length; ++i){\n        var part = opts.parts[i];\n        partLookup[part.name] = part;\n    }\n    this.type = opts.type;\n    this.hashAlgorithm = opts.hashAlgo;\n    this.curve = opts.curve;\n    this.parts = opts.parts;\n    this.part = partLookup;\n}\nSignature.prototype.toBuffer = function(format) {\n    if (format === undefined) format = \"asn1\";\n    assert.string(format, \"format\");\n    var buf;\n    var stype = \"ssh-\" + this.type;\n    switch(this.type){\n        case \"rsa\":\n            switch(this.hashAlgorithm){\n                case \"sha256\":\n                    stype = \"rsa-sha2-256\";\n                    break;\n                case \"sha512\":\n                    stype = \"rsa-sha2-512\";\n                    break;\n                case \"sha1\":\n                case undefined:\n                    break;\n                default:\n                    throw new Error(\"SSH signature \" + \"format does not support hash \" + \"algorithm \" + this.hashAlgorithm);\n            }\n            if (format === \"ssh\") {\n                buf = new SSHBuffer({});\n                buf.writeString(stype);\n                buf.writePart(this.part.sig);\n                return buf.toBuffer();\n            } else {\n                return this.part.sig.data;\n            }\n            break;\n        case \"ed25519\":\n            if (format === \"ssh\") {\n                buf = new SSHBuffer({});\n                buf.writeString(stype);\n                buf.writePart(this.part.sig);\n                return buf.toBuffer();\n            } else {\n                return this.part.sig.data;\n            }\n            break;\n        case \"dsa\":\n        case \"ecdsa\":\n            var r, s;\n            if (format === \"asn1\") {\n                var der = new asn1.BerWriter();\n                der.startSequence();\n                r = utils.mpNormalize(this.part.r.data);\n                s = utils.mpNormalize(this.part.s.data);\n                der.writeBuffer(r, asn1.Ber.Integer);\n                der.writeBuffer(s, asn1.Ber.Integer);\n                der.endSequence();\n                return der.buffer;\n            } else if (format === \"ssh\" && this.type === \"dsa\") {\n                buf = new SSHBuffer({});\n                buf.writeString(\"ssh-dss\");\n                r = this.part.r.data;\n                if (r.length > 20 && r[0] === 0x00) r = r.slice(1);\n                s = this.part.s.data;\n                if (s.length > 20 && s[0] === 0x00) s = s.slice(1);\n                if (this.hashAlgorithm && this.hashAlgorithm !== \"sha1\" || r.length + s.length !== 40) {\n                    throw new Error(\"OpenSSH only supports \" + \"DSA signatures with SHA1 hash\");\n                }\n                buf.writeBuffer(Buffer.concat([\n                    r,\n                    s\n                ]));\n                return buf.toBuffer();\n            } else if (format === \"ssh\" && this.type === \"ecdsa\") {\n                var inner = new SSHBuffer({});\n                r = this.part.r.data;\n                inner.writeBuffer(r);\n                inner.writePart(this.part.s);\n                buf = new SSHBuffer({});\n                /* XXX: find a more proper way to do this? */ var curve;\n                if (r[0] === 0x00) r = r.slice(1);\n                var sz = r.length * 8;\n                if (sz === 256) curve = \"nistp256\";\n                else if (sz === 384) curve = \"nistp384\";\n                else if (sz === 528) curve = \"nistp521\";\n                buf.writeString(\"ecdsa-sha2-\" + curve);\n                buf.writeBuffer(inner.toBuffer());\n                return buf.toBuffer();\n            }\n            throw new Error(\"Invalid signature format\");\n        default:\n            throw new Error(\"Invalid signature data\");\n    }\n};\nSignature.prototype.toString = function(format) {\n    assert.optionalString(format, \"format\");\n    return this.toBuffer(format).toString(\"base64\");\n};\nSignature.parse = function(data, type, format) {\n    if (typeof data === \"string\") data = Buffer.from(data, \"base64\");\n    assert.buffer(data, \"data\");\n    assert.string(format, \"format\");\n    assert.string(type, \"type\");\n    var opts = {};\n    opts.type = type.toLowerCase();\n    opts.parts = [];\n    try {\n        assert.ok(data.length > 0, \"signature must not be empty\");\n        switch(opts.type){\n            case \"rsa\":\n                return parseOneNum(data, type, format, opts);\n            case \"ed25519\":\n                return parseOneNum(data, type, format, opts);\n            case \"dsa\":\n            case \"ecdsa\":\n                if (format === \"asn1\") return parseDSAasn1(data, type, format, opts);\n                else if (opts.type === \"dsa\") return parseDSA(data, type, format, opts);\n                else return parseECDSA(data, type, format, opts);\n            default:\n                throw new InvalidAlgorithmError(type);\n        }\n    } catch (e) {\n        if (e instanceof InvalidAlgorithmError) throw e;\n        throw new SignatureParseError(type, format, e);\n    }\n};\nfunction parseOneNum(data, type, format, opts) {\n    if (format === \"ssh\") {\n        try {\n            var buf = new SSHBuffer({\n                buffer: data\n            });\n            var head = buf.readString();\n        } catch (e) {\n        /* fall through */ }\n        if (buf !== undefined) {\n            var msg = \"SSH signature does not match expected \" + \"type (expected \" + type + \", got \" + head + \")\";\n            switch(head){\n                case \"ssh-rsa\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha1\";\n                    break;\n                case \"rsa-sha2-256\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha256\";\n                    break;\n                case \"rsa-sha2-512\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha512\";\n                    break;\n                case \"ssh-ed25519\":\n                    assert.strictEqual(type, \"ed25519\", msg);\n                    opts.hashAlgo = \"sha512\";\n                    break;\n                default:\n                    throw new Error(\"Unknown SSH signature \" + \"type: \" + head);\n            }\n            var sig = buf.readPart();\n            assert.ok(buf.atEnd(), \"extra trailing bytes\");\n            sig.name = \"sig\";\n            opts.parts.push(sig);\n            return new Signature(opts);\n        }\n    }\n    opts.parts.push({\n        name: \"sig\",\n        data: data\n    });\n    return new Signature(opts);\n}\nfunction parseDSAasn1(data, type, format, opts) {\n    var der = new asn1.BerReader(data);\n    der.readSequence();\n    var r = der.readString(asn1.Ber.Integer, true);\n    var s = der.readString(asn1.Ber.Integer, true);\n    opts.parts.push({\n        name: \"r\",\n        data: utils.mpNormalize(r)\n    });\n    opts.parts.push({\n        name: \"s\",\n        data: utils.mpNormalize(s)\n    });\n    return new Signature(opts);\n}\nfunction parseDSA(data, type, format, opts) {\n    if (data.length != 40) {\n        var buf = new SSHBuffer({\n            buffer: data\n        });\n        var d = buf.readBuffer();\n        if (d.toString(\"ascii\") === \"ssh-dss\") d = buf.readBuffer();\n        assert.ok(buf.atEnd(), \"extra trailing bytes\");\n        assert.strictEqual(d.length, 40, \"invalid inner length\");\n        data = d;\n    }\n    opts.parts.push({\n        name: \"r\",\n        data: data.slice(0, 20)\n    });\n    opts.parts.push({\n        name: \"s\",\n        data: data.slice(20, 40)\n    });\n    return new Signature(opts);\n}\nfunction parseECDSA(data, type, format, opts) {\n    var buf = new SSHBuffer({\n        buffer: data\n    });\n    var r, s;\n    var inner = buf.readBuffer();\n    var stype = inner.toString(\"ascii\");\n    if (stype.slice(0, 6) === \"ecdsa-\") {\n        var parts = stype.split(\"-\");\n        assert.strictEqual(parts[0], \"ecdsa\");\n        assert.strictEqual(parts[1], \"sha2\");\n        opts.curve = parts[2];\n        switch(opts.curve){\n            case \"nistp256\":\n                opts.hashAlgo = \"sha256\";\n                break;\n            case \"nistp384\":\n                opts.hashAlgo = \"sha384\";\n                break;\n            case \"nistp521\":\n                opts.hashAlgo = \"sha512\";\n                break;\n            default:\n                throw new Error(\"Unsupported ECDSA curve: \" + opts.curve);\n        }\n        inner = buf.readBuffer();\n        assert.ok(buf.atEnd(), \"extra trailing bytes on outer\");\n        buf = new SSHBuffer({\n            buffer: inner\n        });\n        r = buf.readPart();\n    } else {\n        r = {\n            data: inner\n        };\n    }\n    s = buf.readPart();\n    assert.ok(buf.atEnd(), \"extra trailing bytes\");\n    r.name = \"r\";\n    s.name = \"s\";\n    opts.parts.push(r);\n    opts.parts.push(s);\n    return new Signature(opts);\n}\nSignature.isSignature = function(obj, ver) {\n    return utils.isCompatible(obj, Signature, ver);\n};\n/*\n * API versions for Signature:\n * [1,0] -- initial ver\n * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent\n *          hashAlgorithm property\n * [2,1] -- first tagged version\n */ Signature.prototype._sshpkApiVersion = [\n    2,\n    1\n];\nSignature._oldVersionDetect = function(obj) {\n    assert.func(obj.toBuffer);\n    if (obj.hasOwnProperty(\"hashAlgorithm\")) return [\n        2,\n        0\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL3NpZ25hdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7O0FBRTlCQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLFNBQVNELDhGQUE4QjtBQUMzQyxJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUNuQixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJSSxPQUFPSixtQkFBT0EsQ0FBQztBQUNuQixJQUFJSyxRQUFRTCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJTSxPQUFPTixtQkFBT0EsQ0FBQztBQUNuQixJQUFJTyxZQUFZUCxtQkFBT0EsQ0FBQztBQUV4QixJQUFJUSx3QkFBd0JKLEtBQUtJLHFCQUFxQjtBQUN0RCxJQUFJQyxzQkFBc0JMLEtBQUtLLG1CQUFtQjtBQUVsRCxTQUFTWCxVQUFVWSxJQUFJO0lBQ3RCWCxPQUFPWSxNQUFNLENBQUNELE1BQU07SUFDcEJYLE9BQU9hLGFBQWEsQ0FBQ0YsS0FBS0csS0FBSyxFQUFFO0lBQ2pDZCxPQUFPZSxNQUFNLENBQUNKLEtBQUtLLElBQUksRUFBRTtJQUV6QixJQUFJQyxhQUFhLENBQUM7SUFDbEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlQLEtBQUtHLEtBQUssQ0FBQ0ssTUFBTSxFQUFFLEVBQUVELEVBQUc7UUFDM0MsSUFBSUUsT0FBT1QsS0FBS0csS0FBSyxDQUFDSSxFQUFFO1FBQ3hCRCxVQUFVLENBQUNHLEtBQUtDLElBQUksQ0FBQyxHQUFHRDtJQUN6QjtJQUVBLElBQUksQ0FBQ0osSUFBSSxHQUFHTCxLQUFLSyxJQUFJO0lBQ3JCLElBQUksQ0FBQ00sYUFBYSxHQUFHWCxLQUFLWSxRQUFRO0lBQ2xDLElBQUksQ0FBQ0MsS0FBSyxHQUFHYixLQUFLYSxLQUFLO0lBQ3ZCLElBQUksQ0FBQ1YsS0FBSyxHQUFHSCxLQUFLRyxLQUFLO0lBQ3ZCLElBQUksQ0FBQ00s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QixLQUFLRyxLQUFLLENBQUNzRCxJQUFJLENBQUMvQjtJQUNoQixPQUFRLElBQUl0QyxVQUFVWTtBQUN2QjtBQUVBWixVQUFVMkUsV0FBVyxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsR0FBRztJQUN6QyxPQUFRdEUsTUFBTXVFLFlBQVksQ0FBQ0YsS0FBSzVFLFdBQVc2RTtBQUM1QztBQUVBOzs7Ozs7Q0FNQyxHQUNEN0UsVUFBVTBCLFNBQVMsQ0FBQ3FELGdCQUFnQixHQUFHO0lBQUM7SUFBRztDQUFFO0FBRTdDL0UsVUFBVWdGLGlCQUFpQixHQUFHLFNBQVVKLEdBQUc7SUFDMUMzRSxPQUFPZ0YsSUFBSSxDQUFDTCxJQUFJakQsUUFBUTtJQUN4QixJQUFJaUQsSUFBSU0sY0FBYyxDQUFDLGtCQUN0QixPQUFRO1FBQUM7UUFBRztLQUFFO0lBQ2YsT0FBUTtRQUFDO1FBQUc7S0FBRTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL3NpZ25hdHVyZS5qcz81YTU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25hdHVyZTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuL2FsZ3MnKTtcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbnZhciBlcnJzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc24xID0gcmVxdWlyZSgnYXNuMScpO1xudmFyIFNTSEJ1ZmZlciA9IHJlcXVpcmUoJy4vc3NoLWJ1ZmZlcicpO1xuXG52YXIgSW52YWxpZEFsZ29yaXRobUVycm9yID0gZXJycy5JbnZhbGlkQWxnb3JpdGhtRXJyb3I7XG52YXIgU2lnbmF0dXJlUGFyc2VFcnJvciA9IGVycnMuU2lnbmF0dXJlUGFyc2VFcnJvcjtcblxuZnVuY3Rpb24gU2lnbmF0dXJlKG9wdHMpIHtcblx0YXNzZXJ0Lm9iamVjdChvcHRzLCAnb3B0aW9ucycpO1xuXHRhc3NlcnQuYXJyYXlPZk9iamVjdChvcHRzLnBhcnRzLCAnb3B0aW9ucy5wYXJ0cycpO1xuXHRhc3NlcnQuc3RyaW5nKG9wdHMudHlwZSwgJ29wdGlvbnMudHlwZScpO1xuXG5cdHZhciBwYXJ0TG9va3VwID0ge307XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgb3B0cy5wYXJ0cy5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBwYXJ0ID0gb3B0cy5wYXJ0c1tpXTtcblx0XHRwYXJ0TG9va3VwW3BhcnQubmFtZV0gPSBwYXJ0O1xuXHR9XG5cblx0dGhpcy50eXBlID0gb3B0cy50eXBlO1xuXHR0aGlzLmhhc2hBbGdvcml0aG0gPSBvcHRzLmhhc2hBbGdvO1xuXHR0aGlzLmN1cnZlID0gb3B0cy5jdXJ2ZTtcblx0dGhpcy5wYXJ0cyA9IG9wdHMucGFydHM7XG5cdHRoaXMucGFydCA9IHBhcnRMb29rdXA7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG5cdGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZClcblx0XHRmb3JtYXQgPSAnYXNuMSc7XG5cdGFzc2VydC5zdHJpbmcoZm9ybWF0LCAnZm9ybWF0Jyk7XG5cblx0dmFyIGJ1Zjtcblx0dmFyIHN0eXBlID0gJ3NzaC0nICsgdGhpcy50eXBlO1xuXG5cdHN3aXRjaCAodGhpcy50eXBlKSB7XG5cdGNhc2UgJ3JzYSc6XG5cdFx0c3dpdGNoICh0aGlzLmhhc2hBbGdvcml0aG0pIHtcblx0XHRjYXNlICdzaGEyNTYnOlxuXHRcdFx0c3R5cGUgPSAncnNhLXNoYTItMjU2Jztcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3NoYTUxMic6XG5cdFx0XHRzdHlwZSA9ICdyc2Etc2hhMi01MTInO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnc2hhMSc6XG5cdFx0Y2FzZSB1bmRlZmluZWQ6XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgKG5ldyBFcnJvcignU1NIIHNpZ25hdHVyZSAnICtcblx0XHRcdCAgICAnZm9ybWF0IGRvZXMgbm90IHN1cHBvcnQgaGFzaCAnICtcblx0XHRcdCAgICAnYWxnb3JpdGhtICcgKyB0aGlzLmhhc2hBbGdvcml0aG0pKTtcblx0XHR9XG5cdFx0aWYgKGZvcm1hdCA9PT0gJ3NzaCcpIHtcblx0XHRcdGJ1ZiA9IG5ldyBTU0hCdWZmZXIoe30pO1xuXHRcdFx0YnVmLndyaXRlU3RyaW5nKHN0eXBlKTtcblx0XHRcdGJ1Zi53cml0ZVBhcnQodGhpcy5wYXJ0LnNpZyk7XG5cdFx0XHRyZXR1cm4gKGJ1Zi50b0J1ZmZlcigpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuICh0aGlzLnBhcnQuc2lnLmRhdGEpO1xuXHRcdH1cblx0XHRicmVhaztcblxuXHRjYXNlICdlZDI1NTE5Jzpcblx0XHRpZiAoZm9ybWF0ID09PSAnc3NoJykge1xuXHRcdFx0YnVmID0gbmV3IFNTSEJ1ZmZlcih7fSk7XG5cdFx0XHRidWYud3JpdGVTdHJpbmcoc3R5cGUpO1xuXHRcdFx0YnVmLndyaXRlUGFydCh0aGlzLnBhcnQuc2lnKTtcblx0XHRcdHJldHVybiAoYnVmLnRvQnVmZmVyKCkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gKHRoaXMucGFydC5zaWcuZGF0YSk7XG5cdFx0fVxuXHRcdGJyZWFrO1xuXG5cdGNhc2UgJ2RzYSc6XG5cdGNhc2UgJ2VjZHNhJzpcblx0XHR2YXIgciwgcztcblx0XHRpZiAoZm9ybWF0ID09PSAnYXNuMScpIHtcblx0XHRcdHZhciBkZXIgPSBuZXcgYXNuMS5CZXJXcml0ZXIoKTtcblx0XHRcdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdFx0XHRyID0gdXRpbHMubXBOb3JtYWxpemUodGhpcy5wYXJ0LnIuZGF0YSk7XG5cdFx0XHRzID0gdXRpbHMubXBOb3JtYWxpemUodGhpcy5wYXJ0LnMuZGF0YSk7XG5cdFx0XHRkZXIud3JpdGVCdWZmZXIociwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdFx0XHRkZXIud3JpdGVCdWZmZXIocywgYXNuMS5CZXIuSW50ZWdlcik7XG5cdFx0XHRkZXIuZW5kU2VxdWVuY2UoKTtcblx0XHRcdHJldHVybiAoZGVyLmJ1ZmZlcik7XG5cdFx0fSBlbHNlIGlmIChmb3JtYXQgPT09ICdzc2gnICYmIHRoaXMudHlwZSA9PT0gJ2RzYScpIHtcblx0XHRcdGJ1ZiA9IG5ldyBTU0hCdWZmZXIoe30pO1xuXHRcdFx0YnVmLndyaXRlU3RyaW5nKCdzc2gtZHNzJyk7XG5cdFx0XHRyID0gdGhpcy5wYXJ0LnIuZGF0YTtcblx0XHRcdGlmIChyLmxlbmd0aCA+IDIwICYmIHJbMF0gPT09IDB4MDApXG5cdFx0XHRcdHIgPSByLnNsaWNlKDEpO1xuXHRcdFx0cyA9IHRoaXMucGFydC5zLmRhdGE7XG5cdFx0XHRpZiAocy5sZW5ndGggPiAyMCAmJiBzWzBdID09PSAweDAwKVxuXHRcdFx0XHRzID0gcy5zbGljZSgxKTtcblx0XHRcdGlmICgodGhpcy5oYXNoQWxnb3JpdGhtICYmXG5cdFx0XHQgICAgdGhpcy5oYXNoQWxnb3JpdGhtICE9PSAnc2hhMScpIHx8XG5cdFx0XHQgICAgci5sZW5ndGggKyBzLmxlbmd0aCAhPT0gNDApIHtcblx0XHRcdFx0dGhyb3cgKG5ldyBFcnJvcignT3BlblNTSCBvbmx5IHN1cHBvcnRzICcgK1xuXHRcdFx0XHQgICAgJ0RTQSBzaWduYXR1cmVzIHdpdGggU0hBMSBoYXNoJykpO1xuXHRcdFx0fVxuXHRcdFx0YnVmLndyaXRlQnVmZmVyKEJ1ZmZlci5jb25jYXQoW3IsIHNdKSk7XG5cdFx0XHRyZXR1cm4gKGJ1Zi50b0J1ZmZlcigpKTtcblx0XHR9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ3NzaCcgJiYgdGhpcy50eXBlID09PSAnZWNkc2EnKSB7XG5cdFx0XHR2YXIgaW5uZXIgPSBuZXcgU1NIQnVmZmVyKHt9KTtcblx0XHRcdHIgPSB0aGlzLnBhcnQuci5kYXRhO1xuXHRcdFx0aW5uZXIud3JpdGVCdWZmZXIocik7XG5cdFx0XHRpbm5lci53cml0ZVBhcnQodGhpcy5wYXJ0LnMpO1xuXG5cdFx0XHRidWYgPSBuZXcgU1NIQnVmZmVyKHt9KTtcblx0XHRcdC8qIFhYWDogZmluZCBhIG1vcmUgcHJvcGVyIHdheSB0byBkbyB0aGlzPyAqL1xuXHRcdFx0dmFyIGN1cnZlO1xuXHRcdFx0aWYgKHJbMF0gPT09IDB4MDApXG5cdFx0XHRcdHIgPSByLnNsaWNlKDEpO1xuXHRcdFx0dmFyIHN6ID0gci5sZW5ndGggKiA4O1xuXHRcdFx0aWYgKHN6ID09PSAyNTYpXG5cdFx0XHRcdGN1cnZlID0gJ25pc3RwMjU2Jztcblx0XHRcdGVsc2UgaWYgKHN6ID09PSAzODQpXG5cdFx0XHRcdGN1cnZlID0gJ25pc3RwMzg0Jztcblx0XHRcdGVsc2UgaWYgKHN6ID09PSA1MjgpXG5cdFx0XHRcdGN1cnZlID0gJ25pc3RwNTIxJztcblx0XHRcdGJ1Zi53cml0ZVN0cmluZygnZWNkc2Etc2hhMi0nICsgY3VydmUpO1xuXHRcdFx0YnVmLndyaXRlQnVmZmVyKGlubmVyLnRvQnVmZmVyKCkpO1xuXHRcdFx0cmV0dXJuIChidWYudG9CdWZmZXIoKSk7XG5cdFx0fVxuXHRcdHRocm93IChuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIGZvcm1hdCcpKTtcblx0ZGVmYXVsdDpcblx0XHR0aHJvdyAobmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSBkYXRhJykpO1xuXHR9XG59O1xuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuXHRhc3NlcnQub3B0aW9uYWxTdHJpbmcoZm9ybWF0LCAnZm9ybWF0Jyk7XG5cdHJldHVybiAodGhpcy50b0J1ZmZlcihmb3JtYXQpLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG59O1xuXG5TaWduYXR1cmUucGFyc2UgPSBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgZm9ybWF0KSB7XG5cdGlmICh0eXBlb2YgKGRhdGEpID09PSAnc3RyaW5nJylcblx0XHRkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgJ2Jhc2U2NCcpO1xuXHRhc3NlcnQuYnVmZmVyKGRhdGEsICdkYXRhJyk7XG5cdGFzc2VydC5zdHJpbmcoZm9ybWF0LCAnZm9ybWF0Jyk7XG5cdGFzc2VydC5zdHJpbmcodHlwZSwgJ3R5cGUnKTtcblxuXHR2YXIgb3B0cyA9IHt9O1xuXHRvcHRzLnR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG5cdG9wdHMucGFydHMgPSBbXTtcblxuXHR0cnkge1xuXHRcdGFzc2VydC5vayhkYXRhLmxlbmd0aCA+IDAsICdzaWduYXR1cmUgbXVzdCBub3QgYmUgZW1wdHknKTtcblx0XHRzd2l0Y2ggKG9wdHMudHlwZSkge1xuXHRcdGNhc2UgJ3JzYSc6XG5cdFx0XHRyZXR1cm4gKHBhcnNlT25lTnVtKGRhdGEsIHR5cGUsIGZvcm1hdCwgb3B0cykpO1xuXHRcdGNhc2UgJ2VkMjU1MTknOlxuXHRcdFx0cmV0dXJuIChwYXJzZU9uZU51bShkYXRhLCB0eXBlLCBmb3JtYXQsIG9wdHMpKTtcblxuXHRcdGNhc2UgJ2RzYSc6XG5cdFx0Y2FzZSAnZWNkc2EnOlxuXHRcdFx0aWYgKGZvcm1hdCA9PT0gJ2FzbjEnKVxuXHRcdFx0XHRyZXR1cm4gKHBhcnNlRFNBYXNuMShkYXRhLCB0eXBlLCBmb3JtYXQsIG9wdHMpKTtcblx0XHRcdGVsc2UgaWYgKG9wdHMudHlwZSA9PT0gJ2RzYScpXG5cdFx0XHRcdHJldHVybiAocGFyc2VEU0EoZGF0YSwgdHlwZSwgZm9ybWF0LCBvcHRzKSk7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiAocGFyc2VFQ0RTQShkYXRhLCB0eXBlLCBmb3JtYXQsIG9wdHMpKTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyAobmV3IEludmFsaWRBbGdvcml0aG1FcnJvcih0eXBlKSk7XG5cdFx0fVxuXG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAoZSBpbnN0YW5jZW9mIEludmFsaWRBbGdvcml0aG1FcnJvcilcblx0XHRcdHRocm93IChlKTtcblx0XHR0aHJvdyAobmV3IFNpZ25hdHVyZVBhcnNlRXJyb3IodHlwZSwgZm9ybWF0LCBlKSk7XG5cdH1cbn07XG5cbmZ1bmN0aW9uIHBhcnNlT25lTnVtKGRhdGEsIHR5cGUsIGZvcm1hdCwgb3B0cykge1xuXHRpZiAoZm9ybWF0ID09PSAnc3NoJykge1xuXHRcdHRyeSB7XG5cdFx0XHR2YXIgYnVmID0gbmV3IFNTSEJ1ZmZlcih7YnVmZmVyOiBkYXRhfSk7XG5cdFx0XHR2YXIgaGVhZCA9IGJ1Zi5yZWFkU3RyaW5nKCk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0LyogZmFsbCB0aHJvdWdoICovXG5cdFx0fVxuXHRcdGlmIChidWYgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dmFyIG1zZyA9ICdTU0ggc2lnbmF0dXJlIGRvZXMgbm90IG1hdGNoIGV4cGVjdGVkICcgK1xuXHRcdFx0ICAgICd0eXBlIChleHBlY3RlZCAnICsgdHlwZSArICcsIGdvdCAnICsgaGVhZCArICcpJztcblx0XHRcdHN3aXRjaCAoaGVhZCkge1xuXHRcdFx0Y2FzZSAnc3NoLXJzYSc6XG5cdFx0XHRcdGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlLCAncnNhJywgbXNnKTtcblx0XHRcdFx0b3B0cy5oYXNoQWxnbyA9ICdzaGExJztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdyc2Etc2hhMi0yNTYnOlxuXHRcdFx0XHRhc3NlcnQuc3RyaWN0RXF1YWwodHlwZSwgJ3JzYScsIG1zZyk7XG5cdFx0XHRcdG9wdHMuaGFzaEFsZ28gPSAnc2hhMjU2Jztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdyc2Etc2hhMi01MTInOlxuXHRcdFx0XHRhc3NlcnQuc3RyaWN0RXF1YWwodHlwZSwgJ3JzYScsIG1zZyk7XG5cdFx0XHRcdG9wdHMuaGFzaEFsZ28gPSAnc2hhNTEyJztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdzc2gtZWQyNTUxOSc6XG5cdFx0XHRcdGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlLCAnZWQyNTUxOScsIG1zZyk7XG5cdFx0XHRcdG9wdHMuaGFzaEFsZ28gPSAnc2hhNTEyJztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyAobmV3IEVycm9yKCdVbmtub3duIFNTSCBzaWduYXR1cmUgJyArXG5cdFx0XHRcdCAgICAndHlwZTogJyArIGhlYWQpKTtcblx0XHRcdH1cblx0XHRcdHZhciBzaWcgPSBidWYucmVhZFBhcnQoKTtcblx0XHRcdGFzc2VydC5vayhidWYuYXRFbmQoKSwgJ2V4dHJhIHRyYWlsaW5nIGJ5dGVzJyk7XG5cdFx0XHRzaWcubmFtZSA9ICdzaWcnO1xuXHRcdFx0b3B0cy5wYXJ0cy5wdXNoKHNpZyk7XG5cdFx0XHRyZXR1cm4gKG5ldyBTaWduYXR1cmUob3B0cykpO1xuXHRcdH1cblx0fVxuXHRvcHRzLnBhcnRzLnB1c2goe25hbWU6ICdzaWcnLCBkYXRhOiBkYXRhfSk7XG5cdHJldHVybiAobmV3IFNpZ25hdHVyZShvcHRzKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRFNBYXNuMShkYXRhLCB0eXBlLCBmb3JtYXQsIG9wdHMpIHtcblx0dmFyIGRlciA9IG5ldyBhc24xLkJlclJlYWRlcihkYXRhKTtcblx0ZGVyLnJlYWRTZXF1ZW5jZSgpO1xuXHR2YXIgciA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkludGVnZXIsIHRydWUpO1xuXHR2YXIgcyA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkludGVnZXIsIHRydWUpO1xuXG5cdG9wdHMucGFydHMucHVzaCh7bmFtZTogJ3InLCBkYXRhOiB1dGlscy5tcE5vcm1hbGl6ZShyKX0pO1xuXHRvcHRzLnBhcnRzLnB1c2goe25hbWU6ICdzJywgZGF0YTogdXRpbHMubXBOb3JtYWxpemUocyl9KTtcblxuXHRyZXR1cm4gKG5ldyBTaWduYXR1cmUob3B0cykpO1xufVxuXG5mdW5jdGlvbiBwYXJzZURTQShkYXRhLCB0eXBlLCBmb3JtYXQsIG9wdHMpIHtcblx0aWYgKGRhdGEubGVuZ3RoICE9IDQwKSB7XG5cdFx0dmFyIGJ1ZiA9IG5ldyBTU0hCdWZmZXIoe2J1ZmZlcjogZGF0YX0pO1xuXHRcdHZhciBkID0gYnVmLnJlYWRCdWZmZXIoKTtcblx0XHRpZiAoZC50b1N0cmluZygnYXNjaWknKSA9PT0gJ3NzaC1kc3MnKVxuXHRcdFx0ZCA9IGJ1Zi5yZWFkQnVmZmVyKCk7XG5cdFx0YXNzZXJ0Lm9rKGJ1Zi5hdEVuZCgpLCAnZXh0cmEgdHJhaWxpbmcgYnl0ZXMnKTtcblx0XHRhc3NlcnQuc3RyaWN0RXF1YWwoZC5sZW5ndGgsIDQwLCAnaW52YWxpZCBpbm5lciBsZW5ndGgnKTtcblx0XHRkYXRhID0gZDtcblx0fVxuXHRvcHRzLnBhcnRzLnB1c2goe25hbWU6ICdyJywgZGF0YTogZGF0YS5zbGljZSgwLCAyMCl9KTtcblx0b3B0cy5wYXJ0cy5wdXNoKHtuYW1lOiAncycsIGRhdGE6IGRhdGEuc2xpY2UoMjAsIDQwKX0pO1xuXHRyZXR1cm4gKG5ldyBTaWduYXR1cmUob3B0cykpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUVDRFNBKGRhdGEsIHR5cGUsIGZvcm1hdCwgb3B0cykge1xuXHR2YXIgYnVmID0gbmV3IFNTSEJ1ZmZlcih7YnVmZmVyOiBkYXRhfSk7XG5cblx0dmFyIHIsIHM7XG5cdHZhciBpbm5lciA9IGJ1Zi5yZWFkQnVmZmVyKCk7XG5cdHZhciBzdHlwZSA9IGlubmVyLnRvU3RyaW5nKCdhc2NpaScpO1xuXHRpZiAoc3R5cGUuc2xpY2UoMCwgNikgPT09ICdlY2RzYS0nKSB7XG5cdFx0dmFyIHBhcnRzID0gc3R5cGUuc3BsaXQoJy0nKTtcblx0XHRhc3NlcnQuc3RyaWN0RXF1YWwocGFydHNbMF0sICdlY2RzYScpO1xuXHRcdGFzc2VydC5zdHJpY3RFcXVhbChwYXJ0c1sxXSwgJ3NoYTInKTtcblx0XHRvcHRzLmN1cnZlID0gcGFydHNbMl07XG5cdFx0c3dpdGNoIChvcHRzLmN1cnZlKSB7XG5cdFx0Y2FzZSAnbmlzdHAyNTYnOlxuXHRcdFx0b3B0cy5oYXNoQWxnbyA9ICdzaGEyNTYnO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnbmlzdHAzODQnOlxuXHRcdFx0b3B0cy5oYXNoQWxnbyA9ICdzaGEzODQnO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnbmlzdHA1MjEnOlxuXHRcdFx0b3B0cy5oYXNoQWxnbyA9ICdzaGE1MTInO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIEVDRFNBIGN1cnZlOiAnICtcblx0XHRcdCAgICBvcHRzLmN1cnZlKSk7XG5cdFx0fVxuXHRcdGlubmVyID0gYnVmLnJlYWRCdWZmZXIoKTtcblx0XHRhc3NlcnQub2soYnVmLmF0RW5kKCksICdleHRyYSB0cmFpbGluZyBieXRlcyBvbiBvdXRlcicpO1xuXHRcdGJ1ZiA9IG5ldyBTU0hCdWZmZXIoe2J1ZmZlcjogaW5uZXJ9KTtcblx0XHRyID0gYnVmLnJlYWRQYXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0ciA9IHtkYXRhOiBpbm5lcn07XG5cdH1cblxuXHRzID0gYnVmLnJlYWRQYXJ0KCk7XG5cdGFzc2VydC5vayhidWYuYXRFbmQoKSwgJ2V4dHJhIHRyYWlsaW5nIGJ5dGVzJyk7XG5cblx0ci5uYW1lID0gJ3InO1xuXHRzLm5hbWUgPSAncyc7XG5cblx0b3B0cy5wYXJ0cy5wdXNoKHIpO1xuXHRvcHRzLnBhcnRzLnB1c2gocyk7XG5cdHJldHVybiAobmV3IFNpZ25hdHVyZShvcHRzKSk7XG59XG5cblNpZ25hdHVyZS5pc1NpZ25hdHVyZSA9IGZ1bmN0aW9uIChvYmosIHZlcikge1xuXHRyZXR1cm4gKHV0aWxzLmlzQ29tcGF0aWJsZShvYmosIFNpZ25hdHVyZSwgdmVyKSk7XG59O1xuXG4vKlxuICogQVBJIHZlcnNpb25zIGZvciBTaWduYXR1cmU6XG4gKiBbMSwwXSAtLSBpbml0aWFsIHZlclxuICogWzIsMF0gLS0gc3VwcG9ydCBmb3IgcnNhIGluIGZ1bGwgc3NoIGZvcm1hdCwgY29tcGF0IHdpdGggc3NocGstYWdlbnRcbiAqICAgICAgICAgIGhhc2hBbGdvcml0aG0gcHJvcGVydHlcbiAqIFsyLDFdIC0tIGZpcnN0IHRhZ2dlZCB2ZXJzaW9uXG4gKi9cblNpZ25hdHVyZS5wcm90b3R5cGUuX3NzaHBrQXBpVmVyc2lvbiA9IFsyLCAxXTtcblxuU2lnbmF0dXJlLl9vbGRWZXJzaW9uRGV0ZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuXHRhc3NlcnQuZnVuYyhvYmoudG9CdWZmZXIpO1xuXHRpZiAob2JqLmhhc093blByb3BlcnR5KCdoYXNoQWxnb3JpdGhtJykpXG5cdFx0cmV0dXJuIChbMiwgMF0pO1xuXHRyZXR1cm4gKFsxLCAwXSk7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJTaWduYXR1cmUiLCJhc3NlcnQiLCJyZXF1aXJlIiwiQnVmZmVyIiwiYWxncyIsImNyeXB0byIsImVycnMiLCJ1dGlscyIsImFzbjEiLCJTU0hCdWZmZXIiLCJJbnZhbGlkQWxnb3JpdGhtRXJyb3IiLCJTaWduYXR1cmVQYXJzZUVycm9yIiwib3B0cyIsIm9iamVjdCIsImFycmF5T2ZPYmplY3QiLCJwYXJ0cyIsInN0cmluZyIsInR5cGUiLCJwYXJ0TG9va3VwIiwiaSIsImxlbmd0aCIsInBhcnQiLCJuYW1lIiwiaGFzaEFsZ29yaXRobSIsImhhc2hBbGdvIiwiY3VydmUiLCJwcm90b3R5cGUiLCJ0b0J1ZmZlciIsImZvcm1hdCIsInVuZGVmaW5lZCIsImJ1ZiIsInN0eXBlIiwiRXJyb3IiLCJ3cml0ZVN0cmluZyIsIndyaXRlUGFydCIsInNpZyIsImRhdGEiLCJyIiwicyIsImRlciIsIkJlcldyaXRlciIsInN0YXJ0U2VxdWVuY2UiLCJtcE5vcm1hbGl6ZSIsIndyaXRlQnVmZmVyIiwiQmVyIiwiSW50ZWdlciIsImVuZFNlcXVlbmNlIiwiYnVmZmVyIiwic2xpY2UiLCJjb25jYXQiLCJpbm5lciIsInN6IiwidG9TdHJpbmciLCJvcHRpb25hbFN0cmluZyIsInBhcnNlIiwiZnJvbSIsInRvTG93ZXJDYXNlIiwib2siLCJwYXJzZU9uZU51bSIsInBhcnNlRFNBYXNuMSIsInBhcnNlRFNBIiwicGFyc2VFQ0RTQSIsImUiLCJoZWFkIiwicmVhZFN0cmluZyIsIm1zZyIsInN0cmljdEVxdWFsIiwicmVhZFBhcnQiLCJhdEVuZCIsInB1c2giLCJCZXJSZWFkZXIiLCJyZWFkU2VxdWVuY2UiLCJkIiwicmVhZEJ1ZmZlciIsInNwbGl0IiwiaXNTaWduYXR1cmUiLCJvYmoiLCJ2ZXIiLCJpc0NvbXBhdGlibGUiLCJfc3NocGtBcGlWZXJzaW9uIiwiX29sZFZlcnNpb25EZXRlY3QiLCJmdW5jIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/ssh-buffer.js":
/*!**********************************************!*\
  !*** ./node_modules/sshpk/lib/ssh-buffer.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = SSHBuffer;\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nfunction SSHBuffer(opts) {\n    assert.object(opts, \"options\");\n    if (opts.buffer !== undefined) assert.buffer(opts.buffer, \"options.buffer\");\n    this._size = opts.buffer ? opts.buffer.length : 1024;\n    this._buffer = opts.buffer || Buffer.alloc(this._size);\n    this._offset = 0;\n}\nSSHBuffer.prototype.toBuffer = function() {\n    return this._buffer.slice(0, this._offset);\n};\nSSHBuffer.prototype.atEnd = function() {\n    return this._offset >= this._buffer.length;\n};\nSSHBuffer.prototype.remainder = function() {\n    return this._buffer.slice(this._offset);\n};\nSSHBuffer.prototype.skip = function(n) {\n    this._offset += n;\n};\nSSHBuffer.prototype.expand = function() {\n    this._size *= 2;\n    var buf = Buffer.alloc(this._size);\n    this._buffer.copy(buf, 0);\n    this._buffer = buf;\n};\nSSHBuffer.prototype.readPart = function() {\n    return {\n        data: this.readBuffer()\n    };\n};\nSSHBuffer.prototype.readBuffer = function() {\n    var len = this._buffer.readUInt32BE(this._offset);\n    this._offset += 4;\n    assert.ok(this._offset + len <= this._buffer.length, \"length out of bounds at +0x\" + this._offset.toString(16) + \" (data truncated?)\");\n    var buf = this._buffer.slice(this._offset, this._offset + len);\n    this._offset += len;\n    return buf;\n};\nSSHBuffer.prototype.readString = function() {\n    return this.readBuffer().toString();\n};\nSSHBuffer.prototype.readCString = function() {\n    var offset = this._offset;\n    while(offset < this._buffer.length && this._buffer[offset] !== 0x00)offset++;\n    assert.ok(offset < this._buffer.length, \"c string does not terminate\");\n    var str = this._buffer.slice(this._offset, offset).toString();\n    this._offset = offset + 1;\n    return str;\n};\nSSHBuffer.prototype.readInt = function() {\n    var v = this._buffer.readUInt32BE(this._offset);\n    this._offset += 4;\n    return v;\n};\nSSHBuffer.prototype.readInt64 = function() {\n    assert.ok(this._offset + 8 < this._buffer.length, \"buffer not long enough to read Int64\");\n    var v = this._buffer.slice(this._offset, this._offset + 8);\n    this._offset += 8;\n    return v;\n};\nSSHBuffer.prototype.readChar = function() {\n    var v = this._buffer[this._offset++];\n    return v;\n};\nSSHBuffer.prototype.writeBuffer = function(buf) {\n    while(this._offset + 4 + buf.length > this._size)this.expand();\n    this._buffer.writeUInt32BE(buf.length, this._offset);\n    this._offset += 4;\n    buf.copy(this._buffer, this._offset);\n    this._offset += buf.length;\n};\nSSHBuffer.prototype.writeString = function(str) {\n    this.writeBuffer(Buffer.from(str, \"utf8\"));\n};\nSSHBuffer.prototype.writeCString = function(str) {\n    while(this._offset + 1 + str.length > this._size)this.expand();\n    this._buffer.write(str, this._offset);\n    this._offset += str.length;\n    this._buffer[this._offset++] = 0;\n};\nSSHBuffer.prototype.writeInt = function(v) {\n    while(this._offset + 4 > this._size)this.expand();\n    this._buffer.writeUInt32BE(v, this._offset);\n    this._offset += 4;\n};\nSSHBuffer.prototype.writeInt64 = function(v) {\n    assert.buffer(v, \"value\");\n    if (v.length > 8) {\n        var lead = v.slice(0, v.length - 8);\n        for(var i = 0; i < lead.length; ++i){\n            assert.strictEqual(lead[i], 0, \"must fit in 64 bits of precision\");\n        }\n        v = v.slice(v.length - 8, v.length);\n    }\n    while(this._offset + 8 > this._size)this.expand();\n    v.copy(this._buffer, this._offset);\n    this._offset += 8;\n};\nSSHBuffer.prototype.writeChar = function(v) {\n    while(this._offset + 1 > this._size)this.expand();\n    this._buffer[this._offset++] = v;\n};\nSSHBuffer.prototype.writePart = function(p) {\n    this.writeBuffer(p.data);\n};\nSSHBuffer.prototype.write = function(buf) {\n    while(this._offset + buf.length > this._size)this.expand();\n    buf.copy(this._buffer, this._offset);\n    this._offset += buf.length;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/ssh-buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sshpk/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/sshpk/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    bufferSplit: bufferSplit,\n    addRSAMissing: addRSAMissing,\n    calculateDSAPublic: calculateDSAPublic,\n    calculateED25519Public: calculateED25519Public,\n    calculateX25519Public: calculateX25519Public,\n    mpNormalize: mpNormalize,\n    mpDenormalize: mpDenormalize,\n    ecNormalize: ecNormalize,\n    countZeros: countZeros,\n    assertCompatible: assertCompatible,\n    isCompatible: isCompatible,\n    opensslKeyDeriv: opensslKeyDeriv,\n    opensshCipherInfo: opensshCipherInfo,\n    publicFromPrivateECDSA: publicFromPrivateECDSA,\n    zeroPadToLength: zeroPadToLength,\n    writeBitString: writeBitString,\n    readBitString: readBitString,\n    pbkdf2: pbkdf2\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(ssr)/./node_modules/sshpk/lib/private-key.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(ssr)/./node_modules/sshpk/lib/key.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar algs = __webpack_require__(/*! ./algs */ \"(ssr)/./node_modules/sshpk/lib/algs.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(ssr)/./node_modules/asn1/lib/index.js\");\nvar ec = __webpack_require__(/*! ecc-jsbn/lib/ec */ \"(ssr)/./node_modules/ecc-jsbn/lib/ec.js\");\nvar jsbn = (__webpack_require__(/*! jsbn */ \"(ssr)/./node_modules/jsbn/index.js\").BigInteger);\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\");\nvar MAX_CLASS_DEPTH = 3;\nfunction isCompatible(obj, klass, needVer) {\n    if (obj === null || typeof obj !== \"object\") return false;\n    if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;\n    if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return true;\n    var proto = Object.getPrototypeOf(obj);\n    var depth = 0;\n    while(proto.constructor.name !== klass.name){\n        proto = Object.getPrototypeOf(proto);\n        if (!proto || ++depth > MAX_CLASS_DEPTH) return false;\n    }\n    if (proto.constructor.name !== klass.name) return false;\n    var ver = proto._sshpkApiVersion;\n    if (ver === undefined) ver = klass._oldVersionDetect(obj);\n    if (ver[0] != needVer[0] || ver[1] < needVer[1]) return false;\n    return true;\n}\nfunction assertCompatible(obj, klass, needVer, name) {\n    if (name === undefined) name = \"object\";\n    assert.ok(obj, name + \" must not be null\");\n    assert.object(obj, name + \" must be an object\");\n    if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;\n    if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return;\n    var proto = Object.getPrototypeOf(obj);\n    var depth = 0;\n    while(proto.constructor.name !== klass.name){\n        proto = Object.getPrototypeOf(proto);\n        assert.ok(proto && ++depth <= MAX_CLASS_DEPTH, name + \" must be a \" + klass.name + \" instance\");\n    }\n    assert.strictEqual(proto.constructor.name, klass.name, name + \" must be a \" + klass.name + \" instance\");\n    var ver = proto._sshpkApiVersion;\n    if (ver === undefined) ver = klass._oldVersionDetect(obj);\n    assert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1], name + \" must be compatible with \" + klass.name + \" klass \" + \"version \" + needVer[0] + \".\" + needVer[1]);\n}\nvar CIPHER_LEN = {\n    \"des-ede3-cbc\": {\n        key: 24,\n        iv: 8\n    },\n    \"aes-128-cbc\": {\n        key: 16,\n        iv: 16\n    },\n    \"aes-256-cbc\": {\n        key: 32,\n        iv: 16\n    }\n};\nvar PKCS5_SALT_LEN = 8;\nfunction opensslKeyDeriv(cipher, salt, passphrase, count) {\n    assert.buffer(salt, \"salt\");\n    assert.buffer(passphrase, \"passphrase\");\n    assert.number(count, \"iteration count\");\n    var clen = CIPHER_LEN[cipher];\n    assert.object(clen, \"supported cipher\");\n    salt = salt.slice(0, PKCS5_SALT_LEN);\n    var D, D_prev, bufs;\n    var material = Buffer.alloc(0);\n    while(material.length < clen.key + clen.iv){\n        bufs = [];\n        if (D_prev) bufs.push(D_prev);\n        bufs.push(passphrase);\n        bufs.push(salt);\n        D = Buffer.concat(bufs);\n        for(var j = 0; j < count; ++j)D = crypto.createHash(\"md5\").update(D).digest();\n        material = Buffer.concat([\n            material,\n            D\n        ]);\n        D_prev = D;\n    }\n    return {\n        key: material.slice(0, clen.key),\n        iv: material.slice(clen.key, clen.key + clen.iv)\n    };\n}\n/* See: RFC2898 */ function pbkdf2(hashAlg, salt, iterations, size, passphrase) {\n    var hkey = Buffer.alloc(salt.length + 4);\n    salt.copy(hkey);\n    var gen = 0, ts = [];\n    var i = 1;\n    while(gen < size){\n        var t = T(i++);\n        gen += t.length;\n        ts.push(t);\n    }\n    return Buffer.concat(ts).slice(0, size);\n    function T(I) {\n        hkey.writeUInt32BE(I, hkey.length - 4);\n        var hmac = crypto.createHmac(hashAlg, passphrase);\n        hmac.update(hkey);\n        var Ti = hmac.digest();\n        var Uc = Ti;\n        var c = 1;\n        while(c++ < iterations){\n            hmac = crypto.createHmac(hashAlg, passphrase);\n            hmac.update(Uc);\n            Uc = hmac.digest();\n            for(var x = 0; x < Ti.length; ++x)Ti[x] ^= Uc[x];\n        }\n        return Ti;\n    }\n}\n/* Count leading zero bits on a buffer */ function countZeros(buf) {\n    var o = 0, obit = 8;\n    while(o < buf.length){\n        var mask = 1 << obit;\n        if ((buf[o] & mask) === mask) break;\n        obit--;\n        if (obit < 0) {\n            o++;\n            obit = 8;\n        }\n    }\n    return o * 8 + (8 - obit) - 1;\n}\nfunction bufferSplit(buf, chr) {\n    assert.buffer(buf);\n    assert.string(chr);\n    var parts = [];\n    var lastPart = 0;\n    var matches = 0;\n    for(var i = 0; i < buf.length; ++i){\n        if (buf[i] === chr.charCodeAt(matches)) ++matches;\n        else if (buf[i] === chr.charCodeAt(0)) matches = 1;\n        else matches = 0;\n        if (matches >= chr.length) {\n            var newPart = i + 1;\n            parts.push(buf.slice(lastPart, newPart - matches));\n            lastPart = newPart;\n            matches = 0;\n        }\n    }\n    if (lastPart <= buf.length) parts.push(buf.slice(lastPart, buf.length));\n    return parts;\n}\nfunction ecNormalize(buf, addZero) {\n    assert.buffer(buf);\n    if (buf[0] === 0x00 && buf[1] === 0x04) {\n        if (addZero) return buf;\n        return buf.slice(1);\n    } else if (buf[0] === 0x04) {\n        if (!addZero) return buf;\n    } else {\n        while(buf[0] === 0x00)buf = buf.slice(1);\n        if (buf[0] === 0x02 || buf[0] === 0x03) throw new Error(\"Compressed elliptic curve points \" + \"are not supported\");\n        if (buf[0] !== 0x04) throw new Error(\"Not a valid elliptic curve point\");\n        if (!addZero) return buf;\n    }\n    var b = Buffer.alloc(buf.length + 1);\n    b[0] = 0x0;\n    buf.copy(b, 1);\n    return b;\n}\nfunction readBitString(der, tag) {\n    if (tag === undefined) tag = asn1.Ber.BitString;\n    var buf = der.readString(tag, true);\n    assert.strictEqual(buf[0], 0x00, \"bit strings with unused bits are \" + \"not supported (0x\" + buf[0].toString(16) + \")\");\n    return buf.slice(1);\n}\nfunction writeBitString(der, buf, tag) {\n    if (tag === undefined) tag = asn1.Ber.BitString;\n    var b = Buffer.alloc(buf.length + 1);\n    b[0] = 0x00;\n    buf.copy(b, 1);\n    der.writeBuffer(b, tag);\n}\nfunction mpNormalize(buf) {\n    assert.buffer(buf);\n    while(buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)buf = buf.slice(1);\n    if ((buf[0] & 0x80) === 0x80) {\n        var b = Buffer.alloc(buf.length + 1);\n        b[0] = 0x00;\n        buf.copy(b, 1);\n        buf = b;\n    }\n    return buf;\n}\nfunction mpDenormalize(buf) {\n    assert.buffer(buf);\n    while(buf.length > 1 && buf[0] === 0x00)buf = buf.slice(1);\n    return buf;\n}\nfunction zeroPadToLength(buf, len) {\n    assert.buffer(buf);\n    assert.number(len);\n    while(buf.length > len){\n        assert.equal(buf[0], 0x00);\n        buf = buf.slice(1);\n    }\n    while(buf.length < len){\n        var b = Buffer.alloc(buf.length + 1);\n        b[0] = 0x00;\n        buf.copy(b, 1);\n        buf = b;\n    }\n    return buf;\n}\nfunction bigintToMpBuf(bigint) {\n    var buf = Buffer.from(bigint.toByteArray());\n    buf = mpNormalize(buf);\n    return buf;\n}\nfunction calculateDSAPublic(g, p, x) {\n    assert.buffer(g);\n    assert.buffer(p);\n    assert.buffer(x);\n    g = new jsbn(g);\n    p = new jsbn(p);\n    x = new jsbn(x);\n    var y = g.modPow(x, p);\n    var ybuf = bigintToMpBuf(y);\n    return ybuf;\n}\nfunction calculateED25519Public(k) {\n    assert.buffer(k);\n    var kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));\n    return Buffer.from(kp.publicKey);\n}\nfunction calculateX25519Public(k) {\n    assert.buffer(k);\n    var kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));\n    return Buffer.from(kp.publicKey);\n}\nfunction addRSAMissing(key) {\n    assert.object(key);\n    assertCompatible(key, PrivateKey, [\n        1,\n        1\n    ]);\n    var d = new jsbn(key.part.d.data);\n    var buf;\n    if (!key.part.dmodp) {\n        var p = new jsbn(key.part.p.data);\n        var dmodp = d.mod(p.subtract(1));\n        buf = bigintToMpBuf(dmodp);\n        key.part.dmodp = {\n            name: \"dmodp\",\n            data: buf\n        };\n        key.parts.push(key.part.dmodp);\n    }\n    if (!key.part.dmodq) {\n        var q = new jsbn(key.part.q.data);\n        var dmodq = d.mod(q.subtract(1));\n        buf = bigintToMpBuf(dmodq);\n        key.part.dmodq = {\n            name: \"dmodq\",\n            data: buf\n        };\n        key.parts.push(key.part.dmodq);\n    }\n}\nfunction publicFromPrivateECDSA(curveName, priv) {\n    assert.string(curveName, \"curveName\");\n    assert.buffer(priv);\n    var params = algs.curves[curveName];\n    var p = new jsbn(params.p);\n    var a = new jsbn(params.a);\n    var b = new jsbn(params.b);\n    var curve = new ec.ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(params.G.toString(\"hex\"));\n    var d = new jsbn(mpNormalize(priv));\n    var pub = G.multiply(d);\n    pub = Buffer.from(curve.encodePointHex(pub), \"hex\");\n    var parts = [];\n    parts.push({\n        name: \"curve\",\n        data: Buffer.from(curveName)\n    });\n    parts.push({\n        name: \"Q\",\n        data: pub\n    });\n    var key = new Key({\n        type: \"ecdsa\",\n        curve: curve,\n        parts: parts\n    });\n    return key;\n}\nfunction opensshCipherInfo(cipher) {\n    var inf = {};\n    switch(cipher){\n        case \"3des-cbc\":\n            inf.keySize = 24;\n            inf.blockSize = 8;\n            inf.opensslName = \"des-ede3-cbc\";\n            break;\n        case \"blowfish-cbc\":\n            inf.keySize = 16;\n            inf.blockSize = 8;\n            inf.opensslName = \"bf-cbc\";\n            break;\n        case \"aes128-cbc\":\n        case \"aes128-ctr\":\n        case \"aes128-gcm@openssh.com\":\n            inf.keySize = 16;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-128-\" + cipher.slice(7, 10);\n            break;\n        case \"aes192-cbc\":\n        case \"aes192-ctr\":\n        case \"aes192-gcm@openssh.com\":\n            inf.keySize = 24;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-192-\" + cipher.slice(7, 10);\n            break;\n        case \"aes256-cbc\":\n        case \"aes256-ctr\":\n        case \"aes256-gcm@openssh.com\":\n            inf.keySize = 32;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-256-\" + cipher.slice(7, 10);\n            break;\n        default:\n            throw new Error('Unsupported openssl cipher \"' + cipher + '\"');\n    }\n    return inf;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFBTyxJQUFJMkMsTUFDUCxpQ0FBaUNsRCxTQUFTO0lBQy9DO0lBQ0EsT0FBUW1HO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvdXRpbHMuanM/YjJlZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGJ1ZmZlclNwbGl0OiBidWZmZXJTcGxpdCxcblx0YWRkUlNBTWlzc2luZzogYWRkUlNBTWlzc2luZyxcblx0Y2FsY3VsYXRlRFNBUHVibGljOiBjYWxjdWxhdGVEU0FQdWJsaWMsXG5cdGNhbGN1bGF0ZUVEMjU1MTlQdWJsaWM6IGNhbGN1bGF0ZUVEMjU1MTlQdWJsaWMsXG5cdGNhbGN1bGF0ZVgyNTUxOVB1YmxpYzogY2FsY3VsYXRlWDI1NTE5UHVibGljLFxuXHRtcE5vcm1hbGl6ZTogbXBOb3JtYWxpemUsXG5cdG1wRGVub3JtYWxpemU6IG1wRGVub3JtYWxpemUsXG5cdGVjTm9ybWFsaXplOiBlY05vcm1hbGl6ZSxcblx0Y291bnRaZXJvczogY291bnRaZXJvcyxcblx0YXNzZXJ0Q29tcGF0aWJsZTogYXNzZXJ0Q29tcGF0aWJsZSxcblx0aXNDb21wYXRpYmxlOiBpc0NvbXBhdGlibGUsXG5cdG9wZW5zc2xLZXlEZXJpdjogb3BlbnNzbEtleURlcml2LFxuXHRvcGVuc3NoQ2lwaGVySW5mbzogb3BlbnNzaENpcGhlckluZm8sXG5cdHB1YmxpY0Zyb21Qcml2YXRlRUNEU0E6IHB1YmxpY0Zyb21Qcml2YXRlRUNEU0EsXG5cdHplcm9QYWRUb0xlbmd0aDogemVyb1BhZFRvTGVuZ3RoLFxuXHR3cml0ZUJpdFN0cmluZzogd3JpdGVCaXRTdHJpbmcsXG5cdHJlYWRCaXRTdHJpbmc6IHJlYWRCaXRTdHJpbmcsXG5cdHBia2RmMjogcGJrZGYyXG59O1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4vcHJpdmF0ZS1rZXknKTtcbnZhciBLZXkgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuL2FsZ3MnKTtcbnZhciBhc24xID0gcmVxdWlyZSgnYXNuMScpO1xuXG52YXIgZWMgPSByZXF1aXJlKCdlY2MtanNibi9saWIvZWMnKTtcbnZhciBqc2JuID0gcmVxdWlyZSgnanNibicpLkJpZ0ludGVnZXI7XG52YXIgbmFjbCA9IHJlcXVpcmUoJ3R3ZWV0bmFjbCcpO1xuXG52YXIgTUFYX0NMQVNTX0RFUFRIID0gMztcblxuZnVuY3Rpb24gaXNDb21wYXRpYmxlKG9iaiwga2xhc3MsIG5lZWRWZXIpIHtcblx0aWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2YgKG9iaikgIT09ICdvYmplY3QnKVxuXHRcdHJldHVybiAoZmFsc2UpO1xuXHRpZiAobmVlZFZlciA9PT0gdW5kZWZpbmVkKVxuXHRcdG5lZWRWZXIgPSBrbGFzcy5wcm90b3R5cGUuX3NzaHBrQXBpVmVyc2lvbjtcblx0aWYgKG9iaiBpbnN0YW5jZW9mIGtsYXNzICYmXG5cdCAgICBrbGFzcy5wcm90b3R5cGUuX3NzaHBrQXBpVmVyc2lvblswXSA9PSBuZWVkVmVyWzBdKVxuXHRcdHJldHVybiAodHJ1ZSk7XG5cdHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopO1xuXHR2YXIgZGVwdGggPSAwO1xuXHR3aGlsZSAocHJvdG8uY29uc3RydWN0b3IubmFtZSAhPT0ga2xhc3MubmFtZSkge1xuXHRcdHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcblx0XHRpZiAoIXByb3RvIHx8ICsrZGVwdGggPiBNQVhfQ0xBU1NfREVQVEgpXG5cdFx0XHRyZXR1cm4gKGZhbHNlKTtcblx0fVxuXHRpZiAocHJvdG8uY29uc3RydWN0b3IubmFtZSAhPT0ga2xhc3MubmFtZSlcblx0XHRyZXR1cm4gKGZhbHNlKTtcblx0dmFyIHZlciA9IHByb3RvLl9zc2hwa0FwaVZlcnNpb247XG5cdGlmICh2ZXIgPT09IHVuZGVmaW5lZClcblx0XHR2ZXIgPSBrbGFzcy5fb2xkVmVyc2lvbkRldGVjdChvYmopO1xuXHRpZiAodmVyWzBdICE9IG5lZWRWZXJbMF0gfHwgdmVyWzFdIDwgbmVlZFZlclsxXSlcblx0XHRyZXR1cm4gKGZhbHNlKTtcblx0cmV0dXJuICh0cnVlKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Q29tcGF0aWJsZShvYmosIGtsYXNzLCBuZWVkVmVyLCBuYW1lKSB7XG5cdGlmIChuYW1lID09PSB1bmRlZmluZWQpXG5cdFx0bmFtZSA9ICdvYmplY3QnO1xuXHRhc3NlcnQub2sob2JqLCBuYW1lICsgJyBtdXN0IG5vdCBiZSBudWxsJyk7XG5cdGFzc2VydC5vYmplY3Qob2JqLCBuYW1lICsgJyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuXHRpZiAobmVlZFZlciA9PT0gdW5kZWZpbmVkKVxuXHRcdG5lZWRWZXIgPSBrbGFzcy5wcm90b3R5cGUuX3NzaHBrQXBpVmVyc2lvbjtcblx0aWYgKG9iaiBpbnN0YW5jZW9mIGtsYXNzICYmXG5cdCAgICBrbGFzcy5wcm90b3R5cGUuX3NzaHBrQXBpVmVyc2lvblswXSA9PSBuZWVkVmVyWzBdKVxuXHRcdHJldHVybjtcblx0dmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XG5cdHZhciBkZXB0aCA9IDA7XG5cdHdoaWxlIChwcm90by5jb25zdHJ1Y3Rvci5uYW1lICE9PSBrbGFzcy5uYW1lKSB7XG5cdFx0cHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuXHRcdGFzc2VydC5vayhwcm90byAmJiArK2RlcHRoIDw9IE1BWF9DTEFTU19ERVBUSCxcblx0XHQgICAgbmFtZSArICcgbXVzdCBiZSBhICcgKyBrbGFzcy5uYW1lICsgJyBpbnN0YW5jZScpO1xuXHR9XG5cdGFzc2VydC5zdHJpY3RFcXVhbChwcm90by5jb25zdHJ1Y3Rvci5uYW1lLCBrbGFzcy5uYW1lLFxuXHQgICAgbmFtZSArICcgbXVzdCBiZSBhICcgKyBrbGFzcy5uYW1lICsgJyBpbnN0YW5jZScpO1xuXHR2YXIgdmVyID0gcHJvdG8uX3NzaHBrQXBpVmVyc2lvbjtcblx0aWYgKHZlciA9PT0gdW5kZWZpbmVkKVxuXHRcdHZlciA9IGtsYXNzLl9vbGRWZXJzaW9uRGV0ZWN0KG9iaik7XG5cdGFzc2VydC5vayh2ZXJbMF0gPT0gbmVlZFZlclswXSAmJiB2ZXJbMV0gPj0gbmVlZFZlclsxXSxcblx0ICAgIG5hbWUgKyAnIG11c3QgYmUgY29tcGF0aWJsZSB3aXRoICcgKyBrbGFzcy5uYW1lICsgJyBrbGFzcyAnICtcblx0ICAgICd2ZXJzaW9uICcgKyBuZWVkVmVyWzBdICsgJy4nICsgbmVlZFZlclsxXSk7XG59XG5cbnZhciBDSVBIRVJfTEVOID0ge1xuXHQnZGVzLWVkZTMtY2JjJzogeyBrZXk6IDI0LCBpdjogOCB9LFxuXHQnYWVzLTEyOC1jYmMnOiB7IGtleTogMTYsIGl2OiAxNiB9LFxuXHQnYWVzLTI1Ni1jYmMnOiB7IGtleTogMzIsIGl2OiAxNiB9XG59O1xudmFyIFBLQ1M1X1NBTFRfTEVOID0gODtcblxuZnVuY3Rpb24gb3BlbnNzbEtleURlcml2KGNpcGhlciwgc2FsdCwgcGFzc3BocmFzZSwgY291bnQpIHtcblx0YXNzZXJ0LmJ1ZmZlcihzYWx0LCAnc2FsdCcpO1xuXHRhc3NlcnQuYnVmZmVyKHBhc3NwaHJhc2UsICdwYXNzcGhyYXNlJyk7XG5cdGFzc2VydC5udW1iZXIoY291bnQsICdpdGVyYXRpb24gY291bnQnKTtcblxuXHR2YXIgY2xlbiA9IENJUEhFUl9MRU5bY2lwaGVyXTtcblx0YXNzZXJ0Lm9iamVjdChjbGVuLCAnc3VwcG9ydGVkIGNpcGhlcicpO1xuXG5cdHNhbHQgPSBzYWx0LnNsaWNlKDAsIFBLQ1M1X1NBTFRfTEVOKTtcblxuXHR2YXIgRCwgRF9wcmV2LCBidWZzO1xuXHR2YXIgbWF0ZXJpYWwgPSBCdWZmZXIuYWxsb2MoMCk7XG5cdHdoaWxlIChtYXRlcmlhbC5sZW5ndGggPCBjbGVuLmtleSArIGNsZW4uaXYpIHtcblx0XHRidWZzID0gW107XG5cdFx0aWYgKERfcHJldilcblx0XHRcdGJ1ZnMucHVzaChEX3ByZXYpO1xuXHRcdGJ1ZnMucHVzaChwYXNzcGhyYXNlKTtcblx0XHRidWZzLnB1c2goc2FsdCk7XG5cdFx0RCA9IEJ1ZmZlci5jb25jYXQoYnVmcyk7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjb3VudDsgKytqKVxuXHRcdFx0RCA9IGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoRCkuZGlnZXN0KCk7XG5cdFx0bWF0ZXJpYWwgPSBCdWZmZXIuY29uY2F0KFttYXRlcmlhbCwgRF0pO1xuXHRcdERfcHJldiA9IEQ7XG5cdH1cblxuXHRyZXR1cm4gKHtcblx0ICAgIGtleTogbWF0ZXJpYWwuc2xpY2UoMCwgY2xlbi5rZXkpLFxuXHQgICAgaXY6IG1hdGVyaWFsLnNsaWNlKGNsZW4ua2V5LCBjbGVuLmtleSArIGNsZW4uaXYpXG5cdH0pO1xufVxuXG4vKiBTZWU6IFJGQzI4OTggKi9cbmZ1bmN0aW9uIHBia2RmMihoYXNoQWxnLCBzYWx0LCBpdGVyYXRpb25zLCBzaXplLCBwYXNzcGhyYXNlKSB7XG5cdHZhciBoa2V5ID0gQnVmZmVyLmFsbG9jKHNhbHQubGVuZ3RoICsgNCk7XG5cdHNhbHQuY29weShoa2V5KTtcblxuXHR2YXIgZ2VuID0gMCwgdHMgPSBbXTtcblx0dmFyIGkgPSAxO1xuXHR3aGlsZSAoZ2VuIDwgc2l6ZSkge1xuXHRcdHZhciB0ID0gVChpKyspO1xuXHRcdGdlbiArPSB0Lmxlbmd0aDtcblx0XHR0cy5wdXNoKHQpO1xuXHR9XG5cdHJldHVybiAoQnVmZmVyLmNvbmNhdCh0cykuc2xpY2UoMCwgc2l6ZSkpO1xuXG5cdGZ1bmN0aW9uIFQoSSkge1xuXHRcdGhrZXkud3JpdGVVSW50MzJCRShJLCBoa2V5Lmxlbmd0aCAtIDQpO1xuXG5cdFx0dmFyIGhtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYyhoYXNoQWxnLCBwYXNzcGhyYXNlKTtcblx0XHRobWFjLnVwZGF0ZShoa2V5KTtcblxuXHRcdHZhciBUaSA9IGhtYWMuZGlnZXN0KCk7XG5cdFx0dmFyIFVjID0gVGk7XG5cdFx0dmFyIGMgPSAxO1xuXHRcdHdoaWxlIChjKysgPCBpdGVyYXRpb25zKSB7XG5cdFx0XHRobWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoaGFzaEFsZywgcGFzc3BocmFzZSk7XG5cdFx0XHRobWFjLnVwZGF0ZShVYyk7XG5cdFx0XHRVYyA9IGhtYWMuZGlnZXN0KCk7XG5cdFx0XHRmb3IgKHZhciB4ID0gMDsgeCA8IFRpLmxlbmd0aDsgKyt4KVxuXHRcdFx0XHRUaVt4XSBePSBVY1t4XTtcblx0XHR9XG5cdFx0cmV0dXJuIChUaSk7XG5cdH1cbn1cblxuLyogQ291bnQgbGVhZGluZyB6ZXJvIGJpdHMgb24gYSBidWZmZXIgKi9cbmZ1bmN0aW9uIGNvdW50WmVyb3MoYnVmKSB7XG5cdHZhciBvID0gMCwgb2JpdCA9IDg7XG5cdHdoaWxlIChvIDwgYnVmLmxlbmd0aCkge1xuXHRcdHZhciBtYXNrID0gKDEgPDwgb2JpdCk7XG5cdFx0aWYgKChidWZbb10gJiBtYXNrKSA9PT0gbWFzaylcblx0XHRcdGJyZWFrO1xuXHRcdG9iaXQtLTtcblx0XHRpZiAob2JpdCA8IDApIHtcblx0XHRcdG8rKztcblx0XHRcdG9iaXQgPSA4O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gKG8qOCArICg4IC0gb2JpdCkgLSAxKTtcbn1cblxuZnVuY3Rpb24gYnVmZmVyU3BsaXQoYnVmLCBjaHIpIHtcblx0YXNzZXJ0LmJ1ZmZlcihidWYpO1xuXHRhc3NlcnQuc3RyaW5nKGNocik7XG5cblx0dmFyIHBhcnRzID0gW107XG5cdHZhciBsYXN0UGFydCA9IDA7XG5cdHZhciBtYXRjaGVzID0gMDtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyArK2kpIHtcblx0XHRpZiAoYnVmW2ldID09PSBjaHIuY2hhckNvZGVBdChtYXRjaGVzKSlcblx0XHRcdCsrbWF0Y2hlcztcblx0XHRlbHNlIGlmIChidWZbaV0gPT09IGNoci5jaGFyQ29kZUF0KDApKVxuXHRcdFx0bWF0Y2hlcyA9IDE7XG5cdFx0ZWxzZVxuXHRcdFx0bWF0Y2hlcyA9IDA7XG5cblx0XHRpZiAobWF0Y2hlcyA+PSBjaHIubGVuZ3RoKSB7XG5cdFx0XHR2YXIgbmV3UGFydCA9IGkgKyAxO1xuXHRcdFx0cGFydHMucHVzaChidWYuc2xpY2UobGFzdFBhcnQsIG5ld1BhcnQgLSBtYXRjaGVzKSk7XG5cdFx0XHRsYXN0UGFydCA9IG5ld1BhcnQ7XG5cdFx0XHRtYXRjaGVzID0gMDtcblx0XHR9XG5cdH1cblx0aWYgKGxhc3RQYXJ0IDw9IGJ1Zi5sZW5ndGgpXG5cdFx0cGFydHMucHVzaChidWYuc2xpY2UobGFzdFBhcnQsIGJ1Zi5sZW5ndGgpKTtcblxuXHRyZXR1cm4gKHBhcnRzKTtcbn1cblxuZnVuY3Rpb24gZWNOb3JtYWxpemUoYnVmLCBhZGRaZXJvKSB7XG5cdGFzc2VydC5idWZmZXIoYnVmKTtcblx0aWYgKGJ1ZlswXSA9PT0gMHgwMCAmJiBidWZbMV0gPT09IDB4MDQpIHtcblx0XHRpZiAoYWRkWmVybylcblx0XHRcdHJldHVybiAoYnVmKTtcblx0XHRyZXR1cm4gKGJ1Zi5zbGljZSgxKSk7XG5cdH0gZWxzZSBpZiAoYnVmWzBdID09PSAweDA0KSB7XG5cdFx0aWYgKCFhZGRaZXJvKVxuXHRcdFx0cmV0dXJuIChidWYpO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlIChidWZbMF0gPT09IDB4MDApXG5cdFx0XHRidWYgPSBidWYuc2xpY2UoMSk7XG5cdFx0aWYgKGJ1ZlswXSA9PT0gMHgwMiB8fCBidWZbMF0gPT09IDB4MDMpXG5cdFx0XHR0aHJvdyAobmV3IEVycm9yKCdDb21wcmVzc2VkIGVsbGlwdGljIGN1cnZlIHBvaW50cyAnICtcblx0XHRcdCAgICAnYXJlIG5vdCBzdXBwb3J0ZWQnKSk7XG5cdFx0aWYgKGJ1ZlswXSAhPT0gMHgwNClcblx0XHRcdHRocm93IChuZXcgRXJyb3IoJ05vdCBhIHZhbGlkIGVsbGlwdGljIGN1cnZlIHBvaW50JykpO1xuXHRcdGlmICghYWRkWmVybylcblx0XHRcdHJldHVybiAoYnVmKTtcblx0fVxuXHR2YXIgYiA9IEJ1ZmZlci5hbGxvYyhidWYubGVuZ3RoICsgMSk7XG5cdGJbMF0gPSAweDA7XG5cdGJ1Zi5jb3B5KGIsIDEpO1xuXHRyZXR1cm4gKGIpO1xufVxuXG5mdW5jdGlvbiByZWFkQml0U3RyaW5nKGRlciwgdGFnKSB7XG5cdGlmICh0YWcgPT09IHVuZGVmaW5lZClcblx0XHR0YWcgPSBhc24xLkJlci5CaXRTdHJpbmc7XG5cdHZhciBidWYgPSBkZXIucmVhZFN0cmluZyh0YWcsIHRydWUpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwoYnVmWzBdLCAweDAwLCAnYml0IHN0cmluZ3Mgd2l0aCB1bnVzZWQgYml0cyBhcmUgJyArXG5cdCAgICAnbm90IHN1cHBvcnRlZCAoMHgnICsgYnVmWzBdLnRvU3RyaW5nKDE2KSArICcpJyk7XG5cdHJldHVybiAoYnVmLnNsaWNlKDEpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVCaXRTdHJpbmcoZGVyLCBidWYsIHRhZykge1xuXHRpZiAodGFnID09PSB1bmRlZmluZWQpXG5cdFx0dGFnID0gYXNuMS5CZXIuQml0U3RyaW5nO1xuXHR2YXIgYiA9IEJ1ZmZlci5hbGxvYyhidWYubGVuZ3RoICsgMSk7XG5cdGJbMF0gPSAweDAwO1xuXHRidWYuY29weShiLCAxKTtcblx0ZGVyLndyaXRlQnVmZmVyKGIsIHRhZyk7XG59XG5cbmZ1bmN0aW9uIG1wTm9ybWFsaXplKGJ1Zikge1xuXHRhc3NlcnQuYnVmZmVyKGJ1Zik7XG5cdHdoaWxlIChidWYubGVuZ3RoID4gMSAmJiBidWZbMF0gPT09IDB4MDAgJiYgKGJ1ZlsxXSAmIDB4ODApID09PSAweDAwKVxuXHRcdGJ1ZiA9IGJ1Zi5zbGljZSgxKTtcblx0aWYgKChidWZbMF0gJiAweDgwKSA9PT0gMHg4MCkge1xuXHRcdHZhciBiID0gQnVmZmVyLmFsbG9jKGJ1Zi5sZW5ndGggKyAxKTtcblx0XHRiWzBdID0gMHgwMDtcblx0XHRidWYuY29weShiLCAxKTtcblx0XHRidWYgPSBiO1xuXHR9XG5cdHJldHVybiAoYnVmKTtcbn1cblxuZnVuY3Rpb24gbXBEZW5vcm1hbGl6ZShidWYpIHtcblx0YXNzZXJ0LmJ1ZmZlcihidWYpO1xuXHR3aGlsZSAoYnVmLmxlbmd0aCA+IDEgJiYgYnVmWzBdID09PSAweDAwKVxuXHRcdGJ1ZiA9IGJ1Zi5zbGljZSgxKTtcblx0cmV0dXJuIChidWYpO1xufVxuXG5mdW5jdGlvbiB6ZXJvUGFkVG9MZW5ndGgoYnVmLCBsZW4pIHtcblx0YXNzZXJ0LmJ1ZmZlcihidWYpO1xuXHRhc3NlcnQubnVtYmVyKGxlbik7XG5cdHdoaWxlIChidWYubGVuZ3RoID4gbGVuKSB7XG5cdFx0YXNzZXJ0LmVxdWFsKGJ1ZlswXSwgMHgwMCk7XG5cdFx0YnVmID0gYnVmLnNsaWNlKDEpO1xuXHR9XG5cdHdoaWxlIChidWYubGVuZ3RoIDwgbGVuKSB7XG5cdFx0dmFyIGIgPSBCdWZmZXIuYWxsb2MoYnVmLmxlbmd0aCArIDEpO1xuXHRcdGJbMF0gPSAweDAwO1xuXHRcdGJ1Zi5jb3B5KGIsIDEpO1xuXHRcdGJ1ZiA9IGI7XG5cdH1cblx0cmV0dXJuIChidWYpO1xufVxuXG5mdW5jdGlvbiBiaWdpbnRUb01wQnVmKGJpZ2ludCkge1xuXHR2YXIgYnVmID0gQnVmZmVyLmZyb20oYmlnaW50LnRvQnl0ZUFycmF5KCkpO1xuXHRidWYgPSBtcE5vcm1hbGl6ZShidWYpO1xuXHRyZXR1cm4gKGJ1Zik7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZURTQVB1YmxpYyhnLCBwLCB4KSB7XG5cdGFzc2VydC5idWZmZXIoZyk7XG5cdGFzc2VydC5idWZmZXIocCk7XG5cdGFzc2VydC5idWZmZXIoeCk7XG5cdGcgPSBuZXcganNibihnKTtcblx0cCA9IG5ldyBqc2JuKHApO1xuXHR4ID0gbmV3IGpzYm4oeCk7XG5cdHZhciB5ID0gZy5tb2RQb3coeCwgcCk7XG5cdHZhciB5YnVmID0gYmlnaW50VG9NcEJ1Zih5KTtcblx0cmV0dXJuICh5YnVmKTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRUQyNTUxOVB1YmxpYyhrKSB7XG5cdGFzc2VydC5idWZmZXIoayk7XG5cblx0dmFyIGtwID0gbmFjbC5zaWduLmtleVBhaXIuZnJvbVNlZWQobmV3IFVpbnQ4QXJyYXkoaykpO1xuXHRyZXR1cm4gKEJ1ZmZlci5mcm9tKGtwLnB1YmxpY0tleSkpO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVYMjU1MTlQdWJsaWMoaykge1xuXHRhc3NlcnQuYnVmZmVyKGspO1xuXG5cdHZhciBrcCA9IG5hY2wuYm94LmtleVBhaXIuZnJvbVNlZWQobmV3IFVpbnQ4QXJyYXkoaykpO1xuXHRyZXR1cm4gKEJ1ZmZlci5mcm9tKGtwLnB1YmxpY0tleSkpO1xufVxuXG5mdW5jdGlvbiBhZGRSU0FNaXNzaW5nKGtleSkge1xuXHRhc3NlcnQub2JqZWN0KGtleSk7XG5cdGFzc2VydENvbXBhdGlibGUoa2V5LCBQcml2YXRlS2V5LCBbMSwgMV0pO1xuXG5cdHZhciBkID0gbmV3IGpzYm4oa2V5LnBhcnQuZC5kYXRhKTtcblx0dmFyIGJ1ZjtcblxuXHRpZiAoIWtleS5wYXJ0LmRtb2RwKSB7XG5cdFx0dmFyIHAgPSBuZXcganNibihrZXkucGFydC5wLmRhdGEpO1xuXHRcdHZhciBkbW9kcCA9IGQubW9kKHAuc3VidHJhY3QoMSkpO1xuXG5cdFx0YnVmID0gYmlnaW50VG9NcEJ1ZihkbW9kcCk7XG5cdFx0a2V5LnBhcnQuZG1vZHAgPSB7bmFtZTogJ2Rtb2RwJywgZGF0YTogYnVmfTtcblx0XHRrZXkucGFydHMucHVzaChrZXkucGFydC5kbW9kcCk7XG5cdH1cblx0aWYgKCFrZXkucGFydC5kbW9kcSkge1xuXHRcdHZhciBxID0gbmV3IGpzYm4oa2V5LnBhcnQucS5kYXRhKTtcblx0XHR2YXIgZG1vZHEgPSBkLm1vZChxLnN1YnRyYWN0KDEpKTtcblxuXHRcdGJ1ZiA9IGJpZ2ludFRvTXBCdWYoZG1vZHEpO1xuXHRcdGtleS5wYXJ0LmRtb2RxID0ge25hbWU6ICdkbW9kcScsIGRhdGE6IGJ1Zn07XG5cdFx0a2V5LnBhcnRzLnB1c2goa2V5LnBhcnQuZG1vZHEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHB1YmxpY0Zyb21Qcml2YXRlRUNEU0EoY3VydmVOYW1lLCBwcml2KSB7XG5cdGFzc2VydC5zdHJpbmcoY3VydmVOYW1lLCAnY3VydmVOYW1lJyk7XG5cdGFzc2VydC5idWZmZXIocHJpdik7XG5cdHZhciBwYXJhbXMgPSBhbGdzLmN1cnZlc1tjdXJ2ZU5hbWVdO1xuXHR2YXIgcCA9IG5ldyBqc2JuKHBhcmFtcy5wKTtcblx0dmFyIGEgPSBuZXcganNibihwYXJhbXMuYSk7XG5cdHZhciBiID0gbmV3IGpzYm4ocGFyYW1zLmIpO1xuXHR2YXIgY3VydmUgPSBuZXcgZWMuRUNDdXJ2ZUZwKHAsIGEsIGIpO1xuXHR2YXIgRyA9IGN1cnZlLmRlY29kZVBvaW50SGV4KHBhcmFtcy5HLnRvU3RyaW5nKCdoZXgnKSk7XG5cblx0dmFyIGQgPSBuZXcganNibihtcE5vcm1hbGl6ZShwcml2KSk7XG5cdHZhciBwdWIgPSBHLm11bHRpcGx5KGQpO1xuXHRwdWIgPSBCdWZmZXIuZnJvbShjdXJ2ZS5lbmNvZGVQb2ludEhleChwdWIpLCAnaGV4Jyk7XG5cblx0dmFyIHBhcnRzID0gW107XG5cdHBhcnRzLnB1c2goe25hbWU6ICdjdXJ2ZScsIGRhdGE6IEJ1ZmZlci5mcm9tKGN1cnZlTmFtZSl9KTtcblx0cGFydHMucHVzaCh7bmFtZTogJ1EnLCBkYXRhOiBwdWJ9KTtcblxuXHR2YXIga2V5ID0gbmV3IEtleSh7dHlwZTogJ2VjZHNhJywgY3VydmU6IGN1cnZlLCBwYXJ0czogcGFydHN9KTtcblx0cmV0dXJuIChrZXkpO1xufVxuXG5mdW5jdGlvbiBvcGVuc3NoQ2lwaGVySW5mbyhjaXBoZXIpIHtcblx0dmFyIGluZiA9IHt9O1xuXHRzd2l0Y2ggKGNpcGhlcikge1xuXHRjYXNlICczZGVzLWNiYyc6XG5cdFx0aW5mLmtleVNpemUgPSAyNDtcblx0XHRpbmYuYmxvY2tTaXplID0gODtcblx0XHRpbmYub3BlbnNzbE5hbWUgPSAnZGVzLWVkZTMtY2JjJztcblx0XHRicmVhaztcblx0Y2FzZSAnYmxvd2Zpc2gtY2JjJzpcblx0XHRpbmYua2V5U2l6ZSA9IDE2O1xuXHRcdGluZi5ibG9ja1NpemUgPSA4O1xuXHRcdGluZi5vcGVuc3NsTmFtZSA9ICdiZi1jYmMnO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdhZXMxMjgtY2JjJzpcblx0Y2FzZSAnYWVzMTI4LWN0cic6XG5cdGNhc2UgJ2FlczEyOC1nY21Ab3BlbnNzaC5jb20nOlxuXHRcdGluZi5rZXlTaXplID0gMTY7XG5cdFx0aW5mLmJsb2NrU2l6ZSA9IDE2O1xuXHRcdGluZi5vcGVuc3NsTmFtZSA9ICdhZXMtMTI4LScgKyBjaXBoZXIuc2xpY2UoNywgMTApO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdhZXMxOTItY2JjJzpcblx0Y2FzZSAnYWVzMTkyLWN0cic6XG5cdGNhc2UgJ2FlczE5Mi1nY21Ab3BlbnNzaC5jb20nOlxuXHRcdGluZi5rZXlTaXplID0gMjQ7XG5cdFx0aW5mLmJsb2NrU2l6ZSA9IDE2O1xuXHRcdGluZi5vcGVuc3NsTmFtZSA9ICdhZXMtMTkyLScgKyBjaXBoZXIuc2xpY2UoNywgMTApO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdhZXMyNTYtY2JjJzpcblx0Y2FzZSAnYWVzMjU2LWN0cic6XG5cdGNhc2UgJ2FlczI1Ni1nY21Ab3BlbnNzaC5jb20nOlxuXHRcdGluZi5rZXlTaXplID0gMzI7XG5cdFx0aW5mLmJsb2NrU2l6ZSA9IDE2O1xuXHRcdGluZi5vcGVuc3NsTmFtZSA9ICdhZXMtMjU2LScgKyBjaXBoZXIuc2xpY2UoNywgMTApO1xuXHRcdGJyZWFrO1xuXHRkZWZhdWx0OlxuXHRcdHRocm93IChuZXcgRXJyb3IoXG5cdFx0ICAgICdVbnN1cHBvcnRlZCBvcGVuc3NsIGNpcGhlciBcIicgKyBjaXBoZXIgKyAnXCInKSk7XG5cdH1cblx0cmV0dXJuIChpbmYpO1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJidWZmZXJTcGxpdCIsImFkZFJTQU1pc3NpbmciLCJjYWxjdWxhdGVEU0FQdWJsaWMiLCJjYWxjdWxhdGVFRDI1NTE5UHVibGljIiwiY2FsY3VsYXRlWDI1NTE5UHVibGljIiwibXBOb3JtYWxpemUiLCJtcERlbm9ybWFsaXplIiwiZWNOb3JtYWxpemUiLCJjb3VudFplcm9zIiwiYXNzZXJ0Q29tcGF0aWJsZSIsImlzQ29tcGF0aWJsZSIsIm9wZW5zc2xLZXlEZXJpdiIsIm9wZW5zc2hDaXBoZXJJbmZvIiwicHVibGljRnJvbVByaXZhdGVFQ0RTQSIsInplcm9QYWRUb0xlbmd0aCIsIndyaXRlQml0U3RyaW5nIiwicmVhZEJpdFN0cmluZyIsInBia2RmMiIsImFzc2VydCIsInJlcXVpcmUiLCJCdWZmZXIiLCJQcml2YXRlS2V5IiwiS2V5IiwiY3J5cHRvIiwiYWxncyIsImFzbjEiLCJlYyIsImpzYm4iLCJCaWdJbnRlZ2VyIiwibmFjbCIsIk1BWF9DTEFTU19ERVBUSCIsIm9iaiIsImtsYXNzIiwibmVlZFZlciIsInVuZGVmaW5lZCIsInByb3RvdHlwZSIsIl9zc2hwa0FwaVZlcnNpb24iLCJwcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiZGVwdGgiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ2ZXIiLCJfb2xkVmVyc2lvbkRldGVjdCIsIm9rIiwib2JqZWN0Iiwic3RyaWN0RXF1YWwiLCJDSVBIRVJfTEVOIiwia2V5IiwiaXYiLCJQS0NTNV9TQUxUX0xFTiIsImNpcGhlciIsInNhbHQiLCJwYXNzcGhyYXNlIiwiY291bnQiLCJidWZmZXIiLCJudW1iZXIiLCJjbGVuIiwic2xpY2UiLCJEIiwiRF9wcmV2IiwiYnVmcyIsIm1hdGVyaWFsIiwiYWxsb2MiLCJsZW5ndGgiLCJwdXNoIiwiY29uY2F0IiwiaiIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJoYXNoQWxnIiwiaXRlcmF0aW9ucyIsInNpemUiLCJoa2V5IiwiY29weSIsImdlbiIsInRzIiwiaSIsInQiLCJUIiwiSSIsIndyaXRlVUludDMyQkUiLCJobWFjIiwiY3JlYXRlSG1hYyIsIlRpIiwiVWMiLCJjIiwieCIsImJ1ZiIsIm8iLCJvYml0IiwibWFzayIsImNociIsInN0cmluZyIsInBhcnRzIiwibGFzdFBhcnQiLCJtYXRjaGVzIiwiY2hhckNvZGVBdCIsIm5ld1BhcnQiLCJhZGRaZXJvIiwiRXJyb3IiLCJiIiwiZGVyIiwidGFnIiwiQmVyIiwiQml0U3RyaW5nIiwicmVhZFN0cmluZyIsInRvU3RyaW5nIiwid3JpdGVCdWZmZXIiLCJsZW4iLCJlcXVhbCIsImJpZ2ludFRvTXBCdWYiLCJiaWdpbnQiLCJmcm9tIiwidG9CeXRlQXJyYXkiLCJnIiwicCIsInkiLCJtb2RQb3ciLCJ5YnVmIiwiayIsImtwIiwic2lnbiIsImtleVBhaXIiLCJmcm9tU2VlZCIsIlVpbnQ4QXJyYXkiLCJwdWJsaWNLZXkiLCJib3giLCJkIiwicGFydCIsImRhdGEiLCJkbW9kcCIsIm1vZCIsInN1YnRyYWN0IiwiZG1vZHEiLCJxIiwiY3VydmVOYW1lIiwicHJpdiIsInBhcmFtcyIsImN1cnZlcyIsImEiLCJjdXJ2ZSIsIkVDQ3VydmVGcCIsIkciLCJkZWNvZGVQb2ludEhleCIsInB1YiIsIm11bHRpcGx5IiwiZW5jb2RlUG9pbnRIZXgiLCJ0eXBlIiwiaW5mIiwia2V5U2l6ZSIsImJsb2NrU2l6ZSIsIm9wZW5zc2xOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sshpk/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/algs.js":
/*!****************************************!*\
  !*** ./node_modules/sshpk/lib/algs.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algInfo = {\n    \"dsa\": {\n        parts: [\n            \"p\",\n            \"q\",\n            \"g\",\n            \"y\"\n        ],\n        sizePart: \"p\"\n    },\n    \"rsa\": {\n        parts: [\n            \"e\",\n            \"n\"\n        ],\n        sizePart: \"n\"\n    },\n    \"ecdsa\": {\n        parts: [\n            \"curve\",\n            \"Q\"\n        ],\n        sizePart: \"Q\"\n    },\n    \"ed25519\": {\n        parts: [\n            \"A\"\n        ],\n        sizePart: \"A\"\n    }\n};\nalgInfo[\"curve25519\"] = algInfo[\"ed25519\"];\nvar algPrivInfo = {\n    \"dsa\": {\n        parts: [\n            \"p\",\n            \"q\",\n            \"g\",\n            \"y\",\n            \"x\"\n        ]\n    },\n    \"rsa\": {\n        parts: [\n            \"n\",\n            \"e\",\n            \"d\",\n            \"iqmp\",\n            \"p\",\n            \"q\"\n        ]\n    },\n    \"ecdsa\": {\n        parts: [\n            \"curve\",\n            \"Q\",\n            \"d\"\n        ]\n    },\n    \"ed25519\": {\n        parts: [\n            \"A\",\n            \"k\"\n        ]\n    }\n};\nalgPrivInfo[\"curve25519\"] = algPrivInfo[\"ed25519\"];\nvar hashAlgs = {\n    \"md5\": true,\n    \"sha1\": true,\n    \"sha256\": true,\n    \"sha384\": true,\n    \"sha512\": true\n};\n/*\n * Taken from\n * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf\n */ var curves = {\n    \"nistp256\": {\n        size: 256,\n        pkcs8oid: \"1.2.840.10045.3.1.7\",\n        p: Buffer.from((\"00\" + \"ffffffff 00000001 00000000 00000000\" + \"00000000 ffffffff ffffffff ffffffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"00\" + \"FFFFFFFF 00000001 00000000 00000000\" + \"00000000 FFFFFFFF FFFFFFFF FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"5ac635d8 aa3a93e7 b3ebbd55 769886bc\" + \"651d06b0 cc53b0f6 3bce3c3e 27d2604b\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"c49d3608 86e70493 6a6678e1 139d26b7\" + \"819f7e90\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"00\" + \"ffffffff 00000000 ffffffff ffffffff\" + \"bce6faad a7179e84 f3b9cac2 fc632551\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"6b17d1f2 e12c4247 f8bce6e5 63a440f2\" + \"77037d81 2deb33a0 f4a13945 d898c296\" + \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16\" + \"2bce3357 6b315ece cbb64068 37bf51f5\").replace(/ /g, \"\"), \"hex\")\n    },\n    \"nistp384\": {\n        size: 384,\n        pkcs8oid: \"1.3.132.0.34\",\n        p: Buffer.from((\"00\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff fffffffe\" + \"ffffffff 00000000 00000000 ffffffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"00\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE\" + \"FFFFFFFF 00000000 00000000 FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"b3312fa7 e23ee7e4 988e056b e3f82d19\" + \"181d9c6e fe814112 0314088f 5013875a\" + \"c656398d 8a2ed19d 2a85c8ed d3ec2aef\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"a335926a a319a27a 1d00896a 6773a482\" + \"7acdac73\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"00\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff c7634d81 f4372ddf\" + \"581a0db2 48b0a77a ecec196a ccc52973\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"aa87ca22 be8b0537 8eb1c71e f320ad74\" + \"6e1d3b62 8ba79b98 59f741e0 82542a38\" + \"5502f25d bf55296c 3a545e38 72760ab7\" + \"3617de4a 96262c6f 5d9e98bf 9292dc29\" + \"f8f41dbd 289a147c e9da3113 b5f0b8c0\" + \"0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\").replace(/ /g, \"\"), \"hex\")\n    },\n    \"nistp521\": {\n        size: 521,\n        pkcs8oid: \"1.3.132.0.35\",\n        p: Buffer.from((\"01ffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"01FF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"51\" + \"953eb961 8e1c9a1f 929a21a0 b68540ee\" + \"a2da725b 99b315f3 b8b48991 8ef109e1\" + \"56193951 ec7e937b 1652c0bd 3bb1bf07\" + \"3573df88 3d2c34f1 ef451fd4 6b503f00\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"d09e8800 291cb853 96cc6717 393284aa\" + \"a0da64ba\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"01ff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff fffffffa\" + \"51868783 bf2f966b 7fcc0148 f709a5d0\" + \"3bb5c9b8 899c47ae bb6fb71e 91386409\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"00c6 858e06b7 0404e9cd 9e3ecb66 2395b442\" + \"9c648139 053fb521 f828af60 6b4d3dba\" + \"a14b5e77 efe75928 fe1dc127 a2ffa8de\" + \"3348b3c1 856a429b f97e7e31 c2e5bd66\" + \"0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9\" + \"98f54449 579b4468 17afbd17 273e662c\" + \"97ee7299 5ef42640 c550b901 3fad0761\" + \"353c7086 a272c240 88be9476 9fd16650\").replace(/ /g, \"\"), \"hex\")\n    }\n};\nmodule.exports = {\n    info: algInfo,\n    privInfo: algPrivInfo,\n    hashAlgs: hashAlgs,\n    curves: curves\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/algs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/certificate.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/certificate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2016 Joyent, Inc.\n\nmodule.exports = Certificate;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Identity = __webpack_require__(/*! ./identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar formats = {};\nformats[\"openssh\"] = __webpack_require__(/*! ./formats/openssh-cert */ \"(rsc)/./node_modules/sshpk/lib/formats/openssh-cert.js\");\nformats[\"x509\"] = __webpack_require__(/*! ./formats/x509 */ \"(rsc)/./node_modules/sshpk/lib/formats/x509.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/x509-pem */ \"(rsc)/./node_modules/sshpk/lib/formats/x509-pem.js\");\nvar CertificateParseError = errs.CertificateParseError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nfunction Certificate(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.subjects, \"options.subjects\");\n    utils.assertCompatible(opts.subjects[0], Identity, [\n        1,\n        0\n    ], \"options.subjects\");\n    utils.assertCompatible(opts.subjectKey, Key, [\n        1,\n        0\n    ], \"options.subjectKey\");\n    utils.assertCompatible(opts.issuer, Identity, [\n        1,\n        0\n    ], \"options.issuer\");\n    if (opts.issuerKey !== undefined) {\n        utils.assertCompatible(opts.issuerKey, Key, [\n            1,\n            0\n        ], \"options.issuerKey\");\n    }\n    assert.object(opts.signatures, \"options.signatures\");\n    assert.buffer(opts.serial, \"options.serial\");\n    assert.date(opts.validFrom, \"options.validFrom\");\n    assert.date(opts.validUntil, \"optons.validUntil\");\n    assert.optionalArrayOfString(opts.purposes, \"options.purposes\");\n    this._hashCache = {};\n    this.subjects = opts.subjects;\n    this.issuer = opts.issuer;\n    this.subjectKey = opts.subjectKey;\n    this.issuerKey = opts.issuerKey;\n    this.signatures = opts.signatures;\n    this.serial = opts.serial;\n    this.validFrom = opts.validFrom;\n    this.validUntil = opts.validUntil;\n    this.purposes = opts.purposes;\n}\nCertificate.formats = formats;\nCertificate.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"x509\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    return formats[format].write(this, options);\n};\nCertificate.prototype.toString = function(format, options) {\n    if (format === undefined) format = \"pem\";\n    return this.toBuffer(format, options).toString();\n};\nCertificate.prototype.fingerprint = function(algo) {\n    if (algo === undefined) algo = \"sha256\";\n    assert.string(algo, \"algorithm\");\n    var opts = {\n        type: \"certificate\",\n        hash: this.hash(algo),\n        algorithm: algo\n    };\n    return new Fingerprint(opts);\n};\nCertificate.prototype.hash = function(algo) {\n    assert.string(algo, \"algorithm\");\n    algo = algo.toLowerCase();\n    if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);\n    if (this._hashCache[algo]) return this._hashCache[algo];\n    var hash = crypto.createHash(algo).update(this.toBuffer(\"x509\")).digest();\n    this._hashCache[algo] = hash;\n    return hash;\n};\nCertificate.prototype.isExpired = function(when) {\n    if (when === undefined) when = new Date();\n    return !(when.getTime() >= this.validFrom.getTime() && when.getTime() < this.validUntil.getTime());\n};\nCertificate.prototype.isSignedBy = function(issuerCert) {\n    utils.assertCompatible(issuerCert, Certificate, [\n        1,\n        0\n    ], \"issuer\");\n    if (!this.issuer.equals(issuerCert.subjects[0])) return false;\n    if (this.issuer.purposes && this.issuer.purposes.length > 0 && this.issuer.purposes.indexOf(\"ca\") === -1) {\n        return false;\n    }\n    return this.isSignedByKey(issuerCert.subjectKey);\n};\nCertificate.prototype.getExtension = function(keyOrOid) {\n    assert.string(keyOrOid, \"keyOrOid\");\n    var ext = this.getExtensions().filter(function(maybeExt) {\n        if (maybeExt.format === \"x509\") return maybeExt.oid === keyOrOid;\n        if (maybeExt.format === \"openssh\") return maybeExt.name === keyOrOid;\n        return false;\n    })[0];\n    return ext;\n};\nCertificate.prototype.getExtensions = function() {\n    var exts = [];\n    var x509 = this.signatures.x509;\n    if (x509 && x509.extras && x509.extras.exts) {\n        x509.extras.exts.forEach(function(ext) {\n            ext.format = \"x509\";\n            exts.push(ext);\n        });\n    }\n    var openssh = this.signatures.openssh;\n    if (openssh && openssh.exts) {\n        openssh.exts.forEach(function(ext) {\n            ext.format = \"openssh\";\n            exts.push(ext);\n        });\n    }\n    return exts;\n};\nCertificate.prototype.isSignedByKey = function(issuerKey) {\n    utils.assertCompatible(issuerKey, Key, [\n        1,\n        2\n    ], \"issuerKey\");\n    if (this.issuerKey !== undefined) {\n        return this.issuerKey.fingerprint(\"sha512\").matches(issuerKey);\n    }\n    var fmt = Object.keys(this.signatures)[0];\n    var valid = formats[fmt].verify(this, issuerKey);\n    if (valid) this.issuerKey = issuerKey;\n    return valid;\n};\nCertificate.prototype.signWith = function(key) {\n    utils.assertCompatible(key, PrivateKey, [\n        1,\n        2\n    ], \"key\");\n    var fmts = Object.keys(formats);\n    var didOne = false;\n    for(var i = 0; i < fmts.length; ++i){\n        if (fmts[i] !== \"pem\") {\n            var ret = formats[fmts[i]].sign(this, key);\n            if (ret === true) didOne = true;\n        }\n    }\n    if (!didOne) {\n        throw new Error(\"Failed to sign the certificate for any \" + \"available certificate formats\");\n    }\n};\nCertificate.createSelfSigned = function(subjectOrSubjects, key, options) {\n    var subjects;\n    if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;\n    else subjects = [\n        subjectOrSubjects\n    ];\n    assert.arrayOfObject(subjects);\n    subjects.forEach(function(subject) {\n        utils.assertCompatible(subject, Identity, [\n            1,\n            0\n        ], \"subject\");\n    });\n    utils.assertCompatible(key, PrivateKey, [\n        1,\n        2\n    ], \"private key\");\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalObject(options.validFrom, \"options.validFrom\");\n    assert.optionalObject(options.validUntil, \"options.validUntil\");\n    var validFrom = options.validFrom;\n    var validUntil = options.validUntil;\n    if (validFrom === undefined) validFrom = new Date();\n    if (validUntil === undefined) {\n        assert.optionalNumber(options.lifetime, \"options.lifetime\");\n        var lifetime = options.lifetime;\n        if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;\n        validUntil = new Date();\n        validUntil.setTime(validUntil.getTime() + lifetime * 1000);\n    }\n    assert.optionalBuffer(options.serial, \"options.serial\");\n    var serial = options.serial;\n    if (serial === undefined) serial = Buffer.from(\"0000000000000001\", \"hex\");\n    var purposes = options.purposes;\n    if (purposes === undefined) purposes = [];\n    if (purposes.indexOf(\"signature\") === -1) purposes.push(\"signature\");\n    /* Self-signed certs are always CAs. */ if (purposes.indexOf(\"ca\") === -1) purposes.push(\"ca\");\n    if (purposes.indexOf(\"crl\") === -1) purposes.push(\"crl\");\n    /*\n\t * If we weren't explicitly given any other purposes, do the sensible\n\t * thing and add some basic ones depending on the subject type.\n\t */ if (purposes.length <= 3) {\n        var hostSubjects = subjects.filter(function(subject) {\n            return subject.type === \"host\";\n        });\n        var userSubjects = subjects.filter(function(subject) {\n            return subject.type === \"user\";\n        });\n        if (hostSubjects.length > 0) {\n            if (purposes.indexOf(\"serverAuth\") === -1) purposes.push(\"serverAuth\");\n        }\n        if (userSubjects.length > 0) {\n            if (purposes.indexOf(\"clientAuth\") === -1) purposes.push(\"clientAuth\");\n        }\n        if (userSubjects.length > 0 || hostSubjects.length > 0) {\n            if (purposes.indexOf(\"keyAgreement\") === -1) purposes.push(\"keyAgreement\");\n            if (key.type === \"rsa\" && purposes.indexOf(\"encryption\") === -1) purposes.push(\"encryption\");\n        }\n    }\n    var cert = new Certificate({\n        subjects: subjects,\n        issuer: subjects[0],\n        subjectKey: key.toPublic(),\n        issuerKey: key.toPublic(),\n        signatures: {},\n        serial: serial,\n        validFrom: validFrom,\n        validUntil: validUntil,\n        purposes: purposes\n    });\n    cert.signWith(key);\n    return cert;\n};\nCertificate.create = function(subjectOrSubjects, key, issuer, issuerKey, options) {\n    var subjects;\n    if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;\n    else subjects = [\n        subjectOrSubjects\n    ];\n    assert.arrayOfObject(subjects);\n    subjects.forEach(function(subject) {\n        utils.assertCompatible(subject, Identity, [\n            1,\n            0\n        ], \"subject\");\n    });\n    utils.assertCompatible(key, Key, [\n        1,\n        0\n    ], \"key\");\n    if (PrivateKey.isPrivateKey(key)) key = key.toPublic();\n    utils.assertCompatible(issuer, Identity, [\n        1,\n        0\n    ], \"issuer\");\n    utils.assertCompatible(issuerKey, PrivateKey, [\n        1,\n        2\n    ], \"issuer key\");\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalObject(options.validFrom, \"options.validFrom\");\n    assert.optionalObject(options.validUntil, \"options.validUntil\");\n    var validFrom = options.validFrom;\n    var validUntil = options.validUntil;\n    if (validFrom === undefined) validFrom = new Date();\n    if (validUntil === undefined) {\n        assert.optionalNumber(options.lifetime, \"options.lifetime\");\n        var lifetime = options.lifetime;\n        if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;\n        validUntil = new Date();\n        validUntil.setTime(validUntil.getTime() + lifetime * 1000);\n    }\n    assert.optionalBuffer(options.serial, \"options.serial\");\n    var serial = options.serial;\n    if (serial === undefined) serial = Buffer.from(\"0000000000000001\", \"hex\");\n    var purposes = options.purposes;\n    if (purposes === undefined) purposes = [];\n    if (purposes.indexOf(\"signature\") === -1) purposes.push(\"signature\");\n    if (options.ca === true) {\n        if (purposes.indexOf(\"ca\") === -1) purposes.push(\"ca\");\n        if (purposes.indexOf(\"crl\") === -1) purposes.push(\"crl\");\n    }\n    var hostSubjects = subjects.filter(function(subject) {\n        return subject.type === \"host\";\n    });\n    var userSubjects = subjects.filter(function(subject) {\n        return subject.type === \"user\";\n    });\n    if (hostSubjects.length > 0) {\n        if (purposes.indexOf(\"serverAuth\") === -1) purposes.push(\"serverAuth\");\n    }\n    if (userSubjects.length > 0) {\n        if (purposes.indexOf(\"clientAuth\") === -1) purposes.push(\"clientAuth\");\n    }\n    if (userSubjects.length > 0 || hostSubjects.length > 0) {\n        if (purposes.indexOf(\"keyAgreement\") === -1) purposes.push(\"keyAgreement\");\n        if (key.type === \"rsa\" && purposes.indexOf(\"encryption\") === -1) purposes.push(\"encryption\");\n    }\n    var cert = new Certificate({\n        subjects: subjects,\n        issuer: issuer,\n        subjectKey: key,\n        issuerKey: issuerKey.toPublic(),\n        signatures: {},\n        serial: serial,\n        validFrom: validFrom,\n        validUntil: validUntil,\n        purposes: purposes\n    });\n    cert.signWith(issuerKey);\n    return cert;\n};\nCertificate.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        return k;\n    } catch (e) {\n        throw new CertificateParseError(options.filename, format, e);\n    }\n};\nCertificate.isCertificate = function(obj, ver) {\n    return utils.isCompatible(obj, Certificate, ver);\n};\n/*\n * API versions for Certificate:\n * [1,0] -- initial ver\n * [1,1] -- openssh format now unpacks extensions\n */ Certificate.prototype._sshpkApiVersion = [\n    1,\n    1\n];\nCertificate._oldVersionDetect = function(obj) {\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2NlcnRpZmljYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4Qjs7QUFFOUJBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsU0FBU0QsOEZBQThCO0FBQzNDLElBQUlFLE9BQU9GLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlJLGNBQWNKLG1CQUFPQSxDQUFDO0FBQzFCLElBQUlLLFlBQVlMLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlNLE9BQU9OLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlPLE9BQU9QLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlRLFFBQVFSLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlTLE1BQU1ULG1CQUFPQSxDQUFDO0FBQ2xCLElBQUlVLGFBQWFWLG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlXLFdBQVdYLG1CQUFPQSxDQUFDO0FBRXZCLElBQUlZLFVBQVUsQ0FBQztBQUNmQSxPQUFPLENBQUMsVUFBVSxHQUFHWixtQkFBT0EsQ0FBQztBQUM3QlksT0FBTyxDQUFDLE9BQU8sR0FBR1osbUJBQU9BLENBQUM7QUFDMUJZLE9BQU8sQ0FBQyxNQUFNLEdBQUdaLG1CQUFPQSxDQUFDO0FBRXpCLElBQUlhLHdCQUF3QlAsS0FBS08scUJBQXFCO0FBQ3RELElBQUlDLHdCQUF3QlIsS0FBS1EscUJBQXFCO0FBRXRELFNBQVNoQixZQUFZaUIsSUFBSTtJQUN4QmhCLE9BQU9pQixNQUFNLENBQUNELE1BQU07SUFDcEJoQixPQUFPa0IsYUFBYSxDQUFDRixLQUFLRyxRQUFRLEVBQUU7SUFDcENWLE1BQU1XLGdCQUFnQixDQUFDSixLQUFLRyxRQUFRLENBQUMsRUFBRSxFQUFFUCxVQUFVO1FBQUM7UUFBRztLQUFFLEVBQ3JEO0lBQ0pILE1BQU1XLGdCQUFnQixDQUFDSixLQUFLSyxVQUFVLEVBQUVYLEtBQUs7UUFBQztRQUFHO0tBQUUsRUFDL0M7SUFDSkQsTUFBTVcsZ0JBQWdCLENBQUNKLEtBQUtNLE1BQU0sRUFBRVYsVUFBVTtRQUFDO1FBQUc7S0FBRSxFQUFFO0lBQ3RELElBQUlJLEtBQUtPLFNBQVMsS0FBS0MsV0FBVztRQUNqQ2YsTUFBTVcsZ0JBQWdCLENBQUNKLEtBQUtPLFNBQVMsRUFBRWIsS0FBSztZQUFDO1lBQUc7U0FBRSxFQUM5QztJQUNMO0lBQ0FWLE9BQU9pQixNQUFNLENBQUNELEtBQUtTLFVBQVUsRUFBRTtJQUMvQnpCLE9BQU8wQixNQUFNLENBQUNWLEtBQUtXLE1BQU0sRUFBRTtJQUMzQjNCLE9BQU80QixJQUFJLENBQUNaLEtBQUthLFNBQVMsRUFBRTtJQUM1QjdCLE9BQU80QixJQUFJLENBQUNaLEtBQUtjLFVBQVUsRUFBRTtJQUU3QjlCLE9BQU8rQixxQkFBcUIsQ0FBQ2YsS0FBS2dCLFFBQVEsRUFBRTtJQUU1QyxJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDO0lBRW5CLElBQUksQ0FBQ2QsUUFBUSxHQUFHSCxLQUFLRyxRQUFRO0lBQzdCLElBQUksQ0FBQ0csTUFBTSxHQUFHTixLQUFLTSxNQUFNO0lBQ3pCLElBQUksQ0FBQ0QsVUFBVSxHQUFHTCxLQUFLSyxVQUFVO0lBQ2pDLElBQUksQ0FBQ0UsU0FBUyxHQUFHUCxLQUFLTyxTQUFTO0lBQy9CLElBQUksQ0FBQ0UsVUFBVSxHQUFHVCxLQUFLUyxVQUFVO0lBQ2pDLElBQUksQ0FBQ0UsTUFBTSxHQUFHWCxLQUFLVyxNQUFNO0lBQ3pCLElBQUksQ0FBQ0UsU0FBUyxHQUFHYixLQUFLYSxTQUFTO0lBQy9CLElBQUksQ0FBQ0MsVUFBVSxHQUFHZCxLQUFLYyxVQUFVO0lBQ2pDLElBQUksQ0FBQ0UsUUFBUSxHQUFHaEIsS0FBS2dCLFFBQVE7QUFDOUI7QUFFQWpDLFlBQVljLE9BQU8sR0FBR0E7QUFFdEJkLFlBQVltQyxTQUFTLENBQUNDLFFBQVEsR0FBRyxTQUFVQyxNQUFNLEVBQUVDLE9BQU87SUFDekQsSUFBSUQsV0FBV1osV0FDZFksU0FBUztJQUNWcEMsT0FBT3NDLE1BQU0sQ0FBQ0YsUUFBUTtJQUN0QnBDLE9BQU9pQixNQUFNLENBQUNKLE9BQU8sQ0FBQ3VCLE9BQU8sRUFBRTtJQUMvQnBDLE9BQU91QyxjQUFjLENBQUNGLFNBQVM7SUFFL0IsT0FBUXhCLE9BQU8sQ0FBQ3VCLE9BQU8sQ0FBQ0ksS0FBSyxDQUFDLElBQUksRUFBRUg7QUFDckM7QUFFQXRDLFlBQVltQyxTQUFTLENBQUNPLFFBQVEsR0FBRyxTQUFVTCxNQUFNLEVBQUVDLE9BQU87SUFDekQsSUFBSUQsV0FBV1osV0FDZFksU0FBUztJQUNWLE9BQVEsSUFBSSxDQUFDRCxRQUFRLENBQUNDLFFBQVFDLFNBQVNJLFFBQVE7QUFDaEQ7QUFFQTFDLFlBQVltQyxTQUFTLENBQUNRLFdBQVcsR0FBRyxTQUFVQyxJQUFJO0lBQ2pELElBQUlBLFNBQVNuQixXQUNabUIsT0FBTztJQUNSM0MsT0FBT3NDLE1BQU0sQ0FBQ0ssTUFBTTtJQUNwQixJQUFJM0IsT0FBTztRQUNWNEIsTUFBTTtRQUNOQyxNQUFNLElBQUksQ0FBQ0EsSUFBSSxDQUFDRjtRQUNoQkcsV0FBV0g7SUFDWjtJQUNBLE9BQVEsSUFBSXRDLFlBQVlXO0FBQ3pCO0FBRUFqQixZQUFZbUMsU0FBUyxDQUFDVyxJQUFJLEdBQUcsU0FBVUYsSUFBSTtJQUMxQzNDLE9BQU9zQyxNQUFNLENBQUNLLE1BQU07SUFDcEJBLE9BQU9BLEtBQUtJLFdBQVc7SUFDdkIsSUFBSTVDLEtBQUs2QyxRQUFRLENBQUNMLEtBQUssS0FBS25CLFdBQzNCLE1BQU8sSUFBSVQsc0JBQXNCNEI7SUFFbEMsSUFBSSxJQUFJLENBQUNWLFVBQVUsQ0FBQ1UsS0FBSyxFQUN4QixPQUFRLElBQUksQ0FBQ1YsVUFBVSxDQUFDVSxLQUFLO0lBRTlCLElBQUlFLE9BQU96QyxPQUFPNkMsVUFBVSxDQUFDTixNQUN6Qk8sTUFBTSxDQUFDLElBQUksQ0FBQ2YsUUFBUSxDQUFDLFNBQVNnQixNQUFNO0lBQ3hDLElBQUksQ0FBQ2xCLFVBQVUsQ0FBQ1UsS0FBSyxHQUFHRTtJQUN4QixPQUFRQTtBQUNUO0FBRUE5QyxZQUFZbUMsU0FBUyxDQUFDa0IsU0FBUyxHQUFHLFNBQVVDLElBQUk7SUFDL0MsSUFBSUEsU0FBUzdCLFdBQ1o2QixPQUFPLElBQUlDO0lBQ1osT0FBUSxDQUFFLE1BQU1DLE9BQU8sTUFBTSxJQUFJLENBQUMxQixTQUFTLENBQUMwQixPQUFPLE1BQ2pERixLQUFLRSxPQUFPLEtBQUssSUFBSSxDQUFDekIsVUFBVSxDQUFDeUIsT0FBTyxFQUFFO0FBQzdDO0FBRUF4RCxZQUFZbUMsU0FBUyxDQUFDc0IsVUFBVSxHQUFHLFNBQVVDLFVBQVU7SUFDdERoRCxNQUFNVyxnQkFBZ0IsQ0FBQ3FDLFlBQVkxRCxhQUFhO1FBQUM7UUFBRztLQUFFLEVBQUU7SUFFeEQsSUFBSSxDQUFDLElBQUksQ0FBQ3VCLE1BQU0sQ0FBQ29DLE1BQU0sQ0FBQ0QsV0FBV3RDLFFBQVEsQ0FBQyxFQUFFLEdBQzdDLE9BQVE7SUFDVCxJQUFJLElBQUksQ0FBQ0csTUFBTSxDQUFDVSxRQUFRLElBQUksSUFBSSxDQUFDVixNQUFNLENBQUNVLFFBQVEsQ0FBQzJCLE1BQU0sR0FBRyxLQUN0RCxJQUFJLENBQUNyQyxNQUFNLENBQUNVLFFBQVEsQ0FBQzRCLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRztRQUM5QyxPQUFRO0lBQ1Q7SUFFQSxPQUFRLElBQUksQ0FBQ0MsYUFBYSxDQUFDSixXQUFXcEMsVUFBVTtBQUNqRDtBQUVBdEIsWUFBWW1DLFNBQVMsQ0FBQzRCLFlBQVksR0FBRyxTQUFVQyxRQUFRO0lBQ3REL0QsT0FBT3NDLE1BQU0sQ0FBQ3lCLFVBQVU7SUFDeEIsSUFBSUMsTUFBTSxJQUFJLENBQUNDLGFBQWEsR0FBR0MsTUFBTSxDQUFDLFNBQVVDLFFBQVE7UUFDdkQsSUFBSUEsU0FBUy9CLE1BQU0sS0FBSyxRQUN2QixPQUFRK0IsU0FBU0MsR0FBRyxLQUFLTDtRQUMxQixJQUFJSSxTQUFTL0IsTUFBTSxLQUFLLFdBQ3ZCLE9BQVErQixTQUFTRSxJQUFJLEtBQUtOO1FBQzNCLE9BQVE7SUFDVCxFQUFFLENBQUMsRUFBRTtJQUNMLE9BQVFDO0FBQ1Q7QUFFQWpFLFlBQVltQyxTQUFTLENBQUMrQixhQUFhLEdBQUc7SUFDckMsSUFBSUssT0FBTyxFQUFFO0lBQ2IsSUFBSUMsT0FBTyxJQUFJLENBQUM5QyxVQUFVLENBQUM4QyxJQUFJO0lBQy9CLElBQUlBLFFBQVFBLEtBQUtDLE1BQU0sSUFBSUQsS0FBS0MsTUFBTSxDQUFDRixJQUFJLEVBQUU7UUFDNUNDLEtBQUtDLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVVQsR0FBRztZQUNyQ0EsSUFBSTVCLE1BQU0sR0FBRztZQUNia0MsS0FBS0ksSUFBSSxDQUFDVjtRQUNYO0lBQ0Q7SUFDQSxJQUFJVyxVQUFVLElBQUksQ0FBQ2xELFVBQVUsQ0FBQ2tELE9BQU87SUFDckMsSUFBSUEsV0FBV0EsUUFBUUwsSUFBSSxFQUFFO1FBQzVCSyxRQUFRTCxJQUFJLENBQUNHLE9BQU8sQ0FBQyxTQUFVVCxHQUFHO1lBQ2pDQSxJQUFJNUIsTUFBTSxHQUFHO1lBQ2JrQyxLQUFLSSxJQUFJLENBQUNWO1FBQ1g7SUFDRDtJQUNBLE9BQVFNO0FBQ1Q7QUFFQXZFLFlBQVltQyxTQUFTLENBQUMyQixhQUFhLEdBQUcsU0FBVXRDLFNBQVM7SUFDeERkLE1BQU1XLGdCQUFnQixDQUFDRyxXQUFXYixLQUFLO1FBQUM7UUFBRztLQUFFLEVBQUU7SUFFL0MsSUFBSSxJQUFJLENBQUNhLFNBQVMsS0FBS0MsV0FBVztRQUNqQyxPQUFRLElBQUksQ0FBQ0QsU0FBUyxDQUNsQm1CLFdBQVcsQ0FBQyxVQUFVa0MsT0FBTyxDQUFDckQ7SUFDbkM7SUFFQSxJQUFJc0QsTUFBTUMsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ3RELFVBQVUsQ0FBQyxDQUFDLEVBQUU7SUFDekMsSUFBSXVELFFBQVFuRSxPQUFPLENBQUNnRSxJQUFJLENBQUNJLE1BQU0sQ0FBQyxJQUFJLEVBQUUxRDtJQUN0QyxJQUFJeUQsT0FDSCxJQUFJLENBQUN6RCxTQUFTLEdBQUdBO0lBQ2xCLE9BQVF5RDtBQUNUO0FBRUFqRixZQUFZbUMsU0FBUyxDQUFDZ0QsUUFBUSxHQUFHLFNBQVVDLEdBQUc7SUFDN0MxRSxNQUFNVyxnQkFBZ0IsQ0FBQytELEtBQUt4RSxZQUFZO1FBQUM7UUFBRztLQUFFLEVBQUU7SUFDaEQsSUFBSXlFLE9BQU9OLE9BQU9DLElBQUksQ0FBQ2xFO0lBQ3ZCLElBQUl3RSxTQUFTO0lBQ2IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLEtBQUt6QixNQUFNLEVBQUUsRUFBRTJCLEVBQUc7UUFDckMsSUFBSUYsSUFBSSxDQUFDRSxFQUFFLEtBQUssT0FBTztZQUN0QixJQUFJQyxNQUFNMUUsT0FBTyxDQUFDdUUsSUFBSSxDQUFDRSxFQUFFLENBQUMsQ0FBQ0UsSUFBSSxDQUFDLElBQUksRUFBRUw7WUFDdEMsSUFBSUksUUFBUSxNQUNYRixTQUFTO1FBQ1g7SUFDRDtJQUNBLElBQUksQ0FBQ0EsUUFBUTtRQUNaLE1BQU8sSUFBSUksTUFBTSw0Q0FDYjtJQUNMO0FBQ0Q7QUFFQTFGLFlBQVkyRixnQkFBZ0IsR0FBRyxTQUFVQyxpQkFBaUIsRUFBRVIsR0FBRyxFQUFFOUMsT0FBTztJQUN2RSxJQUFJbEI7SUFDSixJQUFJeUUsTUFBTUMsT0FBTyxDQUFDRixvQkFDakJ4RSxXQUFXd0U7U0FFWHhFLFdBQVc7UUFBQ3dFO0tBQWtCO0lBRS9CM0YsT0FBT2tCLGFBQWEsQ0FBQ0M7SUFDckJBLFNBQVNzRCxPQUFPLENBQUMsU0FBVXFCLE9BQU87UUFDakNyRixNQUFNVyxnQkFBZ0IsQ0FBQzBFLFNBQVNsRixVQUFVO1lBQUM7WUFBRztTQUFFLEVBQUU7SUFDbkQ7SUFFQUgsTUFBTVcsZ0JBQWdCLENBQUMrRCxLQUFLeEUsWUFBWTtRQUFDO1FBQUc7S0FBRSxFQUFFO0lBRWhEWCxPQUFPdUMsY0FBYyxDQUFDRixTQUFTO0lBQy9CLElBQUlBLFlBQVliLFdBQ2ZhLFVBQVUsQ0FBQztJQUNackMsT0FBT3VDLGNBQWMsQ0FBQ0YsUUFBUVIsU0FBUyxFQUFFO0lBQ3pDN0IsT0FBT3VDLGNBQWMsQ0FBQ0YsUUFBUVAsVUFBVSxFQUFFO0lBQzFDLElBQUlELFlBQVlRLFFBQVFSLFNBQVM7SUFDakMsSUFBSUMsYUFBYU8sUUFBUVAsVUFBVTtJQUNuQyxJQUFJRCxjQUFjTCxXQUNqQkssWUFBWSxJQUFJeUI7SUFDakIsSUFBSXhCLGVBQWVOLFdBQVc7UUFDN0J4QixPQUFPK0YsY0FBYyxDQUFDMUQsUUFBUTJELFFBQVEsRUFBRTtRQUN4QyxJQUFJQSxXQUFXM0QsUUFBUTJELFFBQVE7UUFDL0IsSUFBSUEsYUFBYXhFLFdBQ2hCd0UsV0FBVyxLQUFHLE1BQUksS0FBRztRQUN0QmxFLGFBQWEsSUFBSXdCO1FBQ2pCeEIsV0FBV21FLE9BQU8sQ0FBQ25FLFdBQVd5QixPQUFPLEtBQUt5QyxXQUFTO0lBQ3BEO0lBQ0FoRyxPQUFPa0csY0FBYyxDQUFDN0QsUUFBUVYsTUFBTSxFQUFFO0lBQ3RDLElBQUlBLFNBQVNVLFFBQVFWLE1BQU07SUFDM0IsSUFBSUEsV0FBV0gsV0FDZEcsU0FBU3pCLE9BQU9pRyxJQUFJLENBQUMsb0JBQW9CO0lBRTFDLElBQUluRSxXQUFXSyxRQUFRTCxRQUFRO0lBQy9CLElBQUlBLGFBQWFSLFdBQ2hCUSxXQUFXLEVBQUU7SUFFZCxJQUFJQSxTQUFTNEIsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQ3RDNUIsU0FBUzBDLElBQUksQ0FBQztJQUVmLHFDQUFxQyxHQUNyQyxJQUFJMUMsU0FBUzRCLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FDL0I1QixTQUFTMEMsSUFBSSxDQUFDO0lBQ2YsSUFBSTFDLFNBQVM0QixPQUFPLENBQUMsV0FBVyxDQUFDLEdBQ2hDNUIsU0FBUzBDLElBQUksQ0FBQztJQUVmOzs7RUFHQyxHQUNELElBQUkxQyxTQUFTMkIsTUFBTSxJQUFJLEdBQUc7UUFDekIsSUFBSXlDLGVBQWVqRixTQUFTK0MsTUFBTSxDQUFDLFNBQVU0QixPQUFPO1lBQ25ELE9BQVFBLFFBQVFsRCxJQUFJLEtBQUs7UUFDMUI7UUFDQSxJQUFJeUQsZUFBZWxGLFNBQVMrQyxNQUFNLENBQUMsU0FBVTRCLE9BQU87WUFDbkQsT0FBUUEsUUFBUWxELElBQUksS0FBSztRQUMxQjtRQUNBLElBQUl3RCxhQUFhekMsTUFBTSxHQUFHLEdBQUc7WUFDNUIsSUFBSTNCLFNBQVM0QixPQUFPLENBQUMsa0JBQWtCLENBQUMsR0FDdkM1QixTQUFTMEMsSUFBSSxDQUFDO1FBQ2hCO1FBQ0EsSUFBSTJCLGFBQWExQyxNQUFNLEdBQUcsR0FBRztZQUM1QixJQUFJM0IsU0FBUzRCLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxHQUN2QzVCLFNBQVMwQyxJQUFJLENBQUM7UUFDaEI7UUFDQSxJQUFJMkIsYUFBYTFDLE1BQU0sR0FBRyxLQUFLeUMsYUFBYXpDLE1BQU0sR0FBRyxHQUFHO1lBQ3ZELElBQUkzQixTQUFTNEIsT0FBTyxDQUFDLG9CQUFvQixDQUFDLEdBQ3pDNUIsU0FBUzBDLElBQUksQ0FBQztZQUNmLElBQUlTLElBQUl2QyxJQUFJLEtBQUssU0FDYlosU0FBUzRCLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxHQUN2QzVCLFNBQVMwQyxJQUFJLENBQUM7UUFDaEI7SUFDRDtJQUVBLElBQUk0QixPQUFPLElBQUl2RyxZQUFZO1FBQzFCb0IsVUFBVUE7UUFDVkcsUUFBUUgsUUFBUSxDQUFDLEVBQUU7UUFDbkJFLFlBQVk4RCxJQUFJb0IsUUFBUTtRQUN4QmhGLFdBQVc0RCxJQUFJb0IsUUFBUTtRQUN2QjlFLFlBQVksQ0FBQztRQUNiRSxRQUFRQTtRQUNSRSxXQUFXQTtRQUNYQyxZQUFZQTtRQUNaRSxVQUFVQTtJQUNYO0lBQ0FzRSxLQUFLcEIsUUFBUSxDQUFDQztJQUVkLE9BQVFtQjtBQUNUO0FBRUF2RyxZQUFZeUcsTUFBTSxHQUNkLFNBQVViLGlCQUFpQixFQUFFUixHQUFHLEVBQUU3RCxNQUFNLEVBQUVDLFNBQVMsRUFBRWMsT0FBTztJQUMvRCxJQUFJbEI7SUFDSixJQUFJeUUsTUFBTUMsT0FBTyxDQUFDRixvQkFDakJ4RSxXQUFXd0U7U0FFWHhFLFdBQVc7UUFBQ3dFO0tBQWtCO0lBRS9CM0YsT0FBT2tCLGFBQWEsQ0FBQ0M7SUFDckJBLFNBQVNzRCxPQUFPLENBQUMsU0FBVXFCLE9BQU87UUFDakNyRixNQUFNVyxnQkFBZ0IsQ0FBQzBFLFNBQVNsRixVQUFVO1lBQUM7WUFBRztTQUFFLEVBQUU7SUFDbkQ7SUFFQUgsTUFBTVcsZ0JBQWdCLENBQUMrRCxLQUFLekUsS0FBSztRQUFDO1FBQUc7S0FBRSxFQUFFO0lBQ3pDLElBQUlDLFdBQVc4RixZQUFZLENBQUN0QixNQUMzQkEsTUFBTUEsSUFBSW9CLFFBQVE7SUFDbkI5RixNQUFNVyxnQkFBZ0IsQ0FBQ0UsUUFBUVYsVUFBVTtRQUFDO1FBQUc7S0FBRSxFQUFFO0lBQ2pESCxNQUFNVyxnQkFBZ0IsQ0FBQ0csV0FBV1osWUFBWTtRQUFDO1FBQUc7S0FBRSxFQUFFO0lBRXREWCxPQUFPdUMsY0FBYyxDQUFDRixTQUFTO0lBQy9CLElBQUlBLFlBQVliLFdBQ2ZhLFVBQVUsQ0FBQztJQUNackMsT0FBT3VDLGNBQWMsQ0FBQ0YsUUFBUVIsU0FBUyxFQUFFO0lBQ3pDN0IsT0FBT3VDLGNBQWMsQ0FBQ0YsUUFBUVAsVUFBVSxFQUFFO0lBQzFDLElBQUlELFlBQVlRLFFBQVFSLFNBQVM7SUFDakMsSUFBSUMsYUFBYU8sUUFBUVAsVUFBVTtJQUNuQyxJQUFJRCxjQUFjTCxXQUNqQkssWUFBWSxJQUFJeUI7SUFDakIsSUFBSXhCLGVBQWVOLFdBQVc7UUFDN0J4QixPQUFPK0YsY0FBYyxDQUFDMUQsUUFBUTJELFFBQVEsRUFBRTtRQUN4QyxJQUFJQSxXQUFXM0QsUUFBUTJELFFBQVE7UUFDL0IsSUFBSUEsYUFBYXhFLFdBQ2hCd0UsV0FBVyxLQUFHLE1BQUksS0FBRztRQUN0QmxFLGFBQWEsSUFBSXdCO1FBQ2pCeEIsV0FBV21FLE9BQU8sQ0FBQ25FLFdBQVd5QixPQUFPLEtBQUt5QyxXQUFTO0lBQ3BEO0lBQ0FoRyxPQUFPa0csY0FBYyxDQUFDN0QsUUFBUVYsTUFBTSxFQUFFO0lBQ3RDLElBQUlBLFNBQVNVLFFBQVFWLE1BQU07SUFDM0IsSUFBSUEsV0FBV0gsV0FDZEcsU0FBU3pCLE9BQU9pRyxJQUFJLENBQUMsb0JBQW9CO0lBRTFDLElBQUluRSxXQUFXSyxRQUFRTCxRQUFRO0lBQy9CLElBQUlBLGFBQWFSLFdBQ2hCUSxXQUFXLEVBQUU7SUFFZCxJQUFJQSxTQUFTNEIsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQ3RDNUIsU0FBUzBDLElBQUksQ0FBQztJQUVmLElBQUlyQyxRQUFRcUUsRUFBRSxLQUFLLE1BQU07UUFDeEIsSUFBSTFFLFNBQVM0QixPQUFPLENBQUMsVUFBVSxDQUFDLEdBQy9CNUIsU0FBUzBDLElBQUksQ0FBQztRQUNmLElBQUkxQyxTQUFTNEIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUNoQzVCLFNBQVMwQyxJQUFJLENBQUM7SUFDaEI7SUFFQSxJQUFJMEIsZUFBZWpGLFNBQVMrQyxNQUFNLENBQUMsU0FBVTRCLE9BQU87UUFDbkQsT0FBUUEsUUFBUWxELElBQUksS0FBSztJQUMxQjtJQUNBLElBQUl5RCxlQUFlbEYsU0FBUytDLE1BQU0sQ0FBQyxTQUFVNEIsT0FBTztRQUNuRCxPQUFRQSxRQUFRbEQsSUFBSSxLQUFLO0lBQzFCO0lBQ0EsSUFBSXdELGFBQWF6QyxNQUFNLEdBQUcsR0FBRztRQUM1QixJQUFJM0IsU0FBUzRCLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxHQUN2QzVCLFNBQVMwQyxJQUFJLENBQUM7SUFDaEI7SUFDQSxJQUFJMkIsYUFBYTFDLE1BQU0sR0FBRyxHQUFHO1FBQzVCLElBQUkzQixTQUFTNEIsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEdBQ3ZDNUIsU0FBUzBDLElBQUksQ0FBQztJQUNoQjtJQUNBLElBQUkyQixhQUFhMUMsTUFBTSxHQUFHLEtBQUt5QyxhQUFhekMsTUFBTSxHQUFHLEdBQUc7UUFDdkQsSUFBSTNCLFNBQVM0QixPQUFPLENBQUMsb0JBQW9CLENBQUMsR0FDekM1QixTQUFTMEMsSUFBSSxDQUFDO1FBQ2YsSUFBSVMsSUFBSXZDLElBQUksS0FBSyxTQUNiWixTQUFTNEIsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEdBQ3ZDNUIsU0FBUzBDLElBQUksQ0FBQztJQUNoQjtJQUVBLElBQUk0QixPQUFPLElBQUl2RyxZQUFZO1FBQzFCb0IsVUFBVUE7UUFDVkcsUUFBUUE7UUFDUkQsWUFBWThEO1FBQ1o1RCxXQUFXQSxVQUFVZ0YsUUFBUTtRQUM3QjlFLFlBQVksQ0FBQztRQUNiRSxRQUFRQTtRQUNSRSxXQUFXQTtRQUNYQyxZQUFZQTtRQUNaRSxVQUFVQTtJQUNYO0lBQ0FzRSxLQUFLcEIsUUFBUSxDQUFDM0Q7SUFFZCxPQUFRK0U7QUFDVDtBQUVBdkcsWUFBWTRHLEtBQUssR0FBRyxTQUFVQyxJQUFJLEVBQUV4RSxNQUFNLEVBQUVDLE9BQU87SUFDbEQsSUFBSSxPQUFRdUUsU0FBVSxVQUNyQjVHLE9BQU8wQixNQUFNLENBQUNrRixNQUFNO0lBQ3JCLElBQUl4RSxXQUFXWixXQUNkWSxTQUFTO0lBQ1ZwQyxPQUFPc0MsTUFBTSxDQUFDRixRQUFRO0lBQ3RCLElBQUksT0FBUUMsWUFBYSxVQUN4QkEsVUFBVTtRQUFFd0UsVUFBVXhFO0lBQVE7SUFDL0JyQyxPQUFPdUMsY0FBYyxDQUFDRixTQUFTO0lBQy9CLElBQUlBLFlBQVliLFdBQ2ZhLFVBQVUsQ0FBQztJQUNackMsT0FBTzhHLGNBQWMsQ0FBQ3pFLFFBQVF3RSxRQUFRLEVBQUU7SUFDeEMsSUFBSXhFLFFBQVF3RSxRQUFRLEtBQUtyRixXQUN4QmEsUUFBUXdFLFFBQVEsR0FBRztJQUVwQjdHLE9BQU9pQixNQUFNLENBQUNKLE9BQU8sQ0FBQ3VCLE9BQU8sRUFBRTtJQUUvQixJQUFJO1FBQ0gsSUFBSTJFLElBQUlsRyxPQUFPLENBQUN1QixPQUFPLENBQUM0RSxJQUFJLENBQUNKLE1BQU12RTtRQUNuQyxPQUFRMEU7SUFDVCxFQUFFLE9BQU9FLEdBQUc7UUFDWCxNQUFPLElBQUluRyxzQkFBc0J1QixRQUFRd0UsUUFBUSxFQUFFekUsUUFBUTZFO0lBQzVEO0FBQ0Q7QUFFQWxILFlBQVltSCxhQUFhLEdBQUcsU0FBVUMsR0FBRyxFQUFFQyxHQUFHO0lBQzdDLE9BQVEzRyxNQUFNNEcsWUFBWSxDQUFDRixLQUFLcEgsYUFBYXFIO0FBQzlDO0FBRUE7Ozs7Q0FJQyxHQUNEckgsWUFBWW1DLFNBQVMsQ0FBQ29GLGdCQUFnQixHQUFHO0lBQUM7SUFBRztDQUFFO0FBRS9DdkgsWUFBWXdILGlCQUFpQixHQUFHLFNBQVVKLEdBQUc7SUFDNUMsT0FBUTtRQUFDO1FBQUc7S0FBRTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2NlcnRpZmljYXRlLmpzPzdkN2MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYgSm95ZW50LCBJbmMuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2VydGlmaWNhdGU7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBhbGdzID0gcmVxdWlyZSgnLi9hbGdzJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgRmluZ2VycHJpbnQgPSByZXF1aXJlKCcuL2ZpbmdlcnByaW50Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcbnZhciBlcnJzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIEtleSA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4vcHJpdmF0ZS1rZXknKTtcbnZhciBJZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxudmFyIGZvcm1hdHMgPSB7fTtcbmZvcm1hdHNbJ29wZW5zc2gnXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy9vcGVuc3NoLWNlcnQnKTtcbmZvcm1hdHNbJ3g1MDknXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy94NTA5Jyk7XG5mb3JtYXRzWydwZW0nXSA9IHJlcXVpcmUoJy4vZm9ybWF0cy94NTA5LXBlbScpO1xuXG52YXIgQ2VydGlmaWNhdGVQYXJzZUVycm9yID0gZXJycy5DZXJ0aWZpY2F0ZVBhcnNlRXJyb3I7XG52YXIgSW52YWxpZEFsZ29yaXRobUVycm9yID0gZXJycy5JbnZhbGlkQWxnb3JpdGhtRXJyb3I7XG5cbmZ1bmN0aW9uIENlcnRpZmljYXRlKG9wdHMpIHtcblx0YXNzZXJ0Lm9iamVjdChvcHRzLCAnb3B0aW9ucycpO1xuXHRhc3NlcnQuYXJyYXlPZk9iamVjdChvcHRzLnN1YmplY3RzLCAnb3B0aW9ucy5zdWJqZWN0cycpO1xuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKG9wdHMuc3ViamVjdHNbMF0sIElkZW50aXR5LCBbMSwgMF0sXG5cdCAgICAnb3B0aW9ucy5zdWJqZWN0cycpO1xuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKG9wdHMuc3ViamVjdEtleSwgS2V5LCBbMSwgMF0sXG5cdCAgICAnb3B0aW9ucy5zdWJqZWN0S2V5Jyk7XG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUob3B0cy5pc3N1ZXIsIElkZW50aXR5LCBbMSwgMF0sICdvcHRpb25zLmlzc3VlcicpO1xuXHRpZiAob3B0cy5pc3N1ZXJLZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHV0aWxzLmFzc2VydENvbXBhdGlibGUob3B0cy5pc3N1ZXJLZXksIEtleSwgWzEsIDBdLFxuXHRcdCAgICAnb3B0aW9ucy5pc3N1ZXJLZXknKTtcblx0fVxuXHRhc3NlcnQub2JqZWN0KG9wdHMuc2lnbmF0dXJlcywgJ29wdGlvbnMuc2lnbmF0dXJlcycpO1xuXHRhc3NlcnQuYnVmZmVyKG9wdHMuc2VyaWFsLCAnb3B0aW9ucy5zZXJpYWwnKTtcblx0YXNzZXJ0LmRhdGUob3B0cy52YWxpZEZyb20sICdvcHRpb25zLnZhbGlkRnJvbScpO1xuXHRhc3NlcnQuZGF0ZShvcHRzLnZhbGlkVW50aWwsICdvcHRvbnMudmFsaWRVbnRpbCcpO1xuXG5cdGFzc2VydC5vcHRpb25hbEFycmF5T2ZTdHJpbmcob3B0cy5wdXJwb3NlcywgJ29wdGlvbnMucHVycG9zZXMnKTtcblxuXHR0aGlzLl9oYXNoQ2FjaGUgPSB7fTtcblxuXHR0aGlzLnN1YmplY3RzID0gb3B0cy5zdWJqZWN0cztcblx0dGhpcy5pc3N1ZXIgPSBvcHRzLmlzc3Vlcjtcblx0dGhpcy5zdWJqZWN0S2V5ID0gb3B0cy5zdWJqZWN0S2V5O1xuXHR0aGlzLmlzc3VlcktleSA9IG9wdHMuaXNzdWVyS2V5O1xuXHR0aGlzLnNpZ25hdHVyZXMgPSBvcHRzLnNpZ25hdHVyZXM7XG5cdHRoaXMuc2VyaWFsID0gb3B0cy5zZXJpYWw7XG5cdHRoaXMudmFsaWRGcm9tID0gb3B0cy52YWxpZEZyb207XG5cdHRoaXMudmFsaWRVbnRpbCA9IG9wdHMudmFsaWRVbnRpbDtcblx0dGhpcy5wdXJwb3NlcyA9IG9wdHMucHVycG9zZXM7XG59XG5cbkNlcnRpZmljYXRlLmZvcm1hdHMgPSBmb3JtYXRzO1xuXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiAoZm9ybWF0LCBvcHRpb25zKSB7XG5cdGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZClcblx0XHRmb3JtYXQgPSAneDUwOSc7XG5cdGFzc2VydC5zdHJpbmcoZm9ybWF0LCAnZm9ybWF0Jyk7XG5cdGFzc2VydC5vYmplY3QoZm9ybWF0c1tmb3JtYXRdLCAnZm9ybWF0c1tmb3JtYXRdJyk7XG5cdGFzc2VydC5vcHRpb25hbE9iamVjdChvcHRpb25zLCAnb3B0aW9ucycpO1xuXG5cdHJldHVybiAoZm9ybWF0c1tmb3JtYXRdLndyaXRlKHRoaXMsIG9wdGlvbnMpKTtcbn07XG5cbkNlcnRpZmljYXRlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChmb3JtYXQsIG9wdGlvbnMpIHtcblx0aWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKVxuXHRcdGZvcm1hdCA9ICdwZW0nO1xuXHRyZXR1cm4gKHRoaXMudG9CdWZmZXIoZm9ybWF0LCBvcHRpb25zKS50b1N0cmluZygpKTtcbn07XG5cbkNlcnRpZmljYXRlLnByb3RvdHlwZS5maW5nZXJwcmludCA9IGZ1bmN0aW9uIChhbGdvKSB7XG5cdGlmIChhbGdvID09PSB1bmRlZmluZWQpXG5cdFx0YWxnbyA9ICdzaGEyNTYnO1xuXHRhc3NlcnQuc3RyaW5nKGFsZ28sICdhbGdvcml0aG0nKTtcblx0dmFyIG9wdHMgPSB7XG5cdFx0dHlwZTogJ2NlcnRpZmljYXRlJyxcblx0XHRoYXNoOiB0aGlzLmhhc2goYWxnbyksXG5cdFx0YWxnb3JpdGhtOiBhbGdvXG5cdH07XG5cdHJldHVybiAobmV3IEZpbmdlcnByaW50KG9wdHMpKTtcbn07XG5cbkNlcnRpZmljYXRlLnByb3RvdHlwZS5oYXNoID0gZnVuY3Rpb24gKGFsZ28pIHtcblx0YXNzZXJ0LnN0cmluZyhhbGdvLCAnYWxnb3JpdGhtJyk7XG5cdGFsZ28gPSBhbGdvLnRvTG93ZXJDYXNlKCk7XG5cdGlmIChhbGdzLmhhc2hBbGdzW2FsZ29dID09PSB1bmRlZmluZWQpXG5cdFx0dGhyb3cgKG5ldyBJbnZhbGlkQWxnb3JpdGhtRXJyb3IoYWxnbykpO1xuXG5cdGlmICh0aGlzLl9oYXNoQ2FjaGVbYWxnb10pXG5cdFx0cmV0dXJuICh0aGlzLl9oYXNoQ2FjaGVbYWxnb10pO1xuXG5cdHZhciBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goYWxnbykuXG5cdCAgICB1cGRhdGUodGhpcy50b0J1ZmZlcigneDUwOScpKS5kaWdlc3QoKTtcblx0dGhpcy5faGFzaENhY2hlW2FsZ29dID0gaGFzaDtcblx0cmV0dXJuIChoYXNoKTtcbn07XG5cbkNlcnRpZmljYXRlLnByb3RvdHlwZS5pc0V4cGlyZWQgPSBmdW5jdGlvbiAod2hlbikge1xuXHRpZiAod2hlbiA9PT0gdW5kZWZpbmVkKVxuXHRcdHdoZW4gPSBuZXcgRGF0ZSgpO1xuXHRyZXR1cm4gKCEoKHdoZW4uZ2V0VGltZSgpID49IHRoaXMudmFsaWRGcm9tLmdldFRpbWUoKSkgJiZcblx0XHQod2hlbi5nZXRUaW1lKCkgPCB0aGlzLnZhbGlkVW50aWwuZ2V0VGltZSgpKSkpO1xufTtcblxuQ2VydGlmaWNhdGUucHJvdG90eXBlLmlzU2lnbmVkQnkgPSBmdW5jdGlvbiAoaXNzdWVyQ2VydCkge1xuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKGlzc3VlckNlcnQsIENlcnRpZmljYXRlLCBbMSwgMF0sICdpc3N1ZXInKTtcblxuXHRpZiAoIXRoaXMuaXNzdWVyLmVxdWFscyhpc3N1ZXJDZXJ0LnN1YmplY3RzWzBdKSlcblx0XHRyZXR1cm4gKGZhbHNlKTtcblx0aWYgKHRoaXMuaXNzdWVyLnB1cnBvc2VzICYmIHRoaXMuaXNzdWVyLnB1cnBvc2VzLmxlbmd0aCA+IDAgJiZcblx0ICAgIHRoaXMuaXNzdWVyLnB1cnBvc2VzLmluZGV4T2YoJ2NhJykgPT09IC0xKSB7XG5cdFx0cmV0dXJuIChmYWxzZSk7XG5cdH1cblxuXHRyZXR1cm4gKHRoaXMuaXNTaWduZWRCeUtleShpc3N1ZXJDZXJ0LnN1YmplY3RLZXkpKTtcbn07XG5cbkNlcnRpZmljYXRlLnByb3RvdHlwZS5nZXRFeHRlbnNpb24gPSBmdW5jdGlvbiAoa2V5T3JPaWQpIHtcblx0YXNzZXJ0LnN0cmluZyhrZXlPck9pZCwgJ2tleU9yT2lkJyk7XG5cdHZhciBleHQgPSB0aGlzLmdldEV4dGVuc2lvbnMoKS5maWx0ZXIoZnVuY3Rpb24gKG1heWJlRXh0KSB7XG5cdFx0aWYgKG1heWJlRXh0LmZvcm1hdCA9PT0gJ3g1MDknKVxuXHRcdFx0cmV0dXJuIChtYXliZUV4dC5vaWQgPT09IGtleU9yT2lkKTtcblx0XHRpZiAobWF5YmVFeHQuZm9ybWF0ID09PSAnb3BlbnNzaCcpXG5cdFx0XHRyZXR1cm4gKG1heWJlRXh0Lm5hbWUgPT09IGtleU9yT2lkKTtcblx0XHRyZXR1cm4gKGZhbHNlKTtcblx0fSlbMF07XG5cdHJldHVybiAoZXh0KTtcbn07XG5cbkNlcnRpZmljYXRlLnByb3RvdHlwZS5nZXRFeHRlbnNpb25zID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgZXh0cyA9IFtdO1xuXHR2YXIgeDUwOSA9IHRoaXMuc2lnbmF0dXJlcy54NTA5O1xuXHRpZiAoeDUwOSAmJiB4NTA5LmV4dHJhcyAmJiB4NTA5LmV4dHJhcy5leHRzKSB7XG5cdFx0eDUwOS5leHRyYXMuZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChleHQpIHtcblx0XHRcdGV4dC5mb3JtYXQgPSAneDUwOSc7XG5cdFx0XHRleHRzLnB1c2goZXh0KTtcblx0XHR9KTtcblx0fVxuXHR2YXIgb3BlbnNzaCA9IHRoaXMuc2lnbmF0dXJlcy5vcGVuc3NoO1xuXHRpZiAob3BlbnNzaCAmJiBvcGVuc3NoLmV4dHMpIHtcblx0XHRvcGVuc3NoLmV4dHMuZm9yRWFjaChmdW5jdGlvbiAoZXh0KSB7XG5cdFx0XHRleHQuZm9ybWF0ID0gJ29wZW5zc2gnO1xuXHRcdFx0ZXh0cy5wdXNoKGV4dCk7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIChleHRzKTtcbn07XG5cbkNlcnRpZmljYXRlLnByb3RvdHlwZS5pc1NpZ25lZEJ5S2V5ID0gZnVuY3Rpb24gKGlzc3VlcktleSkge1xuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKGlzc3VlcktleSwgS2V5LCBbMSwgMl0sICdpc3N1ZXJLZXknKTtcblxuXHRpZiAodGhpcy5pc3N1ZXJLZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiAodGhpcy5pc3N1ZXJLZXkuXG5cdFx0ICAgIGZpbmdlcnByaW50KCdzaGE1MTInKS5tYXRjaGVzKGlzc3VlcktleSkpO1xuXHR9XG5cblx0dmFyIGZtdCA9IE9iamVjdC5rZXlzKHRoaXMuc2lnbmF0dXJlcylbMF07XG5cdHZhciB2YWxpZCA9IGZvcm1hdHNbZm10XS52ZXJpZnkodGhpcywgaXNzdWVyS2V5KTtcblx0aWYgKHZhbGlkKVxuXHRcdHRoaXMuaXNzdWVyS2V5ID0gaXNzdWVyS2V5O1xuXHRyZXR1cm4gKHZhbGlkKTtcbn07XG5cbkNlcnRpZmljYXRlLnByb3RvdHlwZS5zaWduV2l0aCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShrZXksIFByaXZhdGVLZXksIFsxLCAyXSwgJ2tleScpO1xuXHR2YXIgZm10cyA9IE9iamVjdC5rZXlzKGZvcm1hdHMpO1xuXHR2YXIgZGlkT25lID0gZmFsc2U7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZm10cy5sZW5ndGg7ICsraSkge1xuXHRcdGlmIChmbXRzW2ldICE9PSAncGVtJykge1xuXHRcdFx0dmFyIHJldCA9IGZvcm1hdHNbZm10c1tpXV0uc2lnbih0aGlzLCBrZXkpO1xuXHRcdFx0aWYgKHJldCA9PT0gdHJ1ZSlcblx0XHRcdFx0ZGlkT25lID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0aWYgKCFkaWRPbmUpIHtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdGYWlsZWQgdG8gc2lnbiB0aGUgY2VydGlmaWNhdGUgZm9yIGFueSAnICtcblx0XHQgICAgJ2F2YWlsYWJsZSBjZXJ0aWZpY2F0ZSBmb3JtYXRzJykpO1xuXHR9XG59O1xuXG5DZXJ0aWZpY2F0ZS5jcmVhdGVTZWxmU2lnbmVkID0gZnVuY3Rpb24gKHN1YmplY3RPclN1YmplY3RzLCBrZXksIG9wdGlvbnMpIHtcblx0dmFyIHN1YmplY3RzO1xuXHRpZiAoQXJyYXkuaXNBcnJheShzdWJqZWN0T3JTdWJqZWN0cykpXG5cdFx0c3ViamVjdHMgPSBzdWJqZWN0T3JTdWJqZWN0cztcblx0ZWxzZVxuXHRcdHN1YmplY3RzID0gW3N1YmplY3RPclN1YmplY3RzXTtcblxuXHRhc3NlcnQuYXJyYXlPZk9iamVjdChzdWJqZWN0cyk7XG5cdHN1YmplY3RzLmZvckVhY2goZnVuY3Rpb24gKHN1YmplY3QpIHtcblx0XHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKHN1YmplY3QsIElkZW50aXR5LCBbMSwgMF0sICdzdWJqZWN0Jyk7XG5cdH0pO1xuXG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUoa2V5LCBQcml2YXRlS2V5LCBbMSwgMl0sICdwcml2YXRlIGtleScpO1xuXG5cdGFzc2VydC5vcHRpb25hbE9iamVjdChvcHRpb25zLCAnb3B0aW9ucycpO1xuXHRpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKVxuXHRcdG9wdGlvbnMgPSB7fTtcblx0YXNzZXJ0Lm9wdGlvbmFsT2JqZWN0KG9wdGlvbnMudmFsaWRGcm9tLCAnb3B0aW9ucy52YWxpZEZyb20nKTtcblx0YXNzZXJ0Lm9wdGlvbmFsT2JqZWN0KG9wdGlvbnMudmFsaWRVbnRpbCwgJ29wdGlvbnMudmFsaWRVbnRpbCcpO1xuXHR2YXIgdmFsaWRGcm9tID0gb3B0aW9ucy52YWxpZEZyb207XG5cdHZhciB2YWxpZFVudGlsID0gb3B0aW9ucy52YWxpZFVudGlsO1xuXHRpZiAodmFsaWRGcm9tID09PSB1bmRlZmluZWQpXG5cdFx0dmFsaWRGcm9tID0gbmV3IERhdGUoKTtcblx0aWYgKHZhbGlkVW50aWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdGFzc2VydC5vcHRpb25hbE51bWJlcihvcHRpb25zLmxpZmV0aW1lLCAnb3B0aW9ucy5saWZldGltZScpO1xuXHRcdHZhciBsaWZldGltZSA9IG9wdGlvbnMubGlmZXRpbWU7XG5cdFx0aWYgKGxpZmV0aW1lID09PSB1bmRlZmluZWQpXG5cdFx0XHRsaWZldGltZSA9IDEwKjM2NSoyNCozNjAwO1xuXHRcdHZhbGlkVW50aWwgPSBuZXcgRGF0ZSgpO1xuXHRcdHZhbGlkVW50aWwuc2V0VGltZSh2YWxpZFVudGlsLmdldFRpbWUoKSArIGxpZmV0aW1lKjEwMDApO1xuXHR9XG5cdGFzc2VydC5vcHRpb25hbEJ1ZmZlcihvcHRpb25zLnNlcmlhbCwgJ29wdGlvbnMuc2VyaWFsJyk7XG5cdHZhciBzZXJpYWwgPSBvcHRpb25zLnNlcmlhbDtcblx0aWYgKHNlcmlhbCA9PT0gdW5kZWZpbmVkKVxuXHRcdHNlcmlhbCA9IEJ1ZmZlci5mcm9tKCcwMDAwMDAwMDAwMDAwMDAxJywgJ2hleCcpO1xuXG5cdHZhciBwdXJwb3NlcyA9IG9wdGlvbnMucHVycG9zZXM7XG5cdGlmIChwdXJwb3NlcyA9PT0gdW5kZWZpbmVkKVxuXHRcdHB1cnBvc2VzID0gW107XG5cblx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ3NpZ25hdHVyZScpID09PSAtMSlcblx0XHRwdXJwb3Nlcy5wdXNoKCdzaWduYXR1cmUnKTtcblxuXHQvKiBTZWxmLXNpZ25lZCBjZXJ0cyBhcmUgYWx3YXlzIENBcy4gKi9cblx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ2NhJykgPT09IC0xKVxuXHRcdHB1cnBvc2VzLnB1c2goJ2NhJyk7XG5cdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdjcmwnKSA9PT0gLTEpXG5cdFx0cHVycG9zZXMucHVzaCgnY3JsJyk7XG5cblx0Lypcblx0ICogSWYgd2Ugd2VyZW4ndCBleHBsaWNpdGx5IGdpdmVuIGFueSBvdGhlciBwdXJwb3NlcywgZG8gdGhlIHNlbnNpYmxlXG5cdCAqIHRoaW5nIGFuZCBhZGQgc29tZSBiYXNpYyBvbmVzIGRlcGVuZGluZyBvbiB0aGUgc3ViamVjdCB0eXBlLlxuXHQgKi9cblx0aWYgKHB1cnBvc2VzLmxlbmd0aCA8PSAzKSB7XG5cdFx0dmFyIGhvc3RTdWJqZWN0cyA9IHN1YmplY3RzLmZpbHRlcihmdW5jdGlvbiAoc3ViamVjdCkge1xuXHRcdFx0cmV0dXJuIChzdWJqZWN0LnR5cGUgPT09ICdob3N0Jyk7XG5cdFx0fSk7XG5cdFx0dmFyIHVzZXJTdWJqZWN0cyA9IHN1YmplY3RzLmZpbHRlcihmdW5jdGlvbiAoc3ViamVjdCkge1xuXHRcdFx0cmV0dXJuIChzdWJqZWN0LnR5cGUgPT09ICd1c2VyJyk7XG5cdFx0fSk7XG5cdFx0aWYgKGhvc3RTdWJqZWN0cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRpZiAocHVycG9zZXMuaW5kZXhPZignc2VydmVyQXV0aCcpID09PSAtMSlcblx0XHRcdFx0cHVycG9zZXMucHVzaCgnc2VydmVyQXV0aCcpO1xuXHRcdH1cblx0XHRpZiAodXNlclN1YmplY3RzLmxlbmd0aCA+IDApIHtcblx0XHRcdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdjbGllbnRBdXRoJykgPT09IC0xKVxuXHRcdFx0XHRwdXJwb3Nlcy5wdXNoKCdjbGllbnRBdXRoJyk7XG5cdFx0fVxuXHRcdGlmICh1c2VyU3ViamVjdHMubGVuZ3RoID4gMCB8fCBob3N0U3ViamVjdHMubGVuZ3RoID4gMCkge1xuXHRcdFx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ2tleUFncmVlbWVudCcpID09PSAtMSlcblx0XHRcdFx0cHVycG9zZXMucHVzaCgna2V5QWdyZWVtZW50Jyk7XG5cdFx0XHRpZiAoa2V5LnR5cGUgPT09ICdyc2EnICYmXG5cdFx0XHQgICAgcHVycG9zZXMuaW5kZXhPZignZW5jcnlwdGlvbicpID09PSAtMSlcblx0XHRcdFx0cHVycG9zZXMucHVzaCgnZW5jcnlwdGlvbicpO1xuXHRcdH1cblx0fVxuXG5cdHZhciBjZXJ0ID0gbmV3IENlcnRpZmljYXRlKHtcblx0XHRzdWJqZWN0czogc3ViamVjdHMsXG5cdFx0aXNzdWVyOiBzdWJqZWN0c1swXSxcblx0XHRzdWJqZWN0S2V5OiBrZXkudG9QdWJsaWMoKSxcblx0XHRpc3N1ZXJLZXk6IGtleS50b1B1YmxpYygpLFxuXHRcdHNpZ25hdHVyZXM6IHt9LFxuXHRcdHNlcmlhbDogc2VyaWFsLFxuXHRcdHZhbGlkRnJvbTogdmFsaWRGcm9tLFxuXHRcdHZhbGlkVW50aWw6IHZhbGlkVW50aWwsXG5cdFx0cHVycG9zZXM6IHB1cnBvc2VzXG5cdH0pO1xuXHRjZXJ0LnNpZ25XaXRoKGtleSk7XG5cblx0cmV0dXJuIChjZXJ0KTtcbn07XG5cbkNlcnRpZmljYXRlLmNyZWF0ZSA9XG4gICAgZnVuY3Rpb24gKHN1YmplY3RPclN1YmplY3RzLCBrZXksIGlzc3VlciwgaXNzdWVyS2V5LCBvcHRpb25zKSB7XG5cdHZhciBzdWJqZWN0cztcblx0aWYgKEFycmF5LmlzQXJyYXkoc3ViamVjdE9yU3ViamVjdHMpKVxuXHRcdHN1YmplY3RzID0gc3ViamVjdE9yU3ViamVjdHM7XG5cdGVsc2Vcblx0XHRzdWJqZWN0cyA9IFtzdWJqZWN0T3JTdWJqZWN0c107XG5cblx0YXNzZXJ0LmFycmF5T2ZPYmplY3Qoc3ViamVjdHMpO1xuXHRzdWJqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJqZWN0KSB7XG5cdFx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShzdWJqZWN0LCBJZGVudGl0eSwgWzEsIDBdLCAnc3ViamVjdCcpO1xuXHR9KTtcblxuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKGtleSwgS2V5LCBbMSwgMF0sICdrZXknKTtcblx0aWYgKFByaXZhdGVLZXkuaXNQcml2YXRlS2V5KGtleSkpXG5cdFx0a2V5ID0ga2V5LnRvUHVibGljKCk7XG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUoaXNzdWVyLCBJZGVudGl0eSwgWzEsIDBdLCAnaXNzdWVyJyk7XG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUoaXNzdWVyS2V5LCBQcml2YXRlS2V5LCBbMSwgMl0sICdpc3N1ZXIga2V5Jyk7XG5cblx0YXNzZXJ0Lm9wdGlvbmFsT2JqZWN0KG9wdGlvbnMsICdvcHRpb25zJyk7XG5cdGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpXG5cdFx0b3B0aW9ucyA9IHt9O1xuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucy52YWxpZEZyb20sICdvcHRpb25zLnZhbGlkRnJvbScpO1xuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucy52YWxpZFVudGlsLCAnb3B0aW9ucy52YWxpZFVudGlsJyk7XG5cdHZhciB2YWxpZEZyb20gPSBvcHRpb25zLnZhbGlkRnJvbTtcblx0dmFyIHZhbGlkVW50aWwgPSBvcHRpb25zLnZhbGlkVW50aWw7XG5cdGlmICh2YWxpZEZyb20gPT09IHVuZGVmaW5lZClcblx0XHR2YWxpZEZyb20gPSBuZXcgRGF0ZSgpO1xuXHRpZiAodmFsaWRVbnRpbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0YXNzZXJ0Lm9wdGlvbmFsTnVtYmVyKG9wdGlvbnMubGlmZXRpbWUsICdvcHRpb25zLmxpZmV0aW1lJyk7XG5cdFx0dmFyIGxpZmV0aW1lID0gb3B0aW9ucy5saWZldGltZTtcblx0XHRpZiAobGlmZXRpbWUgPT09IHVuZGVmaW5lZClcblx0XHRcdGxpZmV0aW1lID0gMTAqMzY1KjI0KjM2MDA7XG5cdFx0dmFsaWRVbnRpbCA9IG5ldyBEYXRlKCk7XG5cdFx0dmFsaWRVbnRpbC5zZXRUaW1lKHZhbGlkVW50aWwuZ2V0VGltZSgpICsgbGlmZXRpbWUqMTAwMCk7XG5cdH1cblx0YXNzZXJ0Lm9wdGlvbmFsQnVmZmVyKG9wdGlvbnMuc2VyaWFsLCAnb3B0aW9ucy5zZXJpYWwnKTtcblx0dmFyIHNlcmlhbCA9IG9wdGlvbnMuc2VyaWFsO1xuXHRpZiAoc2VyaWFsID09PSB1bmRlZmluZWQpXG5cdFx0c2VyaWFsID0gQnVmZmVyLmZyb20oJzAwMDAwMDAwMDAwMDAwMDEnLCAnaGV4Jyk7XG5cblx0dmFyIHB1cnBvc2VzID0gb3B0aW9ucy5wdXJwb3Nlcztcblx0aWYgKHB1cnBvc2VzID09PSB1bmRlZmluZWQpXG5cdFx0cHVycG9zZXMgPSBbXTtcblxuXHRpZiAocHVycG9zZXMuaW5kZXhPZignc2lnbmF0dXJlJykgPT09IC0xKVxuXHRcdHB1cnBvc2VzLnB1c2goJ3NpZ25hdHVyZScpO1xuXG5cdGlmIChvcHRpb25zLmNhID09PSB0cnVlKSB7XG5cdFx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ2NhJykgPT09IC0xKVxuXHRcdFx0cHVycG9zZXMucHVzaCgnY2EnKTtcblx0XHRpZiAocHVycG9zZXMuaW5kZXhPZignY3JsJykgPT09IC0xKVxuXHRcdFx0cHVycG9zZXMucHVzaCgnY3JsJyk7XG5cdH1cblxuXHR2YXIgaG9zdFN1YmplY3RzID0gc3ViamVjdHMuZmlsdGVyKGZ1bmN0aW9uIChzdWJqZWN0KSB7XG5cdFx0cmV0dXJuIChzdWJqZWN0LnR5cGUgPT09ICdob3N0Jyk7XG5cdH0pO1xuXHR2YXIgdXNlclN1YmplY3RzID0gc3ViamVjdHMuZmlsdGVyKGZ1bmN0aW9uIChzdWJqZWN0KSB7XG5cdFx0cmV0dXJuIChzdWJqZWN0LnR5cGUgPT09ICd1c2VyJyk7XG5cdH0pO1xuXHRpZiAoaG9zdFN1YmplY3RzLmxlbmd0aCA+IDApIHtcblx0XHRpZiAocHVycG9zZXMuaW5kZXhPZignc2VydmVyQXV0aCcpID09PSAtMSlcblx0XHRcdHB1cnBvc2VzLnB1c2goJ3NlcnZlckF1dGgnKTtcblx0fVxuXHRpZiAodXNlclN1YmplY3RzLmxlbmd0aCA+IDApIHtcblx0XHRpZiAocHVycG9zZXMuaW5kZXhPZignY2xpZW50QXV0aCcpID09PSAtMSlcblx0XHRcdHB1cnBvc2VzLnB1c2goJ2NsaWVudEF1dGgnKTtcblx0fVxuXHRpZiAodXNlclN1YmplY3RzLmxlbmd0aCA+IDAgfHwgaG9zdFN1YmplY3RzLmxlbmd0aCA+IDApIHtcblx0XHRpZiAocHVycG9zZXMuaW5kZXhPZigna2V5QWdyZWVtZW50JykgPT09IC0xKVxuXHRcdFx0cHVycG9zZXMucHVzaCgna2V5QWdyZWVtZW50Jyk7XG5cdFx0aWYgKGtleS50eXBlID09PSAncnNhJyAmJlxuXHRcdCAgICBwdXJwb3Nlcy5pbmRleE9mKCdlbmNyeXB0aW9uJykgPT09IC0xKVxuXHRcdFx0cHVycG9zZXMucHVzaCgnZW5jcnlwdGlvbicpO1xuXHR9XG5cblx0dmFyIGNlcnQgPSBuZXcgQ2VydGlmaWNhdGUoe1xuXHRcdHN1YmplY3RzOiBzdWJqZWN0cyxcblx0XHRpc3N1ZXI6IGlzc3Vlcixcblx0XHRzdWJqZWN0S2V5OiBrZXksXG5cdFx0aXNzdWVyS2V5OiBpc3N1ZXJLZXkudG9QdWJsaWMoKSxcblx0XHRzaWduYXR1cmVzOiB7fSxcblx0XHRzZXJpYWw6IHNlcmlhbCxcblx0XHR2YWxpZEZyb206IHZhbGlkRnJvbSxcblx0XHR2YWxpZFVudGlsOiB2YWxpZFVudGlsLFxuXHRcdHB1cnBvc2VzOiBwdXJwb3Nlc1xuXHR9KTtcblx0Y2VydC5zaWduV2l0aChpc3N1ZXJLZXkpO1xuXG5cdHJldHVybiAoY2VydCk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5wYXJzZSA9IGZ1bmN0aW9uIChkYXRhLCBmb3JtYXQsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiAoZGF0YSkgIT09ICdzdHJpbmcnKVxuXHRcdGFzc2VydC5idWZmZXIoZGF0YSwgJ2RhdGEnKTtcblx0aWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKVxuXHRcdGZvcm1hdCA9ICdhdXRvJztcblx0YXNzZXJ0LnN0cmluZyhmb3JtYXQsICdmb3JtYXQnKTtcblx0aWYgKHR5cGVvZiAob3B0aW9ucykgPT09ICdzdHJpbmcnKVxuXHRcdG9wdGlvbnMgPSB7IGZpbGVuYW1lOiBvcHRpb25zIH07XG5cdGFzc2VydC5vcHRpb25hbE9iamVjdChvcHRpb25zLCAnb3B0aW9ucycpO1xuXHRpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKVxuXHRcdG9wdGlvbnMgPSB7fTtcblx0YXNzZXJ0Lm9wdGlvbmFsU3RyaW5nKG9wdGlvbnMuZmlsZW5hbWUsICdvcHRpb25zLmZpbGVuYW1lJyk7XG5cdGlmIChvcHRpb25zLmZpbGVuYW1lID09PSB1bmRlZmluZWQpXG5cdFx0b3B0aW9ucy5maWxlbmFtZSA9ICcodW5uYW1lZCknO1xuXG5cdGFzc2VydC5vYmplY3QoZm9ybWF0c1tmb3JtYXRdLCAnZm9ybWF0c1tmb3JtYXRdJyk7XG5cblx0dHJ5IHtcblx0XHR2YXIgayA9IGZvcm1hdHNbZm9ybWF0XS5yZWFkKGRhdGEsIG9wdGlvbnMpO1xuXHRcdHJldHVybiAoayk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHR0aHJvdyAobmV3IENlcnRpZmljYXRlUGFyc2VFcnJvcihvcHRpb25zLmZpbGVuYW1lLCBmb3JtYXQsIGUpKTtcblx0fVxufTtcblxuQ2VydGlmaWNhdGUuaXNDZXJ0aWZpY2F0ZSA9IGZ1bmN0aW9uIChvYmosIHZlcikge1xuXHRyZXR1cm4gKHV0aWxzLmlzQ29tcGF0aWJsZShvYmosIENlcnRpZmljYXRlLCB2ZXIpKTtcbn07XG5cbi8qXG4gKiBBUEkgdmVyc2lvbnMgZm9yIENlcnRpZmljYXRlOlxuICogWzEsMF0gLS0gaW5pdGlhbCB2ZXJcbiAqIFsxLDFdIC0tIG9wZW5zc2ggZm9ybWF0IG5vdyB1bnBhY2tzIGV4dGVuc2lvbnNcbiAqL1xuQ2VydGlmaWNhdGUucHJvdG90eXBlLl9zc2hwa0FwaVZlcnNpb24gPSBbMSwgMV07XG5cbkNlcnRpZmljYXRlLl9vbGRWZXJzaW9uRGV0ZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuXHRyZXR1cm4gKFsxLCAwXSk7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJDZXJ0aWZpY2F0ZSIsImFzc2VydCIsInJlcXVpcmUiLCJCdWZmZXIiLCJhbGdzIiwiY3J5cHRvIiwiRmluZ2VycHJpbnQiLCJTaWduYXR1cmUiLCJlcnJzIiwidXRpbCIsInV0aWxzIiwiS2V5IiwiUHJpdmF0ZUtleSIsIklkZW50aXR5IiwiZm9ybWF0cyIsIkNlcnRpZmljYXRlUGFyc2VFcnJvciIsIkludmFsaWRBbGdvcml0aG1FcnJvciIsIm9wdHMiLCJvYmplY3QiLCJhcnJheU9mT2JqZWN0Iiwic3ViamVjdHMiLCJhc3NlcnRDb21wYXRpYmxlIiwic3ViamVjdEtleSIsImlzc3VlciIsImlzc3VlcktleSIsInVuZGVmaW5lZCIsInNpZ25hdHVyZXMiLCJidWZmZXIiLCJzZXJpYWwiLCJkYXRlIiwidmFsaWRGcm9tIiwidmFsaWRVbnRpbCIsIm9wdGlvbmFsQXJyYXlPZlN0cmluZyIsInB1cnBvc2VzIiwiX2hhc2hDYWNoZSIsInByb3RvdHlwZSIsInRvQnVmZmVyIiwiZm9ybWF0Iiwib3B0aW9ucyIsInN0cmluZyIsIm9wdGlvbmFsT2JqZWN0Iiwid3JpdGUiLCJ0b1N0cmluZyIsImZpbmdlcnByaW50IiwiYWxnbyIsInR5cGUiLCJoYXNoIiwiYWxnb3JpdGhtIiwidG9Mb3dlckNhc2UiLCJoYXNoQWxncyIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJpc0V4cGlyZWQiLCJ3aGVuIiwiRGF0ZSIsImdldFRpbWUiLCJpc1NpZ25lZEJ5IiwiaXNzdWVyQ2VydCIsImVxdWFscyIsImxlbmd0aCIsImluZGV4T2YiLCJpc1NpZ25lZEJ5S2V5IiwiZ2V0RXh0ZW5zaW9uIiwia2V5T3JPaWQiLCJleHQiLCJnZXRFeHRlbnNpb25zIiwiZmlsdGVyIiwibWF5YmVFeHQiLCJvaWQiLCJuYW1lIiwiZXh0cyIsIng1MDkiLCJleHRyYXMiLCJmb3JFYWNoIiwicHVzaCIsIm9wZW5zc2giLCJtYXRjaGVzIiwiZm10IiwiT2JqZWN0Iiwia2V5cyIsInZhbGlkIiwidmVyaWZ5Iiwic2lnbldpdGgiLCJrZXkiLCJmbXRzIiwiZGlkT25lIiwiaSIsInJldCIsInNpZ24iLCJFcnJvciIsImNyZWF0ZVNlbGZTaWduZWQiLCJzdWJqZWN0T3JTdWJqZWN0cyIsIkFycmF5IiwiaXNBcnJheSIsInN1YmplY3QiLCJvcHRpb25hbE51bWJlciIsImxpZmV0aW1lIiwic2V0VGltZSIsIm9wdGlvbmFsQnVmZmVyIiwiZnJvbSIsImhvc3RTdWJqZWN0cyIsInVzZXJTdWJqZWN0cyIsImNlcnQiLCJ0b1B1YmxpYyIsImNyZWF0ZSIsImlzUHJpdmF0ZUtleSIsImNhIiwicGFyc2UiLCJkYXRhIiwiZmlsZW5hbWUiLCJvcHRpb25hbFN0cmluZyIsImsiLCJyZWFkIiwiZSIsImlzQ2VydGlmaWNhdGUiLCJvYmoiLCJ2ZXIiLCJpc0NvbXBhdGlibGUiLCJfc3NocGtBcGlWZXJzaW9uIiwiX29sZFZlcnNpb25EZXRlY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/certificate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/dhe.js":
/*!***************************************!*\
  !*** ./node_modules/sshpk/lib/dhe.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    DiffieHellman: DiffieHellman,\n    generateECDSA: generateECDSA,\n    generateED25519: generateED25519\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar CRYPTO_HAVE_ECDH = crypto.createECDH !== undefined;\nvar ecdh = __webpack_require__(/*! ecc-jsbn */ \"(rsc)/./node_modules/ecc-jsbn/index.js\");\nvar ec = __webpack_require__(/*! ecc-jsbn/lib/ec */ \"(rsc)/./node_modules/ecc-jsbn/lib/ec.js\");\nvar jsbn = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nfunction DiffieHellman(key) {\n    utils.assertCompatible(key, Key, [\n        1,\n        4\n    ], \"key\");\n    this._isPriv = PrivateKey.isPrivateKey(key, [\n        1,\n        3\n    ]);\n    this._algo = key.type;\n    this._curve = key.curve;\n    this._key = key;\n    if (key.type === \"dsa\") {\n        if (!CRYPTO_HAVE_ECDH) {\n            throw new Error(\"Due to bugs in the node 0.10 \" + \"crypto API, node 0.12.x or later is required \" + \"to use DH\");\n        }\n        this._dh = crypto.createDiffieHellman(key.part.p.data, undefined, key.part.g.data, undefined);\n        this._p = key.part.p;\n        this._g = key.part.g;\n        if (this._isPriv) this._dh.setPrivateKey(key.part.x.data);\n        this._dh.setPublicKey(key.part.y.data);\n    } else if (key.type === \"ecdsa\") {\n        if (!CRYPTO_HAVE_ECDH) {\n            this._ecParams = new X9ECParameters(this._curve);\n            if (this._isPriv) {\n                this._priv = new ECPrivate(this._ecParams, key.part.d.data);\n            }\n            return;\n        }\n        var curve = {\n            \"nistp256\": \"prime256v1\",\n            \"nistp384\": \"secp384r1\",\n            \"nistp521\": \"secp521r1\"\n        }[key.curve];\n        this._dh = crypto.createECDH(curve);\n        if (typeof this._dh !== \"object\" || typeof this._dh.setPrivateKey !== \"function\") {\n            CRYPTO_HAVE_ECDH = false;\n            DiffieHellman.call(this, key);\n            return;\n        }\n        if (this._isPriv) this._dh.setPrivateKey(key.part.d.data);\n        this._dh.setPublicKey(key.part.Q.data);\n    } else if (key.type === \"curve25519\") {\n        if (this._isPriv) {\n            utils.assertCompatible(key, PrivateKey, [\n                1,\n                5\n            ], \"key\");\n            this._priv = key.part.k.data;\n        }\n    } else {\n        throw new Error(\"DH not supported for \" + key.type + \" keys\");\n    }\n}\nDiffieHellman.prototype.getPublicKey = function() {\n    if (this._isPriv) return this._key.toPublic();\n    return this._key;\n};\nDiffieHellman.prototype.getPrivateKey = function() {\n    if (this._isPriv) return this._key;\n    else return undefined;\n};\nDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\nDiffieHellman.prototype._keyCheck = function(pk, isPub) {\n    assert.object(pk, \"key\");\n    if (!isPub) utils.assertCompatible(pk, PrivateKey, [\n        1,\n        3\n    ], \"key\");\n    utils.assertCompatible(pk, Key, [\n        1,\n        4\n    ], \"key\");\n    if (pk.type !== this._algo) {\n        throw new Error(\"A \" + pk.type + \" key cannot be used in \" + this._algo + \" Diffie-Hellman\");\n    }\n    if (pk.curve !== this._curve) {\n        throw new Error(\"A key from the \" + pk.curve + \" curve \" + \"cannot be used with a \" + this._curve + \" Diffie-Hellman\");\n    }\n    if (pk.type === \"dsa\") {\n        assert.deepEqual(pk.part.p, this._p, \"DSA key prime does not match\");\n        assert.deepEqual(pk.part.g, this._g, \"DSA key generator does not match\");\n    }\n};\nDiffieHellman.prototype.setKey = function(pk) {\n    this._keyCheck(pk);\n    if (pk.type === \"dsa\") {\n        this._dh.setPrivateKey(pk.part.x.data);\n        this._dh.setPublicKey(pk.part.y.data);\n    } else if (pk.type === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            this._dh.setPrivateKey(pk.part.d.data);\n            this._dh.setPublicKey(pk.part.Q.data);\n        } else {\n            this._priv = new ECPrivate(this._ecParams, pk.part.d.data);\n        }\n    } else if (pk.type === \"curve25519\") {\n        var k = pk.part.k;\n        if (!pk.part.k) k = pk.part.r;\n        this._priv = k.data;\n        if (this._priv[0] === 0x00) this._priv = this._priv.slice(1);\n        this._priv = this._priv.slice(0, 32);\n    }\n    this._key = pk;\n    this._isPriv = true;\n};\nDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\nDiffieHellman.prototype.computeSecret = function(otherpk) {\n    this._keyCheck(otherpk, true);\n    if (!this._isPriv) throw new Error(\"DH exchange has not been initialized with \" + \"a private key yet\");\n    var pub;\n    if (this._algo === \"dsa\") {\n        return this._dh.computeSecret(otherpk.part.y.data);\n    } else if (this._algo === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            return this._dh.computeSecret(otherpk.part.Q.data);\n        } else {\n            pub = new ECPublic(this._ecParams, otherpk.part.Q.data);\n            return this._priv.deriveSharedSecret(pub);\n        }\n    } else if (this._algo === \"curve25519\") {\n        pub = otherpk.part.A.data;\n        while(pub[0] === 0x00 && pub.length > 32)pub = pub.slice(1);\n        var priv = this._priv;\n        assert.strictEqual(pub.length, 32);\n        assert.strictEqual(priv.length, 32);\n        var secret = nacl.box.before(new Uint8Array(pub), new Uint8Array(priv));\n        return Buffer.from(secret);\n    }\n    throw new Error(\"Invalid algorithm: \" + this._algo);\n};\nDiffieHellman.prototype.generateKey = function() {\n    var parts = [];\n    var priv, pub;\n    if (this._algo === \"dsa\") {\n        this._dh.generateKeys();\n        parts.push({\n            name: \"p\",\n            data: this._p.data\n        });\n        parts.push({\n            name: \"q\",\n            data: this._key.part.q.data\n        });\n        parts.push({\n            name: \"g\",\n            data: this._g.data\n        });\n        parts.push({\n            name: \"y\",\n            data: this._dh.getPublicKey()\n        });\n        parts.push({\n            name: \"x\",\n            data: this._dh.getPrivateKey()\n        });\n        this._key = new PrivateKey({\n            type: \"dsa\",\n            parts: parts\n        });\n        this._isPriv = true;\n        return this._key;\n    } else if (this._algo === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            this._dh.generateKeys();\n            parts.push({\n                name: \"curve\",\n                data: Buffer.from(this._curve)\n            });\n            parts.push({\n                name: \"Q\",\n                data: this._dh.getPublicKey()\n            });\n            parts.push({\n                name: \"d\",\n                data: this._dh.getPrivateKey()\n            });\n            this._key = new PrivateKey({\n                type: \"ecdsa\",\n                curve: this._curve,\n                parts: parts\n            });\n            this._isPriv = true;\n            return this._key;\n        } else {\n            var n = this._ecParams.getN();\n            var r = new jsbn(crypto.randomBytes(n.bitLength()));\n            var n1 = n.subtract(jsbn.ONE);\n            priv = r.mod(n1).add(jsbn.ONE);\n            pub = this._ecParams.getG().multiply(priv);\n            priv = Buffer.from(priv.toByteArray());\n            pub = Buffer.from(this._ecParams.getCurve().encodePointHex(pub), \"hex\");\n            this._priv = new ECPrivate(this._ecParams, priv);\n            parts.push({\n                name: \"curve\",\n                data: Buffer.from(this._curve)\n            });\n            parts.push({\n                name: \"Q\",\n                data: pub\n            });\n            parts.push({\n                name: \"d\",\n                data: priv\n            });\n            this._key = new PrivateKey({\n                type: \"ecdsa\",\n                curve: this._curve,\n                parts: parts\n            });\n            this._isPriv = true;\n            return this._key;\n        }\n    } else if (this._algo === \"curve25519\") {\n        var pair = nacl.box.keyPair();\n        priv = Buffer.from(pair.secretKey);\n        pub = Buffer.from(pair.publicKey);\n        priv = Buffer.concat([\n            priv,\n            pub\n        ]);\n        assert.strictEqual(priv.length, 64);\n        assert.strictEqual(pub.length, 32);\n        parts.push({\n            name: \"A\",\n            data: pub\n        });\n        parts.push({\n            name: \"k\",\n            data: priv\n        });\n        this._key = new PrivateKey({\n            type: \"curve25519\",\n            parts: parts\n        });\n        this._isPriv = true;\n        return this._key;\n    }\n    throw new Error(\"Invalid algorithm: \" + this._algo);\n};\nDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */ function X9ECParameters(name) {\n    var params = algs.curves[name];\n    assert.object(params);\n    var p = new jsbn(params.p);\n    var a = new jsbn(params.a);\n    var b = new jsbn(params.b);\n    var n = new jsbn(params.n);\n    var h = jsbn.ONE;\n    var curve = new ec.ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(params.G.toString(\"hex\"));\n    this.curve = curve;\n    this.g = G;\n    this.n = n;\n    this.h = h;\n}\nX9ECParameters.prototype.getCurve = function() {\n    return this.curve;\n};\nX9ECParameters.prototype.getG = function() {\n    return this.g;\n};\nX9ECParameters.prototype.getN = function() {\n    return this.n;\n};\nX9ECParameters.prototype.getH = function() {\n    return this.h;\n};\nfunction ECPublic(params, buffer) {\n    this._params = params;\n    if (buffer[0] === 0x00) buffer = buffer.slice(1);\n    this._pub = params.getCurve().decodePointHex(buffer.toString(\"hex\"));\n}\nfunction ECPrivate(params, buffer) {\n    this._params = params;\n    this._priv = new jsbn(utils.mpNormalize(buffer));\n}\nECPrivate.prototype.deriveSharedSecret = function(pubKey) {\n    assert.ok(pubKey instanceof ECPublic);\n    var S = pubKey._pub.multiply(this._priv);\n    return Buffer.from(S.getX().toBigInteger().toByteArray());\n};\nfunction generateED25519() {\n    var pair = nacl.sign.keyPair();\n    var priv = Buffer.from(pair.secretKey);\n    var pub = Buffer.from(pair.publicKey);\n    assert.strictEqual(priv.length, 64);\n    assert.strictEqual(pub.length, 32);\n    var parts = [];\n    parts.push({\n        name: \"A\",\n        data: pub\n    });\n    parts.push({\n        name: \"k\",\n        data: priv.slice(0, 32)\n    });\n    var key = new PrivateKey({\n        type: \"ed25519\",\n        parts: parts\n    });\n    return key;\n}\n/* Generates a new ECDSA private key on a given curve. */ function generateECDSA(curve) {\n    var parts = [];\n    var key;\n    if (CRYPTO_HAVE_ECDH) {\n        /*\n\t\t * Node crypto doesn't expose key generation directly, but the\n\t\t * ECDH instances can generate keys. It turns out this just\n\t\t * calls into the OpenSSL generic key generator, and we can\n\t\t * read its output happily without doing an actual DH. So we\n\t\t * use that here.\n\t\t */ var osCurve = {\n            \"nistp256\": \"prime256v1\",\n            \"nistp384\": \"secp384r1\",\n            \"nistp521\": \"secp521r1\"\n        }[curve];\n        var dh = crypto.createECDH(osCurve);\n        dh.generateKeys();\n        parts.push({\n            name: \"curve\",\n            data: Buffer.from(curve)\n        });\n        parts.push({\n            name: \"Q\",\n            data: dh.getPublicKey()\n        });\n        parts.push({\n            name: \"d\",\n            data: dh.getPrivateKey()\n        });\n        key = new PrivateKey({\n            type: \"ecdsa\",\n            curve: curve,\n            parts: parts\n        });\n        return key;\n    } else {\n        var ecParams = new X9ECParameters(curve);\n        /* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */ var n = ecParams.getN();\n        /*\n\t\t * The crypto.randomBytes() function can only give us whole\n\t\t * bytes, so taking a nod from X9.62, we round up.\n\t\t */ var cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n        var c = new jsbn(crypto.randomBytes(cByteLen));\n        var n1 = n.subtract(jsbn.ONE);\n        var priv = c.mod(n1).add(jsbn.ONE);\n        var pub = ecParams.getG().multiply(priv);\n        priv = Buffer.from(priv.toByteArray());\n        pub = Buffer.from(ecParams.getCurve().encodePointHex(pub), \"hex\");\n        parts.push({\n            name: \"curve\",\n            data: Buffer.from(curve)\n        });\n        parts.push({\n            name: \"Q\",\n            data: pub\n        });\n        parts.push({\n            name: \"d\",\n            data: priv\n        });\n        key = new PrivateKey({\n            type: \"ecdsa\",\n            curve: curve,\n            parts: parts\n        });\n        return key;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/dhe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/ed-compat.js":
/*!*********************************************!*\
  !*** ./node_modules/sshpk/lib/ed-compat.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    Verifier: Verifier,\n    Signer: Signer\n};\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nfunction Verifier(key, hashAlgo) {\n    if (hashAlgo.toLowerCase() !== \"sha512\") throw new Error(\"ED25519 only supports the use of \" + \"SHA-512 hashes\");\n    this.key = key;\n    this.chunks = [];\n    stream.Writable.call(this, {});\n}\nutil.inherits(Verifier, stream.Writable);\nVerifier.prototype._write = function(chunk, enc, cb) {\n    this.chunks.push(chunk);\n    cb();\n};\nVerifier.prototype.update = function(chunk) {\n    if (typeof chunk === \"string\") chunk = Buffer.from(chunk, \"binary\");\n    this.chunks.push(chunk);\n};\nVerifier.prototype.verify = function(signature, fmt) {\n    var sig;\n    if (Signature.isSignature(signature, [\n        2,\n        0\n    ])) {\n        if (signature.type !== \"ed25519\") return false;\n        sig = signature.toBuffer(\"raw\");\n    } else if (typeof signature === \"string\") {\n        sig = Buffer.from(signature, \"base64\");\n    } else if (Signature.isSignature(signature, [\n        1,\n        0\n    ])) {\n        throw new Error(\"signature was created by too old \" + \"a version of sshpk and cannot be verified\");\n    }\n    assert.buffer(sig);\n    return nacl.sign.detached.verify(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(sig), new Uint8Array(this.key.part.A.data));\n};\nfunction Signer(key, hashAlgo) {\n    if (hashAlgo.toLowerCase() !== \"sha512\") throw new Error(\"ED25519 only supports the use of \" + \"SHA-512 hashes\");\n    this.key = key;\n    this.chunks = [];\n    stream.Writable.call(this, {});\n}\nutil.inherits(Signer, stream.Writable);\nSigner.prototype._write = function(chunk, enc, cb) {\n    this.chunks.push(chunk);\n    cb();\n};\nSigner.prototype.update = function(chunk) {\n    if (typeof chunk === \"string\") chunk = Buffer.from(chunk, \"binary\");\n    this.chunks.push(chunk);\n};\nSigner.prototype.sign = function() {\n    var sig = nacl.sign.detached(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(Buffer.concat([\n        this.key.part.k.data,\n        this.key.part.A.data\n    ])));\n    var sigBuf = Buffer.from(sig);\n    var sigObj = Signature.parse(sigBuf, \"ed25519\", \"raw\");\n    sigObj.hashAlgorithm = \"sha512\";\n    return sigObj;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2VkLWNvbXBhdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7O0FBRTlCQSxPQUFPQyxPQUFPLEdBQUc7SUFDaEJDLFVBQVVBO0lBQ1ZDLFFBQVFBO0FBQ1Q7QUFFQSxJQUFJQyxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUNuQixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJSSxTQUFTSiw4RkFBOEI7QUFDM0MsSUFBSUssWUFBWUwsbUJBQU9BLENBQUM7QUFFeEIsU0FBU0gsU0FBU1MsR0FBRyxFQUFFQyxRQUFRO0lBQzlCLElBQUlBLFNBQVNDLFdBQVcsT0FBTyxVQUM5QixNQUFPLElBQUlDLE1BQU0sc0NBQ2I7SUFFTCxJQUFJLENBQUNILEdBQUcsR0FBR0E7SUFDWCxJQUFJLENBQUNJLE1BQU0sR0FBRyxFQUFFO0lBRWhCVCxPQUFPVSxRQUFRLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QjtBQUNBVixLQUFLVyxRQUFRLENBQUNoQixVQUFVSSxPQUFPVSxRQUFRO0FBRXZDZCxTQUFTaUIsU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBVUMsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEVBQUU7SUFDbkQsSUFBSSxDQUFDUixNQUFNLENBQUNTLElBQUksQ0FBQ0g7SUFDakJFO0FBQ0Q7QUFFQXJCLFNBQVNpQixTQUFTLENBQUNNLE1BQU0sR0FBRyxTQUFVSixLQUFLO0lBQzFDLElBQUksT0FBUUEsVUFBVyxVQUN0QkEsUUFBUVosT0FBT2lCLElBQUksQ0FBQ0wsT0FBTztJQUM1QixJQUFJLENBQUNOLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDSDtBQUNsQjtBQUVBbkIsU0FBU2lCLFNBQVMsQ0FBQ1EsTUFBTSxHQUFHLFNBQVVDLFNBQVMsRUFBRUMsR0FBRztJQUNuRCxJQUFJQztJQUNKLElBQUlwQixVQUFVcUIsV0FBVyxDQUFDSCxXQUFXO1FBQUM7UUFBRztLQUFFLEdBQUc7UUFDN0MsSUFBSUEsVUFBVUksSUFBSSxLQUFLLFdBQ3RCLE9BQVE7UUFDVEYsTUFBTUYsVUFBVUssUUFBUSxDQUFDO0lBRTFCLE9BQU8sSUFBSSxPQUFRTCxjQUFlLFVBQVU7UUFDM0NFLE1BQU1yQixPQUFPaUIsSUFBSSxDQUFDRSxXQUFXO0lBRTlCLE9BQU8sSUFBSWxCLFVBQVVxQixXQUFXLENBQUNILFdBQVc7UUFBQztRQUFHO0tBQUUsR0FBRztRQUNwRCxNQUFPLElBQUlkLE1BQU0sc0NBQ2I7SUFDTDtJQUVBTixPQUFPMEIsTUFBTSxDQUFDSjtJQUNkLE9BQVExQixLQUFLK0IsSUFBSSxDQUFDQyxRQUFRLENBQUNULE1BQU0sQ0FDN0IsSUFBSVUsV0FBVzVCLE9BQU82QixNQUFNLENBQUMsSUFBSSxDQUFDdkIsTUFBTSxJQUN4QyxJQUFJc0IsV0FBV1AsTUFDZixJQUFJTyxXQUFXLElBQUksQ0FBQzFCLEdBQUcsQ0FBQzRCLElBQUksQ0FBQ0MsQ0FBQyxDQUFDQyxJQUFJO0FBQ3hDO0FBRUEsU0FBU3RDLE9BQU9RLEdBQUcsRUFBRUMsUUFBUTtJQUM1QixJQUFJQSxTQUFTQyxXQUFXLE9BQU8sVUFDOUIsTUFBTyxJQUFJQyxNQUFNLHNDQUNiO0lBRUwsSUFBSSxDQUFDSCxHQUFHLEdBQUdBO0lBQ1gsSUFBSSxDQUFDSSxNQUFNLEdBQUcsRUFBRTtJQUVoQlQsT0FBT1UsUUFBUSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDN0I7QUFDQVYsS0FBS1csUUFBUSxDQUFDZixRQUFRRyxPQUFPVSxRQUFRO0FBRXJDYixPQUFPZ0IsU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBVUMsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEVBQUU7SUFDakQsSUFBSSxDQUFDUixNQUFNLENBQUNTLElBQUksQ0FBQ0g7SUFDakJFO0FBQ0Q7QUFFQXBCLE9BQU9nQixTQUFTLENBQUNNLE1BQU0sR0FBRyxTQUFVSixLQUFLO0lBQ3hDLElBQUksT0FBUUEsVUFBVyxVQUN0QkEsUUFBUVosT0FBT2lCLElBQUksQ0FBQ0wsT0FBTztJQUM1QixJQUFJLENBQUNOLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDSDtBQUNsQjtBQUVBbEIsT0FBT2dCLFNBQVMsQ0FBQ2dCLElBQUksR0FBRztJQUN2QixJQUFJTCxNQUFNMUIsS0FBSytCLElBQUksQ0FBQ0MsUUFBUSxDQUN4QixJQUFJQyxXQUFXNUIsT0FBTzZCLE1BQU0sQ0FBQyxJQUFJLENBQUN2QixNQUFNLElBQ3hDLElBQUlzQixXQUFXNUIsT0FBTzZCLE1BQU0sQ0FBQztRQUNoQyxJQUFJLENBQUMzQixHQUFHLENBQUM0QixJQUFJLENBQUNHLENBQUMsQ0FBQ0QsSUFBSTtRQUFFLElBQUksQ0FBQzlCLEdBQUcsQ0FBQzRCLElBQUksQ0FBQ0MsQ0FBQyxDQUFDQyxJQUFJO0tBQUM7SUFDNUMsSUFBSUUsU0FBU2xDLE9BQU9pQixJQUFJLENBQUNJO0lBQ3pCLElBQUljLFNBQVNsQyxVQUFVbUMsS0FBSyxDQUFDRixRQUFRLFdBQVc7SUFDaERDLE9BQU9FLGFBQWEsR0FBRztJQUN2QixPQUFRRjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2VkLWNvbXBhdC5qcz9mMDgwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0VmVyaWZpZXI6IFZlcmlmaWVyLFxuXHRTaWduZXI6IFNpZ25lclxufTtcblxudmFyIG5hY2wgPSByZXF1aXJlKCd0d2VldG5hY2wnKTtcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIFZlcmlmaWVyKGtleSwgaGFzaEFsZ28pIHtcblx0aWYgKGhhc2hBbGdvLnRvTG93ZXJDYXNlKCkgIT09ICdzaGE1MTInKVxuXHRcdHRocm93IChuZXcgRXJyb3IoJ0VEMjU1MTkgb25seSBzdXBwb3J0cyB0aGUgdXNlIG9mICcgK1xuXHRcdCAgICAnU0hBLTUxMiBoYXNoZXMnKSk7XG5cblx0dGhpcy5rZXkgPSBrZXk7XG5cdHRoaXMuY2h1bmtzID0gW107XG5cblx0c3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcywge30pO1xufVxudXRpbC5pbmhlcml0cyhWZXJpZmllciwgc3RyZWFtLldyaXRhYmxlKTtcblxuVmVyaWZpZXIucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jLCBjYikge1xuXHR0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcblx0Y2IoKTtcbn07XG5cblZlcmlmaWVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcblx0aWYgKHR5cGVvZiAoY2h1bmspID09PSAnc3RyaW5nJylcblx0XHRjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCAnYmluYXJ5Jyk7XG5cdHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xufTtcblxuVmVyaWZpZXIucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIChzaWduYXR1cmUsIGZtdCkge1xuXHR2YXIgc2lnO1xuXHRpZiAoU2lnbmF0dXJlLmlzU2lnbmF0dXJlKHNpZ25hdHVyZSwgWzIsIDBdKSkge1xuXHRcdGlmIChzaWduYXR1cmUudHlwZSAhPT0gJ2VkMjU1MTknKVxuXHRcdFx0cmV0dXJuIChmYWxzZSk7XG5cdFx0c2lnID0gc2lnbmF0dXJlLnRvQnVmZmVyKCdyYXcnKTtcblxuXHR9IGVsc2UgaWYgKHR5cGVvZiAoc2lnbmF0dXJlKSA9PT0gJ3N0cmluZycpIHtcblx0XHRzaWcgPSBCdWZmZXIuZnJvbShzaWduYXR1cmUsICdiYXNlNjQnKTtcblxuXHR9IGVsc2UgaWYgKFNpZ25hdHVyZS5pc1NpZ25hdHVyZShzaWduYXR1cmUsIFsxLCAwXSkpIHtcblx0XHR0aHJvdyAobmV3IEVycm9yKCdzaWduYXR1cmUgd2FzIGNyZWF0ZWQgYnkgdG9vIG9sZCAnICtcblx0XHQgICAgJ2EgdmVyc2lvbiBvZiBzc2hwayBhbmQgY2Fubm90IGJlIHZlcmlmaWVkJykpO1xuXHR9XG5cblx0YXNzZXJ0LmJ1ZmZlcihzaWcpO1xuXHRyZXR1cm4gKG5hY2wuc2lnbi5kZXRhY2hlZC52ZXJpZnkoXG5cdCAgICBuZXcgVWludDhBcnJheShCdWZmZXIuY29uY2F0KHRoaXMuY2h1bmtzKSksXG5cdCAgICBuZXcgVWludDhBcnJheShzaWcpLFxuXHQgICAgbmV3IFVpbnQ4QXJyYXkodGhpcy5rZXkucGFydC5BLmRhdGEpKSk7XG59O1xuXG5mdW5jdGlvbiBTaWduZXIoa2V5LCBoYXNoQWxnbykge1xuXHRpZiAoaGFzaEFsZ28udG9Mb3dlckNhc2UoKSAhPT0gJ3NoYTUxMicpXG5cdFx0dGhyb3cgKG5ldyBFcnJvcignRUQyNTUxOSBvbmx5IHN1cHBvcnRzIHRoZSB1c2Ugb2YgJyArXG5cdFx0ICAgICdTSEEtNTEyIGhhc2hlcycpKTtcblxuXHR0aGlzLmtleSA9IGtleTtcblx0dGhpcy5jaHVua3MgPSBbXTtcblxuXHRzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzLCB7fSk7XG59XG51dGlsLmluaGVyaXRzKFNpZ25lciwgc3RyZWFtLldyaXRhYmxlKTtcblxuU2lnbmVyLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuYywgY2IpIHtcblx0dGhpcy5jaHVua3MucHVzaChjaHVuayk7XG5cdGNiKCk7XG59O1xuXG5TaWduZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuXHRpZiAodHlwZW9mIChjaHVuaykgPT09ICdzdHJpbmcnKVxuXHRcdGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssICdiaW5hcnknKTtcblx0dGhpcy5jaHVua3MucHVzaChjaHVuayk7XG59O1xuXG5TaWduZXIucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzaWcgPSBuYWNsLnNpZ24uZGV0YWNoZWQoXG5cdCAgICBuZXcgVWludDhBcnJheShCdWZmZXIuY29uY2F0KHRoaXMuY2h1bmtzKSksXG5cdCAgICBuZXcgVWludDhBcnJheShCdWZmZXIuY29uY2F0KFtcblx0XHR0aGlzLmtleS5wYXJ0LmsuZGF0YSwgdGhpcy5rZXkucGFydC5BLmRhdGFdKSkpO1xuXHR2YXIgc2lnQnVmID0gQnVmZmVyLmZyb20oc2lnKTtcblx0dmFyIHNpZ09iaiA9IFNpZ25hdHVyZS5wYXJzZShzaWdCdWYsICdlZDI1NTE5JywgJ3JhdycpO1xuXHRzaWdPYmouaGFzaEFsZ29yaXRobSA9ICdzaGE1MTInO1xuXHRyZXR1cm4gKHNpZ09iaik7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJWZXJpZmllciIsIlNpZ25lciIsIm5hY2wiLCJyZXF1aXJlIiwic3RyZWFtIiwidXRpbCIsImFzc2VydCIsIkJ1ZmZlciIsIlNpZ25hdHVyZSIsImtleSIsImhhc2hBbGdvIiwidG9Mb3dlckNhc2UiLCJFcnJvciIsImNodW5rcyIsIldyaXRhYmxlIiwiY2FsbCIsImluaGVyaXRzIiwicHJvdG90eXBlIiwiX3dyaXRlIiwiY2h1bmsiLCJlbmMiLCJjYiIsInB1c2giLCJ1cGRhdGUiLCJmcm9tIiwidmVyaWZ5Iiwic2lnbmF0dXJlIiwiZm10Iiwic2lnIiwiaXNTaWduYXR1cmUiLCJ0eXBlIiwidG9CdWZmZXIiLCJidWZmZXIiLCJzaWduIiwiZGV0YWNoZWQiLCJVaW50OEFycmF5IiwiY29uY2F0IiwicGFydCIsIkEiLCJkYXRhIiwiayIsInNpZ0J1ZiIsInNpZ09iaiIsInBhcnNlIiwiaGFzaEFsZ29yaXRobSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/ed-compat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/errors.js":
/*!******************************************!*\
  !*** ./node_modules/sshpk/lib/errors.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nfunction FingerprintFormatError(fp, format) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, FingerprintFormatError);\n    this.name = \"FingerprintFormatError\";\n    this.fingerprint = fp;\n    this.format = format;\n    this.message = \"Fingerprint format is not supported, or is invalid: \";\n    if (fp !== undefined) this.message += \" fingerprint = \" + fp;\n    if (format !== undefined) this.message += \" format = \" + format;\n}\nutil.inherits(FingerprintFormatError, Error);\nfunction InvalidAlgorithmError(alg) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, InvalidAlgorithmError);\n    this.name = \"InvalidAlgorithmError\";\n    this.algorithm = alg;\n    this.message = 'Algorithm \"' + alg + '\" is not supported';\n}\nutil.inherits(InvalidAlgorithmError, Error);\nfunction KeyParseError(name, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, KeyParseError);\n    this.name = \"KeyParseError\";\n    this.format = format;\n    this.keyName = name;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse \" + name + \" as a valid \" + format + \" format key: \" + innerErr.message;\n}\nutil.inherits(KeyParseError, Error);\nfunction SignatureParseError(type, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, SignatureParseError);\n    this.name = \"SignatureParseError\";\n    this.type = type;\n    this.format = format;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse the given data as a \" + type + \" signature in \" + format + \" format: \" + innerErr.message;\n}\nutil.inherits(SignatureParseError, Error);\nfunction CertificateParseError(name, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, CertificateParseError);\n    this.name = \"CertificateParseError\";\n    this.format = format;\n    this.certName = name;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse \" + name + \" as a valid \" + format + \" format certificate: \" + innerErr.message;\n}\nutil.inherits(CertificateParseError, Error);\nfunction KeyEncryptedError(name, format) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, KeyEncryptedError);\n    this.name = \"KeyEncryptedError\";\n    this.format = format;\n    this.keyName = name;\n    this.message = \"The \" + format + \" format key \" + name + \" is \" + \"encrypted (password-protected), and no passphrase was \" + \"provided in `options`\";\n}\nutil.inherits(KeyEncryptedError, Error);\nmodule.exports = {\n    FingerprintFormatError: FingerprintFormatError,\n    InvalidAlgorithmError: InvalidAlgorithmError,\n    KeyParseError: KeyParseError,\n    SignatureParseError: SignatureParseError,\n    KeyEncryptedError: KeyEncryptedError,\n    CertificateParseError: CertificateParseError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7O0FBRTlCLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBRW5CLFNBQVNFLHVCQUF1QkMsRUFBRSxFQUFFQyxNQUFNO0lBQ3pDLElBQUlDLE1BQU1DLGlCQUFpQixFQUMxQkQsTUFBTUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFSjtJQUMvQixJQUFJLENBQUNLLElBQUksR0FBRztJQUNaLElBQUksQ0FBQ0MsV0FBVyxHQUFHTDtJQUNuQixJQUFJLENBQUNDLE1BQU0sR0FBR0E7SUFDZCxJQUFJLENBQUNLLE9BQU8sR0FBRztJQUNmLElBQUlOLE9BQU9PLFdBQ1YsSUFBSSxDQUFDRCxPQUFPLElBQUksb0JBQW9CTjtJQUNyQyxJQUFJQyxXQUFXTSxXQUNkLElBQUksQ0FBQ0QsT0FBTyxJQUFJLGVBQWVMO0FBQ2pDO0FBQ0FILEtBQUtVLFFBQVEsQ0FBQ1Qsd0JBQXdCRztBQUV0QyxTQUFTTyxzQkFBc0JDLEdBQUc7SUFDakMsSUFBSVIsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVNO0lBQy9CLElBQUksQ0FBQ0wsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDTyxTQUFTLEdBQUdEO0lBQ2pCLElBQUksQ0FBQ0osT0FBTyxHQUFHLGdCQUFnQkksTUFBTTtBQUN0QztBQUNBWixLQUFLVSxRQUFRLENBQUNDLHVCQUF1QlA7QUFFckMsU0FBU1UsY0FBY1IsSUFBSSxFQUFFSCxNQUFNLEVBQUVZLFFBQVE7SUFDNUMsSUFBSVgsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVTO0lBQy9CLElBQUksQ0FBQ1IsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDSCxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDYSxPQUFPLEdBQUdWO0lBQ2YsSUFBSSxDQUFDUyxRQUFRLEdBQUdBO0lBQ2hCLElBQUksQ0FBQ1AsT0FBTyxHQUFHLHFCQUFxQkYsT0FBTyxpQkFBaUJILFNBQ3hELGtCQUFrQlksU0FBU1AsT0FBTztBQUN2QztBQUNBUixLQUFLVSxRQUFRLENBQUNJLGVBQWVWO0FBRTdCLFNBQVNhLG9CQUFvQkMsSUFBSSxFQUFFZixNQUFNLEVBQUVZLFFBQVE7SUFDbEQsSUFBSVgsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVZO0lBQy9CLElBQUksQ0FBQ1gsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDWSxJQUFJLEdBQUdBO0lBQ1osSUFBSSxDQUFDZixNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDWSxRQUFRLEdBQUdBO0lBQ2hCLElBQUksQ0FBQ1AsT0FBTyxHQUFHLHlDQUF5Q1UsT0FDcEQsbUJBQW1CZixTQUFTLGNBQWNZLFNBQVNQLE9BQU87QUFDL0Q7QUFDQVIsS0FBS1UsUUFBUSxDQUFDTyxxQkFBcUJiO0FBRW5DLFNBQVNlLHNCQUFzQmIsSUFBSSxFQUFFSCxNQUFNLEVBQUVZLFFBQVE7SUFDcEQsSUFBSVgsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVjO0lBQy9CLElBQUksQ0FBQ2IsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDSCxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDaUIsUUFBUSxHQUFHZDtJQUNoQixJQUFJLENBQUNTLFFBQVEsR0FBR0E7SUFDaEIsSUFBSSxDQUFDUCxPQUFPLEdBQUcscUJBQXFCRixPQUFPLGlCQUFpQkgsU0FDeEQsMEJBQTBCWSxTQUFTUCxPQUFPO0FBQy9DO0FBQ0FSLEtBQUtVLFFBQVEsQ0FBQ1MsdUJBQXVCZjtBQUVyQyxTQUFTaUIsa0JBQWtCZixJQUFJLEVBQUVILE1BQU07SUFDdEMsSUFBSUMsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVnQjtJQUMvQixJQUFJLENBQUNmLElBQUksR0FBRztJQUNaLElBQUksQ0FBQ0gsTUFBTSxHQUFHQTtJQUNkLElBQUksQ0FBQ2EsT0FBTyxHQUFHVjtJQUNmLElBQUksQ0FBQ0UsT0FBTyxHQUFHLFNBQVNMLFNBQVMsaUJBQWlCRyxPQUFPLFNBQ3JELDJEQUNBO0FBQ0w7QUFDQU4sS0FBS1UsUUFBUSxDQUFDVyxtQkFBbUJqQjtBQUVqQ2tCLE9BQU9DLE9BQU8sR0FBRztJQUNoQnRCLHdCQUF3QkE7SUFDeEJVLHVCQUF1QkE7SUFDdkJHLGVBQWVBO0lBQ2ZHLHFCQUFxQkE7SUFDckJJLG1CQUFtQkE7SUFDbkJGLHVCQUF1QkE7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWNlLWFwcC8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvZXJyb3JzLmpzPzJiYmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIEZpbmdlcnByaW50Rm9ybWF0RXJyb3IoZnAsIGZvcm1hdCkge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRmluZ2VycHJpbnRGb3JtYXRFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdGaW5nZXJwcmludEZvcm1hdEVycm9yJztcblx0dGhpcy5maW5nZXJwcmludCA9IGZwO1xuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcblx0dGhpcy5tZXNzYWdlID0gJ0ZpbmdlcnByaW50IGZvcm1hdCBpcyBub3Qgc3VwcG9ydGVkLCBvciBpcyBpbnZhbGlkOiAnO1xuXHRpZiAoZnAgIT09IHVuZGVmaW5lZClcblx0XHR0aGlzLm1lc3NhZ2UgKz0gJyBmaW5nZXJwcmludCA9ICcgKyBmcDtcblx0aWYgKGZvcm1hdCAhPT0gdW5kZWZpbmVkKVxuXHRcdHRoaXMubWVzc2FnZSArPSAnIGZvcm1hdCA9ICcgKyBmb3JtYXQ7XG59XG51dGlsLmluaGVyaXRzKEZpbmdlcnByaW50Rm9ybWF0RXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gSW52YWxpZEFsZ29yaXRobUVycm9yKGFsZykge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgSW52YWxpZEFsZ29yaXRobUVycm9yKTtcblx0dGhpcy5uYW1lID0gJ0ludmFsaWRBbGdvcml0aG1FcnJvcic7XG5cdHRoaXMuYWxnb3JpdGhtID0gYWxnO1xuXHR0aGlzLm1lc3NhZ2UgPSAnQWxnb3JpdGhtIFwiJyArIGFsZyArICdcIiBpcyBub3Qgc3VwcG9ydGVkJztcbn1cbnV0aWwuaW5oZXJpdHMoSW52YWxpZEFsZ29yaXRobUVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIEtleVBhcnNlRXJyb3IobmFtZSwgZm9ybWF0LCBpbm5lckVycikge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgS2V5UGFyc2VFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdLZXlQYXJzZUVycm9yJztcblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdHRoaXMua2V5TmFtZSA9IG5hbWU7XG5cdHRoaXMuaW5uZXJFcnIgPSBpbm5lckVycjtcblx0dGhpcy5tZXNzYWdlID0gJ0ZhaWxlZCB0byBwYXJzZSAnICsgbmFtZSArICcgYXMgYSB2YWxpZCAnICsgZm9ybWF0ICtcblx0ICAgICcgZm9ybWF0IGtleTogJyArIGlubmVyRXJyLm1lc3NhZ2U7XG59XG51dGlsLmluaGVyaXRzKEtleVBhcnNlRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gU2lnbmF0dXJlUGFyc2VFcnJvcih0eXBlLCBmb3JtYXQsIGlubmVyRXJyKSB7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBTaWduYXR1cmVQYXJzZUVycm9yKTtcblx0dGhpcy5uYW1lID0gJ1NpZ25hdHVyZVBhcnNlRXJyb3InO1xuXHR0aGlzLnR5cGUgPSB0eXBlO1xuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcblx0dGhpcy5pbm5lckVyciA9IGlubmVyRXJyO1xuXHR0aGlzLm1lc3NhZ2UgPSAnRmFpbGVkIHRvIHBhcnNlIHRoZSBnaXZlbiBkYXRhIGFzIGEgJyArIHR5cGUgK1xuXHQgICAgJyBzaWduYXR1cmUgaW4gJyArIGZvcm1hdCArICcgZm9ybWF0OiAnICsgaW5uZXJFcnIubWVzc2FnZTtcbn1cbnV0aWwuaW5oZXJpdHMoU2lnbmF0dXJlUGFyc2VFcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiBDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IobmFtZSwgZm9ybWF0LCBpbm5lckVycikge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ2VydGlmaWNhdGVQYXJzZUVycm9yKTtcblx0dGhpcy5uYW1lID0gJ0NlcnRpZmljYXRlUGFyc2VFcnJvcic7XG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuXHR0aGlzLmNlcnROYW1lID0gbmFtZTtcblx0dGhpcy5pbm5lckVyciA9IGlubmVyRXJyO1xuXHR0aGlzLm1lc3NhZ2UgPSAnRmFpbGVkIHRvIHBhcnNlICcgKyBuYW1lICsgJyBhcyBhIHZhbGlkICcgKyBmb3JtYXQgK1xuXHQgICAgJyBmb3JtYXQgY2VydGlmaWNhdGU6ICcgKyBpbm5lckVyci5tZXNzYWdlO1xufVxudXRpbC5pbmhlcml0cyhDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gS2V5RW5jcnlwdGVkRXJyb3IobmFtZSwgZm9ybWF0KSB7XG5cdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBLZXlFbmNyeXB0ZWRFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdLZXlFbmNyeXB0ZWRFcnJvcic7XG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuXHR0aGlzLmtleU5hbWUgPSBuYW1lO1xuXHR0aGlzLm1lc3NhZ2UgPSAnVGhlICcgKyBmb3JtYXQgKyAnIGZvcm1hdCBrZXkgJyArIG5hbWUgKyAnIGlzICcgK1xuXHQgICAgJ2VuY3J5cHRlZCAocGFzc3dvcmQtcHJvdGVjdGVkKSwgYW5kIG5vIHBhc3NwaHJhc2Ugd2FzICcgK1xuXHQgICAgJ3Byb3ZpZGVkIGluIGBvcHRpb25zYCc7XG59XG51dGlsLmluaGVyaXRzKEtleUVuY3J5cHRlZEVycm9yLCBFcnJvcik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRGaW5nZXJwcmludEZvcm1hdEVycm9yOiBGaW5nZXJwcmludEZvcm1hdEVycm9yLFxuXHRJbnZhbGlkQWxnb3JpdGhtRXJyb3I6IEludmFsaWRBbGdvcml0aG1FcnJvcixcblx0S2V5UGFyc2VFcnJvcjogS2V5UGFyc2VFcnJvcixcblx0U2lnbmF0dXJlUGFyc2VFcnJvcjogU2lnbmF0dXJlUGFyc2VFcnJvcixcblx0S2V5RW5jcnlwdGVkRXJyb3I6IEtleUVuY3J5cHRlZEVycm9yLFxuXHRDZXJ0aWZpY2F0ZVBhcnNlRXJyb3I6IENlcnRpZmljYXRlUGFyc2VFcnJvclxufTtcbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwidXRpbCIsIkZpbmdlcnByaW50Rm9ybWF0RXJyb3IiLCJmcCIsImZvcm1hdCIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJuYW1lIiwiZmluZ2VycHJpbnQiLCJtZXNzYWdlIiwidW5kZWZpbmVkIiwiaW5oZXJpdHMiLCJJbnZhbGlkQWxnb3JpdGhtRXJyb3IiLCJhbGciLCJhbGdvcml0aG0iLCJLZXlQYXJzZUVycm9yIiwiaW5uZXJFcnIiLCJrZXlOYW1lIiwiU2lnbmF0dXJlUGFyc2VFcnJvciIsInR5cGUiLCJDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IiLCJjZXJ0TmFtZSIsIktleUVuY3J5cHRlZEVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/fingerprint.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/fingerprint.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Fingerprint;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Certificate = __webpack_require__(/*! ./certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar FingerprintFormatError = errs.FingerprintFormatError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nfunction Fingerprint(opts) {\n    assert.object(opts, \"options\");\n    assert.string(opts.type, \"options.type\");\n    assert.buffer(opts.hash, \"options.hash\");\n    assert.string(opts.algorithm, \"options.algorithm\");\n    this.algorithm = opts.algorithm.toLowerCase();\n    if (algs.hashAlgs[this.algorithm] !== true) throw new InvalidAlgorithmError(this.algorithm);\n    this.hash = opts.hash;\n    this.type = opts.type;\n    this.hashType = opts.hashType;\n}\nFingerprint.prototype.toString = function(format) {\n    if (format === undefined) {\n        if (this.algorithm === \"md5\" || this.hashType === \"spki\") format = \"hex\";\n        else format = \"base64\";\n    }\n    assert.string(format);\n    switch(format){\n        case \"hex\":\n            if (this.hashType === \"spki\") return this.hash.toString(\"hex\");\n            return addColons(this.hash.toString(\"hex\"));\n        case \"base64\":\n            if (this.hashType === \"spki\") return this.hash.toString(\"base64\");\n            return sshBase64Format(this.algorithm, this.hash.toString(\"base64\"));\n        default:\n            throw new FingerprintFormatError(undefined, format);\n    }\n};\nFingerprint.prototype.matches = function(other) {\n    assert.object(other, \"key or certificate\");\n    if (this.type === \"key\" && this.hashType !== \"ssh\") {\n        utils.assertCompatible(other, Key, [\n            1,\n            7\n        ], \"key with spki\");\n        if (PrivateKey.isPrivateKey(other)) {\n            utils.assertCompatible(other, PrivateKey, [\n                1,\n                6\n            ], \"privatekey with spki support\");\n        }\n    } else if (this.type === \"key\") {\n        utils.assertCompatible(other, Key, [\n            1,\n            0\n        ], \"key\");\n    } else {\n        utils.assertCompatible(other, Certificate, [\n            1,\n            0\n        ], \"certificate\");\n    }\n    var theirHash = other.hash(this.algorithm, this.hashType);\n    var theirHash2 = crypto.createHash(this.algorithm).update(theirHash).digest(\"base64\");\n    if (this.hash2 === undefined) this.hash2 = crypto.createHash(this.algorithm).update(this.hash).digest(\"base64\");\n    return this.hash2 === theirHash2;\n};\n/*JSSTYLED*/ var base64RE = /^[A-Za-z0-9+\\/=]+$/;\n/*JSSTYLED*/ var hexRE = /^[a-fA-F0-9]+$/;\nFingerprint.parse = function(fp, options) {\n    assert.string(fp, \"fingerprint\");\n    var alg, hash, enAlgs;\n    if (Array.isArray(options)) {\n        enAlgs = options;\n        options = {};\n    }\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    if (options.enAlgs !== undefined) enAlgs = options.enAlgs;\n    if (options.algorithms !== undefined) enAlgs = options.algorithms;\n    assert.optionalArrayOfString(enAlgs, \"algorithms\");\n    var hashType = \"ssh\";\n    if (options.hashType !== undefined) hashType = options.hashType;\n    assert.string(hashType, \"options.hashType\");\n    var parts = fp.split(\":\");\n    if (parts.length == 2) {\n        alg = parts[0].toLowerCase();\n        if (!base64RE.test(parts[1])) throw new FingerprintFormatError(fp);\n        try {\n            hash = Buffer.from(parts[1], \"base64\");\n        } catch (e) {\n            throw new FingerprintFormatError(fp);\n        }\n    } else if (parts.length > 2) {\n        alg = \"md5\";\n        if (parts[0].toLowerCase() === \"md5\") parts = parts.slice(1);\n        parts = parts.map(function(p) {\n            while(p.length < 2)p = \"0\" + p;\n            if (p.length > 2) throw new FingerprintFormatError(fp);\n            return p;\n        });\n        parts = parts.join(\"\");\n        if (!hexRE.test(parts) || parts.length % 2 !== 0) throw new FingerprintFormatError(fp);\n        try {\n            hash = Buffer.from(parts, \"hex\");\n        } catch (e) {\n            throw new FingerprintFormatError(fp);\n        }\n    } else {\n        if (hexRE.test(fp)) {\n            hash = Buffer.from(fp, \"hex\");\n        } else if (base64RE.test(fp)) {\n            hash = Buffer.from(fp, \"base64\");\n        } else {\n            throw new FingerprintFormatError(fp);\n        }\n        switch(hash.length){\n            case 32:\n                alg = \"sha256\";\n                break;\n            case 16:\n                alg = \"md5\";\n                break;\n            case 20:\n                alg = \"sha1\";\n                break;\n            case 64:\n                alg = \"sha512\";\n                break;\n            default:\n                throw new FingerprintFormatError(fp);\n        }\n        /* Plain hex/base64: guess it's probably SPKI unless told. */ if (options.hashType === undefined) hashType = \"spki\";\n    }\n    if (alg === undefined) throw new FingerprintFormatError(fp);\n    if (algs.hashAlgs[alg] === undefined) throw new InvalidAlgorithmError(alg);\n    if (enAlgs !== undefined) {\n        enAlgs = enAlgs.map(function(a) {\n            return a.toLowerCase();\n        });\n        if (enAlgs.indexOf(alg) === -1) throw new InvalidAlgorithmError(alg);\n    }\n    return new Fingerprint({\n        algorithm: alg,\n        hash: hash,\n        type: options.type || \"key\",\n        hashType: hashType\n    });\n};\nfunction addColons(s) {\n    /*JSSTYLED*/ return s.replace(/(.{2})(?=.)/g, \"$1:\");\n}\nfunction base64Strip(s) {\n    /*JSSTYLED*/ return s.replace(/=*$/, \"\");\n}\nfunction sshBase64Format(alg, h) {\n    return alg.toUpperCase() + \":\" + base64Strip(h);\n}\nFingerprint.isFingerprint = function(obj, ver) {\n    return utils.isCompatible(obj, Fingerprint, ver);\n};\n/*\n * API versions for Fingerprint:\n * [1,0] -- initial ver\n * [1,1] -- first tagged ver\n * [1,2] -- hashType and spki support\n */ Fingerprint.prototype._sshpkApiVersion = [\n    1,\n    2\n];\nFingerprint._oldVersionDetect = function(obj) {\n    assert.func(obj.toString);\n    assert.func(obj.matches);\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/fingerprint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/auto.js":
/*!************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/auto.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar ssh = __webpack_require__(/*! ./ssh */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar dnssec = __webpack_require__(/*! ./dnssec */ \"(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\");\nvar putty = __webpack_require__(/*! ./putty */ \"(rsc)/./node_modules/sshpk/lib/formats/putty.js\");\nvar DNSSEC_PRIVKEY_HEADER_PREFIX = \"Private-key-format: v1\";\nfunction read(buf, options) {\n    if (typeof buf === \"string\") {\n        if (buf.trim().match(/^[-]+[ ]*BEGIN/)) return pem.read(buf, options);\n        if (buf.match(/^\\s*ssh-[a-z]/)) return ssh.read(buf, options);\n        if (buf.match(/^\\s*ecdsa-/)) return ssh.read(buf, options);\n        if (buf.match(/^putty-user-key-file-2:/i)) return putty.read(buf, options);\n        if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n        buf = Buffer.from(buf, \"binary\");\n    } else {\n        assert.buffer(buf);\n        if (findPEMHeader(buf)) return pem.read(buf, options);\n        if (findSSHHeader(buf)) return ssh.read(buf, options);\n        if (findPuTTYHeader(buf)) return putty.read(buf, options);\n        if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n    }\n    if (buf.readUInt32BE(0) < buf.length) return rfc4253.read(buf, options);\n    throw new Error(\"Failed to auto-detect format of key\");\n}\nfunction findPuTTYHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))++offset;\n    if (offset + 22 <= buf.length && buf.slice(offset, offset + 22).toString(\"ascii\").toLowerCase() === \"putty-user-key-file-2:\") return true;\n    return false;\n}\nfunction findSSHHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))++offset;\n    if (offset + 4 <= buf.length && buf.slice(offset, offset + 4).toString(\"ascii\") === \"ssh-\") return true;\n    if (offset + 6 <= buf.length && buf.slice(offset, offset + 6).toString(\"ascii\") === \"ecdsa-\") return true;\n    return false;\n}\nfunction findPEMHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10))++offset;\n    if (buf[offset] !== 45) return false;\n    while(offset < buf.length && buf[offset] === 45)++offset;\n    while(offset < buf.length && buf[offset] === 32)++offset;\n    if (offset + 5 > buf.length || buf.slice(offset, offset + 5).toString(\"ascii\") !== \"BEGIN\") return false;\n    return true;\n}\nfunction findDNSSECHeader(buf) {\n    // private case first\n    if (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length) return false;\n    var headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n    if (headerCheck.toString(\"ascii\") === DNSSEC_PRIVKEY_HEADER_PREFIX) return true;\n    // public-key RFC3110 ?\n    // 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n    // skip any comment-lines\n    if (typeof buf !== \"string\") {\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.split(\"\\n\");\n    var line = 0;\n    /* JSSTYLED */ while(lines[line].match(/^\\;/))line++;\n    if (lines[line].toString(\"ascii\").match(/\\. IN KEY /)) return true;\n    if (lines[line].toString(\"ascii\").match(/\\. IN DNSKEY /)) return true;\n    return false;\n}\nfunction write(key, options) {\n    throw new Error('\"auto\" format cannot be used for writing');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/auto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/dnssec.js":
/*!**************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/dnssec.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar Dhe = __webpack_require__(/*! ../dhe */ \"(rsc)/./node_modules/sshpk/lib/dhe.js\");\nvar supportedAlgos = {\n    \"rsa-sha1\": 5,\n    \"rsa-sha256\": 8,\n    \"rsa-sha512\": 10,\n    \"ecdsa-p256-sha256\": 13,\n    \"ecdsa-p384-sha384\": 14\n};\nvar supportedAlgosById = {};\nObject.keys(supportedAlgos).forEach(function(k) {\n    supportedAlgosById[supportedAlgos[k]] = k.toUpperCase();\n});\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.split(\"\\n\");\n    if (lines[0].match(/^Private-key-format\\: v1/)) {\n        var algElems = lines[1].split(\" \");\n        var algoNum = parseInt(algElems[1], 10);\n        var algoName = algElems[2];\n        if (!supportedAlgosById[algoNum]) throw new Error(\"Unsupported algorithm: \" + algoName);\n        return readDNSSECPrivateKey(algoNum, lines.slice(2));\n    }\n    // skip any comment-lines\n    var line = 0;\n    /* JSSTYLED */ while(lines[line].match(/^\\;/))line++;\n    // we should now have *one single* line left with our KEY on it.\n    if ((lines[line].match(/\\. IN KEY /) || lines[line].match(/\\. IN DNSKEY /)) && lines[line + 1].length === 0) {\n        return readRFC3110(lines[line]);\n    }\n    throw new Error(\"Cannot parse dnssec key\");\n}\nfunction readRFC3110(keyString) {\n    var elems = keyString.split(\" \");\n    //unused var flags = parseInt(elems[3], 10);\n    //unused var protocol = parseInt(elems[4], 10);\n    var algorithm = parseInt(elems[5], 10);\n    if (!supportedAlgosById[algorithm]) throw new Error(\"Unsupported algorithm: \" + algorithm);\n    var base64key = elems.slice(6, elems.length).join();\n    var keyBuffer = Buffer.from(base64key, \"base64\");\n    if (supportedAlgosById[algorithm].match(/^RSA-/)) {\n        // join the rest of the body into a single base64-blob\n        var publicExponentLen = keyBuffer.readUInt8(0);\n        if (publicExponentLen != 3 && publicExponentLen != 1) throw new Error(\"Cannot parse dnssec key: \" + \"unsupported exponent length\");\n        var publicExponent = keyBuffer.slice(1, publicExponentLen + 1);\n        publicExponent = utils.mpNormalize(publicExponent);\n        var modulus = keyBuffer.slice(1 + publicExponentLen);\n        modulus = utils.mpNormalize(modulus);\n        // now, make the key\n        var rsaKey = {\n            type: \"rsa\",\n            parts: []\n        };\n        rsaKey.parts.push({\n            name: \"e\",\n            data: publicExponent\n        });\n        rsaKey.parts.push({\n            name: \"n\",\n            data: modulus\n        });\n        return new Key(rsaKey);\n    }\n    if (supportedAlgosById[algorithm] === \"ECDSA-P384-SHA384\" || supportedAlgosById[algorithm] === \"ECDSA-P256-SHA256\") {\n        var curve = \"nistp384\";\n        var size = 384;\n        if (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {\n            curve = \"nistp256\";\n            size = 256;\n        }\n        var ecdsaKey = {\n            type: \"ecdsa\",\n            curve: curve,\n            size: size,\n            parts: [\n                {\n                    name: \"curve\",\n                    data: Buffer.from(curve)\n                },\n                {\n                    name: \"Q\",\n                    data: utils.ecNormalize(keyBuffer)\n                }\n            ]\n        };\n        return new Key(ecdsaKey);\n    }\n    throw new Error(\"Unsupported algorithm: \" + supportedAlgosById[algorithm]);\n}\nfunction elementToBuf(e) {\n    return Buffer.from(e.split(\" \")[1], \"base64\");\n}\nfunction readDNSSECRSAPrivateKey(elements) {\n    var rsaParams = {};\n    elements.forEach(function(element) {\n        if (element.split(\" \")[0] === \"Modulus:\") rsaParams[\"n\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"PublicExponent:\") rsaParams[\"e\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"PrivateExponent:\") rsaParams[\"d\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Prime1:\") rsaParams[\"p\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Prime2:\") rsaParams[\"q\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Exponent1:\") rsaParams[\"dmodp\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Exponent2:\") rsaParams[\"dmodq\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Coefficient:\") rsaParams[\"iqmp\"] = elementToBuf(element);\n    });\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"e\",\n                data: utils.mpNormalize(rsaParams[\"e\"])\n            },\n            {\n                name: \"n\",\n                data: utils.mpNormalize(rsaParams[\"n\"])\n            },\n            {\n                name: \"d\",\n                data: utils.mpNormalize(rsaParams[\"d\"])\n            },\n            {\n                name: \"p\",\n                data: utils.mpNormalize(rsaParams[\"p\"])\n            },\n            {\n                name: \"q\",\n                data: utils.mpNormalize(rsaParams[\"q\"])\n            },\n            {\n                name: \"dmodp\",\n                data: utils.mpNormalize(rsaParams[\"dmodp\"])\n            },\n            {\n                name: \"dmodq\",\n                data: utils.mpNormalize(rsaParams[\"dmodq\"])\n            },\n            {\n                name: \"iqmp\",\n                data: utils.mpNormalize(rsaParams[\"iqmp\"])\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readDNSSECPrivateKey(alg, elements) {\n    if (supportedAlgosById[alg].match(/^RSA-/)) {\n        return readDNSSECRSAPrivateKey(elements);\n    }\n    if (supportedAlgosById[alg] === \"ECDSA-P384-SHA384\" || supportedAlgosById[alg] === \"ECDSA-P256-SHA256\") {\n        var d = Buffer.from(elements[0].split(\" \")[1], \"base64\");\n        var curve = \"nistp384\";\n        var size = 384;\n        if (supportedAlgosById[alg] === \"ECDSA-P256-SHA256\") {\n            curve = \"nistp256\";\n            size = 256;\n        }\n        // DNSSEC generates the public-key on the fly (go calculate it)\n        var publicKey = utils.publicFromPrivateECDSA(curve, d);\n        var Q = publicKey.part[\"Q\"].data;\n        var ecdsaKey = {\n            type: \"ecdsa\",\n            curve: curve,\n            size: size,\n            parts: [\n                {\n                    name: \"curve\",\n                    data: Buffer.from(curve)\n                },\n                {\n                    name: \"d\",\n                    data: d\n                },\n                {\n                    name: \"Q\",\n                    data: Q\n                }\n            ]\n        };\n        return new PrivateKey(ecdsaKey);\n    }\n    throw new Error(\"Unsupported algorithm: \" + supportedAlgosById[alg]);\n}\nfunction dnssecTimestamp(date) {\n    var year = date.getFullYear() + \"\"; //stringify\n    var month = date.getMonth() + 1;\n    var timestampStr = year + month + date.getUTCDate();\n    timestampStr += \"\" + date.getUTCHours() + date.getUTCMinutes();\n    timestampStr += date.getUTCSeconds();\n    return timestampStr;\n}\nfunction rsaAlgFromOptions(opts) {\n    if (!opts || !opts.hashAlgo || opts.hashAlgo === \"sha1\") return \"5 (RSASHA1)\";\n    else if (opts.hashAlgo === \"sha256\") return \"8 (RSASHA256)\";\n    else if (opts.hashAlgo === \"sha512\") return \"10 (RSASHA512)\";\n    else throw new Error(\"Unknown or unsupported hash: \" + opts.hashAlgo);\n}\nfunction writeRSA(key, options) {\n    // if we're missing parts, add them.\n    if (!key.part.dmodp || !key.part.dmodq) {\n        utils.addRSAMissing(key);\n    }\n    var out = \"\";\n    out += \"Private-key-format: v1.3\\n\";\n    out += \"Algorithm: \" + rsaAlgFromOptions(options) + \"\\n\";\n    var n = utils.mpDenormalize(key.part[\"n\"].data);\n    out += \"Modulus: \" + n.toString(\"base64\") + \"\\n\";\n    var e = utils.mpDenormalize(key.part[\"e\"].data);\n    out += \"PublicExponent: \" + e.toString(\"base64\") + \"\\n\";\n    var d = utils.mpDenormalize(key.part[\"d\"].data);\n    out += \"PrivateExponent: \" + d.toString(\"base64\") + \"\\n\";\n    var p = utils.mpDenormalize(key.part[\"p\"].data);\n    out += \"Prime1: \" + p.toString(\"base64\") + \"\\n\";\n    var q = utils.mpDenormalize(key.part[\"q\"].data);\n    out += \"Prime2: \" + q.toString(\"base64\") + \"\\n\";\n    var dmodp = utils.mpDenormalize(key.part[\"dmodp\"].data);\n    out += \"Exponent1: \" + dmodp.toString(\"base64\") + \"\\n\";\n    var dmodq = utils.mpDenormalize(key.part[\"dmodq\"].data);\n    out += \"Exponent2: \" + dmodq.toString(\"base64\") + \"\\n\";\n    var iqmp = utils.mpDenormalize(key.part[\"iqmp\"].data);\n    out += \"Coefficient: \" + iqmp.toString(\"base64\") + \"\\n\";\n    // Assume that we're valid as-of now\n    var timestamp = new Date();\n    out += \"Created: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Publish: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Activate: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    return Buffer.from(out, \"ascii\");\n}\nfunction writeECDSA(key, options) {\n    var out = \"\";\n    out += \"Private-key-format: v1.3\\n\";\n    if (key.curve === \"nistp256\") {\n        out += \"Algorithm: 13 (ECDSAP256SHA256)\\n\";\n    } else if (key.curve === \"nistp384\") {\n        out += \"Algorithm: 14 (ECDSAP384SHA384)\\n\";\n    } else {\n        throw new Error(\"Unsupported curve\");\n    }\n    var base64Key = key.part[\"d\"].data.toString(\"base64\");\n    out += \"PrivateKey: \" + base64Key + \"\\n\";\n    // Assume that we're valid as-of now\n    var timestamp = new Date();\n    out += \"Created: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Publish: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Activate: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    return Buffer.from(out, \"ascii\");\n}\nfunction write(key, options) {\n    if (PrivateKey.isPrivateKey(key)) {\n        if (key.type === \"rsa\") {\n            return writeRSA(key, options);\n        } else if (key.type === \"ecdsa\") {\n            return writeECDSA(key, options);\n        } else {\n            throw new Error(\"Unsupported algorithm: \" + key.type);\n        }\n    } else if (Key.isKey(key)) {\n        /*\n\t\t * RFC3110 requires a keyname, and a keytype, which we\n\t\t * don't really have a mechanism for specifying such\n\t\t * additional metadata.\n\t\t */ throw new Error('Format \"dnssec\" only supports ' + \"writing private keys\");\n    } else {\n        throw new Error(\"key is not a Key or PrivateKey\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/openssh-cert.js":
/*!********************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/openssh-cert.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    verify: verify,\n    sign: sign,\n    signAsync: signAsync,\n    write: write,\n    /* Internal private API */ fromBuffer: fromBuffer,\n    toBuffer: toBuffer\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nfunction verify(cert, key) {\n    /*\n\t * We always give an issuerKey, so if our verify() is being called then\n\t * there was no signature. Return false.\n\t */ return false;\n}\nvar TYPES = {\n    \"user\": 1,\n    \"host\": 2\n};\nObject.keys(TYPES).forEach(function(k) {\n    TYPES[TYPES[k]] = k;\n});\nvar ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;\nfunction read(buf, options) {\n    if (Buffer.isBuffer(buf)) buf = buf.toString(\"ascii\");\n    var parts = buf.trim().split(/[ \\t\\n]+/g);\n    if (parts.length < 2 || parts.length > 3) throw new Error(\"Not a valid SSH certificate line\");\n    var algo = parts[0];\n    var data = parts[1];\n    data = Buffer.from(data, \"base64\");\n    return fromBuffer(data, algo);\n}\nfunction fromBuffer(data, algo, partial) {\n    var sshbuf = new SSHBuffer({\n        buffer: data\n    });\n    var innerAlgo = sshbuf.readString();\n    if (algo !== undefined && innerAlgo !== algo) throw new Error(\"SSH certificate algorithm mismatch\");\n    if (algo === undefined) algo = innerAlgo;\n    var cert = {};\n    cert.signatures = {};\n    cert.signatures.openssh = {};\n    cert.signatures.openssh.nonce = sshbuf.readBuffer();\n    var key = {};\n    var parts = key.parts = [];\n    key.type = getAlg(algo);\n    var partCount = algs.info[key.type].parts.length;\n    while(parts.length < partCount)parts.push(sshbuf.readPart());\n    assert.ok(parts.length >= 1, \"key must have at least one part\");\n    var algInfo = algs.info[key.type];\n    if (key.type === \"ecdsa\") {\n        var res = ECDSA_ALGO.exec(algo);\n        assert.ok(res !== null);\n        assert.strictEqual(res[1], parts[0].data.toString());\n    }\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        parts[i].name = algInfo.parts[i];\n        if (parts[i].name !== \"curve\" && algInfo.normalize !== false) {\n            var p = parts[i];\n            p.data = utils.mpNormalize(p.data);\n        }\n    }\n    cert.subjectKey = new Key(key);\n    cert.serial = sshbuf.readInt64();\n    var type = TYPES[sshbuf.readInt()];\n    assert.string(type, \"valid cert type\");\n    cert.signatures.openssh.keyId = sshbuf.readString();\n    var principals = [];\n    var pbuf = sshbuf.readBuffer();\n    var psshbuf = new SSHBuffer({\n        buffer: pbuf\n    });\n    while(!psshbuf.atEnd())principals.push(psshbuf.readString());\n    if (principals.length === 0) principals = [\n        \"*\"\n    ];\n    cert.subjects = principals.map(function(pr) {\n        if (type === \"user\") return Identity.forUser(pr);\n        else if (type === \"host\") return Identity.forHost(pr);\n        throw new Error(\"Unknown identity type \" + type);\n    });\n    cert.validFrom = int64ToDate(sshbuf.readInt64());\n    cert.validUntil = int64ToDate(sshbuf.readInt64());\n    var exts = [];\n    var extbuf = new SSHBuffer({\n        buffer: sshbuf.readBuffer()\n    });\n    var ext;\n    while(!extbuf.atEnd()){\n        ext = {\n            critical: true\n        };\n        ext.name = extbuf.readString();\n        ext.data = extbuf.readBuffer();\n        exts.push(ext);\n    }\n    extbuf = new SSHBuffer({\n        buffer: sshbuf.readBuffer()\n    });\n    while(!extbuf.atEnd()){\n        ext = {\n            critical: false\n        };\n        ext.name = extbuf.readString();\n        ext.data = extbuf.readBuffer();\n        exts.push(ext);\n    }\n    cert.signatures.openssh.exts = exts;\n    /* reserved */ sshbuf.readBuffer();\n    var signingKeyBuf = sshbuf.readBuffer();\n    cert.issuerKey = rfc4253.read(signingKeyBuf);\n    /*\n\t * OpenSSH certs don't give the identity of the issuer, just their\n\t * public key. So, we use an Identity that matches anything. The\n\t * isSignedBy() function will later tell you if the key matches.\n\t */ cert.issuer = Identity.forHost(\"**\");\n    var sigBuf = sshbuf.readBuffer();\n    cert.signatures.openssh.signature = Signature.parse(sigBuf, cert.issuerKey.type, \"ssh\");\n    if (partial !== undefined) {\n        partial.remainder = sshbuf.remainder();\n        partial.consumed = sshbuf._offset;\n    }\n    return new Certificate(cert);\n}\nfunction int64ToDate(buf) {\n    var i = buf.readUInt32BE(0) * 4294967296;\n    i += buf.readUInt32BE(4);\n    var d = new Date();\n    d.setTime(i * 1000);\n    d.sourceInt64 = buf;\n    return d;\n}\nfunction dateToInt64(date) {\n    if (date.sourceInt64 !== undefined) return date.sourceInt64;\n    var i = Math.round(date.getTime() / 1000);\n    var upper = Math.floor(i / 4294967296);\n    var lower = Math.floor(i % 4294967296);\n    var buf = Buffer.alloc(8);\n    buf.writeUInt32BE(upper, 0);\n    buf.writeUInt32BE(lower, 4);\n    return buf;\n}\nfunction sign(cert, key) {\n    if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};\n    try {\n        var blob = toBuffer(cert, true);\n    } catch (e) {\n        delete cert.signatures.openssh;\n        return false;\n    }\n    var sig = cert.signatures.openssh;\n    var hashAlgo = undefined;\n    if (key.type === \"rsa\" || key.type === \"dsa\") hashAlgo = \"sha1\";\n    var signer = key.createSign(hashAlgo);\n    signer.write(blob);\n    sig.signature = signer.sign();\n    return true;\n}\nfunction signAsync(cert, signer, done) {\n    if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};\n    try {\n        var blob = toBuffer(cert, true);\n    } catch (e) {\n        delete cert.signatures.openssh;\n        done(e);\n        return;\n    }\n    var sig = cert.signatures.openssh;\n    signer(blob, function(err, signature) {\n        if (err) {\n            done(err);\n            return;\n        }\n        try {\n            /*\n\t\t\t * This will throw if the signature isn't of a\n\t\t\t * type/algo that can be used for SSH.\n\t\t\t */ signature.toBuffer(\"ssh\");\n        } catch (e) {\n            done(e);\n            return;\n        }\n        sig.signature = signature;\n        done();\n    });\n}\nfunction write(cert, options) {\n    if (options === undefined) options = {};\n    var blob = toBuffer(cert);\n    var out = getCertType(cert.subjectKey) + \" \" + blob.toString(\"base64\");\n    if (options.comment) out = out + \" \" + options.comment;\n    return out;\n}\nfunction toBuffer(cert, noSig) {\n    assert.object(cert.signatures.openssh, \"signature for openssh format\");\n    var sig = cert.signatures.openssh;\n    if (sig.nonce === undefined) sig.nonce = crypto.randomBytes(16);\n    var buf = new SSHBuffer({});\n    buf.writeString(getCertType(cert.subjectKey));\n    buf.writeBuffer(sig.nonce);\n    var key = cert.subjectKey;\n    var algInfo = algs.info[key.type];\n    algInfo.parts.forEach(function(part) {\n        buf.writePart(key.part[part]);\n    });\n    buf.writeInt64(cert.serial);\n    var type = cert.subjects[0].type;\n    assert.notStrictEqual(type, \"unknown\");\n    cert.subjects.forEach(function(id) {\n        assert.strictEqual(id.type, type);\n    });\n    type = TYPES[type];\n    buf.writeInt(type);\n    if (sig.keyId === undefined) {\n        sig.keyId = cert.subjects[0].type + \"_\" + (cert.subjects[0].uid || cert.subjects[0].hostname);\n    }\n    buf.writeString(sig.keyId);\n    var sub = new SSHBuffer({});\n    cert.subjects.forEach(function(id) {\n        if (type === TYPES.host) sub.writeString(id.hostname);\n        else if (type === TYPES.user) sub.writeString(id.uid);\n    });\n    buf.writeBuffer(sub.toBuffer());\n    buf.writeInt64(dateToInt64(cert.validFrom));\n    buf.writeInt64(dateToInt64(cert.validUntil));\n    var exts = sig.exts;\n    if (exts === undefined) exts = [];\n    var extbuf = new SSHBuffer({});\n    exts.forEach(function(ext) {\n        if (ext.critical !== true) return;\n        extbuf.writeString(ext.name);\n        extbuf.writeBuffer(ext.data);\n    });\n    buf.writeBuffer(extbuf.toBuffer());\n    extbuf = new SSHBuffer({});\n    exts.forEach(function(ext) {\n        if (ext.critical === true) return;\n        extbuf.writeString(ext.name);\n        extbuf.writeBuffer(ext.data);\n    });\n    buf.writeBuffer(extbuf.toBuffer());\n    /* reserved */ buf.writeBuffer(Buffer.alloc(0));\n    sub = rfc4253.write(cert.issuerKey);\n    buf.writeBuffer(sub);\n    if (!noSig) buf.writeBuffer(sig.signature.toBuffer(\"ssh\"));\n    return buf.toBuffer();\n}\nfunction getAlg(certType) {\n    if (certType === \"ssh-rsa-cert-v01@openssh.com\") return \"rsa\";\n    if (certType === \"ssh-dss-cert-v01@openssh.com\") return \"dsa\";\n    if (certType.match(ECDSA_ALGO)) return \"ecdsa\";\n    if (certType === \"ssh-ed25519-cert-v01@openssh.com\") return \"ed25519\";\n    throw new Error(\"Unsupported cert type \" + certType);\n}\nfunction getCertType(key) {\n    if (key.type === \"rsa\") return \"ssh-rsa-cert-v01@openssh.com\";\n    if (key.type === \"dsa\") return \"ssh-dss-cert-v01@openssh.com\";\n    if (key.type === \"ecdsa\") return \"ecdsa-sha2-\" + key.curve + \"-cert-v01@openssh.com\";\n    if (key.type === \"ed25519\") return \"ssh-ed25519-cert-v01@openssh.com\";\n    throw new Error(\"Unsupported key type \" + key.type);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/openssh-cert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/pem.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pem.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pkcs1 = __webpack_require__(/*! ./pkcs1 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nvar sshpriv = __webpack_require__(/*! ./ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar OID_PBES2 = \"1.2.840.113549.1.5.13\";\nvar OID_PBKDF2 = \"1.2.840.113549.1.5.12\";\nvar OID_TO_CIPHER = {\n    \"1.2.840.113549.3.7\": \"3des-cbc\",\n    \"2.16.840.1.101.3.4.1.2\": \"aes128-cbc\",\n    \"2.16.840.1.101.3.4.1.42\": \"aes256-cbc\"\n};\nvar CIPHER_TO_OID = {};\nObject.keys(OID_TO_CIPHER).forEach(function(k) {\n    CIPHER_TO_OID[OID_TO_CIPHER[k]] = k;\n});\nvar OID_TO_HASH = {\n    \"1.2.840.113549.2.7\": \"sha1\",\n    \"1.2.840.113549.2.9\": \"sha256\",\n    \"1.2.840.113549.2.11\": \"sha512\"\n};\nvar HASH_TO_OID = {};\nObject.keys(OID_TO_HASH).forEach(function(k) {\n    HASH_TO_OID[OID_TO_HASH[k]] = k;\n});\n/*\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n * we just take the public component of it and use that.\n */ function read(buf, options, forceType) {\n    var input = buf;\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.trim().split(/[\\r\\n]+/g);\n    var m;\n    var si = -1;\n    while(!m && si < lines.length){\n        m = lines[++si].match(/*JSSTYLED*/ /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n    }\n    assert.ok(m, \"invalid PEM header\");\n    var m2;\n    var ei = lines.length;\n    while(!m2 && ei > 0){\n        m2 = lines[--ei].match(/*JSSTYLED*/ /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n    }\n    assert.ok(m2, \"invalid PEM footer\");\n    /* Begin and end banners must match key type */ assert.equal(m[2], m2[2]);\n    var type = m[2].toLowerCase();\n    var alg;\n    if (m[1]) {\n        /* They also must match algorithms, if given */ assert.equal(m[1], m2[1], \"PEM header and footer mismatch\");\n        alg = m[1].trim();\n    }\n    lines = lines.slice(si, ei + 1);\n    var headers = {};\n    while(true){\n        lines = lines.slice(1);\n        m = lines[0].match(/*JSSTYLED*/ /^([A-Za-z0-9-]+): (.+)$/);\n        if (!m) break;\n        headers[m[1].toLowerCase()] = m[2];\n    }\n    /* Chop off the first and last lines */ lines = lines.slice(0, -1).join(\"\");\n    buf = Buffer.from(lines, \"base64\");\n    var cipher, key, iv;\n    if (headers[\"proc-type\"]) {\n        var parts = headers[\"proc-type\"].split(\",\");\n        if (parts[0] === \"4\" && parts[1] === \"ENCRYPTED\") {\n            if (typeof options.passphrase === \"string\") {\n                options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n            }\n            if (!Buffer.isBuffer(options.passphrase)) {\n                throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n            } else {\n                parts = headers[\"dek-info\"].split(\",\");\n                assert.ok(parts.length === 2);\n                cipher = parts[0].toLowerCase();\n                iv = Buffer.from(parts[1], \"hex\");\n                key = utils.opensslKeyDeriv(cipher, iv, options.passphrase, 1).key;\n            }\n        }\n    }\n    if (alg && alg.toLowerCase() === \"encrypted\") {\n        var eder = new asn1.BerReader(buf);\n        var pbesEnd;\n        eder.readSequence();\n        eder.readSequence();\n        pbesEnd = eder.offset + eder.length;\n        var method = eder.readOID();\n        if (method !== OID_PBES2) {\n            throw new Error(\"Unsupported PEM/PKCS8 encryption \" + \"scheme: \" + method);\n        }\n        eder.readSequence(); /* PBES2-params */ \n        eder.readSequence(); /* keyDerivationFunc */ \n        var kdfEnd = eder.offset + eder.length;\n        var kdfOid = eder.readOID();\n        if (kdfOid !== OID_PBKDF2) throw new Error(\"Unsupported PBES2 KDF: \" + kdfOid);\n        eder.readSequence();\n        var salt = eder.readString(asn1.Ber.OctetString, true);\n        var iterations = eder.readInt();\n        var hashAlg = \"sha1\";\n        if (eder.offset < kdfEnd) {\n            eder.readSequence();\n            var hashAlgOid = eder.readOID();\n            hashAlg = OID_TO_HASH[hashAlgOid];\n            if (hashAlg === undefined) {\n                throw new Error(\"Unsupported PBKDF2 hash: \" + hashAlgOid);\n            }\n        }\n        eder._offset = kdfEnd;\n        eder.readSequence(); /* encryptionScheme */ \n        var cipherOid = eder.readOID();\n        cipher = OID_TO_CIPHER[cipherOid];\n        if (cipher === undefined) {\n            throw new Error(\"Unsupported PBES2 cipher: \" + cipherOid);\n        }\n        iv = eder.readString(asn1.Ber.OctetString, true);\n        eder._offset = pbesEnd;\n        buf = eder.readString(asn1.Ber.OctetString, true);\n        if (typeof options.passphrase === \"string\") {\n            options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n        }\n        if (!Buffer.isBuffer(options.passphrase)) {\n            throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n        }\n        var cinfo = utils.opensshCipherInfo(cipher);\n        cipher = cinfo.opensslName;\n        key = utils.pbkdf2(hashAlg, salt, iterations, cinfo.keySize, options.passphrase);\n        alg = undefined;\n    }\n    if (cipher && key && iv) {\n        var cipherStream = crypto.createDecipheriv(cipher, key, iv);\n        var chunk, chunks = [];\n        cipherStream.once(\"error\", function(e) {\n            if (e.toString().indexOf(\"bad decrypt\") !== -1) {\n                throw new Error(\"Incorrect passphrase \" + \"supplied, could not decrypt key\");\n            }\n            throw e;\n        });\n        cipherStream.write(buf);\n        cipherStream.end();\n        while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n        buf = Buffer.concat(chunks);\n    }\n    /* The new OpenSSH internal format abuses PEM headers */ if (alg && alg.toLowerCase() === \"openssh\") return sshpriv.readSSHPrivate(type, buf, options);\n    if (alg && alg.toLowerCase() === \"ssh2\") return rfc4253.readType(type, buf, options);\n    var der = new asn1.BerReader(buf);\n    der.originalInput = input;\n    /*\n\t * All of the PEM file types start with a sequence tag, so chop it\n\t * off here\n\t */ der.readSequence();\n    /* PKCS#1 type keys name an algorithm in the banner explicitly */ if (alg) {\n        if (forceType) assert.strictEqual(forceType, \"pkcs1\");\n        return pkcs1.readPkcs1(alg, type, der);\n    } else {\n        if (forceType) assert.strictEqual(forceType, \"pkcs8\");\n        return pkcs8.readPkcs8(alg, type, der);\n    }\n}\nfunction write(key, options, type) {\n    assert.object(key);\n    var alg = {\n        \"ecdsa\": \"EC\",\n        \"rsa\": \"RSA\",\n        \"dsa\": \"DSA\",\n        \"ed25519\": \"EdDSA\"\n    }[key.type];\n    var header;\n    var der = new asn1.BerWriter();\n    if (PrivateKey.isPrivateKey(key)) {\n        if (type && type === \"pkcs8\") {\n            header = \"PRIVATE KEY\";\n            pkcs8.writePkcs8(der, key);\n        } else {\n            if (type) assert.strictEqual(type, \"pkcs1\");\n            header = alg + \" PRIVATE KEY\";\n            pkcs1.writePkcs1(der, key);\n        }\n    } else if (Key.isKey(key)) {\n        if (type && type === \"pkcs1\") {\n            header = alg + \" PUBLIC KEY\";\n            pkcs1.writePkcs1(der, key);\n        } else {\n            if (type) assert.strictEqual(type, \"pkcs8\");\n            header = \"PUBLIC KEY\";\n            pkcs8.writePkcs8(der, key);\n        }\n    } else {\n        throw new Error(\"key is not a Key or PrivateKey\");\n    }\n    var tmp = der.buffer.toString(\"base64\");\n    var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;\n    var buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 64;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/pem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pkcs1.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    readPkcs1: readPkcs1,\n    write: write,\n    writePkcs1: writePkcs1\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nvar readECDSACurve = pkcs8.readECDSACurve;\nfunction read(buf, options) {\n    return pem.read(buf, options, \"pkcs1\");\n}\nfunction write(key, options) {\n    return pem.write(key, options, \"pkcs1\");\n}\n/* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction readPkcs1(alg, type, der) {\n    switch(alg){\n        case \"RSA\":\n            if (type === \"public\") return readPkcs1RSAPublic(der);\n            else if (type === \"private\") return readPkcs1RSAPrivate(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"DSA\":\n            if (type === \"public\") return readPkcs1DSAPublic(der);\n            else if (type === \"private\") return readPkcs1DSAPrivate(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"EC\":\n        case \"ECDSA\":\n            if (type === \"private\") return readPkcs1ECDSAPrivate(der);\n            else if (type === \"public\") return readPkcs1ECDSAPublic(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"EDDSA\":\n        case \"EdDSA\":\n            if (type === \"private\") return readPkcs1EdDSAPrivate(der);\n            throw new Error(type + \" keys not supported with EdDSA\");\n        default:\n            throw new Error(\"Unknown key algo: \" + alg);\n    }\n}\nfunction readPkcs1RSAPublic(der) {\n    // modulus and exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"exponent\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"n\",\n                data: n\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1RSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version[0], 0);\n    // modulus then public exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"public exponent\");\n    var d = readMPInt(der, \"private exponent\");\n    var p = readMPInt(der, \"prime1\");\n    var q = readMPInt(der, \"prime2\");\n    var dmodp = readMPInt(der, \"exponent1\");\n    var dmodq = readMPInt(der, \"exponent2\");\n    var iqmp = readMPInt(der, \"iqmp\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"n\",\n                data: n\n            },\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"d\",\n                data: d\n            },\n            {\n                name: \"iqmp\",\n                data: iqmp\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"dmodp\",\n                data: dmodp\n            },\n            {\n                name: \"dmodq\",\n                data: dmodq\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1DSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 0);\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    var y = readMPInt(der, \"y\");\n    var x = readMPInt(der, \"x\");\n    // now, make the key\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"x\",\n                data: x\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1EdDSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 1);\n    // private key\n    var k = der.readString(asn1.Ber.OctetString, true);\n    der.readSequence(0xa0);\n    var oid = der.readOID();\n    assert.strictEqual(oid, \"1.3.101.112\", \"the ed25519 curve identifier\");\n    der.readSequence(0xa1);\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: k\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1DSAPublic(der) {\n    var y = readMPInt(der, \"y\");\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1ECDSAPublic(der) {\n    der.readSequence();\n    var oid = der.readOID();\n    assert.strictEqual(oid, \"1.2.840.10045.2.1\", \"must be ecPublicKey\");\n    var curveOid = der.readOID();\n    var curve;\n    var curves = Object.keys(algs.curves);\n    for(var j = 0; j < curves.length; ++j){\n        var c = curves[j];\n        var cd = algs.curves[c];\n        if (cd.pkcs8oid === curveOid) {\n            curve = c;\n            break;\n        }\n    }\n    assert.string(curve, \"a known ECDSA named curve\");\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curve)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1ECDSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 1);\n    // private key\n    var d = der.readString(asn1.Ber.OctetString, true);\n    der.readSequence(0xa0);\n    var curve = readECDSACurve(der);\n    assert.string(curve, \"a known elliptic curve\");\n    der.readSequence(0xa1);\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curve)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            },\n            {\n                name: \"d\",\n                data: d\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction writePkcs1(der, key) {\n    der.startSequence();\n    switch(key.type){\n        case \"rsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1RSAPrivate(der, key);\n            else writePkcs1RSAPublic(der, key);\n            break;\n        case \"dsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1DSAPrivate(der, key);\n            else writePkcs1DSAPublic(der, key);\n            break;\n        case \"ecdsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1ECDSAPrivate(der, key);\n            else writePkcs1ECDSAPublic(der, key);\n            break;\n        case \"ed25519\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1EdDSAPrivate(der, key);\n            else writePkcs1EdDSAPublic(der, key);\n            break;\n        default:\n            throw new Error(\"Unknown key algo: \" + key.type);\n    }\n    der.endSequence();\n}\nfunction writePkcs1RSAPublic(der, key) {\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\nfunction writePkcs1RSAPrivate(der, key) {\n    var ver = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n    der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\nfunction writePkcs1DSAPrivate(der, key) {\n    var ver = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\nfunction writePkcs1DSAPublic(der, key) {\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\nfunction writePkcs1ECDSAPublic(der, key) {\n    der.startSequence();\n    der.writeOID(\"1.2.840.10045.2.1\"); /* ecPublicKey */ \n    var curve = key.part.curve.data.toString();\n    var curveOid = algs.curves[curve].pkcs8oid;\n    assert.string(curveOid, \"a known ECDSA named curve\");\n    der.writeOID(curveOid);\n    der.endSequence();\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n}\nfunction writePkcs1ECDSAPrivate(der, key) {\n    var ver = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n    der.startSequence(0xa0);\n    var curve = key.part.curve.data.toString();\n    var curveOid = algs.curves[curve].pkcs8oid;\n    assert.string(curveOid, \"a known ECDSA named curve\");\n    der.writeOID(curveOid);\n    der.endSequence();\n    der.startSequence(0xa1);\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n    der.endSequence();\n}\nfunction writePkcs1EdDSAPrivate(der, key) {\n    var ver = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n    der.startSequence(0xa0);\n    der.writeOID(\"1.3.101.112\");\n    der.endSequence();\n    der.startSequence(0xa1);\n    utils.writeBitString(der, key.part.A.data);\n    der.endSequence();\n}\nfunction writePkcs1EdDSAPublic(der, key) {\n    throw new Error(\"Public keys are not supported for EdDSA PKCS#1\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pkcs8.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    readPkcs8: readPkcs8,\n    write: write,\n    writePkcs8: writePkcs8,\n    pkcs8ToBuffer: pkcs8ToBuffer,\n    readECDSACurve: readECDSACurve,\n    writeECDSACurve: writeECDSACurve\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nfunction read(buf, options) {\n    return pem.read(buf, options, \"pkcs8\");\n}\nfunction write(key, options) {\n    return pem.write(key, options, \"pkcs8\");\n}\n/* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction readPkcs8(alg, type, der) {\n    /* Private keys in pkcs#8 format have a weird extra int */ if (der.peek() === asn1.Ber.Integer) {\n        assert.strictEqual(type, \"private\", \"unexpected Integer at start of public key\");\n        der.readString(asn1.Ber.Integer, true);\n    }\n    der.readSequence();\n    var next = der.offset + der.length;\n    var oid = der.readOID();\n    switch(oid){\n        case \"1.2.840.113549.1.1.1\":\n            der._offset = next;\n            if (type === \"public\") return readPkcs8RSAPublic(der);\n            else return readPkcs8RSAPrivate(der);\n        case \"1.2.840.10040.4.1\":\n            if (type === \"public\") return readPkcs8DSAPublic(der);\n            else return readPkcs8DSAPrivate(der);\n        case \"1.2.840.10045.2.1\":\n            if (type === \"public\") return readPkcs8ECDSAPublic(der);\n            else return readPkcs8ECDSAPrivate(der);\n        case \"1.3.101.112\":\n            if (type === \"public\") {\n                return readPkcs8EdDSAPublic(der);\n            } else {\n                return readPkcs8EdDSAPrivate(der);\n            }\n        case \"1.3.101.110\":\n            if (type === \"public\") {\n                return readPkcs8X25519Public(der);\n            } else {\n                return readPkcs8X25519Private(der);\n            }\n        default:\n            throw new Error(\"Unknown key type OID \" + oid);\n    }\n}\nfunction readPkcs8RSAPublic(der) {\n    // bit string sequence\n    der.readSequence(asn1.Ber.BitString);\n    der.readByte();\n    der.readSequence();\n    // modulus\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"exponent\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        source: der.originalInput,\n        parts: [\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"n\",\n                data: n\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8RSAPrivate(der) {\n    der.readSequence(asn1.Ber.OctetString);\n    der.readSequence();\n    var ver = readMPInt(der, \"version\");\n    assert.equal(ver[0], 0x0, \"unknown RSA private key version\");\n    // modulus then public exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"public exponent\");\n    var d = readMPInt(der, \"private exponent\");\n    var p = readMPInt(der, \"prime1\");\n    var q = readMPInt(der, \"prime2\");\n    var dmodp = readMPInt(der, \"exponent1\");\n    var dmodq = readMPInt(der, \"exponent2\");\n    var iqmp = readMPInt(der, \"iqmp\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"n\",\n                data: n\n            },\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"d\",\n                data: d\n            },\n            {\n                name: \"iqmp\",\n                data: iqmp\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"dmodp\",\n                data: dmodp\n            },\n            {\n                name: \"dmodq\",\n                data: dmodq\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8DSAPublic(der) {\n    der.readSequence();\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    // bit string sequence\n    der.readSequence(asn1.Ber.BitString);\n    der.readByte();\n    var y = readMPInt(der, \"y\");\n    // now, make the key\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8DSAPrivate(der) {\n    der.readSequence();\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    der.readSequence(asn1.Ber.OctetString);\n    var x = readMPInt(der, \"x\");\n    /* The pkcs#8 format does not include the public key */ var y = utils.calculateDSAPublic(g, p, x);\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"x\",\n                data: x\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readECDSACurve(der) {\n    var curveName, curveNames;\n    var j, c, cd;\n    if (der.peek() === asn1.Ber.OID) {\n        var oid = der.readOID();\n        curveNames = Object.keys(algs.curves);\n        for(j = 0; j < curveNames.length; ++j){\n            c = curveNames[j];\n            cd = algs.curves[c];\n            if (cd.pkcs8oid === oid) {\n                curveName = c;\n                break;\n            }\n        }\n    } else {\n        // ECParameters sequence\n        der.readSequence();\n        var version = der.readString(asn1.Ber.Integer, true);\n        assert.strictEqual(version[0], 1, \"ECDSA key not version 1\");\n        var curve = {};\n        // FieldID sequence\n        der.readSequence();\n        var fieldTypeOid = der.readOID();\n        assert.strictEqual(fieldTypeOid, \"1.2.840.10045.1.1\", \"ECDSA key is not from a prime-field\");\n        var p = curve.p = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        /*\n\t\t * p always starts with a 1 bit, so count the zeros to get its\n\t\t * real size.\n\t\t */ curve.size = p.length * 8 - utils.countZeros(p);\n        // Curve sequence\n        der.readSequence();\n        curve.a = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n        curve.b = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n        if (der.peek() === asn1.Ber.BitString) curve.s = der.readString(asn1.Ber.BitString, true);\n        // Combined Gx and Gy\n        curve.G = der.readString(asn1.Ber.OctetString, true);\n        assert.strictEqual(curve.G[0], 0x4, \"uncompressed G is required\");\n        curve.n = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        curve.h = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        assert.strictEqual(curve.h[0], 0x1, \"a cofactor=1 curve is \" + \"required\");\n        curveNames = Object.keys(algs.curves);\n        var ks = Object.keys(curve);\n        for(j = 0; j < curveNames.length; ++j){\n            c = curveNames[j];\n            cd = algs.curves[c];\n            var equal = true;\n            for(var i = 0; i < ks.length; ++i){\n                var k = ks[i];\n                if (cd[k] === undefined) continue;\n                if (typeof cd[k] === \"object\" && cd[k].equals !== undefined) {\n                    if (!cd[k].equals(curve[k])) {\n                        equal = false;\n                        break;\n                    }\n                } else if (Buffer.isBuffer(cd[k])) {\n                    if (cd[k].toString(\"binary\") !== curve[k].toString(\"binary\")) {\n                        equal = false;\n                        break;\n                    }\n                } else {\n                    if (cd[k] !== curve[k]) {\n                        equal = false;\n                        break;\n                    }\n                }\n            }\n            if (equal) {\n                curveName = c;\n                break;\n            }\n        }\n    }\n    return curveName;\n}\nfunction readPkcs8ECDSAPrivate(der) {\n    var curveName = readECDSACurve(der);\n    assert.string(curveName, \"a known elliptic curve\");\n    der.readSequence(asn1.Ber.OctetString);\n    der.readSequence();\n    var version = readMPInt(der, \"version\");\n    assert.equal(version[0], 1, \"unknown version of ECDSA key\");\n    var d = der.readString(asn1.Ber.OctetString, true);\n    var Q;\n    if (der.peek() == 0xa0) {\n        der.readSequence(0xa0);\n        der._offset += der.length;\n    }\n    if (der.peek() == 0xa1) {\n        der.readSequence(0xa1);\n        Q = der.readString(asn1.Ber.BitString, true);\n        Q = utils.ecNormalize(Q);\n    }\n    if (Q === undefined) {\n        var pub = utils.publicFromPrivateECDSA(curveName, d);\n        Q = pub.part.Q.data;\n    }\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curveName)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            },\n            {\n                name: \"d\",\n                data: d\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8ECDSAPublic(der) {\n    var curveName = readECDSACurve(der);\n    assert.string(curveName, \"a known elliptic curve\");\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curveName)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8EdDSAPublic(der) {\n    if (der.peek() === 0x00) der.readByte();\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8X25519Public(der) {\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"curve25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8EdDSAPrivate(der) {\n    if (der.peek() === 0x00) der.readByte();\n    der.readSequence(asn1.Ber.OctetString);\n    var k = der.readString(asn1.Ber.OctetString, true);\n    k = utils.zeroPadToLength(k, 32);\n    var A, tag;\n    while((tag = der.peek()) !== null){\n        if (tag === (asn1.Ber.Context | 1)) {\n            A = utils.readBitString(der, tag);\n        } else {\n            der.readSequence(tag);\n            der._offset += der.length;\n        }\n    }\n    if (A === undefined) A = utils.calculateED25519Public(k);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: utils.zeroPadToLength(k, 32)\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8X25519Private(der) {\n    if (der.peek() === 0x00) der.readByte();\n    der.readSequence(asn1.Ber.OctetString);\n    var k = der.readString(asn1.Ber.OctetString, true);\n    k = utils.zeroPadToLength(k, 32);\n    var A = utils.calculateX25519Public(k);\n    var key = {\n        type: \"curve25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: utils.zeroPadToLength(k, 32)\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction pkcs8ToBuffer(key) {\n    var der = new asn1.BerWriter();\n    writePkcs8(der, key);\n    return der.buffer;\n}\nfunction writePkcs8(der, key) {\n    der.startSequence();\n    if (PrivateKey.isPrivateKey(key)) {\n        var version = 0;\n        if (key.type === \"ed25519\") version = 1;\n        var vbuf = Buffer.from([\n            version\n        ]);\n        der.writeBuffer(vbuf, asn1.Ber.Integer);\n    }\n    der.startSequence();\n    switch(key.type){\n        case \"rsa\":\n            der.writeOID(\"1.2.840.113549.1.1.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8RSAPrivate(key, der);\n            else writePkcs8RSAPublic(key, der);\n            break;\n        case \"dsa\":\n            der.writeOID(\"1.2.840.10040.4.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8DSAPrivate(key, der);\n            else writePkcs8DSAPublic(key, der);\n            break;\n        case \"ecdsa\":\n            der.writeOID(\"1.2.840.10045.2.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8ECDSAPrivate(key, der);\n            else writePkcs8ECDSAPublic(key, der);\n            break;\n        case \"ed25519\":\n            der.writeOID(\"1.3.101.112\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8EdDSAPrivate(key, der);\n            else writePkcs8EdDSAPublic(key, der);\n            break;\n        default:\n            throw new Error(\"Unsupported key type: \" + key.type);\n    }\n    der.endSequence();\n}\nfunction writePkcs8RSAPrivate(key, der) {\n    der.writeNull();\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.startSequence();\n    var version = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(version, asn1.Ber.Integer);\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n    der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8RSAPublic(key, der) {\n    der.writeNull();\n    der.endSequence();\n    der.startSequence(asn1.Ber.BitString);\n    der.writeByte(0x00);\n    der.startSequence();\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8DSAPrivate(key, der) {\n    der.startSequence();\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n    der.endSequence();\n}\nfunction writePkcs8DSAPublic(key, der) {\n    der.startSequence();\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n    der.startSequence(asn1.Ber.BitString);\n    der.writeByte(0x00);\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.endSequence();\n}\nfunction writeECDSACurve(key, der) {\n    var curve = algs.curves[key.curve];\n    if (curve.pkcs8oid) {\n        /* This one has a name in pkcs#8, so just write the oid */ der.writeOID(curve.pkcs8oid);\n    } else {\n        // ECParameters sequence\n        der.startSequence();\n        var version = Buffer.from([\n            1\n        ]);\n        der.writeBuffer(version, asn1.Ber.Integer);\n        // FieldID sequence\n        der.startSequence();\n        der.writeOID(\"1.2.840.10045.1.1\"); // prime-field\n        der.writeBuffer(curve.p, asn1.Ber.Integer);\n        der.endSequence();\n        // Curve sequence\n        der.startSequence();\n        var a = curve.p;\n        if (a[0] === 0x0) a = a.slice(1);\n        der.writeBuffer(a, asn1.Ber.OctetString);\n        der.writeBuffer(curve.b, asn1.Ber.OctetString);\n        der.writeBuffer(curve.s, asn1.Ber.BitString);\n        der.endSequence();\n        der.writeBuffer(curve.G, asn1.Ber.OctetString);\n        der.writeBuffer(curve.n, asn1.Ber.Integer);\n        var h = curve.h;\n        if (!h) {\n            h = Buffer.from([\n                1\n            ]);\n        }\n        der.writeBuffer(h, asn1.Ber.Integer);\n        // ECParameters\n        der.endSequence();\n    }\n}\nfunction writePkcs8ECDSAPublic(key, der) {\n    writeECDSACurve(key, der);\n    der.endSequence();\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n}\nfunction writePkcs8ECDSAPrivate(key, der) {\n    writeECDSACurve(key, der);\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.startSequence();\n    var version = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(version, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n    der.startSequence(0xa1);\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n    der.endSequence();\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8EdDSAPublic(key, der) {\n    der.endSequence();\n    utils.writeBitString(der, key.part.A.data);\n}\nfunction writePkcs8EdDSAPrivate(key, der) {\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    var k = utils.mpNormalize(key.part.k.data);\n    /* RFCs call for storing exactly 32 bytes, so strip any leading zeros */ while(k.length > 32 && k[0] === 0x00)k = k.slice(1);\n    der.writeBuffer(k, asn1.Ber.OctetString);\n    der.endSequence();\n    utils.writeBitString(der, key.part.A.data, asn1.Ber.Context | 1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvcGtjczguanMiLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCOztBQUU5QkEsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCQyxNQUFNQTtJQUNOQyxXQUFXQTtJQUNYQyxPQUFPQTtJQUNQQyxZQUFZQTtJQUNaQyxlQUFlQTtJQUVmQyxnQkFBZ0JBO0lBQ2hCQyxpQkFBaUJBO0FBQ2xCO0FBRUEsSUFBSUMsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUUsU0FBU0YsOEZBQThCO0FBQzNDLElBQUlHLE9BQU9ILG1CQUFPQSxDQUFDO0FBQ25CLElBQUlJLFFBQVFKLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlLLE1BQU1MLG1CQUFPQSxDQUFDO0FBQ2xCLElBQUlNLGFBQWFOLG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlPLE1BQU1QLG1CQUFPQSxDQUFDO0FBRWxCLFNBQVNSLEtBQUtnQixHQUFHLEVBQUVDLE9BQU87SUFDekIsT0FBUUYsSUFBSWYsSUFBSSxDQUFDZ0IsS0FBS0MsU0FBUztBQUNoQztBQUVBLFNBQVNmLE1BQU1nQixHQUFHLEVBQUVELE9BQU87SUFDMUIsT0FBUUYsSUFBSWIsS0FBSyxDQUFDZ0IsS0FBS0QsU0FBUztBQUNqQztBQUVBLG9DQUFvQyxHQUNwQyxTQUFTRSxVQUFVQyxHQUFHLEVBQUVDLEVBQUU7SUFDekJkLE9BQU9lLFdBQVcsQ0FBQ0YsSUFBSUcsSUFBSSxJQUFJZCxLQUFLZSxHQUFHLENBQUNDLE9BQU8sRUFDM0NKLEtBQUs7SUFDVCxPQUFRVCxNQUFNYyxXQUFXLENBQUNOLElBQUlPLFVBQVUsQ0FBQ2xCLEtBQUtlLEdBQUcsQ0FBQ0MsT0FBTyxFQUFFO0FBQzVEO0FBRUEsU0FBU3hCLFVBQVUyQixHQUFHLEVBQUVDLElBQUksRUFBRVQsR0FBRztJQUNoQyx3REFBd0QsR0FDeEQsSUFBSUEsSUFBSUcsSUFBSSxPQUFPZCxL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QyxXQUFXO0lBRXJEckMsSUFBSTZGLGFBQWEsQ0FBQztJQUNsQixJQUFJZixJQUFJdEYsTUFBTXVGLFdBQVcsQ0FBQ2pGLElBQUlvRixJQUFJLENBQUNKLENBQUMsQ0FBQzFDLElBQUksRUFBRTtJQUMzQ3BDLElBQUlnRyxXQUFXLENBQUNsQixHQUFHekYsS0FBS2UsR0FBRyxDQUFDd0IsU0FBUztJQUNyQzVCLElBQUkwRyxXQUFXO0lBRWYxRyxJQUFJMEcsV0FBVztJQUNmMUcsSUFBSTBHLFdBQVc7QUFDaEI7QUFFQSxTQUFTRCxzQkFBc0IzRyxHQUFHLEVBQUVFLEdBQUc7SUFDdENBLElBQUkwRyxXQUFXO0lBRWZsSCxNQUFNdUgsY0FBYyxDQUFDL0csS0FBS0YsSUFBSW9GLElBQUksQ0FBQ0UsQ0FBQyxDQUFDaEQsSUFBSTtBQUMxQztBQUVBLFNBQVNvRSx1QkFBdUIxRyxHQUFHLEVBQUVFLEdBQUc7SUFDdkNBLElBQUkwRyxXQUFXO0lBRWYxRyxJQUFJNkYsYUFBYSxDQUFDeEcsS0FBS2UsR0FBRyxDQUFDaUMsV0FBVztJQUN0QyxJQUFJbUMsSUFBSWhGLE1BQU1jLFdBQVcsQ0FBQ1IsSUFBSW9GLElBQUksQ0FBQ1YsQ0FBQyxDQUFDcEMsSUFBSTtJQUN6QyxzRUFBc0UsR0FDdEUsTUFBT29DLEVBQUUzRCxNQUFNLEdBQUcsTUFBTTJELENBQUMsQ0FBQyxFQUFFLEtBQUssS0FDaENBLElBQUlBLEVBQUVzQyxLQUFLLENBQUM7SUFDYjlHLElBQUlnRyxXQUFXLENBQUN4QixHQUFHbkYsS0FBS2UsR0FBRyxDQUFDaUMsV0FBVztJQUN2Q3JDLElBQUkwRyxXQUFXO0lBRWZsSCxNQUFNdUgsY0FBYyxDQUFDL0csS0FBS0YsSUFBSW9GLElBQUksQ0FBQ0UsQ0FBQyxDQUFDaEQsSUFBSSxFQUFFL0MsS0FBS2UsR0FBRyxDQUFDb0YsT0FBTyxHQUFHO0FBQy9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2ljZS1hcHAvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvcGtjczguanM/MTk3YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOCBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHJlYWQ6IHJlYWQsXG5cdHJlYWRQa2NzODogcmVhZFBrY3M4LFxuXHR3cml0ZTogd3JpdGUsXG5cdHdyaXRlUGtjczg6IHdyaXRlUGtjczgsXG5cdHBrY3M4VG9CdWZmZXI6IHBrY3M4VG9CdWZmZXIsXG5cblx0cmVhZEVDRFNBQ3VydmU6IHJlYWRFQ0RTQUN1cnZlLFxuXHR3cml0ZUVDRFNBQ3VydmU6IHdyaXRlRUNEU0FDdXJ2ZVxufTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjEnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4uL2FsZ3MnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgS2V5ID0gcmVxdWlyZSgnLi4va2V5Jyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4uL3ByaXZhdGUta2V5Jyk7XG52YXIgcGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcblxuZnVuY3Rpb24gcmVhZChidWYsIG9wdGlvbnMpIHtcblx0cmV0dXJuIChwZW0ucmVhZChidWYsIG9wdGlvbnMsICdwa2NzOCcpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGUoa2V5LCBvcHRpb25zKSB7XG5cdHJldHVybiAocGVtLndyaXRlKGtleSwgb3B0aW9ucywgJ3BrY3M4JykpO1xufVxuXG4vKiBIZWxwZXIgdG8gcmVhZCBpbiBhIHNpbmdsZSBtcGludCAqL1xuZnVuY3Rpb24gcmVhZE1QSW50KGRlciwgbm0pIHtcblx0YXNzZXJ0LnN0cmljdEVxdWFsKGRlci5wZWVrKCksIGFzbjEuQmVyLkludGVnZXIsXG5cdCAgICBubSArICcgaXMgbm90IGFuIEludGVnZXInKTtcblx0cmV0dXJuICh1dGlscy5tcE5vcm1hbGl6ZShkZXIucmVhZFN0cmluZyhhc24xLkJlci5JbnRlZ2VyLCB0cnVlKSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczgoYWxnLCB0eXBlLCBkZXIpIHtcblx0LyogUHJpdmF0ZSBrZXlzIGluIHBrY3MjOCBmb3JtYXQgaGF2ZSBhIHdlaXJkIGV4dHJhIGludCAqL1xuXHRpZiAoZGVyLnBlZWsoKSA9PT0gYXNuMS5CZXIuSW50ZWdlcikge1xuXHRcdGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlLCAncHJpdmF0ZScsXG5cdFx0ICAgICd1bmV4cGVjdGVkIEludGVnZXIgYXQgc3RhcnQgb2YgcHVibGljIGtleScpO1xuXHRcdGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkludGVnZXIsIHRydWUpO1xuXHR9XG5cblx0ZGVyLnJlYWRTZXF1ZW5jZSgpO1xuXHR2YXIgbmV4dCA9IGRlci5vZmZzZXQgKyBkZXIubGVuZ3RoO1xuXG5cdHZhciBvaWQgPSBkZXIucmVhZE9JRCgpO1xuXHRzd2l0Y2ggKG9pZCkge1xuXHRjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG5cdFx0ZGVyLl9vZmZzZXQgPSBuZXh0O1xuXHRcdGlmICh0eXBlID09PSAncHVibGljJylcblx0XHRcdHJldHVybiAocmVhZFBrY3M4UlNBUHVibGljKGRlcikpO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiAocmVhZFBrY3M4UlNBUHJpdmF0ZShkZXIpKTtcblx0Y2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuXHRcdGlmICh0eXBlID09PSAncHVibGljJylcblx0XHRcdHJldHVybiAocmVhZFBrY3M4RFNBUHVibGljKGRlcikpO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiAocmVhZFBrY3M4RFNBUHJpdmF0ZShkZXIpKTtcblx0Y2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuXHRcdGlmICh0eXBlID09PSAncHVibGljJylcblx0XHRcdHJldHVybiAocmVhZFBrY3M4RUNEU0FQdWJsaWMoZGVyKSk7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIChyZWFkUGtjczhFQ0RTQVByaXZhdGUoZGVyKSk7XG5cdGNhc2UgJzEuMy4xMDEuMTEyJzpcblx0XHRpZiAodHlwZSA9PT0gJ3B1YmxpYycpIHtcblx0XHRcdHJldHVybiAocmVhZFBrY3M4RWREU0FQdWJsaWMoZGVyKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAocmVhZFBrY3M4RWREU0FQcml2YXRlKGRlcikpO1xuXHRcdH1cblx0Y2FzZSAnMS4zLjEwMS4xMTAnOlxuXHRcdGlmICh0eXBlID09PSAncHVibGljJykge1xuXHRcdFx0cmV0dXJuIChyZWFkUGtjczhYMjU1MTlQdWJsaWMoZGVyKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAocmVhZFBrY3M4WDI1NTE5UHJpdmF0ZShkZXIpKTtcblx0XHR9XG5cdGRlZmF1bHQ6XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBrZXkgdHlwZSBPSUQgJyArIG9pZCkpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOFJTQVB1YmxpYyhkZXIpIHtcblx0Ly8gYml0IHN0cmluZyBzZXF1ZW5jZVxuXHRkZXIucmVhZFNlcXVlbmNlKGFzbjEuQmVyLkJpdFN0cmluZyk7XG5cdGRlci5yZWFkQnl0ZSgpO1xuXHRkZXIucmVhZFNlcXVlbmNlKCk7XG5cblx0Ly8gbW9kdWx1c1xuXHR2YXIgbiA9IHJlYWRNUEludChkZXIsICdtb2R1bHVzJyk7XG5cdHZhciBlID0gcmVhZE1QSW50KGRlciwgJ2V4cG9uZW50Jyk7XG5cblx0Ly8gbm93LCBtYWtlIHRoZSBrZXlcblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAncnNhJyxcblx0XHRzb3VyY2U6IGRlci5vcmlnaW5hbElucHV0LFxuXHRcdHBhcnRzOiBbXG5cdFx0XHR7IG5hbWU6ICdlJywgZGF0YTogZSB9LFxuXHRcdFx0eyBuYW1lOiAnbicsIGRhdGE6IG4gfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOFJTQVByaXZhdGUoZGVyKSB7XG5cdGRlci5yZWFkU2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHRkZXIucmVhZFNlcXVlbmNlKCk7XG5cblx0dmFyIHZlciA9IHJlYWRNUEludChkZXIsICd2ZXJzaW9uJyk7XG5cdGFzc2VydC5lcXVhbCh2ZXJbMF0sIDB4MCwgJ3Vua25vd24gUlNBIHByaXZhdGUga2V5IHZlcnNpb24nKTtcblxuXHQvLyBtb2R1bHVzIHRoZW4gcHVibGljIGV4cG9uZW50XG5cdHZhciBuID0gcmVhZE1QSW50KGRlciwgJ21vZHVsdXMnKTtcblx0dmFyIGUgPSByZWFkTVBJbnQoZGVyLCAncHVibGljIGV4cG9uZW50Jyk7XG5cdHZhciBkID0gcmVhZE1QSW50KGRlciwgJ3ByaXZhdGUgZXhwb25lbnQnKTtcblx0dmFyIHAgPSByZWFkTVBJbnQoZGVyLCAncHJpbWUxJyk7XG5cdHZhciBxID0gcmVhZE1QSW50KGRlciwgJ3ByaW1lMicpO1xuXHR2YXIgZG1vZHAgPSByZWFkTVBJbnQoZGVyLCAnZXhwb25lbnQxJyk7XG5cdHZhciBkbW9kcSA9IHJlYWRNUEludChkZXIsICdleHBvbmVudDInKTtcblx0dmFyIGlxbXAgPSByZWFkTVBJbnQoZGVyLCAnaXFtcCcpO1xuXG5cdC8vIG5vdywgbWFrZSB0aGUga2V5XG5cdHZhciBrZXkgPSB7XG5cdFx0dHlwZTogJ3JzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ24nLCBkYXRhOiBuIH0sXG5cdFx0XHR7IG5hbWU6ICdlJywgZGF0YTogZSB9LFxuXHRcdFx0eyBuYW1lOiAnZCcsIGRhdGE6IGQgfSxcblx0XHRcdHsgbmFtZTogJ2lxbXAnLCBkYXRhOiBpcW1wIH0sXG5cdFx0XHR7IG5hbWU6ICdwJywgZGF0YTogcCB9LFxuXHRcdFx0eyBuYW1lOiAncScsIGRhdGE6IHEgfSxcblx0XHRcdHsgbmFtZTogJ2Rtb2RwJywgZGF0YTogZG1vZHAgfSxcblx0XHRcdHsgbmFtZTogJ2Rtb2RxJywgZGF0YTogZG1vZHEgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBQcml2YXRlS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczhEU0FQdWJsaWMoZGVyKSB7XG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblxuXHR2YXIgcCA9IHJlYWRNUEludChkZXIsICdwJyk7XG5cdHZhciBxID0gcmVhZE1QSW50KGRlciwgJ3EnKTtcblx0dmFyIGcgPSByZWFkTVBJbnQoZGVyLCAnZycpO1xuXG5cdC8vIGJpdCBzdHJpbmcgc2VxdWVuY2Vcblx0ZGVyLnJlYWRTZXF1ZW5jZShhc24xLkJlci5CaXRTdHJpbmcpO1xuXHRkZXIucmVhZEJ5dGUoKTtcblxuXHR2YXIgeSA9IHJlYWRNUEludChkZXIsICd5Jyk7XG5cblx0Ly8gbm93LCBtYWtlIHRoZSBrZXlcblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAnZHNhJyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBuYW1lOiAncCcsIGRhdGE6IHAgfSxcblx0XHRcdHsgbmFtZTogJ3EnLCBkYXRhOiBxIH0sXG5cdFx0XHR7IG5hbWU6ICdnJywgZGF0YTogZyB9LFxuXHRcdFx0eyBuYW1lOiAneScsIGRhdGE6IHkgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOERTQVByaXZhdGUoZGVyKSB7XG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblxuXHR2YXIgcCA9IHJlYWRNUEludChkZXIsICdwJyk7XG5cdHZhciBxID0gcmVhZE1QSW50KGRlciwgJ3EnKTtcblx0dmFyIGcgPSByZWFkTVBJbnQoZGVyLCAnZycpO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHR2YXIgeCA9IHJlYWRNUEludChkZXIsICd4Jyk7XG5cblx0LyogVGhlIHBrY3MjOCBmb3JtYXQgZG9lcyBub3QgaW5jbHVkZSB0aGUgcHVibGljIGtleSAqL1xuXHR2YXIgeSA9IHV0aWxzLmNhbGN1bGF0ZURTQVB1YmxpYyhnLCBwLCB4KTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdkc2EnLFxuXHRcdHBhcnRzOiBbXG5cdFx0XHR7IG5hbWU6ICdwJywgZGF0YTogcCB9LFxuXHRcdFx0eyBuYW1lOiAncScsIGRhdGE6IHEgfSxcblx0XHRcdHsgbmFtZTogJ2cnLCBkYXRhOiBnIH0sXG5cdFx0XHR7IG5hbWU6ICd5JywgZGF0YTogeSB9LFxuXHRcdFx0eyBuYW1lOiAneCcsIGRhdGE6IHggfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBQcml2YXRlS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkRUNEU0FDdXJ2ZShkZXIpIHtcblx0dmFyIGN1cnZlTmFtZSwgY3VydmVOYW1lcztcblx0dmFyIGosIGMsIGNkO1xuXG5cdGlmIChkZXIucGVlaygpID09PSBhc24xLkJlci5PSUQpIHtcblx0XHR2YXIgb2lkID0gZGVyLnJlYWRPSUQoKTtcblxuXHRcdGN1cnZlTmFtZXMgPSBPYmplY3Qua2V5cyhhbGdzLmN1cnZlcyk7XG5cdFx0Zm9yIChqID0gMDsgaiA8IGN1cnZlTmFtZXMubGVuZ3RoOyArK2opIHtcblx0XHRcdGMgPSBjdXJ2ZU5hbWVzW2pdO1xuXHRcdFx0Y2QgPSBhbGdzLmN1cnZlc1tjXTtcblx0XHRcdGlmIChjZC5wa2NzOG9pZCA9PT0gb2lkKSB7XG5cdFx0XHRcdGN1cnZlTmFtZSA9IGM7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIEVDUGFyYW1ldGVycyBzZXF1ZW5jZVxuXHRcdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0XHR2YXIgdmVyc2lvbiA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkludGVnZXIsIHRydWUpO1xuXHRcdGFzc2VydC5zdHJpY3RFcXVhbCh2ZXJzaW9uWzBdLCAxLCAnRUNEU0Ega2V5IG5vdCB2ZXJzaW9uIDEnKTtcblxuXHRcdHZhciBjdXJ2ZSA9IHt9O1xuXG5cdFx0Ly8gRmllbGRJRCBzZXF1ZW5jZVxuXHRcdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0XHR2YXIgZmllbGRUeXBlT2lkID0gZGVyLnJlYWRPSUQoKTtcblx0XHRhc3NlcnQuc3RyaWN0RXF1YWwoZmllbGRUeXBlT2lkLCAnMS4yLjg0MC4xMDA0NS4xLjEnLFxuXHRcdCAgICAnRUNEU0Ega2V5IGlzIG5vdCBmcm9tIGEgcHJpbWUtZmllbGQnKTtcblx0XHR2YXIgcCA9IGN1cnZlLnAgPSB1dGlscy5tcE5vcm1hbGl6ZShcblx0XHQgICAgZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuSW50ZWdlciwgdHJ1ZSkpO1xuXHRcdC8qXG5cdFx0ICogcCBhbHdheXMgc3RhcnRzIHdpdGggYSAxIGJpdCwgc28gY291bnQgdGhlIHplcm9zIHRvIGdldCBpdHNcblx0XHQgKiByZWFsIHNpemUuXG5cdFx0ICovXG5cdFx0Y3VydmUuc2l6ZSA9IHAubGVuZ3RoICogOCAtIHV0aWxzLmNvdW50WmVyb3MocCk7XG5cblx0XHQvLyBDdXJ2ZSBzZXF1ZW5jZVxuXHRcdGRlci5yZWFkU2VxdWVuY2UoKTtcblx0XHRjdXJ2ZS5hID0gdXRpbHMubXBOb3JtYWxpemUoXG5cdFx0ICAgIGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLk9jdGV0U3RyaW5nLCB0cnVlKSk7XG5cdFx0Y3VydmUuYiA9IHV0aWxzLm1wTm9ybWFsaXplKFxuXHRcdCAgICBkZXIucmVhZFN0cmluZyhhc24xLkJlci5PY3RldFN0cmluZywgdHJ1ZSkpO1xuXHRcdGlmIChkZXIucGVlaygpID09PSBhc24xLkJlci5CaXRTdHJpbmcpXG5cdFx0XHRjdXJ2ZS5zID0gZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuQml0U3RyaW5nLCB0cnVlKTtcblxuXHRcdC8vIENvbWJpbmVkIEd4IGFuZCBHeVxuXHRcdGN1cnZlLkcgPSBkZXIucmVhZFN0cmluZyhhc24xLkJlci5PY3RldFN0cmluZywgdHJ1ZSk7XG5cdFx0YXNzZXJ0LnN0cmljdEVxdWFsKGN1cnZlLkdbMF0sIDB4NCxcblx0XHQgICAgJ3VuY29tcHJlc3NlZCBHIGlzIHJlcXVpcmVkJyk7XG5cblx0XHRjdXJ2ZS5uID0gdXRpbHMubXBOb3JtYWxpemUoXG5cdFx0ICAgIGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkludGVnZXIsIHRydWUpKTtcblx0XHRjdXJ2ZS5oID0gdXRpbHMubXBOb3JtYWxpemUoXG5cdFx0ICAgIGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkludGVnZXIsIHRydWUpKTtcblx0XHRhc3NlcnQuc3RyaWN0RXF1YWwoY3VydmUuaFswXSwgMHgxLCAnYSBjb2ZhY3Rvcj0xIGN1cnZlIGlzICcgK1xuXHRcdCAgICAncmVxdWlyZWQnKTtcblxuXHRcdGN1cnZlTmFtZXMgPSBPYmplY3Qua2V5cyhhbGdzLmN1cnZlcyk7XG5cdFx0dmFyIGtzID0gT2JqZWN0LmtleXMoY3VydmUpO1xuXHRcdGZvciAoaiA9IDA7IGogPCBjdXJ2ZU5hbWVzLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRjID0gY3VydmVOYW1lc1tqXTtcblx0XHRcdGNkID0gYWxncy5jdXJ2ZXNbY107XG5cdFx0XHR2YXIgZXF1YWwgPSB0cnVlO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR2YXIgayA9IGtzW2ldO1xuXHRcdFx0XHRpZiAoY2Rba10gPT09IHVuZGVmaW5lZClcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0aWYgKHR5cGVvZiAoY2Rba10pID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0XHQgICAgY2Rba10uZXF1YWxzICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRpZiAoIWNkW2tdLmVxdWFscyhjdXJ2ZVtrXSkpIHtcblx0XHRcdFx0XHRcdGVxdWFsID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGNkW2tdKSkge1xuXHRcdFx0XHRcdGlmIChjZFtrXS50b1N0cmluZygnYmluYXJ5Jylcblx0XHRcdFx0XHQgICAgIT09IGN1cnZlW2tdLnRvU3RyaW5nKCdiaW5hcnknKSkge1xuXHRcdFx0XHRcdFx0ZXF1YWwgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAoY2Rba10gIT09IGN1cnZlW2tdKSB7XG5cdFx0XHRcdFx0XHRlcXVhbCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZXF1YWwpIHtcblx0XHRcdFx0Y3VydmVOYW1lID0gYztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiAoY3VydmVOYW1lKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3M4RUNEU0FQcml2YXRlKGRlcikge1xuXHR2YXIgY3VydmVOYW1lID0gcmVhZEVDRFNBQ3VydmUoZGVyKTtcblx0YXNzZXJ0LnN0cmluZyhjdXJ2ZU5hbWUsICdhIGtub3duIGVsbGlwdGljIGN1cnZlJyk7XG5cblx0ZGVyLnJlYWRTZXF1ZW5jZShhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblxuXHR2YXIgdmVyc2lvbiA9IHJlYWRNUEludChkZXIsICd2ZXJzaW9uJyk7XG5cdGFzc2VydC5lcXVhbCh2ZXJzaW9uWzBdLCAxLCAndW5rbm93biB2ZXJzaW9uIG9mIEVDRFNBIGtleScpO1xuXG5cdHZhciBkID0gZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuT2N0ZXRTdHJpbmcsIHRydWUpO1xuXHR2YXIgUTtcblxuXHRpZiAoZGVyLnBlZWsoKSA9PSAweGEwKSB7XG5cdFx0ZGVyLnJlYWRTZXF1ZW5jZSgweGEwKTtcblx0XHRkZXIuX29mZnNldCArPSBkZXIubGVuZ3RoO1xuXHR9XG5cdGlmIChkZXIucGVlaygpID09IDB4YTEpIHtcblx0XHRkZXIucmVhZFNlcXVlbmNlKDB4YTEpO1xuXHRcdFEgPSBkZXIucmVhZFN0cmluZyhhc24xLkJlci5CaXRTdHJpbmcsIHRydWUpO1xuXHRcdFEgPSB1dGlscy5lY05vcm1hbGl6ZShRKTtcblx0fVxuXG5cdGlmIChRID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgcHViID0gdXRpbHMucHVibGljRnJvbVByaXZhdGVFQ0RTQShjdXJ2ZU5hbWUsIGQpO1xuXHRcdFEgPSBwdWIucGFydC5RLmRhdGE7XG5cdH1cblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdlY2RzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ2N1cnZlJywgZGF0YTogQnVmZmVyLmZyb20oY3VydmVOYW1lKSB9LFxuXHRcdFx0eyBuYW1lOiAnUScsIGRhdGE6IFEgfSxcblx0XHRcdHsgbmFtZTogJ2QnLCBkYXRhOiBkIH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgUHJpdmF0ZUtleShrZXkpKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3M4RUNEU0FQdWJsaWMoZGVyKSB7XG5cdHZhciBjdXJ2ZU5hbWUgPSByZWFkRUNEU0FDdXJ2ZShkZXIpO1xuXHRhc3NlcnQuc3RyaW5nKGN1cnZlTmFtZSwgJ2Ega25vd24gZWxsaXB0aWMgY3VydmUnKTtcblxuXHR2YXIgUSA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkJpdFN0cmluZywgdHJ1ZSk7XG5cdFEgPSB1dGlscy5lY05vcm1hbGl6ZShRKTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdlY2RzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ2N1cnZlJywgZGF0YTogQnVmZmVyLmZyb20oY3VydmVOYW1lKSB9LFxuXHRcdFx0eyBuYW1lOiAnUScsIGRhdGE6IFEgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOEVkRFNBUHVibGljKGRlcikge1xuXHRpZiAoZGVyLnBlZWsoKSA9PT0gMHgwMClcblx0XHRkZXIucmVhZEJ5dGUoKTtcblxuXHR2YXIgQSA9IHV0aWxzLnJlYWRCaXRTdHJpbmcoZGVyKTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdlZDI1NTE5Jyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBuYW1lOiAnQScsIGRhdGE6IHV0aWxzLnplcm9QYWRUb0xlbmd0aChBLCAzMikgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzOFgyNTUxOVB1YmxpYyhkZXIpIHtcblx0dmFyIEEgPSB1dGlscy5yZWFkQml0U3RyaW5nKGRlcik7XG5cblx0dmFyIGtleSA9IHtcblx0XHR0eXBlOiAnY3VydmUyNTUxOScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ0EnLCBkYXRhOiB1dGlscy56ZXJvUGFkVG9MZW5ndGgoQSwgMzIpIH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczhFZERTQVByaXZhdGUoZGVyKSB7XG5cdGlmIChkZXIucGVlaygpID09PSAweDAwKVxuXHRcdGRlci5yZWFkQnl0ZSgpO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHR2YXIgayA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLk9jdGV0U3RyaW5nLCB0cnVlKTtcblx0ayA9IHV0aWxzLnplcm9QYWRUb0xlbmd0aChrLCAzMik7XG5cblx0dmFyIEEsIHRhZztcblx0d2hpbGUgKCh0YWcgPSBkZXIucGVlaygpKSAhPT0gbnVsbCkge1xuXHRcdGlmICh0YWcgPT09IChhc24xLkJlci5Db250ZXh0IHwgMSkpIHtcblx0XHRcdEEgPSB1dGlscy5yZWFkQml0U3RyaW5nKGRlciwgdGFnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVyLnJlYWRTZXF1ZW5jZSh0YWcpO1xuXHRcdFx0ZGVyLl9vZmZzZXQgKz0gZGVyLmxlbmd0aDtcblx0XHR9XG5cdH1cblx0aWYgKEEgPT09IHVuZGVmaW5lZClcblx0XHRBID0gdXRpbHMuY2FsY3VsYXRlRUQyNTUxOVB1YmxpYyhrKTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdlZDI1NTE5Jyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBuYW1lOiAnQScsIGRhdGE6IHV0aWxzLnplcm9QYWRUb0xlbmd0aChBLCAzMikgfSxcblx0XHRcdHsgbmFtZTogJ2snLCBkYXRhOiB1dGlscy56ZXJvUGFkVG9MZW5ndGgoaywgMzIpIH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgUHJpdmF0ZUtleShrZXkpKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3M4WDI1NTE5UHJpdmF0ZShkZXIpIHtcblx0aWYgKGRlci5wZWVrKCkgPT09IDB4MDApXG5cdFx0ZGVyLnJlYWRCeXRlKCk7XG5cblx0ZGVyLnJlYWRTZXF1ZW5jZShhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdHZhciBrID0gZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuT2N0ZXRTdHJpbmcsIHRydWUpO1xuXHRrID0gdXRpbHMuemVyb1BhZFRvTGVuZ3RoKGssIDMyKTtcblxuXHR2YXIgQSA9IHV0aWxzLmNhbGN1bGF0ZVgyNTUxOVB1YmxpYyhrKTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdjdXJ2ZTI1NTE5Jyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBuYW1lOiAnQScsIGRhdGE6IHV0aWxzLnplcm9QYWRUb0xlbmd0aChBLCAzMikgfSxcblx0XHRcdHsgbmFtZTogJ2snLCBkYXRhOiB1dGlscy56ZXJvUGFkVG9MZW5ndGgoaywgMzIpIH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgUHJpdmF0ZUtleShrZXkpKTtcbn1cblxuZnVuY3Rpb24gcGtjczhUb0J1ZmZlcihrZXkpIHtcblx0dmFyIGRlciA9IG5ldyBhc24xLkJlcldyaXRlcigpO1xuXHR3cml0ZVBrY3M4KGRlciwga2V5KTtcblx0cmV0dXJuIChkZXIuYnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzOChkZXIsIGtleSkge1xuXHRkZXIuc3RhcnRTZXF1ZW5jZSgpO1xuXG5cdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKSB7XG5cdFx0dmFyIHZlcnNpb24gPSAwO1xuXHRcdGlmIChrZXkudHlwZSA9PT0gJ2VkMjU1MTknKVxuXHRcdFx0dmVyc2lvbiA9IDE7XG5cdFx0dmFyIHZidWYgPSBCdWZmZXIuZnJvbShbdmVyc2lvbl0pO1xuXHRcdGRlci53cml0ZUJ1ZmZlcih2YnVmLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0fVxuXG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdHN3aXRjaCAoa2V5LnR5cGUpIHtcblx0Y2FzZSAncnNhJzpcblx0XHRkZXIud3JpdGVPSUQoJzEuMi44NDAuMTEzNTQ5LjEuMS4xJyk7XG5cdFx0aWYgKFByaXZhdGVLZXkuaXNQcml2YXRlS2V5KGtleSkpXG5cdFx0XHR3cml0ZVBrY3M4UlNBUHJpdmF0ZShrZXksIGRlcik7XG5cdFx0ZWxzZVxuXHRcdFx0d3JpdGVQa2NzOFJTQVB1YmxpYyhrZXksIGRlcik7XG5cdFx0YnJlYWs7XG5cdGNhc2UgJ2RzYSc6XG5cdFx0ZGVyLndyaXRlT0lEKCcxLjIuODQwLjEwMDQwLjQuMScpO1xuXHRcdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdFx0d3JpdGVQa2NzOERTQVByaXZhdGUoa2V5LCBkZXIpO1xuXHRcdGVsc2Vcblx0XHRcdHdyaXRlUGtjczhEU0FQdWJsaWMoa2V5LCBkZXIpO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdlY2RzYSc6XG5cdFx0ZGVyLndyaXRlT0lEKCcxLjIuODQwLjEwMDQ1LjIuMScpO1xuXHRcdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdFx0d3JpdGVQa2NzOEVDRFNBUHJpdmF0ZShrZXksIGRlcik7XG5cdFx0ZWxzZVxuXHRcdFx0d3JpdGVQa2NzOEVDRFNBUHVibGljKGtleSwgZGVyKTtcblx0XHRicmVhaztcblx0Y2FzZSAnZWQyNTUxOSc6XG5cdFx0ZGVyLndyaXRlT0lEKCcxLjMuMTAxLjExMicpO1xuXHRcdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdFx0d3JpdGVQa2NzOEVkRFNBUHJpdmF0ZShrZXksIGRlcik7XG5cdFx0ZWxzZVxuXHRcdFx0d3JpdGVQa2NzOEVkRFNBUHVibGljKGtleSwgZGVyKTtcblx0XHRicmVhaztcblx0ZGVmYXVsdDpcblx0XHR0aHJvdyAobmV3IEVycm9yKCdVbnN1cHBvcnRlZCBrZXkgdHlwZTogJyArIGtleS50eXBlKSk7XG5cdH1cblxuXHRkZXIuZW5kU2VxdWVuY2UoKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzOFJTQVByaXZhdGUoa2V5LCBkZXIpIHtcblx0ZGVyLndyaXRlTnVsbCgpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHRkZXIuc3RhcnRTZXF1ZW5jZShhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cblx0dmFyIHZlcnNpb24gPSBCdWZmZXIuZnJvbShbMF0pO1xuXHRkZXIud3JpdGVCdWZmZXIodmVyc2lvbiwgYXNuMS5CZXIuSW50ZWdlcik7XG5cblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0Lm4uZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5lLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZC5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnAuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5xLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRpZiAoIWtleS5wYXJ0LmRtb2RwIHx8ICFrZXkucGFydC5kbW9kcSlcblx0XHR1dGlscy5hZGRSU0FNaXNzaW5nKGtleSk7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5kbW9kcC5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmRtb2RxLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuaXFtcC5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblxuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczhSU0FQdWJsaWMoa2V5LCBkZXIpIHtcblx0ZGVyLndyaXRlTnVsbCgpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHRkZXIuc3RhcnRTZXF1ZW5jZShhc24xLkJlci5CaXRTdHJpbmcpO1xuXHRkZXIud3JpdGVCeXRlKDB4MDApO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5uLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZS5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczhEU0FQcml2YXRlKGtleSwgZGVyKSB7XG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5wLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQucS5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmcuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKGFzbjEuQmVyLk9jdGV0U3RyaW5nKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnguZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3M4RFNBUHVibGljKGtleSwgZGVyKSB7XG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5wLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQucS5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmcuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHRkZXIuc3RhcnRTZXF1ZW5jZShhc24xLkJlci5CaXRTdHJpbmcpO1xuXHRkZXIud3JpdGVCeXRlKDB4MDApO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQueS5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRUNEU0FDdXJ2ZShrZXksIGRlcikge1xuXHR2YXIgY3VydmUgPSBhbGdzLmN1cnZlc1trZXkuY3VydmVdO1xuXHRpZiAoY3VydmUucGtjczhvaWQpIHtcblx0XHQvKiBUaGlzIG9uZSBoYXMgYSBuYW1lIGluIHBrY3MjOCwgc28ganVzdCB3cml0ZSB0aGUgb2lkICovXG5cdFx0ZGVyLndyaXRlT0lEKGN1cnZlLnBrY3M4b2lkKTtcblxuXHR9IGVsc2Uge1xuXHRcdC8vIEVDUGFyYW1ldGVycyBzZXF1ZW5jZVxuXHRcdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cblx0XHR2YXIgdmVyc2lvbiA9IEJ1ZmZlci5mcm9tKFsxXSk7XG5cdFx0ZGVyLndyaXRlQnVmZmVyKHZlcnNpb24sIGFzbjEuQmVyLkludGVnZXIpO1xuXG5cdFx0Ly8gRmllbGRJRCBzZXF1ZW5jZVxuXHRcdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cdFx0ZGVyLndyaXRlT0lEKCcxLjIuODQwLjEwMDQ1LjEuMScpOyAvLyBwcmltZS1maWVsZFxuXHRcdGRlci53cml0ZUJ1ZmZlcihjdXJ2ZS5wLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0XHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHRcdC8vIEN1cnZlIHNlcXVlbmNlXG5cdFx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblx0XHR2YXIgYSA9IGN1cnZlLnA7XG5cdFx0aWYgKGFbMF0gPT09IDB4MClcblx0XHRcdGEgPSBhLnNsaWNlKDEpO1xuXHRcdGRlci53cml0ZUJ1ZmZlcihhLCBhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdFx0ZGVyLndyaXRlQnVmZmVyKGN1cnZlLmIsIGFzbjEuQmVyLk9jdGV0U3RyaW5nKTtcblx0XHRkZXIud3JpdGVCdWZmZXIoY3VydmUucywgYXNuMS5CZXIuQml0U3RyaW5nKTtcblx0XHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHRcdGRlci53cml0ZUJ1ZmZlcihjdXJ2ZS5HLCBhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdFx0ZGVyLndyaXRlQnVmZmVyKGN1cnZlLm4sIGFzbjEuQmVyLkludGVnZXIpO1xuXHRcdHZhciBoID0gY3VydmUuaDtcblx0XHRpZiAoIWgpIHtcblx0XHRcdGggPSBCdWZmZXIuZnJvbShbMV0pO1xuXHRcdH1cblx0XHRkZXIud3JpdGVCdWZmZXIoaCwgYXNuMS5CZXIuSW50ZWdlcik7XG5cblx0XHQvLyBFQ1BhcmFtZXRlcnNcblx0XHRkZXIuZW5kU2VxdWVuY2UoKTtcblx0fVxufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3M4RUNEU0FQdWJsaWMoa2V5LCBkZXIpIHtcblx0d3JpdGVFQ0RTQUN1cnZlKGtleSwgZGVyKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cblx0dmFyIFEgPSB1dGlscy5lY05vcm1hbGl6ZShrZXkucGFydC5RLmRhdGEsIHRydWUpO1xuXHRkZXIud3JpdGVCdWZmZXIoUSwgYXNuMS5CZXIuQml0U3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzOEVDRFNBUHJpdmF0ZShrZXksIGRlcikge1xuXHR3cml0ZUVDRFNBQ3VydmUoa2V5LCBkZXIpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHRkZXIuc3RhcnRTZXF1ZW5jZShhc24xLkJlci5PY3RldFN0cmluZyk7XG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cblx0dmFyIHZlcnNpb24gPSBCdWZmZXIuZnJvbShbMV0pO1xuXHRkZXIud3JpdGVCdWZmZXIodmVyc2lvbiwgYXNuMS5CZXIuSW50ZWdlcik7XG5cblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmQuZGF0YSwgYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKDB4YTEpO1xuXHR2YXIgUSA9IHV0aWxzLmVjTm9ybWFsaXplKGtleS5wYXJ0LlEuZGF0YSwgdHJ1ZSk7XG5cdGRlci53cml0ZUJ1ZmZlcihRLCBhc24xLkJlci5CaXRTdHJpbmcpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczhFZERTQVB1YmxpYyhrZXksIGRlcikge1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHR1dGlscy53cml0ZUJpdFN0cmluZyhkZXIsIGtleS5wYXJ0LkEuZGF0YSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczhFZERTQVByaXZhdGUoa2V5LCBkZXIpIHtcblx0ZGVyLmVuZFNlcXVlbmNlKCk7XG5cblx0ZGVyLnN0YXJ0U2VxdWVuY2UoYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHR2YXIgayA9IHV0aWxzLm1wTm9ybWFsaXplKGtleS5wYXJ0LmsuZGF0YSk7XG5cdC8qIFJGQ3MgY2FsbCBmb3Igc3RvcmluZyBleGFjdGx5IDMyIGJ5dGVzLCBzbyBzdHJpcCBhbnkgbGVhZGluZyB6ZXJvcyAqL1xuXHR3aGlsZSAoay5sZW5ndGggPiAzMiAmJiBrWzBdID09PSAweDAwKVxuXHRcdGsgPSBrLnNsaWNlKDEpO1xuXHRkZXIud3JpdGVCdWZmZXIoaywgYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcblxuXHR1dGlscy53cml0ZUJpdFN0cmluZyhkZXIsIGtleS5wYXJ0LkEuZGF0YSwgYXNuMS5CZXIuQ29udGV4dCB8IDEpO1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFkIiwicmVhZFBrY3M4Iiwid3JpdGUiLCJ3cml0ZVBrY3M4IiwicGtjczhUb0J1ZmZlciIsInJlYWRFQ0RTQUN1cnZlIiwid3JpdGVFQ0RTQUN1cnZlIiwiYXNzZXJ0IiwicmVxdWlyZSIsImFzbjEiLCJCdWZmZXIiLCJhbGdzIiwidXRpbHMiLCJLZXkiLCJQcml2YXRlS2V5IiwicGVtIiwiYnVmIiwib3B0aW9ucyIsImtleSIsInJlYWRNUEludCIsImRlciIsIm5tIiwic3RyaWN0RXF1YWwiLCJwZWVrIiwiQmVyIiwiSW50ZWdlciIsIm1wTm9ybWFsaXplIiwicmVhZFN0cmluZyIsImFsZyIsInR5cGUiLCJyZWFkU2VxdWVuY2UiLCJuZXh0Iiwib2Zmc2V0IiwibGVuZ3RoIiwib2lkIiwicmVhZE9JRCIsIl9vZmZzZXQiLCJyZWFkUGtjczhSU0FQdWJsaWMiLCJyZWFkUGtjczhSU0FQcml2YXRlIiwicmVhZFBrY3M4RFNBUHVibGljIiwicmVhZFBrY3M4RFNBUHJpdmF0ZSIsInJlYWRQa2NzOEVDRFNBUHVibGljIiwicmVhZFBrY3M4RUNEU0FQcml2YXRlIiwicmVhZFBrY3M4RWREU0FQdWJsaWMiLCJyZWFkUGtjczhFZERTQVByaXZhdGUiLCJyZWFkUGtjczhYMjU1MTlQdWJsaWMiLCJyZWFkUGtjczhYMjU1MTlQcml2YXRlIiwiRXJyb3IiLCJCaXRTdHJpbmciLCJyZWFkQnl0ZSIsIm4iLCJlIiwic291cmNlIiwib3JpZ2luYWxJbnB1dCIsInBhcnRzIiwibmFtZSIsImRhdGEiLCJPY3RldFN0cmluZyIsInZlciIsImVxdWFsIiwiZCIsInAiLCJxIiwiZG1vZHAiLCJkbW9kcSIsImlxbXAiLCJnIiwieSIsIngiLCJjYWxjdWxhdGVEU0FQdWJsaWMiLCJjdXJ2ZU5hbWUiLCJjdXJ2ZU5hbWVzIiwiaiIsImMiLCJjZCIsIk9JRCIsIk9iamVjdCIsImtleXMiLCJjdXJ2ZXMiLCJwa2NzOG9pZCIsInZlcnNpb24iLCJjdXJ2ZSIsImZpZWxkVHlwZU9pZCIsInNpemUiLCJjb3VudFplcm9zIiwiYSIsImIiLCJzIiwiRyIsImgiLCJrcyIsImkiLCJrIiwidW5kZWZpbmVkIiwiZXF1YWxzIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsInN0cmluZyIsIlEiLCJlY05vcm1hbGl6ZSIsInB1YiIsInB1YmxpY0Zyb21Qcml2YXRlRUNEU0EiLCJwYXJ0IiwiZnJvbSIsIkEiLCJyZWFkQml0U3RyaW5nIiwiemVyb1BhZFRvTGVuZ3RoIiwidGFnIiwiQ29udGV4dCIsImNhbGN1bGF0ZUVEMjU1MTlQdWJsaWMiLCJjYWxjdWxhdGVYMjU1MTlQdWJsaWMiLCJCZXJXcml0ZXIiLCJidWZmZXIiLCJzdGFydFNlcXVlbmNlIiwiaXNQcml2YXRlS2V5IiwidmJ1ZiIsIndyaXRlQnVmZmVyIiwid3JpdGVPSUQiLCJ3cml0ZVBrY3M4UlNBUHJpdmF0ZSIsIndyaXRlUGtjczhSU0FQdWJsaWMiLCJ3cml0ZVBrY3M4RFNBUHJpdmF0ZSIsIndyaXRlUGtjczhEU0FQdWJsaWMiLCJ3cml0ZVBrY3M4RUNEU0FQcml2YXRlIiwid3JpdGVQa2NzOEVDRFNBUHVibGljIiwid3JpdGVQa2NzOEVkRFNBUHJpdmF0ZSIsIndyaXRlUGtjczhFZERTQVB1YmxpYyIsImVuZFNlcXVlbmNlIiwid3JpdGVOdWxsIiwiYWRkUlNBTWlzc2luZyIsIndyaXRlQnl0ZSIsInNsaWNlIiwid3JpdGVCaXRTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/putty.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/putty.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\n// https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\nfunction read(buf, options) {\n    var lines = buf.toString(\"ascii\").split(/[\\r\\n]+/);\n    var found = false;\n    var parts;\n    var si = 0;\n    var formatVersion;\n    while(si < lines.length){\n        parts = splitHeader(lines[si++]);\n        if (parts) {\n            formatVersion = ({\n                \"putty-user-key-file-2\": 2,\n                \"putty-user-key-file-3\": 3\n            })[parts[0].toLowerCase()];\n            if (formatVersion) {\n                found = true;\n                break;\n            }\n        }\n    }\n    if (!found) {\n        throw new Error(\"No PuTTY format first line found\");\n    }\n    var alg = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"encryption\");\n    var encryption = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"comment\");\n    var comment = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"public-lines\");\n    var publicLines = parseInt(parts[1], 10);\n    if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {\n        throw new Error(\"Invalid public-lines count\");\n    }\n    var publicBuf = Buffer.from(lines.slice(si, si + publicLines).join(\"\"), \"base64\");\n    var keyType = rfc4253.algToKeyType(alg);\n    var key = rfc4253.read(publicBuf);\n    if (key.type !== keyType) {\n        throw new Error(\"Outer key algorithm mismatch\");\n    }\n    si += publicLines;\n    if (lines[si]) {\n        parts = splitHeader(lines[si++]);\n        assert.equal(parts[0].toLowerCase(), \"private-lines\");\n        var privateLines = parseInt(parts[1], 10);\n        if (!isFinite(privateLines) || privateLines < 0 || privateLines > lines.length) {\n            throw new Error(\"Invalid private-lines count\");\n        }\n        var privateBuf = Buffer.from(lines.slice(si, si + privateLines).join(\"\"), \"base64\");\n        if (encryption !== \"none\" && formatVersion === 3) {\n            throw new Error(\"Encrypted keys arenot supported for\" + \" PuTTY format version 3\");\n        }\n        if (encryption === \"aes256-cbc\") {\n            if (!options.passphrase) {\n                throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n            }\n            var iv = Buffer.alloc(16, 0);\n            var decipher = crypto.createDecipheriv(\"aes-256-cbc\", derivePPK2EncryptionKey(options.passphrase), iv);\n            decipher.setAutoPadding(false);\n            privateBuf = Buffer.concat([\n                decipher.update(privateBuf),\n                decipher.final()\n            ]);\n        }\n        key = new PrivateKey(key);\n        if (key.type !== keyType) {\n            throw new Error(\"Outer key algorithm mismatch\");\n        }\n        var sshbuf = new SSHBuffer({\n            buffer: privateBuf\n        });\n        var privateKeyParts;\n        if (alg === \"ssh-dss\") {\n            privateKeyParts = [\n                {\n                    name: \"x\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg === \"ssh-rsa\") {\n            privateKeyParts = [\n                {\n                    name: \"d\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"p\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"q\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"iqmp\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg.match(/^ecdsa-sha2-nistp/)) {\n            privateKeyParts = [\n                {\n                    name: \"d\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg === \"ssh-ed25519\") {\n            privateKeyParts = [\n                {\n                    name: \"k\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else {\n            throw new Error(\"Unsupported PPK key type: \" + alg);\n        }\n        key = new PrivateKey({\n            type: key.type,\n            parts: key.parts.concat(privateKeyParts)\n        });\n    }\n    key.comment = comment;\n    return key;\n}\nfunction derivePPK2EncryptionKey(passphrase) {\n    var hash1 = crypto.createHash(\"sha1\").update(Buffer.concat([\n        Buffer.from([\n            0,\n            0,\n            0,\n            0\n        ]),\n        Buffer.from(passphrase)\n    ])).digest();\n    var hash2 = crypto.createHash(\"sha1\").update(Buffer.concat([\n        Buffer.from([\n            0,\n            0,\n            0,\n            1\n        ]),\n        Buffer.from(passphrase)\n    ])).digest();\n    return Buffer.concat([\n        hash1,\n        hash2\n    ]).slice(0, 32);\n}\nfunction splitHeader(line) {\n    var idx = line.indexOf(\":\");\n    if (idx === -1) return null;\n    var header = line.slice(0, idx);\n    ++idx;\n    while(line[idx] === \" \")++idx;\n    var rest = line.slice(idx);\n    return [\n        header,\n        rest\n    ];\n}\nfunction write(key, options) {\n    assert.object(key);\n    if (!Key.isKey(key)) throw new Error(\"Must be a public key\");\n    var alg = rfc4253.keyTypeToAlg(key);\n    var buf = rfc4253.write(key);\n    var comment = key.comment || \"\";\n    var b64 = buf.toString(\"base64\");\n    var lines = wrap(b64, 64);\n    lines.unshift(\"Public-Lines: \" + lines.length);\n    lines.unshift(\"Comment: \" + comment);\n    lines.unshift(\"Encryption: none\");\n    lines.unshift(\"PuTTY-User-Key-File-2: \" + alg);\n    return Buffer.from(lines.join(\"\\n\") + \"\\n\");\n}\nfunction wrap(txt, len) {\n    var lines = [];\n    var pos = 0;\n    while(pos < txt.length){\n        lines.push(txt.slice(pos, pos + 64));\n        pos += 64;\n    }\n    return lines;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/putty.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js":
/*!***************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/rfc4253.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read.bind(undefined, false, undefined),\n    readType: read.bind(undefined, false),\n    write: write,\n    /* semi-private api, used by sshpk-agent */ readPartial: read.bind(undefined, true),\n    /* shared with ssh format */ readInternal: read,\n    keyTypeToAlg: keyTypeToAlg,\n    algToKeyType: algToKeyType\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nfunction algToKeyType(alg) {\n    assert.string(alg);\n    if (alg === \"ssh-dss\") return \"dsa\";\n    else if (alg === \"ssh-rsa\") return \"rsa\";\n    else if (alg === \"ssh-ed25519\") return \"ed25519\";\n    else if (alg === \"ssh-curve25519\") return \"curve25519\";\n    else if (alg.match(/^ecdsa-sha2-/)) return \"ecdsa\";\n    else throw new Error(\"Unknown algorithm \" + alg);\n}\nfunction keyTypeToAlg(key) {\n    assert.object(key);\n    if (key.type === \"dsa\") return \"ssh-dss\";\n    else if (key.type === \"rsa\") return \"ssh-rsa\";\n    else if (key.type === \"ed25519\") return \"ssh-ed25519\";\n    else if (key.type === \"curve25519\") return \"ssh-curve25519\";\n    else if (key.type === \"ecdsa\") return \"ecdsa-sha2-\" + key.part.curve.data.toString();\n    else throw new Error(\"Unknown key type \" + key.type);\n}\nfunction read(partial, type, buf, options) {\n    if (typeof buf === \"string\") buf = Buffer.from(buf);\n    assert.buffer(buf, \"buf\");\n    var key = {};\n    var parts = key.parts = [];\n    var sshbuf = new SSHBuffer({\n        buffer: buf\n    });\n    var alg = sshbuf.readString();\n    assert.ok(!sshbuf.atEnd(), \"key must have at least one part\");\n    key.type = algToKeyType(alg);\n    var partCount = algs.info[key.type].parts.length;\n    if (type && type === \"private\") partCount = algs.privInfo[key.type].parts.length;\n    while(!sshbuf.atEnd() && parts.length < partCount)parts.push(sshbuf.readPart());\n    while(!partial && !sshbuf.atEnd())parts.push(sshbuf.readPart());\n    assert.ok(parts.length >= 1, \"key must have at least one part\");\n    assert.ok(partial || sshbuf.atEnd(), \"leftover bytes at end of key\");\n    var Constructor = Key;\n    var algInfo = algs.info[key.type];\n    if (type === \"private\" || algInfo.parts.length !== parts.length) {\n        algInfo = algs.privInfo[key.type];\n        Constructor = PrivateKey;\n    }\n    assert.strictEqual(algInfo.parts.length, parts.length);\n    if (key.type === \"ecdsa\") {\n        var res = /^ecdsa-sha2-(.+)$/.exec(alg);\n        assert.ok(res !== null);\n        assert.strictEqual(res[1], parts[0].data.toString());\n    }\n    var normalized = true;\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        var p = parts[i];\n        p.name = algInfo.parts[i];\n        /*\n\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t * concat'd together (k followed by A). We want to keep them\n\t\t * separate for other formats that don't do this.\n\t\t */ if (key.type === \"ed25519\" && p.name === \"k\") p.data = p.data.slice(0, 32);\n        if (p.name !== \"curve\" && algInfo.normalize !== false) {\n            var nd;\n            if (key.type === \"ed25519\") {\n                nd = utils.zeroPadToLength(p.data, 32);\n            } else {\n                nd = utils.mpNormalize(p.data);\n            }\n            if (nd.toString(\"binary\") !== p.data.toString(\"binary\")) {\n                p.data = nd;\n                normalized = false;\n            }\n        }\n    }\n    if (normalized) key._rfc4253Cache = sshbuf.toBuffer();\n    if (partial && typeof partial === \"object\") {\n        partial.remainder = sshbuf.remainder();\n        partial.consumed = sshbuf._offset;\n    }\n    return new Constructor(key);\n}\nfunction write(key, options) {\n    assert.object(key);\n    var alg = keyTypeToAlg(key);\n    var i;\n    var algInfo = algs.info[key.type];\n    if (PrivateKey.isPrivateKey(key)) algInfo = algs.privInfo[key.type];\n    var parts = algInfo.parts;\n    var buf = new SSHBuffer({});\n    buf.writeString(alg);\n    for(i = 0; i < parts.length; ++i){\n        var data = key.part[parts[i]].data;\n        if (algInfo.normalize !== false) {\n            if (key.type === \"ed25519\") data = utils.zeroPadToLength(data, 32);\n            else data = utils.mpNormalize(data);\n        }\n        if (key.type === \"ed25519\" && parts[i] === \"k\") data = Buffer.concat([\n            data,\n            key.part.A.data\n        ]);\n        buf.writeBuffer(data);\n    }\n    return buf.toBuffer();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvcmZjNDI1My5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7O0FBRTlCQSxPQUFPQyxPQUFPLEdBQUc7SUFDaEJDLE1BQU1BLEtBQUtDLElBQUksQ0FBQ0MsV0FBVyxPQUFPQTtJQUNsQ0MsVUFBVUgsS0FBS0MsSUFBSSxDQUFDQyxXQUFXO0lBQy9CRSxPQUFPQTtJQUNQLHlDQUF5QyxHQUN6Q0MsYUFBYUwsS0FBS0MsSUFBSSxDQUFDQyxXQUFXO0lBRWxDLDBCQUEwQixHQUMxQkksY0FBY047SUFDZE8sY0FBY0E7SUFDZEMsY0FBY0E7QUFDZjtBQUVBLElBQUlDLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLFNBQVNELDhGQUE4QjtBQUMzQyxJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUNuQixJQUFJRyxRQUFRSCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJSSxNQUFNSixtQkFBT0EsQ0FBQztBQUNsQixJQUFJSyxhQUFhTCxtQkFBT0EsQ0FBQztBQUN6QixJQUFJTSxZQUFZTixtQkFBT0EsQ0FBQztBQUV4QixTQUFTRixhQUFhUyxHQUFHO0lBQ3hCUixPQUFPUyxNQUFNLENBQUNEO0lBQ2QsSUFBSUEsUUFBUSxXQUNYLE9BQVE7U0FDSixJQUFJQSxRQUFRLFdBQ2hCLE9BQVE7U0FDSixJQUFJQSxRQUFRLGVBQ2hCLE9BQVE7U0FDSixJQUFJQSxRQUFRLGtCQUNoQixPQUFRO1NBQ0osSUFBSUEsSUFBSUUsS0FBSyxDQUFDLGlCQUNsQixPQUFRO1NBRVIsTUFBTyxJQUFJQyxNQUFNLHVCQUF1Qkg7QUFDMUM7QUFFQSxTQUFTVixhQUFhYyxHQUFHO0lBQ3hCWixPQUFPYSxNQUFNLENBQUNEO0lBQ2QsSUFBSUEsSUFBSUUsSUFBSSxLQUFLLE9BQ2hCLE9BQVE7U0FDSixJQUFJRixJQUFJRSxJQUFJLEtBQUssT0FDckIsT0FBUTtTQUNKLElBQUlGLElBQUlFLElBQUksS0FBSyxXQUNyQixP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SUFBSTtRQUNsQyxJQUFJbUIsUUFBUVMsU0FBUyxLQUFLLE9BQU87WUFDaEMsSUFBSWpDLElBQUlFLElBQUksS0FBSyxXQUNoQkcsT0FBT2IsTUFBTTJDLGVBQWUsQ0FBQzlCLE1BQU07aUJBRW5DQSxPQUFPYixNQUFNNEMsV0FBVyxDQUFDL0I7UUFDM0I7UUFDQSxJQUFJTCxJQUFJRSxJQUFJLEtBQUssYUFBYVUsS0FBSyxDQUFDaUIsRUFBRSxLQUFLLEtBQzFDeEIsT0FBT2YsT0FBT3NELE1BQU0sQ0FBQztZQUFDdkM7WUFBTUwsSUFBSUcsSUFBSSxDQUFDMEMsQ0FBQyxDQUFDeEMsSUFBSTtTQUFDO1FBQzdDRyxJQUFJc0MsV0FBVyxDQUFDekM7SUFDakI7SUFFQSxPQUFRRyxJQUFJOEIsUUFBUTtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9mb3JtYXRzL3JmYzQyNTMuanM/NGMzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHJlYWQ6IHJlYWQuYmluZCh1bmRlZmluZWQsIGZhbHNlLCB1bmRlZmluZWQpLFxuXHRyZWFkVHlwZTogcmVhZC5iaW5kKHVuZGVmaW5lZCwgZmFsc2UpLFxuXHR3cml0ZTogd3JpdGUsXG5cdC8qIHNlbWktcHJpdmF0ZSBhcGksIHVzZWQgYnkgc3NocGstYWdlbnQgKi9cblx0cmVhZFBhcnRpYWw6IHJlYWQuYmluZCh1bmRlZmluZWQsIHRydWUpLFxuXG5cdC8qIHNoYXJlZCB3aXRoIHNzaCBmb3JtYXQgKi9cblx0cmVhZEludGVybmFsOiByZWFkLFxuXHRrZXlUeXBlVG9BbGc6IGtleVR5cGVUb0FsZyxcblx0YWxnVG9LZXlUeXBlOiBhbGdUb0tleVR5cGVcbn07XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBhbGdzID0gcmVxdWlyZSgnLi4vYWxncycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBLZXkgPSByZXF1aXJlKCcuLi9rZXknKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi4vcHJpdmF0ZS1rZXknKTtcbnZhciBTU0hCdWZmZXIgPSByZXF1aXJlKCcuLi9zc2gtYnVmZmVyJyk7XG5cbmZ1bmN0aW9uIGFsZ1RvS2V5VHlwZShhbGcpIHtcblx0YXNzZXJ0LnN0cmluZyhhbGcpO1xuXHRpZiAoYWxnID09PSAnc3NoLWRzcycpXG5cdFx0cmV0dXJuICgnZHNhJyk7XG5cdGVsc2UgaWYgKGFsZyA9PT0gJ3NzaC1yc2EnKVxuXHRcdHJldHVybiAoJ3JzYScpO1xuXHRlbHNlIGlmIChhbGcgPT09ICdzc2gtZWQyNTUxOScpXG5cdFx0cmV0dXJuICgnZWQyNTUxOScpO1xuXHRlbHNlIGlmIChhbGcgPT09ICdzc2gtY3VydmUyNTUxOScpXG5cdFx0cmV0dXJuICgnY3VydmUyNTUxOScpO1xuXHRlbHNlIGlmIChhbGcubWF0Y2goL15lY2RzYS1zaGEyLS8pKVxuXHRcdHJldHVybiAoJ2VjZHNhJyk7XG5cdGVsc2Vcblx0XHR0aHJvdyAobmV3IEVycm9yKCdVbmtub3duIGFsZ29yaXRobSAnICsgYWxnKSk7XG59XG5cbmZ1bmN0aW9uIGtleVR5cGVUb0FsZyhrZXkpIHtcblx0YXNzZXJ0Lm9iamVjdChrZXkpO1xuXHRpZiAoa2V5LnR5cGUgPT09ICdkc2EnKVxuXHRcdHJldHVybiAoJ3NzaC1kc3MnKTtcblx0ZWxzZSBpZiAoa2V5LnR5cGUgPT09ICdyc2EnKVxuXHRcdHJldHVybiAoJ3NzaC1yc2EnKTtcblx0ZWxzZSBpZiAoa2V5LnR5cGUgPT09ICdlZDI1NTE5Jylcblx0XHRyZXR1cm4gKCdzc2gtZWQyNTUxOScpO1xuXHRlbHNlIGlmIChrZXkudHlwZSA9PT0gJ2N1cnZlMjU1MTknKVxuXHRcdHJldHVybiAoJ3NzaC1jdXJ2ZTI1NTE5Jyk7XG5cdGVsc2UgaWYgKGtleS50eXBlID09PSAnZWNkc2EnKVxuXHRcdHJldHVybiAoJ2VjZHNhLXNoYTItJyArIGtleS5wYXJ0LmN1cnZlLmRhdGEudG9TdHJpbmcoKSk7XG5cdGVsc2Vcblx0XHR0aHJvdyAobmV3IEVycm9yKCdVbmtub3duIGtleSB0eXBlICcgKyBrZXkudHlwZSkpO1xufVxuXG5mdW5jdGlvbiByZWFkKHBhcnRpYWwsIHR5cGUsIGJ1Ziwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIChidWYpID09PSAnc3RyaW5nJylcblx0XHRidWYgPSBCdWZmZXIuZnJvbShidWYpO1xuXHRhc3NlcnQuYnVmZmVyKGJ1ZiwgJ2J1ZicpO1xuXG5cdHZhciBrZXkgPSB7fTtcblxuXHR2YXIgcGFydHMgPSBrZXkucGFydHMgPSBbXTtcblx0dmFyIHNzaGJ1ZiA9IG5ldyBTU0hCdWZmZXIoe2J1ZmZlcjogYnVmfSk7XG5cblx0dmFyIGFsZyA9IHNzaGJ1Zi5yZWFkU3RyaW5nKCk7XG5cdGFzc2VydC5vayghc3NoYnVmLmF0RW5kKCksICdrZXkgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBwYXJ0Jyk7XG5cblx0a2V5LnR5cGUgPSBhbGdUb0tleVR5cGUoYWxnKTtcblxuXHR2YXIgcGFydENvdW50ID0gYWxncy5pbmZvW2tleS50eXBlXS5wYXJ0cy5sZW5ndGg7XG5cdGlmICh0eXBlICYmIHR5cGUgPT09ICdwcml2YXRlJylcblx0XHRwYXJ0Q291bnQgPSBhbGdzLnByaXZJbmZvW2tleS50eXBlXS5wYXJ0cy5sZW5ndGg7XG5cblx0d2hpbGUgKCFzc2hidWYuYXRFbmQoKSAmJiBwYXJ0cy5sZW5ndGggPCBwYXJ0Q291bnQpXG5cdFx0cGFydHMucHVzaChzc2hidWYucmVhZFBhcnQoKSk7XG5cdHdoaWxlICghcGFydGlhbCAmJiAhc3NoYnVmLmF0RW5kKCkpXG5cdFx0cGFydHMucHVzaChzc2hidWYucmVhZFBhcnQoKSk7XG5cblx0YXNzZXJ0Lm9rKHBhcnRzLmxlbmd0aCA+PSAxLFxuXHQgICAgJ2tleSBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIHBhcnQnKTtcblx0YXNzZXJ0Lm9rKHBhcnRpYWwgfHwgc3NoYnVmLmF0RW5kKCksXG5cdCAgICAnbGVmdG92ZXIgYnl0ZXMgYXQgZW5kIG9mIGtleScpO1xuXG5cdHZhciBDb25zdHJ1Y3RvciA9IEtleTtcblx0dmFyIGFsZ0luZm8gPSBhbGdzLmluZm9ba2V5LnR5cGVdO1xuXHRpZiAodHlwZSA9PT0gJ3ByaXZhdGUnIHx8IGFsZ0luZm8ucGFydHMubGVuZ3RoICE9PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRhbGdJbmZvID0gYWxncy5wcml2SW5mb1trZXkudHlwZV07XG5cdFx0Q29uc3RydWN0b3IgPSBQcml2YXRlS2V5O1xuXHR9XG5cdGFzc2VydC5zdHJpY3RFcXVhbChhbGdJbmZvLnBhcnRzLmxlbmd0aCwgcGFydHMubGVuZ3RoKTtcblxuXHRpZiAoa2V5LnR5cGUgPT09ICdlY2RzYScpIHtcblx0XHR2YXIgcmVzID0gL15lY2RzYS1zaGEyLSguKykkLy5leGVjKGFsZyk7XG5cdFx0YXNzZXJ0Lm9rKHJlcyAhPT0gbnVsbCk7XG5cdFx0YXNzZXJ0LnN0cmljdEVxdWFsKHJlc1sxXSwgcGFydHNbMF0uZGF0YS50b1N0cmluZygpKTtcblx0fVxuXG5cdHZhciBub3JtYWxpemVkID0gdHJ1ZTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhbGdJbmZvLnBhcnRzLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIHAgPSBwYXJ0c1tpXTtcblx0XHRwLm5hbWUgPSBhbGdJbmZvLnBhcnRzW2ldO1xuXHRcdC8qXG5cdFx0ICogT3BlblNTSCBzdG9yZXMgZWQyNTUxOSBcInByaXZhdGVcIiBrZXlzIGFzIHNlZWQgKyBwdWJsaWMga2V5XG5cdFx0ICogY29uY2F0J2QgdG9nZXRoZXIgKGsgZm9sbG93ZWQgYnkgQSkuIFdlIHdhbnQgdG8ga2VlcCB0aGVtXG5cdFx0ICogc2VwYXJhdGUgZm9yIG90aGVyIGZvcm1hdHMgdGhhdCBkb24ndCBkbyB0aGlzLlxuXHRcdCAqL1xuXHRcdGlmIChrZXkudHlwZSA9PT0gJ2VkMjU1MTknICYmIHAubmFtZSA9PT0gJ2snKVxuXHRcdFx0cC5kYXRhID0gcC5kYXRhLnNsaWNlKDAsIDMyKTtcblxuXHRcdGlmIChwLm5hbWUgIT09ICdjdXJ2ZScgJiYgYWxnSW5mby5ub3JtYWxpemUgIT09IGZhbHNlKSB7XG5cdFx0XHR2YXIgbmQ7XG5cdFx0XHRpZiAoa2V5LnR5cGUgPT09ICdlZDI1NTE5Jykge1xuXHRcdFx0XHRuZCA9IHV0aWxzLnplcm9QYWRUb0xlbmd0aChwLmRhdGEsIDMyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5kID0gdXRpbHMubXBOb3JtYWxpemUocC5kYXRhKTtcblx0XHRcdH1cblx0XHRcdGlmIChuZC50b1N0cmluZygnYmluYXJ5JykgIT09XG5cdFx0XHQgICAgcC5kYXRhLnRvU3RyaW5nKCdiaW5hcnknKSkge1xuXHRcdFx0XHRwLmRhdGEgPSBuZDtcblx0XHRcdFx0bm9ybWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChub3JtYWxpemVkKVxuXHRcdGtleS5fcmZjNDI1M0NhY2hlID0gc3NoYnVmLnRvQnVmZmVyKCk7XG5cblx0aWYgKHBhcnRpYWwgJiYgdHlwZW9mIChwYXJ0aWFsKSA9PT0gJ29iamVjdCcpIHtcblx0XHRwYXJ0aWFsLnJlbWFpbmRlciA9IHNzaGJ1Zi5yZW1haW5kZXIoKTtcblx0XHRwYXJ0aWFsLmNvbnN1bWVkID0gc3NoYnVmLl9vZmZzZXQ7XG5cdH1cblxuXHRyZXR1cm4gKG5ldyBDb25zdHJ1Y3RvcihrZXkpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGUoa2V5LCBvcHRpb25zKSB7XG5cdGFzc2VydC5vYmplY3Qoa2V5KTtcblxuXHR2YXIgYWxnID0ga2V5VHlwZVRvQWxnKGtleSk7XG5cdHZhciBpO1xuXG5cdHZhciBhbGdJbmZvID0gYWxncy5pbmZvW2tleS50eXBlXTtcblx0aWYgKFByaXZhdGVLZXkuaXNQcml2YXRlS2V5KGtleSkpXG5cdFx0YWxnSW5mbyA9IGFsZ3MucHJpdkluZm9ba2V5LnR5cGVdO1xuXHR2YXIgcGFydHMgPSBhbGdJbmZvLnBhcnRzO1xuXG5cdHZhciBidWYgPSBuZXcgU1NIQnVmZmVyKHt9KTtcblxuXHRidWYud3JpdGVTdHJpbmcoYWxnKTtcblxuXHRmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgZGF0YSA9IGtleS5wYXJ0W3BhcnRzW2ldXS5kYXRhO1xuXHRcdGlmIChhbGdJbmZvLm5vcm1hbGl6ZSAhPT0gZmFsc2UpIHtcblx0XHRcdGlmIChrZXkudHlwZSA9PT0gJ2VkMjU1MTknKVxuXHRcdFx0XHRkYXRhID0gdXRpbHMuemVyb1BhZFRvTGVuZ3RoKGRhdGEsIDMyKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0ZGF0YSA9IHV0aWxzLm1wTm9ybWFsaXplKGRhdGEpO1xuXHRcdH1cblx0XHRpZiAoa2V5LnR5cGUgPT09ICdlZDI1NTE5JyAmJiBwYXJ0c1tpXSA9PT0gJ2snKVxuXHRcdFx0ZGF0YSA9IEJ1ZmZlci5jb25jYXQoW2RhdGEsIGtleS5wYXJ0LkEuZGF0YV0pO1xuXHRcdGJ1Zi53cml0ZUJ1ZmZlcihkYXRhKTtcblx0fVxuXG5cdHJldHVybiAoYnVmLnRvQnVmZmVyKCkpO1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFkIiwiYmluZCIsInVuZGVmaW5lZCIsInJlYWRUeXBlIiwid3JpdGUiLCJyZWFkUGFydGlhbCIsInJlYWRJbnRlcm5hbCIsImtleVR5cGVUb0FsZyIsImFsZ1RvS2V5VHlwZSIsImFzc2VydCIsInJlcXVpcmUiLCJCdWZmZXIiLCJhbGdzIiwidXRpbHMiLCJLZXkiLCJQcml2YXRlS2V5IiwiU1NIQnVmZmVyIiwiYWxnIiwic3RyaW5nIiwibWF0Y2giLCJFcnJvciIsImtleSIsIm9iamVjdCIsInR5cGUiLCJwYXJ0IiwiY3VydmUiLCJkYXRhIiwidG9TdHJpbmciLCJwYXJ0aWFsIiwiYnVmIiwib3B0aW9ucyIsImZyb20iLCJidWZmZXIiLCJwYXJ0cyIsInNzaGJ1ZiIsInJlYWRTdHJpbmciLCJvayIsImF0RW5kIiwicGFydENvdW50IiwiaW5mbyIsImxlbmd0aCIsInByaXZJbmZvIiwicHVzaCIsInJlYWRQYXJ0IiwiQ29uc3RydWN0b3IiLCJhbGdJbmZvIiwic3RyaWN0RXF1YWwiLCJyZXMiLCJleGVjIiwibm9ybWFsaXplZCIsImkiLCJwIiwibmFtZSIsInNsaWNlIiwibm9ybWFsaXplIiwibmQiLCJ6ZXJvUGFkVG9MZW5ndGgiLCJtcE5vcm1hbGl6ZSIsIl9yZmM0MjUzQ2FjaGUiLCJ0b0J1ZmZlciIsInJlbWFpbmRlciIsImNvbnN1bWVkIiwiX29mZnNldCIsImlzUHJpdmF0ZUtleSIsIndyaXRlU3RyaW5nIiwiY29uY2F0IiwiQSIsIndyaXRlQnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js":
/*!*******************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/ssh-private.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    readSSHPrivate: readSSHPrivate,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar bcrypt;\nfunction read(buf, options) {\n    return pem.read(buf, options);\n}\nvar MAGIC = \"openssh-key-v1\";\nfunction readSSHPrivate(type, buf, options) {\n    buf = new SSHBuffer({\n        buffer: buf\n    });\n    var magic = buf.readCString();\n    assert.strictEqual(magic, MAGIC, \"bad magic string\");\n    var cipher = buf.readString();\n    var kdf = buf.readString();\n    var kdfOpts = buf.readBuffer();\n    var nkeys = buf.readInt();\n    if (nkeys !== 1) {\n        throw new Error(\"OpenSSH-format key file contains \" + \"multiple keys: this is unsupported.\");\n    }\n    var pubKey = buf.readBuffer();\n    if (type === \"public\") {\n        assert.ok(buf.atEnd(), \"excess bytes left after key\");\n        return rfc4253.read(pubKey);\n    }\n    var privKeyBlob = buf.readBuffer();\n    assert.ok(buf.atEnd(), \"excess bytes left after key\");\n    var kdfOptsBuf = new SSHBuffer({\n        buffer: kdfOpts\n    });\n    switch(kdf){\n        case \"none\":\n            if (cipher !== \"none\") {\n                throw new Error('OpenSSH-format key uses KDF \"none\" ' + 'but specifies a cipher other than \"none\"');\n            }\n            break;\n        case \"bcrypt\":\n            var salt = kdfOptsBuf.readBuffer();\n            var rounds = kdfOptsBuf.readInt();\n            var cinf = utils.opensshCipherInfo(cipher);\n            if (bcrypt === undefined) {\n                bcrypt = __webpack_require__(/*! bcrypt-pbkdf */ \"(rsc)/./node_modules/bcrypt-pbkdf/index.js\");\n            }\n            if (typeof options.passphrase === \"string\") {\n                options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n            }\n            if (!Buffer.isBuffer(options.passphrase)) {\n                throw new errors.KeyEncryptedError(options.filename, \"OpenSSH\");\n            }\n            var pass = new Uint8Array(options.passphrase);\n            var salti = new Uint8Array(salt);\n            /* Use the pbkdf to derive both the key and the IV. */ var out = new Uint8Array(cinf.keySize + cinf.blockSize);\n            var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);\n            if (res !== 0) {\n                throw new Error(\"bcrypt_pbkdf function returned \" + \"failure, parameters invalid\");\n            }\n            out = Buffer.from(out);\n            var ckey = out.slice(0, cinf.keySize);\n            var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n            var cipherStream = crypto.createDecipheriv(cinf.opensslName, ckey, iv);\n            cipherStream.setAutoPadding(false);\n            var chunk, chunks = [];\n            cipherStream.once(\"error\", function(e) {\n                if (e.toString().indexOf(\"bad decrypt\") !== -1) {\n                    throw new Error(\"Incorrect passphrase \" + \"supplied, could not decrypt key\");\n                }\n                throw e;\n            });\n            cipherStream.write(privKeyBlob);\n            cipherStream.end();\n            while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n            privKeyBlob = Buffer.concat(chunks);\n            break;\n        default:\n            throw new Error('OpenSSH-format key uses unknown KDF \"' + kdf + '\"');\n    }\n    buf = new SSHBuffer({\n        buffer: privKeyBlob\n    });\n    var checkInt1 = buf.readInt();\n    var checkInt2 = buf.readInt();\n    if (checkInt1 !== checkInt2) {\n        throw new Error(\"Incorrect passphrase supplied, could not \" + \"decrypt key\");\n    }\n    var ret = {};\n    var key = rfc4253.readInternal(ret, \"private\", buf.remainder());\n    buf.skip(ret.consumed);\n    var comment = buf.readString();\n    key.comment = comment;\n    return key;\n}\nfunction write(key, options) {\n    var pubKey;\n    if (PrivateKey.isPrivateKey(key)) pubKey = key.toPublic();\n    else pubKey = key;\n    var cipher = \"none\";\n    var kdf = \"none\";\n    var kdfopts = Buffer.alloc(0);\n    var cinf = {\n        blockSize: 8\n    };\n    var passphrase;\n    if (options !== undefined) {\n        passphrase = options.passphrase;\n        if (typeof passphrase === \"string\") passphrase = Buffer.from(passphrase, \"utf-8\");\n        if (passphrase !== undefined) {\n            assert.buffer(passphrase, \"options.passphrase\");\n            assert.optionalString(options.cipher, \"options.cipher\");\n            cipher = options.cipher;\n            if (cipher === undefined) cipher = \"aes128-ctr\";\n            cinf = utils.opensshCipherInfo(cipher);\n            kdf = \"bcrypt\";\n        }\n    }\n    var privBuf;\n    if (PrivateKey.isPrivateKey(key)) {\n        privBuf = new SSHBuffer({});\n        var checkInt = crypto.randomBytes(4).readUInt32BE(0);\n        privBuf.writeInt(checkInt);\n        privBuf.writeInt(checkInt);\n        privBuf.write(key.toBuffer(\"rfc4253\"));\n        privBuf.writeString(key.comment || \"\");\n        var n = 1;\n        while(privBuf._offset % cinf.blockSize !== 0)privBuf.writeChar(n++);\n        privBuf = privBuf.toBuffer();\n    }\n    switch(kdf){\n        case \"none\":\n            break;\n        case \"bcrypt\":\n            var salt = crypto.randomBytes(16);\n            var rounds = 16;\n            var kdfssh = new SSHBuffer({});\n            kdfssh.writeBuffer(salt);\n            kdfssh.writeInt(rounds);\n            kdfopts = kdfssh.toBuffer();\n            if (bcrypt === undefined) {\n                bcrypt = __webpack_require__(/*! bcrypt-pbkdf */ \"(rsc)/./node_modules/bcrypt-pbkdf/index.js\");\n            }\n            var pass = new Uint8Array(passphrase);\n            var salti = new Uint8Array(salt);\n            /* Use the pbkdf to derive both the key and the IV. */ var out = new Uint8Array(cinf.keySize + cinf.blockSize);\n            var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);\n            if (res !== 0) {\n                throw new Error(\"bcrypt_pbkdf function returned \" + \"failure, parameters invalid\");\n            }\n            out = Buffer.from(out);\n            var ckey = out.slice(0, cinf.keySize);\n            var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n            var cipherStream = crypto.createCipheriv(cinf.opensslName, ckey, iv);\n            cipherStream.setAutoPadding(false);\n            var chunk, chunks = [];\n            cipherStream.once(\"error\", function(e) {\n                throw e;\n            });\n            cipherStream.write(privBuf);\n            cipherStream.end();\n            while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n            privBuf = Buffer.concat(chunks);\n            break;\n        default:\n            throw new Error(\"Unsupported kdf \" + kdf);\n    }\n    var buf = new SSHBuffer({});\n    buf.writeCString(MAGIC);\n    buf.writeString(cipher); /* cipher */ \n    buf.writeString(kdf); /* kdf */ \n    buf.writeBuffer(kdfopts); /* kdfoptions */ \n    buf.writeInt(1); /* nkeys */ \n    buf.writeBuffer(pubKey.toBuffer(\"rfc4253\"));\n    if (privBuf) buf.writeBuffer(privBuf);\n    buf = buf.toBuffer();\n    var header;\n    if (PrivateKey.isPrivateKey(key)) header = \"OPENSSH PRIVATE KEY\";\n    else header = \"OPENSSH PUBLIC KEY\";\n    var tmp = buf.toString(\"base64\");\n    var len = tmp.length + tmp.length / 70 + 18 + 16 + header.length * 2 + 10;\n    buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 70;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/ssh.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/formats/ssh.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar sshpriv = __webpack_require__(/*! ./ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\n/*JSSTYLED*/ var SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n/*JSSTYLED*/ var SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var trimmed = buf.trim().replace(/[\\\\\\r]/g, \"\");\n    var m = trimmed.match(SSHKEY_RE);\n    if (!m) m = trimmed.match(SSHKEY_RE2);\n    assert.ok(m, \"key must match regex\");\n    var type = rfc4253.algToKeyType(m[1]);\n    var kbuf = Buffer.from(m[2], \"base64\");\n    /*\n\t * This is a bit tricky. If we managed to parse the key and locate the\n\t * key comment with the regex, then do a non-partial read and assert\n\t * that we have consumed all bytes. If we couldn't locate the key\n\t * comment, though, there may be whitespace shenanigans going on that\n\t * have conjoined the comment to the rest of the key. We do a partial\n\t * read in this case to try to make the best out of a sorry situation.\n\t */ var key;\n    var ret = {};\n    if (m[4]) {\n        try {\n            key = rfc4253.read(kbuf);\n        } catch (e) {\n            m = trimmed.match(SSHKEY_RE2);\n            assert.ok(m, \"key must match regex\");\n            kbuf = Buffer.from(m[2], \"base64\");\n            key = rfc4253.readInternal(ret, \"public\", kbuf);\n        }\n    } else {\n        key = rfc4253.readInternal(ret, \"public\", kbuf);\n    }\n    assert.strictEqual(type, key.type);\n    if (m[4] && m[4].length > 0) {\n        key.comment = m[4];\n    } else if (ret.consumed) {\n        /*\n\t\t * Now the magic: trying to recover the key comment when it's\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\n\t\t *\n\t\t * Work out how much base64 we used, then drop all non-base64\n\t\t * chars from the beginning up to this point in the the string.\n\t\t * Then offset in this and try to make up for missing = chars.\n\t\t */ var data = m[2] + (m[3] ? m[3] : \"\");\n        var realOffset = Math.ceil(ret.consumed / 3) * 4;\n        data = data.slice(0, realOffset - 2)./*JSSTYLED*/ replace(/[^a-zA-Z0-9+\\/=]/g, \"\") + data.slice(realOffset - 2);\n        var padding = ret.consumed % 3;\n        if (padding > 0 && data.slice(realOffset - 1, realOffset) !== \"=\") realOffset--;\n        while(data.slice(realOffset, realOffset + 1) === \"=\")realOffset++;\n        /* Finally, grab what we think is the comment & clean it up. */ var trailer = data.slice(realOffset);\n        trailer = trailer.replace(/[\\r\\n]/g, \" \").replace(/^\\s+/, \"\");\n        if (trailer.match(/^[a-zA-Z0-9]/)) key.comment = trailer;\n    }\n    return key;\n}\nfunction write(key, options) {\n    assert.object(key);\n    if (!Key.isKey(key)) throw new Error(\"Must be a public key\");\n    var parts = [];\n    var alg = rfc4253.keyTypeToAlg(key);\n    parts.push(alg);\n    var buf = rfc4253.write(key);\n    parts.push(buf.toString(\"base64\"));\n    if (key.comment) parts.push(key.comment);\n    return Buffer.from(parts.join(\" \"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/ssh.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/x509-pem.js":
/*!****************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/x509-pem.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2016 Joyent, Inc.\n\nvar x509 = __webpack_require__(/*! ./x509 */ \"(rsc)/./node_modules/sshpk/lib/formats/x509.js\");\nmodule.exports = {\n    read: read,\n    verify: x509.verify,\n    sign: x509.sign,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.trim().split(/[\\r\\n]+/g);\n    var m;\n    var si = -1;\n    while(!m && si < lines.length){\n        m = lines[++si].match(/*JSSTYLED*/ /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);\n    }\n    assert.ok(m, \"invalid PEM header\");\n    var m2;\n    var ei = lines.length;\n    while(!m2 && ei > 0){\n        m2 = lines[--ei].match(/*JSSTYLED*/ /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);\n    }\n    assert.ok(m2, \"invalid PEM footer\");\n    lines = lines.slice(si, ei + 1);\n    var headers = {};\n    while(true){\n        lines = lines.slice(1);\n        m = lines[0].match(/*JSSTYLED*/ /^([A-Za-z0-9-]+): (.+)$/);\n        if (!m) break;\n        headers[m[1].toLowerCase()] = m[2];\n    }\n    /* Chop off the first and last lines */ lines = lines.slice(0, -1).join(\"\");\n    buf = Buffer.from(lines, \"base64\");\n    return x509.read(buf, options);\n}\nfunction write(cert, options) {\n    var dbuf = x509.write(cert, options);\n    var header = \"CERTIFICATE\";\n    var tmp = dbuf.toString(\"base64\");\n    var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;\n    var buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 64;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMveDUwOS1wZW0uanMiLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCOztBQUU5QixJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVuQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCQyxNQUFNQTtJQUNOQyxRQUFRTCxLQUFLSyxNQUFNO0lBQ25CQyxNQUFNTixLQUFLTSxJQUFJO0lBQ2ZDLE9BQU9BO0FBQ1I7QUFFQSxJQUFJQyxTQUFTUCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJUSxPQUFPUixtQkFBT0EsQ0FBQztBQUNuQixJQUFJUyxTQUFTVCw4RkFBOEI7QUFDM0MsSUFBSVUsT0FBT1YsbUJBQU9BLENBQUM7QUFDbkIsSUFBSVcsUUFBUVgsbUJBQU9BLENBQUM7QUFDcEIsSUFBSVksTUFBTVosbUJBQU9BLENBQUM7QUFDbEIsSUFBSWEsYUFBYWIsbUJBQU9BLENBQUM7QUFDekIsSUFBSWMsTUFBTWQsbUJBQU9BLENBQUM7QUFDbEIsSUFBSWUsV0FBV2YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSWdCLFlBQVloQixtQkFBT0EsQ0FBQztBQUN4QixJQUFJaUIsY0FBY2pCLG1CQUFPQSxDQUFDO0FBRTFCLFNBQVNHLEtBQUtlLEdBQUcsRUFBRUMsT0FBTztJQUN6QixJQUFJLE9BQVFELFFBQVMsVUFBVTtRQUM5QlgsT0FBT2EsTUFBTSxDQUFDRixLQUFLO1FBQ25CQSxNQUFNQSxJQUFJRyxRQUFRLENBQUM7SUFDcEI7SUFFQSxJQUFJQyxRQUFRSixJQUFJSyxJQUFJLEdBQUdDLEtBQUssQ0FBQztJQUU3QixJQUFJQztJQUNKLElBQUlDLEtBQUssQ0FBQztJQUNWLE1BQU8sQ0FBQ0QsS0FBS0MsS0FBS0osTUFBTUssTUFBTSxDQUFFO1FBQy9CRixJQUFJSCxLQUFLLENBQUMsRUFBRUksR0FBRyxDQUFDRSxLQUFLLENBQUMsVUFBVSxHQUM1QjtJQUNMO0lBQ0FyQixPQUFPc0IsRUFBRSxDQUFDSixHQUFHO0lBRWIsSUFBSUs7SUFDSixJQUFJQyxLQUFLVCxNQUFNSyxNQUFNO0lBQ3JCLE1BQU8sQ0FBQ0csTUFBTUMsS0FBSyxFQUFHO1FBQ3JCRCxLQUFLUixLQUFLLENBQUMsRUFBRVMsR0FBRyxDQUFDSCxLQUFLLENBQUMsVUFBVSxHQUM3QjtJQUNMO0lBQ0FyQixPQUFPc0IsRUFBRSxDQUFDQyxJQUFJO0lBRWRSLFFBQVFBLE1BQU1VLEtBQUssQ0FBQ04sSUFBSUssS0FBSztJQUU3QixJQUFJRSxVQUFVLENBQUM7SUFDZixNQUFPLEtBQU07UUFDWlgsUUFBUUEsTUFBTVUsS0FBSyxDQUFDO1FBQ3BCUCxJQUFJSCxLQUFLLENBQUMsRUFBRSxDQUFDTSxLQUFLLENBQUMsVUFBVSxHQUN6QjtRQUNKLElBQUksQ0FBQ0gsR0FDSjtRQUNEUSxPQUFPLENBQUNSLENBQUMsQ0FBQyxFQUFFLENBQUNTLFdBQVcsR0FBRyxHQUFHVCxDQUFDLENBQUMsRUFBRTtJQUNuQztJQUVBLHFDQUFxQyxHQUNyQ0gsUUFBUUEsTUFBTVUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHRyxJQUFJLENBQUM7SUFDaENqQixNQUFNVCxPQUFPMkIsSUFBSSxDQUFDZCxPQUFPO0lBRXpCLE9BQVF2QixLQUFLSSxJQUFJLENBQUNlLEtBQUtDO0FBQ3hCO0FBRUEsU0FBU2IsTUFBTStCLElBQUksRUFBRWxCLE9BQU87SUFDM0IsSUFBSW1CLE9BQU92QyxLQUFLTyxLQUFLLENBQUMrQixNQUFNbEI7SUFFNUIsSUFBSW9CLFNBQVM7SUFDYixJQUFJQyxNQUFNRixLQUFLakIsUUFBUSxDQUFDO0lBQ3hCLElBQUlvQixNQUFNRCxJQUFJYixNQUFNLEdBQUlhLElBQUliLE1BQU0sR0FBRyxLQUNqQyxLQUFLLEtBQUtZLE9BQU9aLE1BQU0sR0FBQyxJQUFJO0lBQ2hDLElBQUlULE1BQU1ULE9BQU9pQyxLQUFLLENBQUNEO0lBQ3ZCLElBQUlFLElBQUk7SUFDUkEsS0FBS3pCLElBQUlaLEtBQUssQ0FBQyxnQkFBZ0JpQyxTQUFTLFdBQVdJO0lBQ25ELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSixJQUFJYixNQUFNLEVBQUk7UUFDakMsSUFBSWtCLFFBQVFELElBQUk7UUFDaEIsSUFBSUMsUUFBUUwsSUFBSWIsTUFBTSxFQUNyQmtCLFFBQVFMLElBQUliLE1BQU07UUFDbkJnQixLQUFLekIsSUFBSVosS0FBSyxDQUFDa0MsSUFBSVIsS0FBSyxDQUFDWSxHQUFHQyxRQUFRRjtRQUNwQ3pCLEdBQUcsQ0FBQ3lCLElBQUksR0FBRztRQUNYQyxJQUFJQztJQUNMO0lBQ0FGLEtBQUt6QixJQUFJWixLQUFLLENBQUMsY0FBY2lDLFNBQVMsV0FBV0k7SUFFakQsT0FBUXpCLElBQUljLEtBQUssQ0FBQyxHQUFHVztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9mb3JtYXRzL3g1MDktcGVtLmpzPzBhNTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYgSm95ZW50LCBJbmMuXG5cbnZhciB4NTA5ID0gcmVxdWlyZSgnLi94NTA5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRyZWFkOiByZWFkLFxuXHR2ZXJpZnk6IHg1MDkudmVyaWZ5LFxuXHRzaWduOiB4NTA5LnNpZ24sXG5cdHdyaXRlOiB3cml0ZVxufTtcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjEnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4uL2FsZ3MnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgS2V5ID0gcmVxdWlyZSgnLi4va2V5Jyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4uL3ByaXZhdGUta2V5Jyk7XG52YXIgcGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbnZhciBJZGVudGl0eSA9IHJlcXVpcmUoJy4uL2lkZW50aXR5Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi4vc2lnbmF0dXJlJyk7XG52YXIgQ2VydGlmaWNhdGUgPSByZXF1aXJlKCcuLi9jZXJ0aWZpY2F0ZScpO1xuXG5mdW5jdGlvbiByZWFkKGJ1Ziwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIChidWYpICE9PSAnc3RyaW5nJykge1xuXHRcdGFzc2VydC5idWZmZXIoYnVmLCAnYnVmJyk7XG5cdFx0YnVmID0gYnVmLnRvU3RyaW5nKCdhc2NpaScpO1xuXHR9XG5cblx0dmFyIGxpbmVzID0gYnVmLnRyaW0oKS5zcGxpdCgvW1xcclxcbl0rL2cpO1xuXG5cdHZhciBtO1xuXHR2YXIgc2kgPSAtMTtcblx0d2hpbGUgKCFtICYmIHNpIDwgbGluZXMubGVuZ3RoKSB7XG5cdFx0bSA9IGxpbmVzWysrc2ldLm1hdGNoKC8qSlNTVFlMRUQqL1xuXHRcdCAgICAvWy1dK1sgXSpCRUdJTiBDRVJUSUZJQ0FURVsgXSpbLV0rLyk7XG5cdH1cblx0YXNzZXJ0Lm9rKG0sICdpbnZhbGlkIFBFTSBoZWFkZXInKTtcblxuXHR2YXIgbTI7XG5cdHZhciBlaSA9IGxpbmVzLmxlbmd0aDtcblx0d2hpbGUgKCFtMiAmJiBlaSA+IDApIHtcblx0XHRtMiA9IGxpbmVzWy0tZWldLm1hdGNoKC8qSlNTVFlMRUQqL1xuXHRcdCAgICAvWy1dK1sgXSpFTkQgQ0VSVElGSUNBVEVbIF0qWy1dKy8pO1xuXHR9XG5cdGFzc2VydC5vayhtMiwgJ2ludmFsaWQgUEVNIGZvb3RlcicpO1xuXG5cdGxpbmVzID0gbGluZXMuc2xpY2Uoc2ksIGVpICsgMSk7XG5cblx0dmFyIGhlYWRlcnMgPSB7fTtcblx0d2hpbGUgKHRydWUpIHtcblx0XHRsaW5lcyA9IGxpbmVzLnNsaWNlKDEpO1xuXHRcdG0gPSBsaW5lc1swXS5tYXRjaCgvKkpTU1RZTEVEKi9cblx0XHQgICAgL14oW0EtWmEtejAtOS1dKyk6ICguKykkLyk7XG5cdFx0aWYgKCFtKVxuXHRcdFx0YnJlYWs7XG5cdFx0aGVhZGVyc1ttWzFdLnRvTG93ZXJDYXNlKCldID0gbVsyXTtcblx0fVxuXG5cdC8qIENob3Agb2ZmIHRoZSBmaXJzdCBhbmQgbGFzdCBsaW5lcyAqL1xuXHRsaW5lcyA9IGxpbmVzLnNsaWNlKDAsIC0xKS5qb2luKCcnKTtcblx0YnVmID0gQnVmZmVyLmZyb20obGluZXMsICdiYXNlNjQnKTtcblxuXHRyZXR1cm4gKHg1MDkucmVhZChidWYsIG9wdGlvbnMpKTtcbn1cblxuZnVuY3Rpb24gd3JpdGUoY2VydCwgb3B0aW9ucykge1xuXHR2YXIgZGJ1ZiA9IHg1MDkud3JpdGUoY2VydCwgb3B0aW9ucyk7XG5cblx0dmFyIGhlYWRlciA9ICdDRVJUSUZJQ0FURSc7XG5cdHZhciB0bXAgPSBkYnVmLnRvU3RyaW5nKCdiYXNlNjQnKTtcblx0dmFyIGxlbiA9IHRtcC5sZW5ndGggKyAodG1wLmxlbmd0aCAvIDY0KSArXG5cdCAgICAxOCArIDE2ICsgaGVhZGVyLmxlbmd0aCoyICsgMTA7XG5cdHZhciBidWYgPSBCdWZmZXIuYWxsb2MobGVuKTtcblx0dmFyIG8gPSAwO1xuXHRvICs9IGJ1Zi53cml0ZSgnLS0tLS1CRUdJTiAnICsgaGVhZGVyICsgJy0tLS0tXFxuJywgbyk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgdG1wLmxlbmd0aDsgKSB7XG5cdFx0dmFyIGxpbWl0ID0gaSArIDY0O1xuXHRcdGlmIChsaW1pdCA+IHRtcC5sZW5ndGgpXG5cdFx0XHRsaW1pdCA9IHRtcC5sZW5ndGg7XG5cdFx0byArPSBidWYud3JpdGUodG1wLnNsaWNlKGksIGxpbWl0KSwgbyk7XG5cdFx0YnVmW28rK10gPSAxMDtcblx0XHRpID0gbGltaXQ7XG5cdH1cblx0byArPSBidWYud3JpdGUoJy0tLS0tRU5EICcgKyBoZWFkZXIgKyAnLS0tLS1cXG4nLCBvKTtcblxuXHRyZXR1cm4gKGJ1Zi5zbGljZSgwLCBvKSk7XG59XG4iXSwibmFtZXMiOlsieDUwOSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVhZCIsInZlcmlmeSIsInNpZ24iLCJ3cml0ZSIsImFzc2VydCIsImFzbjEiLCJCdWZmZXIiLCJhbGdzIiwidXRpbHMiLCJLZXkiLCJQcml2YXRlS2V5IiwicGVtIiwiSWRlbnRpdHkiLCJTaWduYXR1cmUiLCJDZXJ0aWZpY2F0ZSIsImJ1ZiIsIm9wdGlvbnMiLCJidWZmZXIiLCJ0b1N0cmluZyIsImxpbmVzIiwidHJpbSIsInNwbGl0IiwibSIsInNpIiwibGVuZ3RoIiwibWF0Y2giLCJvayIsIm0yIiwiZWkiLCJzbGljZSIsImhlYWRlcnMiLCJ0b0xvd2VyQ2FzZSIsImpvaW4iLCJmcm9tIiwiY2VydCIsImRidWYiLCJoZWFkZXIiLCJ0bXAiLCJsZW4iLCJhbGxvYyIsIm8iLCJpIiwibGltaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/x509-pem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/x509.js":
/*!************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/x509.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    verify: verify,\n    sign: sign,\n    signAsync: signAsync,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\n/*\n * This file is based on RFC5280 (X.509).\n */ /* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction verify(cert, key) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    var algParts = sig.algo.split(\"-\");\n    if (algParts[0] !== key.type) return false;\n    var blob = sig.cache;\n    if (blob === undefined) {\n        var der = new asn1.BerWriter();\n        writeTBSCert(cert, der);\n        blob = der.buffer;\n    }\n    var verifier = key.createVerify(algParts[1]);\n    verifier.write(blob);\n    return verifier.verify(sig.signature);\n}\nfunction Local(i) {\n    return asn1.Ber.Context | asn1.Ber.Constructor | i;\n}\nfunction Context(i) {\n    return asn1.Ber.Context | i;\n}\nvar SIGN_ALGS = {\n    \"rsa-md5\": \"1.2.840.113549.1.1.4\",\n    \"rsa-sha1\": \"1.2.840.113549.1.1.5\",\n    \"rsa-sha256\": \"1.2.840.113549.1.1.11\",\n    \"rsa-sha384\": \"1.2.840.113549.1.1.12\",\n    \"rsa-sha512\": \"1.2.840.113549.1.1.13\",\n    \"dsa-sha1\": \"1.2.840.10040.4.3\",\n    \"dsa-sha256\": \"2.16.840.1.101.3.4.3.2\",\n    \"ecdsa-sha1\": \"1.2.840.10045.4.1\",\n    \"ecdsa-sha256\": \"1.2.840.10045.4.3.2\",\n    \"ecdsa-sha384\": \"1.2.840.10045.4.3.3\",\n    \"ecdsa-sha512\": \"1.2.840.10045.4.3.4\",\n    \"ed25519-sha512\": \"1.3.101.112\"\n};\nObject.keys(SIGN_ALGS).forEach(function(k) {\n    SIGN_ALGS[SIGN_ALGS[k]] = k;\n});\nSIGN_ALGS[\"1.3.14.3.2.3\"] = \"rsa-md5\";\nSIGN_ALGS[\"1.3.14.3.2.29\"] = \"rsa-sha1\";\nvar EXTS = {\n    \"issuerKeyId\": \"2.5.29.35\",\n    \"altName\": \"2.5.29.17\",\n    \"basicConstraints\": \"2.5.29.19\",\n    \"keyUsage\": \"2.5.29.15\",\n    \"extKeyUsage\": \"2.5.29.37\"\n};\nfunction read(buf, options) {\n    if (typeof buf === \"string\") {\n        buf = Buffer.from(buf, \"binary\");\n    }\n    assert.buffer(buf, \"buf\");\n    var der = new asn1.BerReader(buf);\n    der.readSequence();\n    if (Math.abs(der.length - der.remain) > 1) {\n        throw new Error(\"DER sequence does not contain whole byte \" + \"stream\");\n    }\n    var tbsStart = der.offset;\n    der.readSequence();\n    var sigOffset = der.offset + der.length;\n    var tbsEnd = sigOffset;\n    if (der.peek() === Local(0)) {\n        der.readSequence(Local(0));\n        var version = der.readInt();\n        assert.ok(version <= 3, \"only x.509 versions up to v3 supported\");\n    }\n    var cert = {};\n    cert.signatures = {};\n    var sig = cert.signatures.x509 = {};\n    sig.extras = {};\n    cert.serial = readMPInt(der, \"serial\");\n    der.readSequence();\n    var after = der.offset + der.length;\n    var certAlgOid = der.readOID();\n    var certAlg = SIGN_ALGS[certAlgOid];\n    if (certAlg === undefined) throw new Error(\"unknown signature algorithm \" + certAlgOid);\n    der._offset = after;\n    cert.issuer = Identity.parseAsn1(der);\n    der.readSequence();\n    cert.validFrom = readDate(der);\n    cert.validUntil = readDate(der);\n    cert.subjects = [\n        Identity.parseAsn1(der)\n    ];\n    der.readSequence();\n    after = der.offset + der.length;\n    cert.subjectKey = pkcs8.readPkcs8(undefined, \"public\", der);\n    der._offset = after;\n    /* issuerUniqueID */ if (der.peek() === Local(1)) {\n        der.readSequence(Local(1));\n        sig.extras.issuerUniqueID = buf.slice(der.offset, der.offset + der.length);\n        der._offset += der.length;\n    }\n    /* subjectUniqueID */ if (der.peek() === Local(2)) {\n        der.readSequence(Local(2));\n        sig.extras.subjectUniqueID = buf.slice(der.offset, der.offset + der.length);\n        der._offset += der.length;\n    }\n    /* extensions */ if (der.peek() === Local(3)) {\n        der.readSequence(Local(3));\n        var extEnd = der.offset + der.length;\n        der.readSequence();\n        while(der.offset < extEnd)readExtension(cert, buf, der);\n        assert.strictEqual(der.offset, extEnd);\n    }\n    assert.strictEqual(der.offset, sigOffset);\n    der.readSequence();\n    after = der.offset + der.length;\n    var sigAlgOid = der.readOID();\n    var sigAlg = SIGN_ALGS[sigAlgOid];\n    if (sigAlg === undefined) throw new Error(\"unknown signature algorithm \" + sigAlgOid);\n    der._offset = after;\n    var sigData = der.readString(asn1.Ber.BitString, true);\n    if (sigData[0] === 0) sigData = sigData.slice(1);\n    var algParts = sigAlg.split(\"-\");\n    sig.signature = Signature.parse(sigData, algParts[0], \"asn1\");\n    sig.signature.hashAlgorithm = algParts[1];\n    sig.algo = sigAlg;\n    sig.cache = buf.slice(tbsStart, tbsEnd);\n    return new Certificate(cert);\n}\nfunction readDate(der) {\n    if (der.peek() === asn1.Ber.UTCTime) {\n        return utcTimeToDate(der.readString(asn1.Ber.UTCTime));\n    } else if (der.peek() === asn1.Ber.GeneralizedTime) {\n        return gTimeToDate(der.readString(asn1.Ber.GeneralizedTime));\n    } else {\n        throw new Error(\"Unsupported date format\");\n    }\n}\nfunction writeDate(der, date) {\n    if (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {\n        der.writeString(dateToGTime(date), asn1.Ber.GeneralizedTime);\n    } else {\n        der.writeString(dateToUTCTime(date), asn1.Ber.UTCTime);\n    }\n}\n/* RFC5280, section 4.2.1.6 (GeneralName type) */ var ALTNAME = {\n    OtherName: Local(0),\n    RFC822Name: Context(1),\n    DNSName: Context(2),\n    X400Address: Local(3),\n    DirectoryName: Local(4),\n    EDIPartyName: Local(5),\n    URI: Context(6),\n    IPAddress: Context(7),\n    OID: Context(8)\n};\n/* RFC5280, section 4.2.1.12 (KeyPurposeId) */ var EXTPURPOSE = {\n    \"serverAuth\": \"1.3.6.1.5.5.7.3.1\",\n    \"clientAuth\": \"1.3.6.1.5.5.7.3.2\",\n    \"codeSigning\": \"1.3.6.1.5.5.7.3.3\",\n    /* See https://github.com/joyent/oid-docs/blob/master/root.md */ \"joyentDocker\": \"1.3.6.1.4.1.38678.1.4.1\",\n    \"joyentCmon\": \"1.3.6.1.4.1.38678.1.4.2\"\n};\nvar EXTPURPOSE_REV = {};\nObject.keys(EXTPURPOSE).forEach(function(k) {\n    EXTPURPOSE_REV[EXTPURPOSE[k]] = k;\n});\nvar KEYUSEBITS = [\n    \"signature\",\n    \"identity\",\n    \"keyEncryption\",\n    \"encryption\",\n    \"keyAgreement\",\n    \"ca\",\n    \"crl\"\n];\nfunction readExtension(cert, buf, der) {\n    der.readSequence();\n    var after = der.offset + der.length;\n    var extId = der.readOID();\n    var id;\n    var sig = cert.signatures.x509;\n    if (!sig.extras.exts) sig.extras.exts = [];\n    var critical;\n    if (der.peek() === asn1.Ber.Boolean) critical = der.readBoolean();\n    switch(extId){\n        case EXTS.basicConstraints:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            var bcEnd = der.offset + der.length;\n            var ca = false;\n            if (der.peek() === asn1.Ber.Boolean) ca = der.readBoolean();\n            if (cert.purposes === undefined) cert.purposes = [];\n            if (ca === true) cert.purposes.push(\"ca\");\n            var bc = {\n                oid: extId,\n                critical: critical\n            };\n            if (der.offset < bcEnd && der.peek() === asn1.Ber.Integer) bc.pathLen = der.readInt();\n            sig.extras.exts.push(bc);\n            break;\n        case EXTS.extKeyUsage:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            if (cert.purposes === undefined) cert.purposes = [];\n            var ekEnd = der.offset + der.length;\n            while(der.offset < ekEnd){\n                var oid = der.readOID();\n                cert.purposes.push(EXTPURPOSE_REV[oid] || oid);\n            }\n            /*\n\t\t * This is a bit of a hack: in the case where we have a cert\n\t\t * that's only allowed to do serverAuth or clientAuth (and not\n\t\t * the other), we want to make sure all our Subjects are of\n\t\t * the right type. But we already parsed our Subjects and\n\t\t * decided if they were hosts or users earlier (since it appears\n\t\t * first in the cert).\n\t\t *\n\t\t * So we go through and mutate them into the right kind here if\n\t\t * it doesn't match. This might not be hugely beneficial, as it\n\t\t * seems that single-purpose certs are not often seen in the\n\t\t * wild.\n\t\t */ if (cert.purposes.indexOf(\"serverAuth\") !== -1 && cert.purposes.indexOf(\"clientAuth\") === -1) {\n                cert.subjects.forEach(function(ide) {\n                    if (ide.type !== \"host\") {\n                        ide.type = \"host\";\n                        ide.hostname = ide.uid || ide.email || ide.components[0].value;\n                    }\n                });\n            } else if (cert.purposes.indexOf(\"clientAuth\") !== -1 && cert.purposes.indexOf(\"serverAuth\") === -1) {\n                cert.subjects.forEach(function(ide) {\n                    if (ide.type !== \"user\") {\n                        ide.type = \"user\";\n                        ide.uid = ide.hostname || ide.email || ide.components[0].value;\n                    }\n                });\n            }\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical\n            });\n            break;\n        case EXTS.keyUsage:\n            der.readSequence(asn1.Ber.OctetString);\n            var bits = der.readString(asn1.Ber.BitString, true);\n            var setBits = readBitField(bits, KEYUSEBITS);\n            setBits.forEach(function(bit) {\n                if (cert.purposes === undefined) cert.purposes = [];\n                if (cert.purposes.indexOf(bit) === -1) cert.purposes.push(bit);\n            });\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical,\n                bits: bits\n            });\n            break;\n        case EXTS.altName:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            var aeEnd = der.offset + der.length;\n            while(der.offset < aeEnd){\n                switch(der.peek()){\n                    case ALTNAME.OtherName:\n                    case ALTNAME.EDIPartyName:\n                        der.readSequence();\n                        der._offset += der.length;\n                        break;\n                    case ALTNAME.OID:\n                        der.readOID(ALTNAME.OID);\n                        break;\n                    case ALTNAME.RFC822Name:\n                        /* RFC822 specifies email addresses */ var email = der.readString(ALTNAME.RFC822Name);\n                        id = Identity.forEmail(email);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    case ALTNAME.DirectoryName:\n                        der.readSequence(ALTNAME.DirectoryName);\n                        id = Identity.parseAsn1(der);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    case ALTNAME.DNSName:\n                        var host = der.readString(ALTNAME.DNSName);\n                        id = Identity.forHost(host);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    default:\n                        der.readString(der.peek());\n                        break;\n                }\n            }\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical\n            });\n            break;\n        default:\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical,\n                data: der.readString(asn1.Ber.OctetString, true)\n            });\n            break;\n    }\n    der._offset = after;\n}\nvar UTCTIME_RE = /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction utcTimeToDate(t) {\n    var m = t.match(UTCTIME_RE);\n    assert.ok(m, \"timestamps must be in UTC\");\n    var d = new Date();\n    var thisYear = d.getUTCFullYear();\n    var century = Math.floor(thisYear / 100) * 100;\n    var year = parseInt(m[1], 10);\n    if (thisYear % 100 < 50 && year >= 60) year += century - 1;\n    else year += century;\n    d.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n    d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n    if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));\n    return d;\n}\nvar GTIME_RE = /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction gTimeToDate(t) {\n    var m = t.match(GTIME_RE);\n    assert.ok(m);\n    var d = new Date();\n    d.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n    d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n    if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));\n    return d;\n}\nfunction zeroPad(n, m) {\n    if (m === undefined) m = 2;\n    var s = \"\" + n;\n    while(s.length < m)s = \"0\" + s;\n    return s;\n}\nfunction dateToUTCTime(d) {\n    var s = \"\";\n    s += zeroPad(d.getUTCFullYear() % 100);\n    s += zeroPad(d.getUTCMonth() + 1);\n    s += zeroPad(d.getUTCDate());\n    s += zeroPad(d.getUTCHours());\n    s += zeroPad(d.getUTCMinutes());\n    s += zeroPad(d.getUTCSeconds());\n    s += \"Z\";\n    return s;\n}\nfunction dateToGTime(d) {\n    var s = \"\";\n    s += zeroPad(d.getUTCFullYear(), 4);\n    s += zeroPad(d.getUTCMonth() + 1);\n    s += zeroPad(d.getUTCDate());\n    s += zeroPad(d.getUTCHours());\n    s += zeroPad(d.getUTCMinutes());\n    s += zeroPad(d.getUTCSeconds());\n    s += \"Z\";\n    return s;\n}\nfunction sign(cert, key) {\n    if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};\n    var sig = cert.signatures.x509;\n    sig.algo = key.type + \"-\" + key.defaultHashAlgorithm();\n    if (SIGN_ALGS[sig.algo] === undefined) return false;\n    var der = new asn1.BerWriter();\n    writeTBSCert(cert, der);\n    var blob = der.buffer;\n    sig.cache = blob;\n    var signer = key.createSign();\n    signer.write(blob);\n    cert.signatures.x509.signature = signer.sign();\n    return true;\n}\nfunction signAsync(cert, signer, done) {\n    if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};\n    var sig = cert.signatures.x509;\n    var der = new asn1.BerWriter();\n    writeTBSCert(cert, der);\n    var blob = der.buffer;\n    sig.cache = blob;\n    signer(blob, function(err, signature) {\n        if (err) {\n            done(err);\n            return;\n        }\n        sig.algo = signature.type + \"-\" + signature.hashAlgorithm;\n        if (SIGN_ALGS[sig.algo] === undefined) {\n            done(new Error('Invalid signing algorithm \"' + sig.algo + '\"'));\n            return;\n        }\n        sig.signature = signature;\n        done();\n    });\n}\nfunction write(cert, options) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    var der = new asn1.BerWriter();\n    der.startSequence();\n    if (sig.cache) {\n        der._ensure(sig.cache.length);\n        sig.cache.copy(der._buf, der._offset);\n        der._offset += sig.cache.length;\n    } else {\n        writeTBSCert(cert, der);\n    }\n    der.startSequence();\n    der.writeOID(SIGN_ALGS[sig.algo]);\n    if (sig.algo.match(/^rsa-/)) der.writeNull();\n    der.endSequence();\n    var sigData = sig.signature.toBuffer(\"asn1\");\n    var data = Buffer.alloc(sigData.length + 1);\n    data[0] = 0;\n    sigData.copy(data, 1);\n    der.writeBuffer(data, asn1.Ber.BitString);\n    der.endSequence();\n    return der.buffer;\n}\nfunction writeTBSCert(cert, der) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    der.startSequence();\n    der.startSequence(Local(0));\n    der.writeInt(2);\n    der.endSequence();\n    der.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);\n    der.startSequence();\n    der.writeOID(SIGN_ALGS[sig.algo]);\n    if (sig.algo.match(/^rsa-/)) der.writeNull();\n    der.endSequence();\n    cert.issuer.toAsn1(der);\n    der.startSequence();\n    writeDate(der, cert.validFrom);\n    writeDate(der, cert.validUntil);\n    der.endSequence();\n    var subject = cert.subjects[0];\n    var altNames = cert.subjects.slice(1);\n    subject.toAsn1(der);\n    pkcs8.writePkcs8(der, cert.subjectKey);\n    if (sig.extras && sig.extras.issuerUniqueID) {\n        der.writeBuffer(sig.extras.issuerUniqueID, Local(1));\n    }\n    if (sig.extras && sig.extras.subjectUniqueID) {\n        der.writeBuffer(sig.extras.subjectUniqueID, Local(2));\n    }\n    if (altNames.length > 0 || subject.type === \"host\" || cert.purposes !== undefined && cert.purposes.length > 0 || sig.extras && sig.extras.exts) {\n        der.startSequence(Local(3));\n        der.startSequence();\n        var exts = [];\n        if (cert.purposes !== undefined && cert.purposes.length > 0) {\n            exts.push({\n                oid: EXTS.basicConstraints,\n                critical: true\n            });\n            exts.push({\n                oid: EXTS.keyUsage,\n                critical: true\n            });\n            exts.push({\n                oid: EXTS.extKeyUsage,\n                critical: true\n            });\n        }\n        exts.push({\n            oid: EXTS.altName\n        });\n        if (sig.extras && sig.extras.exts) exts = sig.extras.exts;\n        for(var i = 0; i < exts.length; ++i){\n            der.startSequence();\n            der.writeOID(exts[i].oid);\n            if (exts[i].critical !== undefined) der.writeBoolean(exts[i].critical);\n            if (exts[i].oid === EXTS.altName) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                if (subject.type === \"host\") {\n                    der.writeString(subject.hostname, Context(2));\n                }\n                for(var j = 0; j < altNames.length; ++j){\n                    if (altNames[j].type === \"host\") {\n                        der.writeString(altNames[j].hostname, ALTNAME.DNSName);\n                    } else if (altNames[j].type === \"email\") {\n                        der.writeString(altNames[j].email, ALTNAME.RFC822Name);\n                    } else {\n                        /*\n\t\t\t\t\t\t * Encode anything else as a\n\t\t\t\t\t\t * DN style name for now.\n\t\t\t\t\t\t */ der.startSequence(ALTNAME.DirectoryName);\n                        altNames[j].toAsn1(der);\n                        der.endSequence();\n                    }\n                }\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.basicConstraints) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                var ca = cert.purposes.indexOf(\"ca\") !== -1;\n                var pathLen = exts[i].pathLen;\n                der.writeBoolean(ca);\n                if (pathLen !== undefined) der.writeInt(pathLen);\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.extKeyUsage) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                cert.purposes.forEach(function(purpose) {\n                    if (purpose === \"ca\") return;\n                    if (KEYUSEBITS.indexOf(purpose) !== -1) return;\n                    var oid = purpose;\n                    if (EXTPURPOSE[purpose] !== undefined) oid = EXTPURPOSE[purpose];\n                    der.writeOID(oid);\n                });\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.keyUsage) {\n                der.startSequence(asn1.Ber.OctetString);\n                /*\n\t\t\t\t * If we parsed this certificate from a byte\n\t\t\t\t * stream (i.e. we didn't generate it in sshpk)\n\t\t\t\t * then we'll have a \".bits\" property on the\n\t\t\t\t * ext with the original raw byte contents.\n\t\t\t\t *\n\t\t\t\t * If we have this, use it here instead of\n\t\t\t\t * regenerating it. This guarantees we output\n\t\t\t\t * the same data we parsed, so signatures still\n\t\t\t\t * validate.\n\t\t\t\t */ if (exts[i].bits !== undefined) {\n                    der.writeBuffer(exts[i].bits, asn1.Ber.BitString);\n                } else {\n                    var bits = writeBitField(cert.purposes, KEYUSEBITS);\n                    der.writeBuffer(bits, asn1.Ber.BitString);\n                }\n                der.endSequence();\n            } else {\n                der.writeBuffer(exts[i].data, asn1.Ber.OctetString);\n            }\n            der.endSequence();\n        }\n        der.endSequence();\n        der.endSequence();\n    }\n    der.endSequence();\n}\n/*\n * Reads an ASN.1 BER bitfield out of the Buffer produced by doing\n * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw\n * contents of the BitString tag, which is a count of unused bits followed by\n * the bits as a right-padded byte string.\n *\n * `bits` is the Buffer, `bitIndex` should contain an array of string names\n * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.\n *\n * Returns an array of Strings, the names of the bits that were set to 1.\n */ function readBitField(bits, bitIndex) {\n    var bitLen = 8 * (bits.length - 1) - bits[0];\n    var setBits = {};\n    for(var i = 0; i < bitLen; ++i){\n        var byteN = 1 + Math.floor(i / 8);\n        var bit = 7 - i % 8;\n        var mask = 1 << bit;\n        var bitVal = (bits[byteN] & mask) !== 0;\n        var name = bitIndex[i];\n        if (bitVal && typeof name === \"string\") {\n            setBits[name] = true;\n        }\n    }\n    return Object.keys(setBits);\n}\n/*\n * `setBits` is an array of strings, containing the names for each bit that\n * sould be set to 1. `bitIndex` is same as in `readBitField()`.\n *\n * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.\n */ function writeBitField(setBits, bitIndex) {\n    var bitLen = bitIndex.length;\n    var blen = Math.ceil(bitLen / 8);\n    var unused = blen * 8 - bitLen;\n    var bits = Buffer.alloc(1 + blen); // zero-filled\n    bits[0] = unused;\n    for(var i = 0; i < bitLen; ++i){\n        var byteN = 1 + Math.floor(i / 8);\n        var bit = 7 - i % 8;\n        var mask = 1 << bit;\n        var name = bitIndex[i];\n        if (name === undefined) continue;\n        var bitVal = setBits.indexOf(name) !== -1;\n        if (bitVal) {\n            bits[byteN] |= mask;\n        }\n    }\n    return bits;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/x509.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/identity.js":
/*!********************************************!*\
  !*** ./node_modules/sshpk/lib/identity.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = Identity;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\n/*JSSTYLED*/ var DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\\-]{0,62})(?:\\.([*]|[a-z0-9][a-z0-9\\-]{0,62}))*$/i;\nvar oids = {};\noids.cn = \"2.5.4.3\";\noids.o = \"2.5.4.10\";\noids.ou = \"2.5.4.11\";\noids.l = \"2.5.4.7\";\noids.s = \"2.5.4.8\";\noids.c = \"2.5.4.6\";\noids.sn = \"2.5.4.4\";\noids.postalCode = \"2.5.4.17\";\noids.serialNumber = \"2.5.4.5\";\noids.street = \"2.5.4.9\";\noids.x500UniqueIdentifier = \"2.5.4.45\";\noids.role = \"2.5.4.72\";\noids.telephoneNumber = \"2.5.4.20\";\noids.description = \"2.5.4.13\";\noids.dc = \"0.9.2342.19200300.100.1.25\";\noids.uid = \"0.9.2342.19200300.100.1.1\";\noids.mail = \"0.9.2342.19200300.100.1.3\";\noids.title = \"2.5.4.12\";\noids.gn = \"2.5.4.42\";\noids.initials = \"2.5.4.43\";\noids.pseudonym = \"2.5.4.65\";\noids.emailAddress = \"1.2.840.113549.1.9.1\";\nvar unoids = {};\nObject.keys(oids).forEach(function(k) {\n    unoids[oids[k]] = k;\n});\nfunction Identity(opts) {\n    var self = this;\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.components, \"options.components\");\n    this.components = opts.components;\n    this.componentLookup = {};\n    this.components.forEach(function(c) {\n        if (c.name && !c.oid) c.oid = oids[c.name];\n        if (c.oid && !c.name) c.name = unoids[c.oid];\n        if (self.componentLookup[c.name] === undefined) self.componentLookup[c.name] = [];\n        self.componentLookup[c.name].push(c);\n    });\n    if (this.componentLookup.cn && this.componentLookup.cn.length > 0) {\n        this.cn = this.componentLookup.cn[0].value;\n    }\n    assert.optionalString(opts.type, \"options.type\");\n    if (opts.type === undefined) {\n        if (this.components.length === 1 && this.componentLookup.cn && this.componentLookup.cn.length === 1 && this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.cn[0].value;\n        } else if (this.componentLookup.dc && this.components.length === this.componentLookup.dc.length) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.dc.map(function(c) {\n                return c.value;\n            }).join(\".\");\n        } else if (this.componentLookup.uid && this.components.length === this.componentLookup.uid.length) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.uid[0].value;\n        } else if (this.componentLookup.cn && this.componentLookup.cn.length === 1 && this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.cn[0].value;\n        } else if (this.componentLookup.uid && this.componentLookup.uid.length === 1) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.uid[0].value;\n        } else if (this.componentLookup.mail && this.componentLookup.mail.length === 1) {\n            this.type = \"email\";\n            this.email = this.componentLookup.mail[0].value;\n        } else if (this.componentLookup.cn && this.componentLookup.cn.length === 1) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.cn[0].value;\n        } else {\n            this.type = \"unknown\";\n        }\n    } else {\n        this.type = opts.type;\n        if (this.type === \"host\") this.hostname = opts.hostname;\n        else if (this.type === \"user\") this.uid = opts.uid;\n        else if (this.type === \"email\") this.email = opts.email;\n        else throw new Error(\"Unknown type \" + this.type);\n    }\n}\nIdentity.prototype.toString = function() {\n    return this.components.map(function(c) {\n        var n = c.name.toUpperCase();\n        /*JSSTYLED*/ n = n.replace(/=/g, \"\\\\=\");\n        var v = c.value;\n        /*JSSTYLED*/ v = v.replace(/,/g, \"\\\\,\");\n        return n + \"=\" + v;\n    }).join(\", \");\n};\nIdentity.prototype.get = function(name, asArray) {\n    assert.string(name, \"name\");\n    var arr = this.componentLookup[name];\n    if (arr === undefined || arr.length === 0) return undefined;\n    if (!asArray && arr.length > 1) throw new Error(\"Multiple values for attribute \" + name);\n    if (!asArray) return arr[0].value;\n    return arr.map(function(c) {\n        return c.value;\n    });\n};\nIdentity.prototype.toArray = function(idx) {\n    return this.components.map(function(c) {\n        return {\n            name: c.name,\n            value: c.value\n        };\n    });\n};\n/*\n * These are from X.680 -- PrintableString allowed chars are in section 37.4\n * table 8. Spec for IA5Strings is \"1,6 + SPACE + DEL\" where 1 refers to\n * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006\n * (the basic ASCII character set).\n */ /* JSSTYLED */ var NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\\/:=?-]/;\n/* JSSTYLED */ var NOT_IA5 = /[^\\x00-\\x7f]/;\nIdentity.prototype.toAsn1 = function(der, tag) {\n    der.startSequence(tag);\n    this.components.forEach(function(c) {\n        der.startSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n        der.startSequence();\n        der.writeOID(c.oid);\n        /*\n\t\t * If we fit in a PrintableString, use that. Otherwise use an\n\t\t * IA5String or UTF8String.\n\t\t *\n\t\t * If this identity was parsed from a DN, use the ASN.1 types\n\t\t * from the original representation (otherwise this might not\n\t\t * be a full match for the original in some validators).\n\t\t */ if (c.asn1type === asn1.Ber.Utf8String || c.value.match(NOT_IA5)) {\n            var v = Buffer.from(c.value, \"utf8\");\n            der.writeBuffer(v, asn1.Ber.Utf8String);\n        } else if (c.asn1type === asn1.Ber.IA5String || c.value.match(NOT_PRINTABLE)) {\n            der.writeString(c.value, asn1.Ber.IA5String);\n        } else {\n            var type = asn1.Ber.PrintableString;\n            if (c.asn1type !== undefined) type = c.asn1type;\n            der.writeString(c.value, type);\n        }\n        der.endSequence();\n        der.endSequence();\n    });\n    der.endSequence();\n};\nfunction globMatch(a, b) {\n    if (a === \"**\" || b === \"**\") return true;\n    var aParts = a.split(\".\");\n    var bParts = b.split(\".\");\n    if (aParts.length !== bParts.length) return false;\n    for(var i = 0; i < aParts.length; ++i){\n        if (aParts[i] === \"*\" || bParts[i] === \"*\") continue;\n        if (aParts[i] !== bParts[i]) return false;\n    }\n    return true;\n}\nIdentity.prototype.equals = function(other) {\n    if (!Identity.isIdentity(other, [\n        1,\n        0\n    ])) return false;\n    if (other.components.length !== this.components.length) return false;\n    for(var i = 0; i < this.components.length; ++i){\n        if (this.components[i].oid !== other.components[i].oid) return false;\n        if (!globMatch(this.components[i].value, other.components[i].value)) {\n            return false;\n        }\n    }\n    return true;\n};\nIdentity.forHost = function(hostname) {\n    assert.string(hostname, \"hostname\");\n    return new Identity({\n        type: \"host\",\n        hostname: hostname,\n        components: [\n            {\n                name: \"cn\",\n                value: hostname\n            }\n        ]\n    });\n};\nIdentity.forUser = function(uid) {\n    assert.string(uid, \"uid\");\n    return new Identity({\n        type: \"user\",\n        uid: uid,\n        components: [\n            {\n                name: \"uid\",\n                value: uid\n            }\n        ]\n    });\n};\nIdentity.forEmail = function(email) {\n    assert.string(email, \"email\");\n    return new Identity({\n        type: \"email\",\n        email: email,\n        components: [\n            {\n                name: \"mail\",\n                value: email\n            }\n        ]\n    });\n};\nIdentity.parseDN = function(dn) {\n    assert.string(dn, \"dn\");\n    var parts = [\n        \"\"\n    ];\n    var idx = 0;\n    var rem = dn;\n    while(rem.length > 0){\n        var m;\n        /*JSSTYLED*/ if ((m = /^,/.exec(rem)) !== null) {\n            parts[++idx] = \"\";\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^\\\\,/.exec(rem)) !== null) {\n            parts[idx] += \",\";\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^\\\\./.exec(rem)) !== null) {\n            parts[idx] += m[0];\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^[^\\\\,]+/.exec(rem)) !== null) {\n            parts[idx] += m[0];\n            rem = rem.slice(m[0].length);\n        } else {\n            throw new Error(\"Failed to parse DN\");\n        }\n    }\n    var cmps = parts.map(function(c) {\n        c = c.trim();\n        var eqPos = c.indexOf(\"=\");\n        while(eqPos > 0 && c.charAt(eqPos - 1) === \"\\\\\")eqPos = c.indexOf(\"=\", eqPos + 1);\n        if (eqPos === -1) {\n            throw new Error(\"Failed to parse DN\");\n        }\n        /*JSSTYLED*/ var name = c.slice(0, eqPos).toLowerCase().replace(/\\\\=/g, \"=\");\n        var value = c.slice(eqPos + 1);\n        return {\n            name: name,\n            value: value\n        };\n    });\n    return new Identity({\n        components: cmps\n    });\n};\nIdentity.fromArray = function(components) {\n    assert.arrayOfObject(components, \"components\");\n    components.forEach(function(cmp) {\n        assert.object(cmp, \"component\");\n        assert.string(cmp.name, \"component.name\");\n        if (!Buffer.isBuffer(cmp.value) && !(typeof cmp.value === \"string\")) {\n            throw new Error(\"Invalid component value\");\n        }\n    });\n    return new Identity({\n        components: components\n    });\n};\nIdentity.parseAsn1 = function(der, top) {\n    var components = [];\n    der.readSequence(top);\n    var end = der.offset + der.length;\n    while(der.offset < end){\n        der.readSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n        var after = der.offset + der.length;\n        der.readSequence();\n        var oid = der.readOID();\n        var type = der.peek();\n        var value;\n        switch(type){\n            case asn1.Ber.PrintableString:\n            case asn1.Ber.IA5String:\n            case asn1.Ber.OctetString:\n            case asn1.Ber.T61String:\n                value = der.readString(type);\n                break;\n            case asn1.Ber.Utf8String:\n                value = der.readString(type, true);\n                value = value.toString(\"utf8\");\n                break;\n            case asn1.Ber.CharacterString:\n            case asn1.Ber.BMPString:\n                value = der.readString(type, true);\n                value = value.toString(\"utf16le\");\n                break;\n            default:\n                throw new Error(\"Unknown asn1 type \" + type);\n        }\n        components.push({\n            oid: oid,\n            asn1type: type,\n            value: value\n        });\n        der._offset = after;\n    }\n    der._offset = end;\n    return new Identity({\n        components: components\n    });\n};\nIdentity.isIdentity = function(obj, ver) {\n    return utils.isCompatible(obj, Identity, ver);\n};\n/*\n * API versions for Identity:\n * [1,0] -- initial ver\n */ Identity.prototype._sshpkApiVersion = [\n    1,\n    0\n];\nIdentity._oldVersionDetect = function(obj) {\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/identity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/index.js":
/*!*****************************************!*\
  !*** ./node_modules/sshpk/lib/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Certificate = __webpack_require__(/*! ./certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nvar Identity = __webpack_require__(/*! ./identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nmodule.exports = {\n    /* top-level classes */ Key: Key,\n    parseKey: Key.parse,\n    Fingerprint: Fingerprint,\n    parseFingerprint: Fingerprint.parse,\n    Signature: Signature,\n    parseSignature: Signature.parse,\n    PrivateKey: PrivateKey,\n    parsePrivateKey: PrivateKey.parse,\n    generatePrivateKey: PrivateKey.generate,\n    Certificate: Certificate,\n    parseCertificate: Certificate.parse,\n    createSelfSignedCertificate: Certificate.createSelfSigned,\n    createCertificate: Certificate.create,\n    Identity: Identity,\n    identityFromDN: Identity.parseDN,\n    identityForHost: Identity.forHost,\n    identityForUser: Identity.forUser,\n    identityForEmail: Identity.forEmail,\n    identityFromArray: Identity.fromArray,\n    /* errors */ FingerprintFormatError: errs.FingerprintFormatError,\n    InvalidAlgorithmError: errs.InvalidAlgorithmError,\n    KeyParseError: errs.KeyParseError,\n    SignatureParseError: errs.SignatureParseError,\n    KeyEncryptedError: errs.KeyEncryptedError,\n    CertificateParseError: errs.CertificateParseError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4Qjs7QUFFOUIsSUFBSUEsTUFBTUMsbUJBQU9BLENBQUM7QUFDbEIsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUM7QUFDMUIsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUcsYUFBYUgsbUJBQU9BLENBQUM7QUFDekIsSUFBSUksY0FBY0osbUJBQU9BLENBQUM7QUFDMUIsSUFBSUssV0FBV0wsbUJBQU9BLENBQUM7QUFDdkIsSUFBSU0sT0FBT04sbUJBQU9BLENBQUM7QUFFbkJPLE9BQU9DLE9BQU8sR0FBRztJQUNoQixxQkFBcUIsR0FDckJULEtBQUtBO0lBQ0xVLFVBQVVWLElBQUlXLEtBQUs7SUFDbkJULGFBQWFBO0lBQ2JVLGtCQUFrQlYsWUFBWVMsS0FBSztJQUNuQ1IsV0FBV0E7SUFDWFUsZ0JBQWdCVixVQUFVUSxLQUFLO0lBQy9CUCxZQUFZQTtJQUNaVSxpQkFBaUJWLFdBQVdPLEtBQUs7SUFDakNJLG9CQUFvQlgsV0FBV1ksUUFBUTtJQUN2Q1gsYUFBYUE7SUFDYlksa0JBQWtCWixZQUFZTSxLQUFLO0lBQ25DTyw2QkFBNkJiLFlBQVljLGdCQUFnQjtJQUN6REMsbUJBQW1CZixZQUFZZ0IsTUFBTTtJQUNyQ2YsVUFBVUE7SUFDVmdCLGdCQUFnQmhCLFNBQVNpQixPQUFPO0lBQ2hDQyxpQkFBaUJsQixTQUFTbUIsT0FBTztJQUNqQ0MsaUJBQWlCcEIsU0FBU3FCLE9BQU87SUFDakNDLGtCQUFrQnRCLFNBQVN1QixRQUFRO0lBQ25DQyxtQkFBbUJ4QixTQUFTeUIsU0FBUztJQUVyQyxVQUFVLEdBQ1ZDLHdCQUF3QnpCLEtBQUt5QixzQkFBc0I7SUFDbkRDLHVCQUF1QjFCLEtBQUswQixxQkFBcUI7SUFDakRDLGVBQWUzQixLQUFLMkIsYUFBYTtJQUNqQ0MscUJBQXFCNUIsS0FBSzRCLG1CQUFtQjtJQUM3Q0MsbUJBQW1CN0IsS0FBSzZCLGlCQUFpQjtJQUN6Q0MsdUJBQXVCOUIsS0FBSzhCLHFCQUFxQjtBQUNsRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9pbmRleC5qcz9iOGZmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG52YXIgS2V5ID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBGaW5nZXJwcmludCA9IHJlcXVpcmUoJy4vZmluZ2VycHJpbnQnKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuL3ByaXZhdGUta2V5Jyk7XG52YXIgQ2VydGlmaWNhdGUgPSByZXF1aXJlKCcuL2NlcnRpZmljYXRlJyk7XG52YXIgSWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG52YXIgZXJycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHQvKiB0b3AtbGV2ZWwgY2xhc3NlcyAqL1xuXHRLZXk6IEtleSxcblx0cGFyc2VLZXk6IEtleS5wYXJzZSxcblx0RmluZ2VycHJpbnQ6IEZpbmdlcnByaW50LFxuXHRwYXJzZUZpbmdlcnByaW50OiBGaW5nZXJwcmludC5wYXJzZSxcblx0U2lnbmF0dXJlOiBTaWduYXR1cmUsXG5cdHBhcnNlU2lnbmF0dXJlOiBTaWduYXR1cmUucGFyc2UsXG5cdFByaXZhdGVLZXk6IFByaXZhdGVLZXksXG5cdHBhcnNlUHJpdmF0ZUtleTogUHJpdmF0ZUtleS5wYXJzZSxcblx0Z2VuZXJhdGVQcml2YXRlS2V5OiBQcml2YXRlS2V5LmdlbmVyYXRlLFxuXHRDZXJ0aWZpY2F0ZTogQ2VydGlmaWNhdGUsXG5cdHBhcnNlQ2VydGlmaWNhdGU6IENlcnRpZmljYXRlLnBhcnNlLFxuXHRjcmVhdGVTZWxmU2lnbmVkQ2VydGlmaWNhdGU6IENlcnRpZmljYXRlLmNyZWF0ZVNlbGZTaWduZWQsXG5cdGNyZWF0ZUNlcnRpZmljYXRlOiBDZXJ0aWZpY2F0ZS5jcmVhdGUsXG5cdElkZW50aXR5OiBJZGVudGl0eSxcblx0aWRlbnRpdHlGcm9tRE46IElkZW50aXR5LnBhcnNlRE4sXG5cdGlkZW50aXR5Rm9ySG9zdDogSWRlbnRpdHkuZm9ySG9zdCxcblx0aWRlbnRpdHlGb3JVc2VyOiBJZGVudGl0eS5mb3JVc2VyLFxuXHRpZGVudGl0eUZvckVtYWlsOiBJZGVudGl0eS5mb3JFbWFpbCxcblx0aWRlbnRpdHlGcm9tQXJyYXk6IElkZW50aXR5LmZyb21BcnJheSxcblxuXHQvKiBlcnJvcnMgKi9cblx0RmluZ2VycHJpbnRGb3JtYXRFcnJvcjogZXJycy5GaW5nZXJwcmludEZvcm1hdEVycm9yLFxuXHRJbnZhbGlkQWxnb3JpdGhtRXJyb3I6IGVycnMuSW52YWxpZEFsZ29yaXRobUVycm9yLFxuXHRLZXlQYXJzZUVycm9yOiBlcnJzLktleVBhcnNlRXJyb3IsXG5cdFNpZ25hdHVyZVBhcnNlRXJyb3I6IGVycnMuU2lnbmF0dXJlUGFyc2VFcnJvcixcblx0S2V5RW5jcnlwdGVkRXJyb3I6IGVycnMuS2V5RW5jcnlwdGVkRXJyb3IsXG5cdENlcnRpZmljYXRlUGFyc2VFcnJvcjogZXJycy5DZXJ0aWZpY2F0ZVBhcnNlRXJyb3Jcbn07XG4iXSwibmFtZXMiOlsiS2V5IiwicmVxdWlyZSIsIkZpbmdlcnByaW50IiwiU2lnbmF0dXJlIiwiUHJpdmF0ZUtleSIsIkNlcnRpZmljYXRlIiwiSWRlbnRpdHkiLCJlcnJzIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlS2V5IiwicGFyc2UiLCJwYXJzZUZpbmdlcnByaW50IiwicGFyc2VTaWduYXR1cmUiLCJwYXJzZVByaXZhdGVLZXkiLCJnZW5lcmF0ZVByaXZhdGVLZXkiLCJnZW5lcmF0ZSIsInBhcnNlQ2VydGlmaWNhdGUiLCJjcmVhdGVTZWxmU2lnbmVkQ2VydGlmaWNhdGUiLCJjcmVhdGVTZWxmU2lnbmVkIiwiY3JlYXRlQ2VydGlmaWNhdGUiLCJjcmVhdGUiLCJpZGVudGl0eUZyb21ETiIsInBhcnNlRE4iLCJpZGVudGl0eUZvckhvc3QiLCJmb3JIb3N0IiwiaWRlbnRpdHlGb3JVc2VyIiwiZm9yVXNlciIsImlkZW50aXR5Rm9yRW1haWwiLCJmb3JFbWFpbCIsImlkZW50aXR5RnJvbUFycmF5IiwiZnJvbUFycmF5IiwiRmluZ2VycHJpbnRGb3JtYXRFcnJvciIsIkludmFsaWRBbGdvcml0aG1FcnJvciIsIktleVBhcnNlRXJyb3IiLCJTaWduYXR1cmVQYXJzZUVycm9yIiwiS2V5RW5jcnlwdGVkRXJyb3IiLCJDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/key.js":
/*!***************************************!*\
  !*** ./node_modules/sshpk/lib/key.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Key;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar DiffieHellman = (__webpack_require__(/*! ./dhe */ \"(rsc)/./node_modules/sshpk/lib/dhe.js\").DiffieHellman);\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar edCompat;\ntry {\n    edCompat = __webpack_require__(/*! ./ed-compat */ \"(rsc)/./node_modules/sshpk/lib/ed-compat.js\");\n} catch (e) {\n/* Just continue through, and bail out if we try to use it. */ }\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar formats = {};\nformats[\"auto\"] = __webpack_require__(/*! ./formats/auto */ \"(rsc)/./node_modules/sshpk/lib/formats/auto.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nformats[\"pkcs1\"] = __webpack_require__(/*! ./formats/pkcs1 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nformats[\"pkcs8\"] = __webpack_require__(/*! ./formats/pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nformats[\"rfc4253\"] = __webpack_require__(/*! ./formats/rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nformats[\"ssh\"] = __webpack_require__(/*! ./formats/ssh */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh.js\");\nformats[\"ssh-private\"] = __webpack_require__(/*! ./formats/ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nformats[\"openssh\"] = formats[\"ssh-private\"];\nformats[\"dnssec\"] = __webpack_require__(/*! ./formats/dnssec */ \"(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\");\nformats[\"putty\"] = __webpack_require__(/*! ./formats/putty */ \"(rsc)/./node_modules/sshpk/lib/formats/putty.js\");\nformats[\"ppk\"] = formats[\"putty\"];\nfunction Key(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.parts, \"options.parts\");\n    assert.string(opts.type, \"options.type\");\n    assert.optionalString(opts.comment, \"options.comment\");\n    var algInfo = algs.info[opts.type];\n    if (typeof algInfo !== \"object\") throw new InvalidAlgorithmError(opts.type);\n    var partLookup = {};\n    for(var i = 0; i < opts.parts.length; ++i){\n        var part = opts.parts[i];\n        partLookup[part.name] = part;\n    }\n    this.type = opts.type;\n    this.parts = opts.parts;\n    this.part = partLookup;\n    this.comment = undefined;\n    this.source = opts.source;\n    /* for speeding up hashing/fingerprint operations */ this._rfc4253Cache = opts._rfc4253Cache;\n    this._hashCache = {};\n    var sz;\n    this.curve = undefined;\n    if (this.type === \"ecdsa\") {\n        var curve = this.part.curve.data.toString();\n        this.curve = curve;\n        sz = algs.curves[curve].size;\n    } else if (this.type === \"ed25519\" || this.type === \"curve25519\") {\n        sz = 256;\n        this.curve = \"curve25519\";\n    } else {\n        var szPart = this.part[algInfo.sizePart];\n        sz = szPart.data.length;\n        sz = sz * 8 - utils.countZeros(szPart.data);\n    }\n    this.size = sz;\n}\nKey.formats = formats;\nKey.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"ssh\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    if (format === \"rfc4253\") {\n        if (this._rfc4253Cache === undefined) this._rfc4253Cache = formats[\"rfc4253\"].write(this);\n        return this._rfc4253Cache;\n    }\n    return formats[format].write(this, options);\n};\nKey.prototype.toString = function(format, options) {\n    return this.toBuffer(format, options).toString();\n};\nKey.prototype.hash = function(algo, type) {\n    assert.string(algo, \"algorithm\");\n    assert.optionalString(type, \"type\");\n    if (type === undefined) type = \"ssh\";\n    algo = algo.toLowerCase();\n    if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);\n    var cacheKey = algo + \"||\" + type;\n    if (this._hashCache[cacheKey]) return this._hashCache[cacheKey];\n    var buf;\n    if (type === \"ssh\") {\n        buf = this.toBuffer(\"rfc4253\");\n    } else if (type === \"spki\") {\n        buf = formats.pkcs8.pkcs8ToBuffer(this);\n    } else {\n        throw new Error(\"Hash type \" + type + \" not supported\");\n    }\n    var hash = crypto.createHash(algo).update(buf).digest();\n    this._hashCache[cacheKey] = hash;\n    return hash;\n};\nKey.prototype.fingerprint = function(algo, type) {\n    if (algo === undefined) algo = \"sha256\";\n    if (type === undefined) type = \"ssh\";\n    assert.string(algo, \"algorithm\");\n    assert.string(type, \"type\");\n    var opts = {\n        type: \"key\",\n        hash: this.hash(algo, type),\n        algorithm: algo,\n        hashType: type\n    };\n    return new Fingerprint(opts);\n};\nKey.prototype.defaultHashAlgorithm = function() {\n    var hashAlgo = \"sha1\";\n    if (this.type === \"rsa\") hashAlgo = \"sha256\";\n    if (this.type === \"dsa\" && this.size > 1024) hashAlgo = \"sha256\";\n    if (this.type === \"ed25519\") hashAlgo = \"sha512\";\n    if (this.type === \"ecdsa\") {\n        if (this.size <= 256) hashAlgo = \"sha256\";\n        else if (this.size <= 384) hashAlgo = \"sha384\";\n        else hashAlgo = \"sha512\";\n    }\n    return hashAlgo;\n};\nKey.prototype.createVerify = function(hashAlgo) {\n    if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n    assert.string(hashAlgo, \"hash algorithm\");\n    /* ED25519 is not supported by OpenSSL, use a javascript impl. */ if (this.type === \"ed25519\" && edCompat !== undefined) return new edCompat.Verifier(this, hashAlgo);\n    if (this.type === \"curve25519\") throw new Error(\"Curve25519 keys are not suitable for \" + \"signing or verification\");\n    var v, nm, err;\n    try {\n        nm = hashAlgo.toUpperCase();\n        v = crypto.createVerify(nm);\n    } catch (e) {\n        err = e;\n    }\n    if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n        nm = \"RSA-\";\n        nm += hashAlgo.toUpperCase();\n        v = crypto.createVerify(nm);\n    }\n    assert.ok(v, \"failed to create verifier\");\n    var oldVerify = v.verify.bind(v);\n    var key = this.toBuffer(\"pkcs8\");\n    var curve = this.curve;\n    var self = this;\n    v.verify = function(signature, fmt) {\n        if (Signature.isSignature(signature, [\n            2,\n            0\n        ])) {\n            if (signature.type !== self.type) return false;\n            if (signature.hashAlgorithm && signature.hashAlgorithm !== hashAlgo) return false;\n            if (signature.curve && self.type === \"ecdsa\" && signature.curve !== curve) return false;\n            return oldVerify(key, signature.toBuffer(\"asn1\"));\n        } else if (typeof signature === \"string\" || Buffer.isBuffer(signature)) {\n            return oldVerify(key, signature, fmt);\n        /*\n\t\t * Avoid doing this on valid arguments, walking the prototype\n\t\t * chain can be quite slow.\n\t\t */ } else if (Signature.isSignature(signature, [\n            1,\n            0\n        ])) {\n            throw new Error(\"signature was created by too old \" + \"a version of sshpk and cannot be verified\");\n        } else {\n            throw new TypeError(\"signature must be a string, \" + \"Buffer, or Signature object\");\n        }\n    };\n    return v;\n};\nKey.prototype.createDiffieHellman = function() {\n    if (this.type === \"rsa\") throw new Error(\"RSA keys do not support Diffie-Hellman\");\n    return new DiffieHellman(this);\n};\nKey.prototype.createDH = Key.prototype.createDiffieHellman;\nKey.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        if (k instanceof PrivateKey) k = k.toPublic();\n        if (!k.comment) k.comment = options.filename;\n        return k;\n    } catch (e) {\n        if (e.name === \"KeyEncryptedError\") throw e;\n        throw new KeyParseError(options.filename, format, e);\n    }\n};\nKey.isKey = function(obj, ver) {\n    return utils.isCompatible(obj, Key, ver);\n};\n/*\n * API versions for Key:\n * [1,0] -- initial ver, may take Signature for createVerify or may not\n * [1,1] -- added pkcs1, pkcs8 formats\n * [1,2] -- added auto, ssh-private, openssh formats\n * [1,3] -- added defaultHashAlgorithm\n * [1,4] -- added ed support, createDH\n * [1,5] -- first explicitly tagged version\n * [1,6] -- changed ed25519 part names\n * [1,7] -- spki hash types\n */ Key.prototype._sshpkApiVersion = [\n    1,\n    7\n];\nKey._oldVersionDetect = function(obj) {\n    assert.func(obj.toBuffer);\n    assert.func(obj.fingerprint);\n    if (obj.createDH) return [\n        1,\n        4\n    ];\n    if (obj.defaultHashAlgorithm) return [\n        1,\n        3\n    ];\n    if (obj.formats[\"auto\"]) return [\n        1,\n        2\n    ];\n    if (obj.formats[\"pkcs1\"]) return [\n        1,\n        1\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/private-key.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/private-key.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = PrivateKey;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar dhe = __webpack_require__(/*! ./dhe */ \"(rsc)/./node_modules/sshpk/lib/dhe.js\");\nvar generateECDSA = dhe.generateECDSA;\nvar generateED25519 = dhe.generateED25519;\nvar edCompat = __webpack_require__(/*! ./ed-compat */ \"(rsc)/./node_modules/sshpk/lib/ed-compat.js\");\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\nvar formats = {};\nformats[\"auto\"] = __webpack_require__(/*! ./formats/auto */ \"(rsc)/./node_modules/sshpk/lib/formats/auto.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nformats[\"pkcs1\"] = __webpack_require__(/*! ./formats/pkcs1 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nformats[\"pkcs8\"] = __webpack_require__(/*! ./formats/pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nformats[\"rfc4253\"] = __webpack_require__(/*! ./formats/rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nformats[\"ssh-private\"] = __webpack_require__(/*! ./formats/ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nformats[\"openssh\"] = formats[\"ssh-private\"];\nformats[\"ssh\"] = formats[\"ssh-private\"];\nformats[\"dnssec\"] = __webpack_require__(/*! ./formats/dnssec */ \"(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\");\nformats[\"putty\"] = __webpack_require__(/*! ./formats/putty */ \"(rsc)/./node_modules/sshpk/lib/formats/putty.js\");\nfunction PrivateKey(opts) {\n    assert.object(opts, \"options\");\n    Key.call(this, opts);\n    this._pubCache = undefined;\n}\nutil.inherits(PrivateKey, Key);\nPrivateKey.formats = formats;\nPrivateKey.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"pkcs1\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    return formats[format].write(this, options);\n};\nPrivateKey.prototype.hash = function(algo, type) {\n    return this.toPublic().hash(algo, type);\n};\nPrivateKey.prototype.fingerprint = function(algo, type) {\n    return this.toPublic().fingerprint(algo, type);\n};\nPrivateKey.prototype.toPublic = function() {\n    if (this._pubCache) return this._pubCache;\n    var algInfo = algs.info[this.type];\n    var pubParts = [];\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        var p = algInfo.parts[i];\n        pubParts.push(this.part[p]);\n    }\n    this._pubCache = new Key({\n        type: this.type,\n        source: this,\n        parts: pubParts\n    });\n    if (this.comment) this._pubCache.comment = this.comment;\n    return this._pubCache;\n};\nPrivateKey.prototype.derive = function(newType) {\n    assert.string(newType, \"type\");\n    var priv, pub, pair;\n    if (this.type === \"ed25519\" && newType === \"curve25519\") {\n        priv = this.part.k.data;\n        if (priv[0] === 0x00) priv = priv.slice(1);\n        pair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));\n        pub = Buffer.from(pair.publicKey);\n        return new PrivateKey({\n            type: \"curve25519\",\n            parts: [\n                {\n                    name: \"A\",\n                    data: utils.mpNormalize(pub)\n                },\n                {\n                    name: \"k\",\n                    data: utils.mpNormalize(priv)\n                }\n            ]\n        });\n    } else if (this.type === \"curve25519\" && newType === \"ed25519\") {\n        priv = this.part.k.data;\n        if (priv[0] === 0x00) priv = priv.slice(1);\n        pair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));\n        pub = Buffer.from(pair.publicKey);\n        return new PrivateKey({\n            type: \"ed25519\",\n            parts: [\n                {\n                    name: \"A\",\n                    data: utils.mpNormalize(pub)\n                },\n                {\n                    name: \"k\",\n                    data: utils.mpNormalize(priv)\n                }\n            ]\n        });\n    }\n    throw new Error(\"Key derivation not supported from \" + this.type + \" to \" + newType);\n};\nPrivateKey.prototype.createVerify = function(hashAlgo) {\n    return this.toPublic().createVerify(hashAlgo);\n};\nPrivateKey.prototype.createSign = function(hashAlgo) {\n    if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n    assert.string(hashAlgo, \"hash algorithm\");\n    /* ED25519 is not supported by OpenSSL, use a javascript impl. */ if (this.type === \"ed25519\" && edCompat !== undefined) return new edCompat.Signer(this, hashAlgo);\n    if (this.type === \"curve25519\") throw new Error(\"Curve25519 keys are not suitable for \" + \"signing or verification\");\n    var v, nm, err;\n    try {\n        nm = hashAlgo.toUpperCase();\n        v = crypto.createSign(nm);\n    } catch (e) {\n        err = e;\n    }\n    if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n        nm = \"RSA-\";\n        nm += hashAlgo.toUpperCase();\n        v = crypto.createSign(nm);\n    }\n    assert.ok(v, \"failed to create verifier\");\n    var oldSign = v.sign.bind(v);\n    var key = this.toBuffer(\"pkcs1\");\n    var type = this.type;\n    var curve = this.curve;\n    v.sign = function() {\n        var sig = oldSign(key);\n        if (typeof sig === \"string\") sig = Buffer.from(sig, \"binary\");\n        sig = Signature.parse(sig, type, \"asn1\");\n        sig.hashAlgorithm = hashAlgo;\n        sig.curve = curve;\n        return sig;\n    };\n    return v;\n};\nPrivateKey.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        assert.ok(k instanceof PrivateKey, \"key is not a private key\");\n        if (!k.comment) k.comment = options.filename;\n        return k;\n    } catch (e) {\n        if (e.name === \"KeyEncryptedError\") throw e;\n        throw new KeyParseError(options.filename, format, e);\n    }\n};\nPrivateKey.isPrivateKey = function(obj, ver) {\n    return utils.isCompatible(obj, PrivateKey, ver);\n};\nPrivateKey.generate = function(type, options) {\n    if (options === undefined) options = {};\n    assert.object(options, \"options\");\n    switch(type){\n        case \"ecdsa\":\n            if (options.curve === undefined) options.curve = \"nistp256\";\n            assert.string(options.curve, \"options.curve\");\n            return generateECDSA(options.curve);\n        case \"ed25519\":\n            return generateED25519();\n        default:\n            throw new Error(\"Key generation not supported with key \" + 'type \"' + type + '\"');\n    }\n};\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n * [1,5] -- changed ed25519 part names and format\n * [1,6] -- type arguments for hash() and fingerprint()\n */ PrivateKey.prototype._sshpkApiVersion = [\n    1,\n    6\n];\nPrivateKey._oldVersionDetect = function(obj) {\n    assert.func(obj.toPublic);\n    assert.func(obj.createSign);\n    if (obj.derive) return [\n        1,\n        3\n    ];\n    if (obj.defaultHashAlgorithm) return [\n        1,\n        2\n    ];\n    if (obj.formats[\"auto\"]) return [\n        1,\n        1\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/private-key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/signature.js":
/*!*********************************************!*\
  !*** ./node_modules/sshpk/lib/signature.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Signature;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar SSHBuffer = __webpack_require__(/*! ./ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar SignatureParseError = errs.SignatureParseError;\nfunction Signature(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.parts, \"options.parts\");\n    assert.string(opts.type, \"options.type\");\n    var partLookup = {};\n    for(var i = 0; i < opts.parts.length; ++i){\n        var part = opts.parts[i];\n        partLookup[part.name] = part;\n    }\n    this.type = opts.type;\n    this.hashAlgorithm = opts.hashAlgo;\n    this.curve = opts.curve;\n    this.parts = opts.parts;\n    this.part = partLookup;\n}\nSignature.prototype.toBuffer = function(format) {\n    if (format === undefined) format = \"asn1\";\n    assert.string(format, \"format\");\n    var buf;\n    var stype = \"ssh-\" + this.type;\n    switch(this.type){\n        case \"rsa\":\n            switch(this.hashAlgorithm){\n                case \"sha256\":\n                    stype = \"rsa-sha2-256\";\n                    break;\n                case \"sha512\":\n                    stype = \"rsa-sha2-512\";\n                    break;\n                case \"sha1\":\n                case undefined:\n                    break;\n                default:\n                    throw new Error(\"SSH signature \" + \"format does not support hash \" + \"algorithm \" + this.hashAlgorithm);\n            }\n            if (format === \"ssh\") {\n                buf = new SSHBuffer({});\n                buf.writeString(stype);\n                buf.writePart(this.part.sig);\n                return buf.toBuffer();\n            } else {\n                return this.part.sig.data;\n            }\n            break;\n        case \"ed25519\":\n            if (format === \"ssh\") {\n                buf = new SSHBuffer({});\n                buf.writeString(stype);\n                buf.writePart(this.part.sig);\n                return buf.toBuffer();\n            } else {\n                return this.part.sig.data;\n            }\n            break;\n        case \"dsa\":\n        case \"ecdsa\":\n            var r, s;\n            if (format === \"asn1\") {\n                var der = new asn1.BerWriter();\n                der.startSequence();\n                r = utils.mpNormalize(this.part.r.data);\n                s = utils.mpNormalize(this.part.s.data);\n                der.writeBuffer(r, asn1.Ber.Integer);\n                der.writeBuffer(s, asn1.Ber.Integer);\n                der.endSequence();\n                return der.buffer;\n            } else if (format === \"ssh\" && this.type === \"dsa\") {\n                buf = new SSHBuffer({});\n                buf.writeString(\"ssh-dss\");\n                r = this.part.r.data;\n                if (r.length > 20 && r[0] === 0x00) r = r.slice(1);\n                s = this.part.s.data;\n                if (s.length > 20 && s[0] === 0x00) s = s.slice(1);\n                if (this.hashAlgorithm && this.hashAlgorithm !== \"sha1\" || r.length + s.length !== 40) {\n                    throw new Error(\"OpenSSH only supports \" + \"DSA signatures with SHA1 hash\");\n                }\n                buf.writeBuffer(Buffer.concat([\n                    r,\n                    s\n                ]));\n                return buf.toBuffer();\n            } else if (format === \"ssh\" && this.type === \"ecdsa\") {\n                var inner = new SSHBuffer({});\n                r = this.part.r.data;\n                inner.writeBuffer(r);\n                inner.writePart(this.part.s);\n                buf = new SSHBuffer({});\n                /* XXX: find a more proper way to do this? */ var curve;\n                if (r[0] === 0x00) r = r.slice(1);\n                var sz = r.length * 8;\n                if (sz === 256) curve = \"nistp256\";\n                else if (sz === 384) curve = \"nistp384\";\n                else if (sz === 528) curve = \"nistp521\";\n                buf.writeString(\"ecdsa-sha2-\" + curve);\n                buf.writeBuffer(inner.toBuffer());\n                return buf.toBuffer();\n            }\n            throw new Error(\"Invalid signature format\");\n        default:\n            throw new Error(\"Invalid signature data\");\n    }\n};\nSignature.prototype.toString = function(format) {\n    assert.optionalString(format, \"format\");\n    return this.toBuffer(format).toString(\"base64\");\n};\nSignature.parse = function(data, type, format) {\n    if (typeof data === \"string\") data = Buffer.from(data, \"base64\");\n    assert.buffer(data, \"data\");\n    assert.string(format, \"format\");\n    assert.string(type, \"type\");\n    var opts = {};\n    opts.type = type.toLowerCase();\n    opts.parts = [];\n    try {\n        assert.ok(data.length > 0, \"signature must not be empty\");\n        switch(opts.type){\n            case \"rsa\":\n                return parseOneNum(data, type, format, opts);\n            case \"ed25519\":\n                return parseOneNum(data, type, format, opts);\n            case \"dsa\":\n            case \"ecdsa\":\n                if (format === \"asn1\") return parseDSAasn1(data, type, format, opts);\n                else if (opts.type === \"dsa\") return parseDSA(data, type, format, opts);\n                else return parseECDSA(data, type, format, opts);\n            default:\n                throw new InvalidAlgorithmError(type);\n        }\n    } catch (e) {\n        if (e instanceof InvalidAlgorithmError) throw e;\n        throw new SignatureParseError(type, format, e);\n    }\n};\nfunction parseOneNum(data, type, format, opts) {\n    if (format === \"ssh\") {\n        try {\n            var buf = new SSHBuffer({\n                buffer: data\n            });\n            var head = buf.readString();\n        } catch (e) {\n        /* fall through */ }\n        if (buf !== undefined) {\n            var msg = \"SSH signature does not match expected \" + \"type (expected \" + type + \", got \" + head + \")\";\n            switch(head){\n                case \"ssh-rsa\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha1\";\n                    break;\n                case \"rsa-sha2-256\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha256\";\n                    break;\n                case \"rsa-sha2-512\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha512\";\n                    break;\n                case \"ssh-ed25519\":\n                    assert.strictEqual(type, \"ed25519\", msg);\n                    opts.hashAlgo = \"sha512\";\n                    break;\n                default:\n                    throw new Error(\"Unknown SSH signature \" + \"type: \" + head);\n            }\n            var sig = buf.readPart();\n            assert.ok(buf.atEnd(), \"extra trailing bytes\");\n            sig.name = \"sig\";\n            opts.parts.push(sig);\n            return new Signature(opts);\n        }\n    }\n    opts.parts.push({\n        name: \"sig\",\n        data: data\n    });\n    return new Signature(opts);\n}\nfunction parseDSAasn1(data, type, format, opts) {\n    var der = new asn1.BerReader(data);\n    der.readSequence();\n    var r = der.readString(asn1.Ber.Integer, true);\n    var s = der.readString(asn1.Ber.Integer, true);\n    opts.parts.push({\n        name: \"r\",\n        data: utils.mpNormalize(r)\n    });\n    opts.parts.push({\n        name: \"s\",\n        data: utils.mpNormalize(s)\n    });\n    return new Signature(opts);\n}\nfunction parseDSA(data, type, format, opts) {\n    if (data.length != 40) {\n        var buf = new SSHBuffer({\n            buffer: data\n        });\n        var d = buf.readBuffer();\n        if (d.toString(\"ascii\") === \"ssh-dss\") d = buf.readBuffer();\n        assert.ok(buf.atEnd(), \"extra trailing bytes\");\n        assert.strictEqual(d.length, 40, \"invalid inner length\");\n        data = d;\n    }\n    opts.parts.push({\n        name: \"r\",\n        data: data.slice(0, 20)\n    });\n    opts.parts.push({\n        name: \"s\",\n        data: data.slice(20, 40)\n    });\n    return new Signature(opts);\n}\nfunction parseECDSA(data, type, format, opts) {\n    var buf = new SSHBuffer({\n        buffer: data\n    });\n    var r, s;\n    var inner = buf.readBuffer();\n    var stype = inner.toString(\"ascii\");\n    if (stype.slice(0, 6) === \"ecdsa-\") {\n        var parts = stype.split(\"-\");\n        assert.strictEqual(parts[0], \"ecdsa\");\n        assert.strictEqual(parts[1], \"sha2\");\n        opts.curve = parts[2];\n        switch(opts.curve){\n            case \"nistp256\":\n                opts.hashAlgo = \"sha256\";\n                break;\n            case \"nistp384\":\n                opts.hashAlgo = \"sha384\";\n                break;\n            case \"nistp521\":\n                opts.hashAlgo = \"sha512\";\n                break;\n            default:\n                throw new Error(\"Unsupported ECDSA curve: \" + opts.curve);\n        }\n        inner = buf.readBuffer();\n        assert.ok(buf.atEnd(), \"extra trailing bytes on outer\");\n        buf = new SSHBuffer({\n            buffer: inner\n        });\n        r = buf.readPart();\n    } else {\n        r = {\n            data: inner\n        };\n    }\n    s = buf.readPart();\n    assert.ok(buf.atEnd(), \"extra trailing bytes\");\n    r.name = \"r\";\n    s.name = \"s\";\n    opts.parts.push(r);\n    opts.parts.push(s);\n    return new Signature(opts);\n}\nSignature.isSignature = function(obj, ver) {\n    return utils.isCompatible(obj, Signature, ver);\n};\n/*\n * API versions for Signature:\n * [1,0] -- initial ver\n * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent\n *          hashAlgorithm property\n * [2,1] -- first tagged version\n */ Signature.prototype._sshpkApiVersion = [\n    2,\n    1\n];\nSignature._oldVersionDetect = function(obj) {\n    assert.func(obj.toBuffer);\n    if (obj.hasOwnProperty(\"hashAlgorithm\")) return [\n        2,\n        0\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/signature.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/ssh-buffer.js":
/*!**********************************************!*\
  !*** ./node_modules/sshpk/lib/ssh-buffer.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = SSHBuffer;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nfunction SSHBuffer(opts) {\n    assert.object(opts, \"options\");\n    if (opts.buffer !== undefined) assert.buffer(opts.buffer, \"options.buffer\");\n    this._size = opts.buffer ? opts.buffer.length : 1024;\n    this._buffer = opts.buffer || Buffer.alloc(this._size);\n    this._offset = 0;\n}\nSSHBuffer.prototype.toBuffer = function() {\n    return this._buffer.slice(0, this._offset);\n};\nSSHBuffer.prototype.atEnd = function() {\n    return this._offset >= this._buffer.length;\n};\nSSHBuffer.prototype.remainder = function() {\n    return this._buffer.slice(this._offset);\n};\nSSHBuffer.prototype.skip = function(n) {\n    this._offset += n;\n};\nSSHBuffer.prototype.expand = function() {\n    this._size *= 2;\n    var buf = Buffer.alloc(this._size);\n    this._buffer.copy(buf, 0);\n    this._buffer = buf;\n};\nSSHBuffer.prototype.readPart = function() {\n    return {\n        data: this.readBuffer()\n    };\n};\nSSHBuffer.prototype.readBuffer = function() {\n    var len = this._buffer.readUInt32BE(this._offset);\n    this._offset += 4;\n    assert.ok(this._offset + len <= this._buffer.length, \"length out of bounds at +0x\" + this._offset.toString(16) + \" (data truncated?)\");\n    var buf = this._buffer.slice(this._offset, this._offset + len);\n    this._offset += len;\n    return buf;\n};\nSSHBuffer.prototype.readString = function() {\n    return this.readBuffer().toString();\n};\nSSHBuffer.prototype.readCString = function() {\n    var offset = this._offset;\n    while(offset < this._buffer.length && this._buffer[offset] !== 0x00)offset++;\n    assert.ok(offset < this._buffer.length, \"c string does not terminate\");\n    var str = this._buffer.slice(this._offset, offset).toString();\n    this._offset = offset + 1;\n    return str;\n};\nSSHBuffer.prototype.readInt = function() {\n    var v = this._buffer.readUInt32BE(this._offset);\n    this._offset += 4;\n    return v;\n};\nSSHBuffer.prototype.readInt64 = function() {\n    assert.ok(this._offset + 8 < this._buffer.length, \"buffer not long enough to read Int64\");\n    var v = this._buffer.slice(this._offset, this._offset + 8);\n    this._offset += 8;\n    return v;\n};\nSSHBuffer.prototype.readChar = function() {\n    var v = this._buffer[this._offset++];\n    return v;\n};\nSSHBuffer.prototype.writeBuffer = function(buf) {\n    while(this._offset + 4 + buf.length > this._size)this.expand();\n    this._buffer.writeUInt32BE(buf.length, this._offset);\n    this._offset += 4;\n    buf.copy(this._buffer, this._offset);\n    this._offset += buf.length;\n};\nSSHBuffer.prototype.writeString = function(str) {\n    this.writeBuffer(Buffer.from(str, \"utf8\"));\n};\nSSHBuffer.prototype.writeCString = function(str) {\n    while(this._offset + 1 + str.length > this._size)this.expand();\n    this._buffer.write(str, this._offset);\n    this._offset += str.length;\n    this._buffer[this._offset++] = 0;\n};\nSSHBuffer.prototype.writeInt = function(v) {\n    while(this._offset + 4 > this._size)this.expand();\n    this._buffer.writeUInt32BE(v, this._offset);\n    this._offset += 4;\n};\nSSHBuffer.prototype.writeInt64 = function(v) {\n    assert.buffer(v, \"value\");\n    if (v.length > 8) {\n        var lead = v.slice(0, v.length - 8);\n        for(var i = 0; i < lead.length; ++i){\n            assert.strictEqual(lead[i], 0, \"must fit in 64 bits of precision\");\n        }\n        v = v.slice(v.length - 8, v.length);\n    }\n    while(this._offset + 8 > this._size)this.expand();\n    v.copy(this._buffer, this._offset);\n    this._offset += 8;\n};\nSSHBuffer.prototype.writeChar = function(v) {\n    while(this._offset + 1 > this._size)this.expand();\n    this._buffer[this._offset++] = v;\n};\nSSHBuffer.prototype.writePart = function(p) {\n    this.writeBuffer(p.data);\n};\nSSHBuffer.prototype.write = function(buf) {\n    while(this._offset + buf.length > this._size)this.expand();\n    buf.copy(this._buffer, this._offset);\n    this._offset += buf.length;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/sshpk/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    bufferSplit: bufferSplit,\n    addRSAMissing: addRSAMissing,\n    calculateDSAPublic: calculateDSAPublic,\n    calculateED25519Public: calculateED25519Public,\n    calculateX25519Public: calculateX25519Public,\n    mpNormalize: mpNormalize,\n    mpDenormalize: mpDenormalize,\n    ecNormalize: ecNormalize,\n    countZeros: countZeros,\n    assertCompatible: assertCompatible,\n    isCompatible: isCompatible,\n    opensslKeyDeriv: opensslKeyDeriv,\n    opensshCipherInfo: opensshCipherInfo,\n    publicFromPrivateECDSA: publicFromPrivateECDSA,\n    zeroPadToLength: zeroPadToLength,\n    writeBitString: writeBitString,\n    readBitString: readBitString,\n    pbkdf2: pbkdf2\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar ec = __webpack_require__(/*! ecc-jsbn/lib/ec */ \"(rsc)/./node_modules/ecc-jsbn/lib/ec.js\");\nvar jsbn = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar MAX_CLASS_DEPTH = 3;\nfunction isCompatible(obj, klass, needVer) {\n    if (obj === null || typeof obj !== \"object\") return false;\n    if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;\n    if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return true;\n    var proto = Object.getPrototypeOf(obj);\n    var depth = 0;\n    while(proto.constructor.name !== klass.name){\n        proto = Object.getPrototypeOf(proto);\n        if (!proto || ++depth > MAX_CLASS_DEPTH) return false;\n    }\n    if (proto.constructor.name !== klass.name) return false;\n    var ver = proto._sshpkApiVersion;\n    if (ver === undefined) ver = klass._oldVersionDetect(obj);\n    if (ver[0] != needVer[0] || ver[1] < needVer[1]) return false;\n    return true;\n}\nfunction assertCompatible(obj, klass, needVer, name) {\n    if (name === undefined) name = \"object\";\n    assert.ok(obj, name + \" must not be null\");\n    assert.object(obj, name + \" must be an object\");\n    if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;\n    if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return;\n    var proto = Object.getPrototypeOf(obj);\n    var depth = 0;\n    while(proto.constructor.name !== klass.name){\n        proto = Object.getPrototypeOf(proto);\n        assert.ok(proto && ++depth <= MAX_CLASS_DEPTH, name + \" must be a \" + klass.name + \" instance\");\n    }\n    assert.strictEqual(proto.constructor.name, klass.name, name + \" must be a \" + klass.name + \" instance\");\n    var ver = proto._sshpkApiVersion;\n    if (ver === undefined) ver = klass._oldVersionDetect(obj);\n    assert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1], name + \" must be compatible with \" + klass.name + \" klass \" + \"version \" + needVer[0] + \".\" + needVer[1]);\n}\nvar CIPHER_LEN = {\n    \"des-ede3-cbc\": {\n        key: 24,\n        iv: 8\n    },\n    \"aes-128-cbc\": {\n        key: 16,\n        iv: 16\n    },\n    \"aes-256-cbc\": {\n        key: 32,\n        iv: 16\n    }\n};\nvar PKCS5_SALT_LEN = 8;\nfunction opensslKeyDeriv(cipher, salt, passphrase, count) {\n    assert.buffer(salt, \"salt\");\n    assert.buffer(passphrase, \"passphrase\");\n    assert.number(count, \"iteration count\");\n    var clen = CIPHER_LEN[cipher];\n    assert.object(clen, \"supported cipher\");\n    salt = salt.slice(0, PKCS5_SALT_LEN);\n    var D, D_prev, bufs;\n    var material = Buffer.alloc(0);\n    while(material.length < clen.key + clen.iv){\n        bufs = [];\n        if (D_prev) bufs.push(D_prev);\n        bufs.push(passphrase);\n        bufs.push(salt);\n        D = Buffer.concat(bufs);\n        for(var j = 0; j < count; ++j)D = crypto.createHash(\"md5\").update(D).digest();\n        material = Buffer.concat([\n            material,\n            D\n        ]);\n        D_prev = D;\n    }\n    return {\n        key: material.slice(0, clen.key),\n        iv: material.slice(clen.key, clen.key + clen.iv)\n    };\n}\n/* See: RFC2898 */ function pbkdf2(hashAlg, salt, iterations, size, passphrase) {\n    var hkey = Buffer.alloc(salt.length + 4);\n    salt.copy(hkey);\n    var gen = 0, ts = [];\n    var i = 1;\n    while(gen < size){\n        var t = T(i++);\n        gen += t.length;\n        ts.push(t);\n    }\n    return Buffer.concat(ts).slice(0, size);\n    function T(I) {\n        hkey.writeUInt32BE(I, hkey.length - 4);\n        var hmac = crypto.createHmac(hashAlg, passphrase);\n        hmac.update(hkey);\n        var Ti = hmac.digest();\n        var Uc = Ti;\n        var c = 1;\n        while(c++ < iterations){\n            hmac = crypto.createHmac(hashAlg, passphrase);\n            hmac.update(Uc);\n            Uc = hmac.digest();\n            for(var x = 0; x < Ti.length; ++x)Ti[x] ^= Uc[x];\n        }\n        return Ti;\n    }\n}\n/* Count leading zero bits on a buffer */ function countZeros(buf) {\n    var o = 0, obit = 8;\n    while(o < buf.length){\n        var mask = 1 << obit;\n        if ((buf[o] & mask) === mask) break;\n        obit--;\n        if (obit < 0) {\n            o++;\n            obit = 8;\n        }\n    }\n    return o * 8 + (8 - obit) - 1;\n}\nfunction bufferSplit(buf, chr) {\n    assert.buffer(buf);\n    assert.string(chr);\n    var parts = [];\n    var lastPart = 0;\n    var matches = 0;\n    for(var i = 0; i < buf.length; ++i){\n        if (buf[i] === chr.charCodeAt(matches)) ++matches;\n        else if (buf[i] === chr.charCodeAt(0)) matches = 1;\n        else matches = 0;\n        if (matches >= chr.length) {\n            var newPart = i + 1;\n            parts.push(buf.slice(lastPart, newPart - matches));\n            lastPart = newPart;\n            matches = 0;\n        }\n    }\n    if (lastPart <= buf.length) parts.push(buf.slice(lastPart, buf.length));\n    return parts;\n}\nfunction ecNormalize(buf, addZero) {\n    assert.buffer(buf);\n    if (buf[0] === 0x00 && buf[1] === 0x04) {\n        if (addZero) return buf;\n        return buf.slice(1);\n    } else if (buf[0] === 0x04) {\n        if (!addZero) return buf;\n    } else {\n        while(buf[0] === 0x00)buf = buf.slice(1);\n        if (buf[0] === 0x02 || buf[0] === 0x03) throw new Error(\"Compressed elliptic curve points \" + \"are not supported\");\n        if (buf[0] !== 0x04) throw new Error(\"Not a valid elliptic curve point\");\n        if (!addZero) return buf;\n    }\n    var b = Buffer.alloc(buf.length + 1);\n    b[0] = 0x0;\n    buf.copy(b, 1);\n    return b;\n}\nfunction readBitString(der, tag) {\n    if (tag === undefined) tag = asn1.Ber.BitString;\n    var buf = der.readString(tag, true);\n    assert.strictEqual(buf[0], 0x00, \"bit strings with unused bits are \" + \"not supported (0x\" + buf[0].toString(16) + \")\");\n    return buf.slice(1);\n}\nfunction writeBitString(der, buf, tag) {\n    if (tag === undefined) tag = asn1.Ber.BitString;\n    var b = Buffer.alloc(buf.length + 1);\n    b[0] = 0x00;\n    buf.copy(b, 1);\n    der.writeBuffer(b, tag);\n}\nfunction mpNormalize(buf) {\n    assert.buffer(buf);\n    while(buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)buf = buf.slice(1);\n    if ((buf[0] & 0x80) === 0x80) {\n        var b = Buffer.alloc(buf.length + 1);\n        b[0] = 0x00;\n        buf.copy(b, 1);\n        buf = b;\n    }\n    return buf;\n}\nfunction mpDenormalize(buf) {\n    assert.buffer(buf);\n    while(buf.length > 1 && buf[0] === 0x00)buf = buf.slice(1);\n    return buf;\n}\nfunction zeroPadToLength(buf, len) {\n    assert.buffer(buf);\n    assert.number(len);\n    while(buf.length > len){\n        assert.equal(buf[0], 0x00);\n        buf = buf.slice(1);\n    }\n    while(buf.length < len){\n        var b = Buffer.alloc(buf.length + 1);\n        b[0] = 0x00;\n        buf.copy(b, 1);\n        buf = b;\n    }\n    return buf;\n}\nfunction bigintToMpBuf(bigint) {\n    var buf = Buffer.from(bigint.toByteArray());\n    buf = mpNormalize(buf);\n    return buf;\n}\nfunction calculateDSAPublic(g, p, x) {\n    assert.buffer(g);\n    assert.buffer(p);\n    assert.buffer(x);\n    g = new jsbn(g);\n    p = new jsbn(p);\n    x = new jsbn(x);\n    var y = g.modPow(x, p);\n    var ybuf = bigintToMpBuf(y);\n    return ybuf;\n}\nfunction calculateED25519Public(k) {\n    assert.buffer(k);\n    var kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));\n    return Buffer.from(kp.publicKey);\n}\nfunction calculateX25519Public(k) {\n    assert.buffer(k);\n    var kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));\n    return Buffer.from(kp.publicKey);\n}\nfunction addRSAMissing(key) {\n    assert.object(key);\n    assertCompatible(key, PrivateKey, [\n        1,\n        1\n    ]);\n    var d = new jsbn(key.part.d.data);\n    var buf;\n    if (!key.part.dmodp) {\n        var p = new jsbn(key.part.p.data);\n        var dmodp = d.mod(p.subtract(1));\n        buf = bigintToMpBuf(dmodp);\n        key.part.dmodp = {\n            name: \"dmodp\",\n            data: buf\n        };\n        key.parts.push(key.part.dmodp);\n    }\n    if (!key.part.dmodq) {\n        var q = new jsbn(key.part.q.data);\n        var dmodq = d.mod(q.subtract(1));\n        buf = bigintToMpBuf(dmodq);\n        key.part.dmodq = {\n            name: \"dmodq\",\n            data: buf\n        };\n        key.parts.push(key.part.dmodq);\n    }\n}\nfunction publicFromPrivateECDSA(curveName, priv) {\n    assert.string(curveName, \"curveName\");\n    assert.buffer(priv);\n    var params = algs.curves[curveName];\n    var p = new jsbn(params.p);\n    var a = new jsbn(params.a);\n    var b = new jsbn(params.b);\n    var curve = new ec.ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(params.G.toString(\"hex\"));\n    var d = new jsbn(mpNormalize(priv));\n    var pub = G.multiply(d);\n    pub = Buffer.from(curve.encodePointHex(pub), \"hex\");\n    var parts = [];\n    parts.push({\n        name: \"curve\",\n        data: Buffer.from(curveName)\n    });\n    parts.push({\n        name: \"Q\",\n        data: pub\n    });\n    var key = new Key({\n        type: \"ecdsa\",\n        curve: curve,\n        parts: parts\n    });\n    return key;\n}\nfunction opensshCipherInfo(cipher) {\n    var inf = {};\n    switch(cipher){\n        case \"3des-cbc\":\n            inf.keySize = 24;\n            inf.blockSize = 8;\n            inf.opensslName = \"des-ede3-cbc\";\n            break;\n        case \"blowfish-cbc\":\n            inf.keySize = 16;\n            inf.blockSize = 8;\n            inf.opensslName = \"bf-cbc\";\n            break;\n        case \"aes128-cbc\":\n        case \"aes128-ctr\":\n        case \"aes128-gcm@openssh.com\":\n            inf.keySize = 16;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-128-\" + cipher.slice(7, 10);\n            break;\n        case \"aes192-cbc\":\n        case \"aes192-ctr\":\n        case \"aes192-gcm@openssh.com\":\n            inf.keySize = 24;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-192-\" + cipher.slice(7, 10);\n            break;\n        case \"aes256-cbc\":\n        case \"aes256-ctr\":\n        case \"aes256-gcm@openssh.com\":\n            inf.keySize = 32;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-256-\" + cipher.slice(7, 10);\n            break;\n        default:\n            throw new Error('Unsupported openssl cipher \"' + cipher + '\"');\n    }\n    return inf;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/utils.js\n");

/***/ })

};
;