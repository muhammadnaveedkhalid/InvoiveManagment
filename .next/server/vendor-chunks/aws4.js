/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/aws4";
exports.ids = ["vendor-chunks/aws4"];
exports.modules = {

/***/ "(ssr)/./node_modules/aws4/aws4.js":
/*!***********************************!*\
  !*** ./node_modules/aws4/aws4.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var aws4 = exports, url = __webpack_require__(/*! url */ \"url\"), querystring = __webpack_require__(/*! querystring */ \"querystring\"), crypto = __webpack_require__(/*! crypto */ \"crypto\"), lru = __webpack_require__(/*! ./lru */ \"(ssr)/./node_modules/aws4/lru.js\"), credentialsCache = lru(1000);\n// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\nfunction hmac(key, string, encoding) {\n    return crypto.createHmac(\"sha256\", key).update(string, \"utf8\").digest(encoding);\n}\nfunction hash(string, encoding) {\n    return crypto.createHash(\"sha256\").update(string, \"utf8\").digest(encoding);\n}\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n    return urlEncodedString.replace(/[!'()*]/g, function(c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\nfunction encodeRfc3986Full(str) {\n    return encodeRfc3986(encodeURIComponent(str));\n}\n// A bit of a combination of:\n// https://github.com/aws/aws-sdk-java-v2/blob/dc695de6ab49ad03934e1b02e7263abbd2354be0/core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java#L59\n// https://github.com/aws/aws-sdk-js/blob/18cb7e5b463b46239f9fdd4a65e2ff8c81831e8f/lib/signers/v4.js#L191-L199\n// https://github.com/mhart/aws4fetch/blob/b3aed16b6f17384cf36ea33bcba3c1e9f3bdfefd/src/main.js#L25-L34\nvar HEADERS_TO_IGNORE = {\n    \"authorization\": true,\n    \"connection\": true,\n    \"x-amzn-trace-id\": true,\n    \"user-agent\": true,\n    \"expect\": true,\n    \"presigned-expires\": true,\n    \"range\": true\n};\n// request: { path | body, [host], [method], [headers], [service], [region] }\n// credentials: { accessKeyId, secretAccessKey, [sessionToken] }\nfunction RequestSigner(request, credentials) {\n    if (typeof request === \"string\") request = url.parse(request);\n    var headers = request.headers = Object.assign({}, request.headers || {}), hostParts = (!this.service || !this.region) && this.matchHost(request.hostname || request.host || headers.Host || headers.host);\n    this.request = request;\n    this.credentials = credentials || this.defaultCredentials();\n    this.service = request.service || hostParts[0] || \"\";\n    this.region = request.region || hostParts[1] || \"us-east-1\";\n    // SES uses a different domain from the service name\n    if (this.service === \"email\") this.service = \"ses\";\n    if (!request.method && request.body) request.method = \"POST\";\n    if (!headers.Host && !headers.host) {\n        headers.Host = request.hostname || request.host || this.createHost();\n        // If a port is specified explicitly, use it as is\n        if (request.port) headers.Host += \":\" + request.port;\n    }\n    if (!request.hostname && !request.host) request.hostname = headers.Host || headers.host;\n    this.isCodeCommitGit = this.service === \"codecommit\" && request.method === \"GIT\";\n    this.extraHeadersToIgnore = request.extraHeadersToIgnore || Object.create(null);\n    this.extraHeadersToInclude = request.extraHeadersToInclude || Object.create(null);\n}\nRequestSigner.prototype.matchHost = function(host) {\n    var match = (host || \"\").match(/([^\\.]{1,63})\\.(?:([^\\.]{0,63})\\.)?amazonaws\\.com(\\.cn)?$/);\n    var hostParts = (match || []).slice(1, 3);\n    // ES's hostParts are sometimes the other way round, if the value that is expected\n    // to be region equals ‘es’ switch them back\n    // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com\n    if (hostParts[1] === \"es\" || hostParts[1] === \"aoss\") hostParts = hostParts.reverse();\n    if (hostParts[1] == \"s3\") {\n        hostParts[0] = \"s3\";\n        hostParts[1] = \"us-east-1\";\n    } else {\n        for(var i = 0; i < 2; i++){\n            if (/^s3-/.test(hostParts[i])) {\n                hostParts[1] = hostParts[i].slice(3);\n                hostParts[0] = \"s3\";\n                break;\n            }\n        }\n    }\n    return hostParts;\n};\n// http://docs.aws.amazon.com/general/latest/gr/rande.html\nRequestSigner.prototype.isSingleRegion = function() {\n    // Special case for S3 and SimpleDB in us-east-1\n    if ([\n        \"s3\",\n        \"sdb\"\n    ].indexOf(this.service) >= 0 && this.region === \"us-east-1\") return true;\n    return [\n        \"cloudfront\",\n        \"ls\",\n        \"route53\",\n        \"iam\",\n        \"importexport\",\n        \"sts\"\n    ].indexOf(this.service) >= 0;\n};\nRequestSigner.prototype.createHost = function() {\n    var region = this.isSingleRegion() ? \"\" : \".\" + this.region, subdomain = this.service === \"ses\" ? \"email\" : this.service;\n    return subdomain + region + \".amazonaws.com\";\n};\nRequestSigner.prototype.prepareRequest = function() {\n    this.parsePath();\n    var request = this.request, headers = request.headers, query;\n    if (request.signQuery) {\n        this.parsedPath.query = query = this.parsedPath.query || {};\n        if (this.credentials.sessionToken) query[\"X-Amz-Security-Token\"] = this.credentials.sessionToken;\n        if (this.service === \"s3\" && !query[\"X-Amz-Expires\"]) query[\"X-Amz-Expires\"] = 86400;\n        if (query[\"X-Amz-Date\"]) this.datetime = query[\"X-Amz-Date\"];\n        else query[\"X-Amz-Date\"] = this.getDateTime();\n        query[\"X-Amz-Algorithm\"] = \"AWS4-HMAC-SHA256\";\n        query[\"X-Amz-Credential\"] = this.credentials.accessKeyId + \"/\" + this.credentialString();\n        query[\"X-Amz-SignedHeaders\"] = this.signedHeaders();\n    } else {\n        if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {\n            if (request.body && !headers[\"Content-Type\"] && !headers[\"content-type\"]) headers[\"Content-Type\"] = \"application/x-www-form-urlencoded; charset=utf-8\";\n            if (request.body && !headers[\"Content-Length\"] && !headers[\"content-length\"]) headers[\"Content-Length\"] = Buffer.byteLength(request.body);\n            if (this.credentials.sessionToken && !headers[\"X-Amz-Security-Token\"] && !headers[\"x-amz-security-token\"]) headers[\"X-Amz-Security-Token\"] = this.credentials.sessionToken;\n            if (this.service === \"s3\" && !headers[\"X-Amz-Content-Sha256\"] && !headers[\"x-amz-content-sha256\"]) headers[\"X-Amz-Content-Sha256\"] = hash(this.request.body || \"\", \"hex\");\n            if (headers[\"X-Amz-Date\"] || headers[\"x-amz-date\"]) this.datetime = headers[\"X-Amz-Date\"] || headers[\"x-amz-date\"];\n            else headers[\"X-Amz-Date\"] = this.getDateTime();\n        }\n        delete headers.Authorization;\n        delete headers.authorization;\n    }\n};\nRequestSigner.prototype.sign = function() {\n    if (!this.parsedPath) this.prepareRequest();\n    if (this.request.signQuery) {\n        this.parsedPath.query[\"X-Amz-Signature\"] = this.signature();\n    } else {\n        this.request.headers.Authorization = this.authHeader();\n    }\n    this.request.path = this.formatPath();\n    return this.request;\n};\nRequestSigner.prototype.getDateTime = function() {\n    if (!this.datetime) {\n        var headers = this.request.headers, date = new Date(headers.Date || headers.date || new Date);\n        this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, \"\");\n        // Remove the trailing 'Z' on the timestamp string for CodeCommit git access\n        if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1);\n    }\n    return this.datetime;\n};\nRequestSigner.prototype.getDate = function() {\n    return this.getDateTime().substr(0, 8);\n};\nRequestSigner.prototype.authHeader = function() {\n    return [\n        \"AWS4-HMAC-SHA256 Credential=\" + this.credentials.accessKeyId + \"/\" + this.credentialString(),\n        \"SignedHeaders=\" + this.signedHeaders(),\n        \"Signature=\" + this.signature()\n    ].join(\", \");\n};\nRequestSigner.prototype.signature = function() {\n    var date = this.getDate(), cacheKey = [\n        this.credentials.secretAccessKey,\n        date,\n        this.region,\n        this.service\n    ].join(), kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey);\n    if (!kCredentials) {\n        kDate = hmac(\"AWS4\" + this.credentials.secretAccessKey, date);\n        kRegion = hmac(kDate, this.region);\n        kService = hmac(kRegion, this.service);\n        kCredentials = hmac(kService, \"aws4_request\");\n        credentialsCache.set(cacheKey, kCredentials);\n    }\n    return hmac(kCredentials, this.stringToSign(), \"hex\");\n};\nRequestSigner.prototype.stringToSign = function() {\n    return [\n        \"AWS4-HMAC-SHA256\",\n        this.getDateTime(),\n        this.credentialString(),\n        hash(this.canonicalString(), \"hex\")\n    ].join(\"\\n\");\n};\nRequestSigner.prototype.canonicalString = function() {\n    if (!this.parsedPath) this.prepareRequest();\n    var pathStr = this.parsedPath.path, query = this.parsedPath.query, headers = this.request.headers, queryStr = \"\", normalizePath = this.service !== \"s3\", decodePath = this.service === \"s3\" || this.request.doNotEncodePath, decodeSlashesInPath = this.service === \"s3\", firstValOnly = this.service === \"s3\", bodyHash;\n    if (this.service === \"s3\" && this.request.signQuery) {\n        bodyHash = \"UNSIGNED-PAYLOAD\";\n    } else if (this.isCodeCommitGit) {\n        bodyHash = \"\";\n    } else {\n        bodyHash = headers[\"X-Amz-Content-Sha256\"] || headers[\"x-amz-content-sha256\"] || hash(this.request.body || \"\", \"hex\");\n    }\n    if (query) {\n        var reducedQuery = Object.keys(query).reduce(function(obj, key) {\n            if (!key) return obj;\n            obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] : firstValOnly ? query[key][0] : query[key];\n            return obj;\n        }, {});\n        var encodedQueryPieces = [];\n        Object.keys(reducedQuery).sort().forEach(function(key) {\n            if (!Array.isArray(reducedQuery[key])) {\n                encodedQueryPieces.push(key + \"=\" + encodeRfc3986Full(reducedQuery[key]));\n            } else {\n                reducedQuery[key].map(encodeRfc3986Full).sort().forEach(function(val) {\n                    encodedQueryPieces.push(key + \"=\" + val);\n                });\n            }\n        });\n        queryStr = encodedQueryPieces.join(\"&\");\n    }\n    if (pathStr !== \"/\") {\n        if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, \"/\");\n        pathStr = pathStr.split(\"/\").reduce(function(path, piece) {\n            if (normalizePath && piece === \"..\") {\n                path.pop();\n            } else if (!normalizePath || piece !== \".\") {\n                if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, \" \"));\n                path.push(encodeRfc3986Full(piece));\n            }\n            return path;\n        }, []).join(\"/\");\n        if (pathStr[0] !== \"/\") pathStr = \"/\" + pathStr;\n        if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, \"/\");\n    }\n    return [\n        this.request.method || \"GET\",\n        pathStr,\n        queryStr,\n        this.canonicalHeaders() + \"\\n\",\n        this.signedHeaders(),\n        bodyHash\n    ].join(\"\\n\");\n};\nRequestSigner.prototype.filterHeaders = function() {\n    var headers = this.request.headers, extraHeadersToInclude = this.extraHeadersToInclude, extraHeadersToIgnore = this.extraHeadersToIgnore;\n    this.filteredHeaders = Object.keys(headers).map(function(key) {\n        return [\n            key.toLowerCase(),\n            headers[key]\n        ];\n    }).filter(function(entry) {\n        return extraHeadersToInclude[entry[0]] || HEADERS_TO_IGNORE[entry[0]] == null && !extraHeadersToIgnore[entry[0]];\n    }).sort(function(a, b) {\n        return a[0] < b[0] ? -1 : 1;\n    });\n};\nRequestSigner.prototype.canonicalHeaders = function() {\n    if (!this.filteredHeaders) this.filterHeaders();\n    return this.filteredHeaders.map(function(entry) {\n        return entry[0] + \":\" + entry[1].toString().trim().replace(/\\s+/g, \" \");\n    }).join(\"\\n\");\n};\nRequestSigner.prototype.signedHeaders = function() {\n    if (!this.filteredHeaders) this.filterHeaders();\n    return this.filteredHeaders.map(function(entry) {\n        return entry[0];\n    }).join(\";\");\n};\nRequestSigner.prototype.credentialString = function() {\n    return [\n        this.getDate(),\n        this.region,\n        this.service,\n        \"aws4_request\"\n    ].join(\"/\");\n};\nRequestSigner.prototype.defaultCredentials = function() {\n    var env = process.env;\n    return {\n        accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,\n        secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,\n        sessionToken: env.AWS_SESSION_TOKEN\n    };\n};\nRequestSigner.prototype.parsePath = function() {\n    var path = this.request.path || \"/\";\n    // S3 doesn't always encode characters > 127 correctly and\n    // all services don't encode characters > 255 correctly\n    // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\n    if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {\n        path = encodeURI(decodeURI(path));\n    }\n    var queryIx = path.indexOf(\"?\"), query = null;\n    if (queryIx >= 0) {\n        query = querystring.parse(path.slice(queryIx + 1));\n        path = path.slice(0, queryIx);\n    }\n    this.parsedPath = {\n        path: path,\n        query: query\n    };\n};\nRequestSigner.prototype.formatPath = function() {\n    var path = this.parsedPath.path, query = this.parsedPath.query;\n    if (!query) return path;\n    // Services don't support empty query string keys\n    if (query[\"\"] != null) delete query[\"\"];\n    return path + \"?\" + encodeRfc3986(querystring.stringify(query));\n};\naws4.RequestSigner = RequestSigner;\naws4.sign = function(request, credentials) {\n    return new RequestSigner(request, credentials).sign();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws4/aws4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws4/lru.js":
/*!**********************************!*\
  !*** ./node_modules/aws4/lru.js ***!
  \**********************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = function(size) {\n    return new LruCache(size);\n};\nfunction LruCache(size) {\n    this.capacity = size | 0;\n    this.map = Object.create(null);\n    this.list = new DoublyLinkedList();\n}\nLruCache.prototype.get = function(key) {\n    var node = this.map[key];\n    if (node == null) return undefined;\n    this.used(node);\n    return node.val;\n};\nLruCache.prototype.set = function(key, val) {\n    var node = this.map[key];\n    if (node != null) {\n        node.val = val;\n    } else {\n        if (!this.capacity) this.prune();\n        if (!this.capacity) return false;\n        node = new DoublyLinkedNode(key, val);\n        this.map[key] = node;\n        this.capacity--;\n    }\n    this.used(node);\n    return true;\n};\nLruCache.prototype.used = function(node) {\n    this.list.moveToFront(node);\n};\nLruCache.prototype.prune = function() {\n    var node = this.list.pop();\n    if (node != null) {\n        delete this.map[node.key];\n        this.capacity++;\n    }\n};\nfunction DoublyLinkedList() {\n    this.firstNode = null;\n    this.lastNode = null;\n}\nDoublyLinkedList.prototype.moveToFront = function(node) {\n    if (this.firstNode == node) return;\n    this.remove(node);\n    if (this.firstNode == null) {\n        this.firstNode = node;\n        this.lastNode = node;\n        node.prev = null;\n        node.next = null;\n    } else {\n        node.prev = null;\n        node.next = this.firstNode;\n        node.next.prev = node;\n        this.firstNode = node;\n    }\n};\nDoublyLinkedList.prototype.pop = function() {\n    var lastNode = this.lastNode;\n    if (lastNode != null) {\n        this.remove(lastNode);\n    }\n    return lastNode;\n};\nDoublyLinkedList.prototype.remove = function(node) {\n    if (this.firstNode == node) {\n        this.firstNode = node.next;\n    } else if (node.prev != null) {\n        node.prev.next = node.next;\n    }\n    if (this.lastNode == node) {\n        this.lastNode = node.prev;\n    } else if (node.next != null) {\n        node.next.prev = node.prev;\n    }\n};\nfunction DoublyLinkedNode(key, val) {\n    this.key = key;\n    this.val = val;\n    this.prev = null;\n    this.next = null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFNBQVMsR0FBR1QsS0FBS2EsSUFBSTtJQUM1QixPQUFPLElBQUliLEtBQUtZLElBQUksSUFBSSxNQUFNO1FBQzVCWixLQUFLWSxJQUFJLENBQUNDLElBQUksR0FBR2IsS0FBS2EsSUFBSTtJQUM1QjtJQUNBLElBQUksSUFBSSxDQUFDSCxRQUFRLElBQUlWLE1BQU07UUFDekIsSUFBSSxDQUFDVSxRQUFRLEdBQUdWLEtBQUtZLElBQUk7SUFDM0IsT0FBTyxJQUFJWixLQUFLYSxJQUFJLElBQUksTUFBTTtRQUM1QmIsS0FBS2EsSUFBSSxDQUFDRCxJQUFJLEdBQUdaLEtBQUtZLElBQUk7SUFDNUI7QUFDRjtBQUdBLFNBQVNOLGlCQUFpQlAsR0FBRyxFQUFFSSxHQUFHO0lBQ2hDLElBQUksQ0FBQ0osR0FBRyxHQUFHQTtJQUNYLElBQUksQ0FBQ0ksR0FBRyxHQUFHQTtJQUNYLElBQUksQ0FBQ1MsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUc7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL2F3czQvbHJ1LmpzPzc2MTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihzaXplKSB7XG4gIHJldHVybiBuZXcgTHJ1Q2FjaGUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gTHJ1Q2FjaGUoc2l6ZSkge1xuICB0aGlzLmNhcGFjaXR5ID0gc2l6ZSB8IDBcbiAgdGhpcy5tYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gIHRoaXMubGlzdCA9IG5ldyBEb3VibHlMaW5rZWRMaXN0KClcbn1cblxuTHJ1Q2FjaGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSkge1xuICB2YXIgbm9kZSA9IHRoaXMubWFwW2tleV1cbiAgaWYgKG5vZGUgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZFxuICB0aGlzLnVzZWQobm9kZSlcbiAgcmV0dXJuIG5vZGUudmFsXG59XG5cbkxydUNhY2hlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXksIHZhbCkge1xuICB2YXIgbm9kZSA9IHRoaXMubWFwW2tleV1cbiAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgIG5vZGUudmFsID0gdmFsXG4gIH0gZWxzZSB7XG4gICAgaWYgKCF0aGlzLmNhcGFjaXR5KSB0aGlzLnBydW5lKClcbiAgICBpZiAoIXRoaXMuY2FwYWNpdHkpIHJldHVybiBmYWxzZVxuICAgIG5vZGUgPSBuZXcgRG91Ymx5TGlua2VkTm9kZShrZXksIHZhbClcbiAgICB0aGlzLm1hcFtrZXldID0gbm9kZVxuICAgIHRoaXMuY2FwYWNpdHktLVxuICB9XG4gIHRoaXMudXNlZChub2RlKVxuICByZXR1cm4gdHJ1ZVxufVxuXG5McnVDYWNoZS5wcm90b3R5cGUudXNlZCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5saXN0Lm1vdmVUb0Zyb250KG5vZGUpXG59XG5cbkxydUNhY2hlLnByb3RvdHlwZS5wcnVuZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMubGlzdC5wb3AoKVxuICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vZGUua2V5XVxuICAgIHRoaXMuY2FwYWNpdHkrK1xuICB9XG59XG5cblxuZnVuY3Rpb24gRG91Ymx5TGlua2VkTGlzdCgpIHtcbiAgdGhpcy5maXJzdE5vZGUgPSBudWxsXG4gIHRoaXMubGFzdE5vZGUgPSBudWxsXG59XG5cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLm1vdmVUb0Zyb250ID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAodGhpcy5maXJzdE5vZGUgPT0gbm9kZSkgcmV0dXJuXG5cbiAgdGhpcy5yZW1vdmUobm9kZSlcblxuICBpZiAodGhpcy5maXJzdE5vZGUgPT0gbnVsbCkge1xuICAgIHRoaXMuZmlyc3ROb2RlID0gbm9kZVxuICAgIHRoaXMubGFzdE5vZGUgPSBub2RlXG4gICAgbm9kZS5wcmV2ID0gbnVsbFxuICAgIG5vZGUubmV4dCA9IG51bGxcbiAgfSBlbHNlIHtcbiAgICBub2RlLnByZXYgPSBudWxsXG4gICAgbm9kZS5uZXh0ID0gdGhpcy5maXJzdE5vZGVcbiAgICBub2RlLm5leHQucHJldiA9IG5vZGVcbiAgICB0aGlzLmZpcnN0Tm9kZSA9IG5vZGVcbiAgfVxufVxuXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGxhc3ROb2RlID0gdGhpcy5sYXN0Tm9kZVxuICBpZiAobGFzdE5vZGUgIT0gbnVsbCkge1xuICAgIHRoaXMucmVtb3ZlKGxhc3ROb2RlKVxuICB9XG4gIHJldHVybiBsYXN0Tm9kZVxufVxuXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICh0aGlzLmZpcnN0Tm9kZSA9PSBub2RlKSB7XG4gICAgdGhpcy5maXJzdE5vZGUgPSBub2RlLm5leHRcbiAgfSBlbHNlIGlmIChub2RlLnByZXYgIT0gbnVsbCkge1xuICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0XG4gIH1cbiAgaWYgKHRoaXMubGFzdE5vZGUgPT0gbm9kZSkge1xuICAgIHRoaXMubGFzdE5vZGUgPSBub2RlLnByZXZcbiAgfSBlbHNlIGlmIChub2RlLm5leHQgIT0gbnVsbCkge1xuICAgIG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBEb3VibHlMaW5rZWROb2RlKGtleSwgdmFsKSB7XG4gIHRoaXMua2V5ID0ga2V5XG4gIHRoaXMudmFsID0gdmFsXG4gIHRoaXMucHJldiA9IG51bGxcbiAgdGhpcy5uZXh0ID0gbnVsbFxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzaXplIiwiTHJ1Q2FjaGUiLCJjYXBhY2l0eSIsIm1hcCIsIk9iamVjdCIsImNyZWF0ZSIsImxpc3QiLCJEb3VibHlMaW5rZWRMaXN0IiwicHJvdG90eXBlIiwiZ2V0Iiwia2V5Iiwibm9kZSIsInVuZGVmaW5lZCIsInVzZWQiLCJ2YWwiLCJzZXQiLCJwcnVuZSIsIkRvdWJseUxpbmtlZE5vZGUiLCJtb3ZlVG9Gcm9udCIsInBvcCIsImZpcnN0Tm9kZSIsImxhc3ROb2RlIiwicmVtb3ZlIiwicHJldiIsIm5leHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws4/lru.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/aws4/aws4.js":
/*!***********************************!*\
  !*** ./node_modules/aws4/aws4.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var aws4 = exports, url = __webpack_require__(/*! url */ \"url\"), querystring = __webpack_require__(/*! querystring */ \"querystring\"), crypto = __webpack_require__(/*! crypto */ \"crypto\"), lru = __webpack_require__(/*! ./lru */ \"(rsc)/./node_modules/aws4/lru.js\"), credentialsCache = lru(1000);\n// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\nfunction hmac(key, string, encoding) {\n    return crypto.createHmac(\"sha256\", key).update(string, \"utf8\").digest(encoding);\n}\nfunction hash(string, encoding) {\n    return crypto.createHash(\"sha256\").update(string, \"utf8\").digest(encoding);\n}\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n    return urlEncodedString.replace(/[!'()*]/g, function(c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\nfunction encodeRfc3986Full(str) {\n    return encodeRfc3986(encodeURIComponent(str));\n}\n// A bit of a combination of:\n// https://github.com/aws/aws-sdk-java-v2/blob/dc695de6ab49ad03934e1b02e7263abbd2354be0/core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java#L59\n// https://github.com/aws/aws-sdk-js/blob/18cb7e5b463b46239f9fdd4a65e2ff8c81831e8f/lib/signers/v4.js#L191-L199\n// https://github.com/mhart/aws4fetch/blob/b3aed16b6f17384cf36ea33bcba3c1e9f3bdfefd/src/main.js#L25-L34\nvar HEADERS_TO_IGNORE = {\n    \"authorization\": true,\n    \"connection\": true,\n    \"x-amzn-trace-id\": true,\n    \"user-agent\": true,\n    \"expect\": true,\n    \"presigned-expires\": true,\n    \"range\": true\n};\n// request: { path | body, [host], [method], [headers], [service], [region] }\n// credentials: { accessKeyId, secretAccessKey, [sessionToken] }\nfunction RequestSigner(request, credentials) {\n    if (typeof request === \"string\") request = url.parse(request);\n    var headers = request.headers = Object.assign({}, request.headers || {}), hostParts = (!this.service || !this.region) && this.matchHost(request.hostname || request.host || headers.Host || headers.host);\n    this.request = request;\n    this.credentials = credentials || this.defaultCredentials();\n    this.service = request.service || hostParts[0] || \"\";\n    this.region = request.region || hostParts[1] || \"us-east-1\";\n    // SES uses a different domain from the service name\n    if (this.service === \"email\") this.service = \"ses\";\n    if (!request.method && request.body) request.method = \"POST\";\n    if (!headers.Host && !headers.host) {\n        headers.Host = request.hostname || request.host || this.createHost();\n        // If a port is specified explicitly, use it as is\n        if (request.port) headers.Host += \":\" + request.port;\n    }\n    if (!request.hostname && !request.host) request.hostname = headers.Host || headers.host;\n    this.isCodeCommitGit = this.service === \"codecommit\" && request.method === \"GIT\";\n    this.extraHeadersToIgnore = request.extraHeadersToIgnore || Object.create(null);\n    this.extraHeadersToInclude = request.extraHeadersToInclude || Object.create(null);\n}\nRequestSigner.prototype.matchHost = function(host) {\n    var match = (host || \"\").match(/([^\\.]{1,63})\\.(?:([^\\.]{0,63})\\.)?amazonaws\\.com(\\.cn)?$/);\n    var hostParts = (match || []).slice(1, 3);\n    // ES's hostParts are sometimes the other way round, if the value that is expected\n    // to be region equals ‘es’ switch them back\n    // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com\n    if (hostParts[1] === \"es\" || hostParts[1] === \"aoss\") hostParts = hostParts.reverse();\n    if (hostParts[1] == \"s3\") {\n        hostParts[0] = \"s3\";\n        hostParts[1] = \"us-east-1\";\n    } else {\n        for(var i = 0; i < 2; i++){\n            if (/^s3-/.test(hostParts[i])) {\n                hostParts[1] = hostParts[i].slice(3);\n                hostParts[0] = \"s3\";\n                break;\n            }\n        }\n    }\n    return hostParts;\n};\n// http://docs.aws.amazon.com/general/latest/gr/rande.html\nRequestSigner.prototype.isSingleRegion = function() {\n    // Special case for S3 and SimpleDB in us-east-1\n    if ([\n        \"s3\",\n        \"sdb\"\n    ].indexOf(this.service) >= 0 && this.region === \"us-east-1\") return true;\n    return [\n        \"cloudfront\",\n        \"ls\",\n        \"route53\",\n        \"iam\",\n        \"importexport\",\n        \"sts\"\n    ].indexOf(this.service) >= 0;\n};\nRequestSigner.prototype.createHost = function() {\n    var region = this.isSingleRegion() ? \"\" : \".\" + this.region, subdomain = this.service === \"ses\" ? \"email\" : this.service;\n    return subdomain + region + \".amazonaws.com\";\n};\nRequestSigner.prototype.prepareRequest = function() {\n    this.parsePath();\n    var request = this.request, headers = request.headers, query;\n    if (request.signQuery) {\n        this.parsedPath.query = query = this.parsedPath.query || {};\n        if (this.credentials.sessionToken) query[\"X-Amz-Security-Token\"] = this.credentials.sessionToken;\n        if (this.service === \"s3\" && !query[\"X-Amz-Expires\"]) query[\"X-Amz-Expires\"] = 86400;\n        if (query[\"X-Amz-Date\"]) this.datetime = query[\"X-Amz-Date\"];\n        else query[\"X-Amz-Date\"] = this.getDateTime();\n        query[\"X-Amz-Algorithm\"] = \"AWS4-HMAC-SHA256\";\n        query[\"X-Amz-Credential\"] = this.credentials.accessKeyId + \"/\" + this.credentialString();\n        query[\"X-Amz-SignedHeaders\"] = this.signedHeaders();\n    } else {\n        if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {\n            if (request.body && !headers[\"Content-Type\"] && !headers[\"content-type\"]) headers[\"Content-Type\"] = \"application/x-www-form-urlencoded; charset=utf-8\";\n            if (request.body && !headers[\"Content-Length\"] && !headers[\"content-length\"]) headers[\"Content-Length\"] = Buffer.byteLength(request.body);\n            if (this.credentials.sessionToken && !headers[\"X-Amz-Security-Token\"] && !headers[\"x-amz-security-token\"]) headers[\"X-Amz-Security-Token\"] = this.credentials.sessionToken;\n            if (this.service === \"s3\" && !headers[\"X-Amz-Content-Sha256\"] && !headers[\"x-amz-content-sha256\"]) headers[\"X-Amz-Content-Sha256\"] = hash(this.request.body || \"\", \"hex\");\n            if (headers[\"X-Amz-Date\"] || headers[\"x-amz-date\"]) this.datetime = headers[\"X-Amz-Date\"] || headers[\"x-amz-date\"];\n            else headers[\"X-Amz-Date\"] = this.getDateTime();\n        }\n        delete headers.Authorization;\n        delete headers.authorization;\n    }\n};\nRequestSigner.prototype.sign = function() {\n    if (!this.parsedPath) this.prepareRequest();\n    if (this.request.signQuery) {\n        this.parsedPath.query[\"X-Amz-Signature\"] = this.signature();\n    } else {\n        this.request.headers.Authorization = this.authHeader();\n    }\n    this.request.path = this.formatPath();\n    return this.request;\n};\nRequestSigner.prototype.getDateTime = function() {\n    if (!this.datetime) {\n        var headers = this.request.headers, date = new Date(headers.Date || headers.date || new Date);\n        this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, \"\");\n        // Remove the trailing 'Z' on the timestamp string for CodeCommit git access\n        if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1);\n    }\n    return this.datetime;\n};\nRequestSigner.prototype.getDate = function() {\n    return this.getDateTime().substr(0, 8);\n};\nRequestSigner.prototype.authHeader = function() {\n    return [\n        \"AWS4-HMAC-SHA256 Credential=\" + this.credentials.accessKeyId + \"/\" + this.credentialString(),\n        \"SignedHeaders=\" + this.signedHeaders(),\n        \"Signature=\" + this.signature()\n    ].join(\", \");\n};\nRequestSigner.prototype.signature = function() {\n    var date = this.getDate(), cacheKey = [\n        this.credentials.secretAccessKey,\n        date,\n        this.region,\n        this.service\n    ].join(), kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey);\n    if (!kCredentials) {\n        kDate = hmac(\"AWS4\" + this.credentials.secretAccessKey, date);\n        kRegion = hmac(kDate, this.region);\n        kService = hmac(kRegion, this.service);\n        kCredentials = hmac(kService, \"aws4_request\");\n        credentialsCache.set(cacheKey, kCredentials);\n    }\n    return hmac(kCredentials, this.stringToSign(), \"hex\");\n};\nRequestSigner.prototype.stringToSign = function() {\n    return [\n        \"AWS4-HMAC-SHA256\",\n        this.getDateTime(),\n        this.credentialString(),\n        hash(this.canonicalString(), \"hex\")\n    ].join(\"\\n\");\n};\nRequestSigner.prototype.canonicalString = function() {\n    if (!this.parsedPath) this.prepareRequest();\n    var pathStr = this.parsedPath.path, query = this.parsedPath.query, headers = this.request.headers, queryStr = \"\", normalizePath = this.service !== \"s3\", decodePath = this.service === \"s3\" || this.request.doNotEncodePath, decodeSlashesInPath = this.service === \"s3\", firstValOnly = this.service === \"s3\", bodyHash;\n    if (this.service === \"s3\" && this.request.signQuery) {\n        bodyHash = \"UNSIGNED-PAYLOAD\";\n    } else if (this.isCodeCommitGit) {\n        bodyHash = \"\";\n    } else {\n        bodyHash = headers[\"X-Amz-Content-Sha256\"] || headers[\"x-amz-content-sha256\"] || hash(this.request.body || \"\", \"hex\");\n    }\n    if (query) {\n        var reducedQuery = Object.keys(query).reduce(function(obj, key) {\n            if (!key) return obj;\n            obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] : firstValOnly ? query[key][0] : query[key];\n            return obj;\n        }, {});\n        var encodedQueryPieces = [];\n        Object.keys(reducedQuery).sort().forEach(function(key) {\n            if (!Array.isArray(reducedQuery[key])) {\n                encodedQueryPieces.push(key + \"=\" + encodeRfc3986Full(reducedQuery[key]));\n            } else {\n                reducedQuery[key].map(encodeRfc3986Full).sort().forEach(function(val) {\n                    encodedQueryPieces.push(key + \"=\" + val);\n                });\n            }\n        });\n        queryStr = encodedQueryPieces.join(\"&\");\n    }\n    if (pathStr !== \"/\") {\n        if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, \"/\");\n        pathStr = pathStr.split(\"/\").reduce(function(path, piece) {\n            if (normalizePath && piece === \"..\") {\n                path.pop();\n            } else if (!normalizePath || piece !== \".\") {\n                if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, \" \"));\n                path.push(encodeRfc3986Full(piece));\n            }\n            return path;\n        }, []).join(\"/\");\n        if (pathStr[0] !== \"/\") pathStr = \"/\" + pathStr;\n        if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, \"/\");\n    }\n    return [\n        this.request.method || \"GET\",\n        pathStr,\n        queryStr,\n        this.canonicalHeaders() + \"\\n\",\n        this.signedHeaders(),\n        bodyHash\n    ].join(\"\\n\");\n};\nRequestSigner.prototype.filterHeaders = function() {\n    var headers = this.request.headers, extraHeadersToInclude = this.extraHeadersToInclude, extraHeadersToIgnore = this.extraHeadersToIgnore;\n    this.filteredHeaders = Object.keys(headers).map(function(key) {\n        return [\n            key.toLowerCase(),\n            headers[key]\n        ];\n    }).filter(function(entry) {\n        return extraHeadersToInclude[entry[0]] || HEADERS_TO_IGNORE[entry[0]] == null && !extraHeadersToIgnore[entry[0]];\n    }).sort(function(a, b) {\n        return a[0] < b[0] ? -1 : 1;\n    });\n};\nRequestSigner.prototype.canonicalHeaders = function() {\n    if (!this.filteredHeaders) this.filterHeaders();\n    return this.filteredHeaders.map(function(entry) {\n        return entry[0] + \":\" + entry[1].toString().trim().replace(/\\s+/g, \" \");\n    }).join(\"\\n\");\n};\nRequestSigner.prototype.signedHeaders = function() {\n    if (!this.filteredHeaders) this.filterHeaders();\n    return this.filteredHeaders.map(function(entry) {\n        return entry[0];\n    }).join(\";\");\n};\nRequestSigner.prototype.credentialString = function() {\n    return [\n        this.getDate(),\n        this.region,\n        this.service,\n        \"aws4_request\"\n    ].join(\"/\");\n};\nRequestSigner.prototype.defaultCredentials = function() {\n    var env = process.env;\n    return {\n        accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,\n        secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,\n        sessionToken: env.AWS_SESSION_TOKEN\n    };\n};\nRequestSigner.prototype.parsePath = function() {\n    var path = this.request.path || \"/\";\n    // S3 doesn't always encode characters > 127 correctly and\n    // all services don't encode characters > 255 correctly\n    // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\n    if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {\n        path = encodeURI(decodeURI(path));\n    }\n    var queryIx = path.indexOf(\"?\"), query = null;\n    if (queryIx >= 0) {\n        query = querystring.parse(path.slice(queryIx + 1));\n        path = path.slice(0, queryIx);\n    }\n    this.parsedPath = {\n        path: path,\n        query: query\n    };\n};\nRequestSigner.prototype.formatPath = function() {\n    var path = this.parsedPath.path, query = this.parsedPath.query;\n    if (!query) return path;\n    // Services don't support empty query string keys\n    if (query[\"\"] != null) delete query[\"\"];\n    return path + \"?\" + encodeRfc3986(querystring.stringify(query));\n};\naws4.RequestSigner = RequestSigner;\naws4.sign = function(request, credentials) {\n    return new RequestSigner(request, credentials).sign();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/aws4/aws4.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/aws4/lru.js":
/*!**********************************!*\
  !*** ./node_modules/aws4/lru.js ***!
  \**********************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = function(size) {\n    return new LruCache(size);\n};\nfunction LruCache(size) {\n    this.capacity = size | 0;\n    this.map = Object.create(null);\n    this.list = new DoublyLinkedList();\n}\nLruCache.prototype.get = function(key) {\n    var node = this.map[key];\n    if (node == null) return undefined;\n    this.used(node);\n    return node.val;\n};\nLruCache.prototype.set = function(key, val) {\n    var node = this.map[key];\n    if (node != null) {\n        node.val = val;\n    } else {\n        if (!this.capacity) this.prune();\n        if (!this.capacity) return false;\n        node = new DoublyLinkedNode(key, val);\n        this.map[key] = node;\n        this.capacity--;\n    }\n    this.used(node);\n    return true;\n};\nLruCache.prototype.used = function(node) {\n    this.list.moveToFront(node);\n};\nLruCache.prototype.prune = function() {\n    var node = this.list.pop();\n    if (node != null) {\n        delete this.map[node.key];\n        this.capacity++;\n    }\n};\nfunction DoublyLinkedList() {\n    this.firstNode = null;\n    this.lastNode = null;\n}\nDoublyLinkedList.prototype.moveToFront = function(node) {\n    if (this.firstNode == node) return;\n    this.remove(node);\n    if (this.firstNode == null) {\n        this.firstNode = node;\n        this.lastNode = node;\n        node.prev = null;\n        node.next = null;\n    } else {\n        node.prev = null;\n        node.next = this.firstNode;\n        node.next.prev = node;\n        this.firstNode = node;\n    }\n};\nDoublyLinkedList.prototype.pop = function() {\n    var lastNode = this.lastNode;\n    if (lastNode != null) {\n        this.remove(lastNode);\n    }\n    return lastNode;\n};\nDoublyLinkedList.prototype.remove = function(node) {\n    if (this.firstNode == node) {\n        this.firstNode = node.next;\n    } else if (node.prev != null) {\n        node.prev.next = node.next;\n    }\n    if (this.lastNode == node) {\n        this.lastNode = node.prev;\n    } else if (node.next != null) {\n        node.next.prev = node.prev;\n    }\n};\nfunction DoublyLinkedNode(key, val) {\n    this.key = key;\n    this.val = val;\n    this.prev = null;\n    this.next = null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFNBQVMsR0FBR1QsS0FBS2EsSUFBSTtJQUM1QixPQUFPLElBQUliLEtBQUtZLElBQUksSUFBSSxNQUFNO1FBQzVCWixLQUFLWSxJQUFJLENBQUNDLElBQUksR0FBR2IsS0FBS2EsSUFBSTtJQUM1QjtJQUNBLElBQUksSUFBSSxDQUFDSCxRQUFRLElBQUlWLE1BQU07UUFDekIsSUFBSSxDQUFDVSxRQUFRLEdBQUdWLEtBQUtZLElBQUk7SUFDM0IsT0FBTyxJQUFJWixLQUFLYSxJQUFJLElBQUksTUFBTTtRQUM1QmIsS0FBS2EsSUFBSSxDQUFDRCxJQUFJLEdBQUdaLEtBQUtZLElBQUk7SUFDNUI7QUFDRjtBQUdBLFNBQVNOLGlCQUFpQlAsR0FBRyxFQUFFSSxHQUFHO0lBQ2hDLElBQUksQ0FBQ0osR0FBRyxHQUFHQTtJQUNYLElBQUksQ0FBQ0ksR0FBRyxHQUFHQTtJQUNYLElBQUksQ0FBQ1MsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUc7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pY2UtYXBwLy4vbm9kZV9tb2R1bGVzL2F3czQvbHJ1LmpzPzc2MTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihzaXplKSB7XG4gIHJldHVybiBuZXcgTHJ1Q2FjaGUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gTHJ1Q2FjaGUoc2l6ZSkge1xuICB0aGlzLmNhcGFjaXR5ID0gc2l6ZSB8IDBcbiAgdGhpcy5tYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gIHRoaXMubGlzdCA9IG5ldyBEb3VibHlMaW5rZWRMaXN0KClcbn1cblxuTHJ1Q2FjaGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSkge1xuICB2YXIgbm9kZSA9IHRoaXMubWFwW2tleV1cbiAgaWYgKG5vZGUgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZFxuICB0aGlzLnVzZWQobm9kZSlcbiAgcmV0dXJuIG5vZGUudmFsXG59XG5cbkxydUNhY2hlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXksIHZhbCkge1xuICB2YXIgbm9kZSA9IHRoaXMubWFwW2tleV1cbiAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgIG5vZGUudmFsID0gdmFsXG4gIH0gZWxzZSB7XG4gICAgaWYgKCF0aGlzLmNhcGFjaXR5KSB0aGlzLnBydW5lKClcbiAgICBpZiAoIXRoaXMuY2FwYWNpdHkpIHJldHVybiBmYWxzZVxuICAgIG5vZGUgPSBuZXcgRG91Ymx5TGlua2VkTm9kZShrZXksIHZhbClcbiAgICB0aGlzLm1hcFtrZXldID0gbm9kZVxuICAgIHRoaXMuY2FwYWNpdHktLVxuICB9XG4gIHRoaXMudXNlZChub2RlKVxuICByZXR1cm4gdHJ1ZVxufVxuXG5McnVDYWNoZS5wcm90b3R5cGUudXNlZCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5saXN0Lm1vdmVUb0Zyb250KG5vZGUpXG59XG5cbkxydUNhY2hlLnByb3RvdHlwZS5wcnVuZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMubGlzdC5wb3AoKVxuICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vZGUua2V5XVxuICAgIHRoaXMuY2FwYWNpdHkrK1xuICB9XG59XG5cblxuZnVuY3Rpb24gRG91Ymx5TGlua2VkTGlzdCgpIHtcbiAgdGhpcy5maXJzdE5vZGUgPSBudWxsXG4gIHRoaXMubGFzdE5vZGUgPSBudWxsXG59XG5cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLm1vdmVUb0Zyb250ID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAodGhpcy5maXJzdE5vZGUgPT0gbm9kZSkgcmV0dXJuXG5cbiAgdGhpcy5yZW1vdmUobm9kZSlcblxuICBpZiAodGhpcy5maXJzdE5vZGUgPT0gbnVsbCkge1xuICAgIHRoaXMuZmlyc3ROb2RlID0gbm9kZVxuICAgIHRoaXMubGFzdE5vZGUgPSBub2RlXG4gICAgbm9kZS5wcmV2ID0gbnVsbFxuICAgIG5vZGUubmV4dCA9IG51bGxcbiAgfSBlbHNlIHtcbiAgICBub2RlLnByZXYgPSBudWxsXG4gICAgbm9kZS5uZXh0ID0gdGhpcy5maXJzdE5vZGVcbiAgICBub2RlLm5leHQucHJldiA9IG5vZGVcbiAgICB0aGlzLmZpcnN0Tm9kZSA9IG5vZGVcbiAgfVxufVxuXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGxhc3ROb2RlID0gdGhpcy5sYXN0Tm9kZVxuICBpZiAobGFzdE5vZGUgIT0gbnVsbCkge1xuICAgIHRoaXMucmVtb3ZlKGxhc3ROb2RlKVxuICB9XG4gIHJldHVybiBsYXN0Tm9kZVxufVxuXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICh0aGlzLmZpcnN0Tm9kZSA9PSBub2RlKSB7XG4gICAgdGhpcy5maXJzdE5vZGUgPSBub2RlLm5leHRcbiAgfSBlbHNlIGlmIChub2RlLnByZXYgIT0gbnVsbCkge1xuICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0XG4gIH1cbiAgaWYgKHRoaXMubGFzdE5vZGUgPT0gbm9kZSkge1xuICAgIHRoaXMubGFzdE5vZGUgPSBub2RlLnByZXZcbiAgfSBlbHNlIGlmIChub2RlLm5leHQgIT0gbnVsbCkge1xuICAgIG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBEb3VibHlMaW5rZWROb2RlKGtleSwgdmFsKSB7XG4gIHRoaXMua2V5ID0ga2V5XG4gIHRoaXMudmFsID0gdmFsXG4gIHRoaXMucHJldiA9IG51bGxcbiAgdGhpcy5uZXh0ID0gbnVsbFxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzaXplIiwiTHJ1Q2FjaGUiLCJjYXBhY2l0eSIsIm1hcCIsIk9iamVjdCIsImNyZWF0ZSIsImxpc3QiLCJEb3VibHlMaW5rZWRMaXN0IiwicHJvdG90eXBlIiwiZ2V0Iiwia2V5Iiwibm9kZSIsInVuZGVmaW5lZCIsInVzZWQiLCJ2YWwiLCJzZXQiLCJwcnVuZSIsIkRvdWJseUxpbmtlZE5vZGUiLCJtb3ZlVG9Gcm9udCIsInBvcCIsImZpcnN0Tm9kZSIsImxhc3ROb2RlIiwicmVtb3ZlIiwicHJldiIsIm5leHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/aws4/lru.js\n");

/***/ })

};
;